.release-sdk:
  rules:
    - if: '$SDK_RELEASE == "true"'

create-release-branch:
  stage: create-release-branch
  extends:
    - .release-sdk
    - .default-job-settings
  variables:
    SLACK_CHANNEL: $SLACK_CHANNEL
    RELEASE_VERSION: $RELEASE_VERSION
    GITHUB_TOKEN: $GITHUB_TOKEN
    SDK_BRANCH_NAME: $SDK_BRANCH_NAME
    CI_PIPELINE_URL: $CI_PIPELINE_URL
    REVIEWER: $REVIEWER
  script:
    - section_start "Create release branch" --collapsed
    - python3 ./Tests/sdk_release/pre_validations.py -t "${GITHUB_TOKEN}" -gt "${GITLAB_API_TOKEN}" -v "${RELEASE_VERSION}" -r "${REVIEWER}" -b "${SDK_BRANCH_NAME}"
    - python3 ./Tests/scripts/gitlab_basic_slack_notifier.py -s "${SLACK_TOKEN}" -t "The release of demisto-sdk version \`"$RELEASE_VERSION"\` has started:\`"$CI_PIPELINE_URL"\` " --allow-failure "${SLACK_ALLOW_FAILURE}" -ch "${SLACK_CHANNEL}"
    - python3 ./Tests/sdk_release/create_release_branch.py -t "${GITHUB_TOKEN}" -n "${RELEASE_VERSION}" -b "${SDK_BRANCH_NAME}"
    - section_end "Create release branch"

trigger-content-internal-dist-nightly:
  stage: trigger-nightlies
  extends:
    - .release-sdk
    - .default-job-settings
  needs:
    - create-release-branch
  artifacts:
    expire_in: 48 hrs
    paths:
      - ${CI_PROJECT_DIR}/artifacts/*
    when: always
  variables:
    CONTENT_INTERNAL_DIST_TRIGGER_NIGHTLY: $CONTENT_INTERNAL_DIST_TRIGGER_NIGHTLY
    SLACK_CHANNEL: $SLACK_CHANNEL
    RELEASE_VERSION: $RELEASE_VERSION
    ARTIFACTS_FOLDER: "${CI_PROJECT_DIR}/artifacts/"
  script:
    - section_start "Trigger content-internal-dist nightly build" --collapsed
    - export GOLD_PIPELINE_ID=$(./Utils/gitlab_triggers/trigger_content_internal_dist_nightly_build.sh -ct "${CONTENT_INTERNAL_DIST_TRIGGER_NIGHTLY}" -ch "${SLACK_CHANNEL}" -sdk "${RELEASE_VERSION}" | jq .id)
    - echo "${GOLD_PIPELINE_ID}" > "${ARTIFACTS_FOLDER}/GOLD_PIPELINE_ID.txt"
    - echo "content-internal-dist nightly build triggered successfully:"
    - echo "${CI_SERVER_URL}/xdr/cortex-content/content-internal-dist/-/pipelines/${GOLD_PIPELINE_ID}"
    - section_end "Trigger content-internal-dist nightly build"

trigger-demisto-sdk-nightly:
  stage: trigger-nightlies
  extends:
    - .release-sdk
    - .default-job-settings
  needs:
    - create-release-branch
  artifacts:
    expire_in: 48 hrs
    paths:
      - ${CI_PROJECT_DIR}/artifacts/*
    when: always
  variables:
    CI_TOKEN: $CI_TOKEN
    SLACK_CHANNEL: $SLACK_CHANNEL
    RELEASE_VERSION: $RELEASE_VERSION
    ARTIFACTS_FOLDER: "${CI_PROJECT_DIR}/artifacts/"
  script:
    - section_start "Trigger SDK nightly build" --collapsed
    - export SDK_PIPELINE_ID=$(./Utils/trigger_nightly_sdk_build.sh -ct "${CI_TOKEN}" -ch "${SLACK_CHANNEL}" -sr "${RELEASE_VERSION}" -g | jq .id)
    - echo $SDK_PIPELINE_ID > ${ARTIFACTS_FOLDER}/SDK_PIPELINE_ID.txt
    - echo "demisto-sdk nightly build triggered successfully:"
    - echo $CI_PROJECT_URL"/-/pipelines/"$SDK_PIPELINE_ID
    - section_end "Trigger sdk nightly build"

wait-for-content-internal-dist-nightly:
  stage: wait-for-build-to-finish
  extends:
    - .release-sdk
    - .default-job-settings
  allow_failure: true
  needs:
    - trigger-content-internal-dist-nightly
  artifacts:
    expire_in: 48 hrs
    paths:
      - ${CI_PROJECT_DIR}/artifacts/*
  timeout: 6 hours
  variables:
    ARTIFACTS_FOLDER: "${CI_PROJECT_DIR}/artifacts/"
  script:
    - section_start "Wait for content-internal-dist nightly build" --collapsed
    - GOLD_PIPELINE_ID=$(head -n 1 "${ARTIFACTS_FOLDER}/GOLD_PIPELINE_ID.txt")
    - python3 ./Tests/sdk_release/wait_for_pipeline.py -g "${GITLAB_API_TOKEN}" -p "${GOLD_PIPELINE_ID}" -pid "${GOLD_PROJECT_ID}"
    - section_end "Wait for content-internal-dist nightly build"

wait-for-demisto-sdk-nightly:
  stage: wait-for-build-to-finish
  extends:
    - .release-sdk
    - .default-job-settings
  allow_failure: true
  needs:
    - trigger-demisto-sdk-nightly
  artifacts:
    expire_in: 48 hrs
    paths:
      - ${CI_PROJECT_DIR}/artifacts/*
  timeout: 6 hours
  variables:
    ARTIFACTS_FOLDER: "${CI_PROJECT_DIR}/artifacts/"
  script:
    - section_start "Wait for SDK nightly build" --collapsed
    - SDK_PIPELINE_ID=$(head -n 1 "${ARTIFACTS_FOLDER}/SDK_PIPELINE_ID.txt")
    - python3 ./Tests/sdk_release/wait_for_pipeline.py -g "${GITLAB_API_TOKEN}" -p "${SDK_PIPELINE_ID}" -pid "${CI_PROJECT_ID}"
    - section_end "Wait for SDK nightly build"

slack-notify:
  stage: wait-for-build-to-finish
  extends:
    - .release-sdk
    - .default-job-settings
  allow_failure: true
  needs:
    - wait-for-demisto-sdk-nightly
    - wait-for-content-internal-dist-nightly
  timeout: 6 hours
  variables:
    REVIEWER: $REVIEWER
    SLACK_CHANNEL: $SLACK_CHANNEL
  script:
    - section_start "Slack notify" --collapsed
    - python3 ./Tests/scripts/gitlab_basic_slack_notifier.py -s "${SLACK_TOKEN}" -t "All nightlies builds has been finished, please check their status and continue with the release" --allow-failure "${SLACK_ALLOW_FAILURE}" -gt "${GITLAB_API_TOKEN}" -gu "${REVIEWER}" -ch "${SLACK_CHANNEL}"
    - section_end "Slack notify"

create-release-pull-request:
  stage: release-flow
  extends:
    - .release-sdk
    - .default-job-settings
  needs:
    - slack-notify
  when: manual
  variables:
    RELEASE_VERSION: $RELEASE_VERSION
    GITHUB_TOKEN: $GITHUB_TOKEN
    IS_DRAFT: $IS_DRAFT
    REVIEWER: $REVIEWER
    SLACK_CHANNEL: $SLACK_CHANNEL
    ARTIFACTS_FOLDER: "${CI_PROJECT_DIR}/artifacts/"
  script:
    - section_start "Create sdk release pr" --collapsed
    - python3 ./Tests/sdk_release/create_sdk_pr.py -t "${GITHUB_TOKEN}" -b "${RELEASE_VERSION}" -d "${IS_DRAFT}" -ro "${REVIEWER}" --artifacts-folder "${ARTIFACTS_FOLDER}"
    - python3 ./Tests/scripts/gitlab_basic_slack_notifier.py -s "${SLACK_TOKEN}" --allow-failure "${SLACK_ALLOW_FAILURE}" -gt "${GITLAB_API_TOKEN}" -gu "${REVIEWER}" -ch "${SLACK_CHANNEL}" -f "${ARTIFACTS_FOLDER}/SDK_PR_READY.txt"
    - section_end "Create sdk release pr"

deploy-sdk-to-pypi:
  stage: release-flow
  extends:
    - .release-sdk
    - .default-job-settings
  needs:
    - create-release-pull-request
  when: manual
  timeout: 6 hours
  variables:
    RELEASE_VERSION: $RELEASE_VERSION
    GITHUB_TOKEN: $GITHUB_TOKEN
    IS_DRAFT: $IS_DRAFT
    REVIEWER: $REVIEWER
    ARTIFACTS_FOLDER: "${CI_PROJECT_DIR}/artifacts/"
  script:
    - section_start "Deploy SDK release" --collapsed
    - python3 ./Tests/sdk_release/create_release.py -t "${GITHUB_TOKEN}" -b "${RELEASE_VERSION}" -d "${IS_DRAFT}"
    - python3 ./Tests/sdk_release/wait_for_release.py -b "${RELEASE_VERSION}"
    - python3 ./Tests/sdk_release/create_content_pr.py -t "${GITHUB_TOKEN}" -b "${RELEASE_VERSION}" -r "${REVIEWER}" --artifacts-folder "${ARTIFACTS_FOLDER}" -d "${IS_DRAFT}"
    - python3 ./Tests/scripts/gitlab_basic_slack_notifier.py -s "${SLACK_TOKEN}" -f "${ARTIFACTS_FOLDER}/SLACK_MERGE_PRS_REQUEST.txt" --allow-failure "${SLACK_ALLOW_FAILURE}" -ch "${SLACK_CHANNEL}" -gu "${REVIEWER}" -gt "${GITLAB_API_TOKEN}"
    - section_end "Deploy SDK release"

wait-for-prs:
  stage: release-flow
  extends:
    - .release-sdk
    - .default-job-settings
  needs:
    - deploy-sdk-to-pypi
  timeout: 6 hours
  variables:
    RELEASE_VERSION: $RELEASE_VERSION
    GITHUB_TOKEN: $GITHUB_TOKEN
    IS_DRAFT: $IS_DRAFT
    ARTIFACTS_FOLDER: "${CI_PROJECT_DIR}/artifacts/"
    SLACK_CHANNEL: $SLACK_CHANNEL
  script:
    - section_start "Wait for prs to be merged" --collapsed
    - python3 ./Tests/sdk_release/wait_for_release_prs.py -t "${GITHUB_TOKEN}" -b "${RELEASE_VERSION}" --artifacts-folder "${ARTIFACTS_FOLDER}"
    - python3 ./Tests/scripts/gitlab_basic_slack_notifier.py -s "${SLACK_TOKEN}" -f "${ARTIFACTS_FOLDER}/CHANGELOG_SLACK.txt" --allow-failure "${SLACK_ALLOW_FAILURE}" -ch "${SLACK_CHANNEL}"
    - section_end "Wait for prs to be merged"