.release-sdk:
  rules:
    - if: '$SDK_RELEASE == "true"'


create-release-branch:
  stage: create-release-branch
  extends:
    - .release-sdk
    - .default-job-settings
  variables:
    SLACK_CHANNEL: $SLACK_CHANNEL
    RELEASE_VERSION: $RELEASE_VERSION
    GITHUB_TOKEN: $GITHUB_TOKEN
  script:
    - echo "RELEASE_VERSION="$RELEASE_VERSION
    - python3 ./Tests/sdk_release/create_release_branch.py -t $GITHUB_TOKEN -b $RELEASE_VERSION

#
#trigger-content-private-nightly:
#  stage: trigger-nightlies
#  extends:
#    - .release-sdk
#    - .default-job-settings
#  needs:
#    - create-release-branch
#  artifacts:
#    expire_in: 48 hrs
#    paths:
#      - ${CI_PROJECT_DIR}/artifacts/*
#    when: always
#  variables:
#    BRANCH_NAME: $BRANCH_NAME
#    CONTENT_CI_TOKEN: $CONTENT_CI_TOKEN
#    CONTENT_INTERNAL_DIST_TRIGGER_NIGHTLY: $CONTENT_INTERNAL_DIST_TRIGGER_NIGHTLY
#    SLACK_CHANNEL: $SLACK_CHANNEL
#    RELEASE_VERSION: $RELEASE_VERSION
#    GITHUB_TOKEN: $GITHUB_TOKEN
#    ARTIFACTS_FOLDER: "${CI_PROJECT_DIR}/artifacts/"
#  script:
#    - echo "RELEASE_VERSION="$RELEASE_VERSION
#    - python3 ./Utils/trigger_private_build.py --nightly --github-token "${GITHUB_TOKEN}" --slack-channel "${SLACK_CHANNEL}" --sdk-ref $RELEASE_VERSION --artifacts-folder ${ARTIFACTS_FOLDER}
#
#
#trigger-content-internal-dist-nightly:
#  stage: trigger-nightlies
#  extends:
#    - .release-sdk
#    - .default-job-settings
#  needs:
#    - create-release-branch
#  artifacts:
#    expire_in: 48 hrs
#    paths:
#      - ${CI_PROJECT_DIR}/artifacts/*
#    when: always
#  variables:
#    BRANCH_NAME: $BRANCH_NAME
#    CONTENT_CI_TOKEN: $CONTENT_CI_TOKEN
#    CONTENT_INTERNAL_DIST_TRIGGER_NIGHTLY: $CONTENT_INTERNAL_DIST_TRIGGER_NIGHTLY
#    SLACK_CHANNEL: $SLACK_CHANNEL
#    RELEASE_VERSION: $RELEASE_VERSION
#    ARTIFACTS_FOLDER: "${CI_PROJECT_DIR}/artifacts/"
#  script:
#    - echo "RELEASE_VERSION="$RELEASE_VERSION
#    - export PIPELINE_ID=$(./Utils/gitlab_triggers/trigger_content_internal_dist_nightly_build.sh -ct $CONTENT_INTERNAL_DIST_TRIGGER_NIGHTLY -ch $SLACK_CHANNEL -sdk $RELEASE_VERSION | jq .id)
#    - echo "PIPELINE_ID = " $PIPELINE_ID
#    - echo $PIPELINE_ID > ${ARTIFACTS_FOLDER}/GOLD_PIPELINE_ID.txt
##    -
##    - python3 ./Tests/scripts/gitlab_slack_notifier_copy.py -s "${SLACK_TOKEN}" -t "test message"
##    - ./Utils/gitlab_triggers/trigger_content_nightly_build.sh -ct $CI_TOKEN
#
#
#trigger-demisto-sdk-nightly:
#  stage: trigger-nightlies
#  extends:
#    - .release-sdk
#    - .default-job-settings
#  needs:
#    - create-release-branch
#  artifacts:
#    expire_in: 48 hrs
#    paths:
#      - ${CI_PROJECT_DIR}/artifacts/*
#    when: always
#  variables:
#    BRANCH_NAME: $BRANCH_NAME
#    CI_TOKEN: $CI_TOKEN
#    SLACK_CHANNEL: $SLACK_CHANNEL
#    RELEASE_VERSION: $RELEASE_VERSION
#    ARTIFACTS_FOLDER: "${CI_PROJECT_DIR}/artifacts/"
#  script:
#    - echo "RELEASE_VERSION="$RELEASE_VERSION
#    - export SDK_PIPELINE_ID=$(./Utils/trigger_nightly_sdk_build.sh -ct $CI_TOKEN -ch $SLACK_CHANNEL -sr $RELEASE_VERSION -g | jq .id)
#    - echo "SDK_PIPELINE_ID = " $SDK_PIPELINE_ID
#    - echo $SDK_PIPELINE_ID > ${ARTIFACTS_FOLDER}/SDK_PIPELINE_ID.txt
##    -
##    - python3 ./Tests/scripts/gitlab_slack_notifier_copy.py -s "${SLACK_TOKEN}" -t "test message"
##    - ./Utils/gitlab_triggers/trigger_content_nightly_build.sh -ct $CI_TOKEN
#
#
#
#wait-for-content-private-nightly:
#  stage: wait-for-build-to-finish
#  extends:
#    - .release-sdk
#    - .default-job-settings
#  allow_failure: true
#  needs:
#    - trigger-content-private-nightly
#  artifacts:
#    expire_in: 48 hrs
#    paths:
#      - ${CI_PROJECT_DIR}/artifacts/*
#  variables:
#    ARTIFACTS_FOLDER: "${CI_PROJECT_DIR}/artifacts/"
#    GITHUB_TOKEN: $GITHUB_TOKEN
#  script:
#    - exit 1
#    - python3 ./Utils/get_private_build_status.py --github-token $GITHUB_TOKEN --artifacts-folder ${ARTIFACTS_FOLDER}
#
#
#wait-for-content-internal-dist-nightly:
#  stage: wait-for-build-to-finish
#  extends:
#    - .release-sdk
#    - .default-job-settings
#  allow_failure: true
#  needs:
#    - trigger-content-internal-dist-nightly
#  artifacts:
#    expire_in: 48 hrs
#    paths:
#      - ${CI_PROJECT_DIR}/artifacts/*
#  variables:
#    ARTIFACTS_FOLDER: "${CI_PROJECT_DIR}/artifacts/"
#  script:
#    - exit 1
#    - PIPELINE_ID=$(head -n 1 ${ARTIFACTS_FOLDER}/GOLD_PIPELINE_ID.txt)
#    - echo "PIPELINE_ID =" $PIPELINE_ID
#    - python3 ./Tests/sdk_release/wait_for_pipeline.py -g $GITLAB_API_TOKEN -p $PIPELINE_ID -pid 1738
#
#
#wait-for-demisto-sdk-nightly:
#  stage: wait-for-build-to-finish
#  extends:
#    - .release-sdk
#    - .default-job-settings
#  allow_failure: true
#  needs:
#    - trigger-demisto-sdk-nightly
#  artifacts:
#    expire_in: 48 hrs
#    paths:
#      - ${CI_PROJECT_DIR}/artifacts/*
#  variables:
#    ARTIFACTS_FOLDER: "${CI_PROJECT_DIR}/artifacts/"
#  script:
#    - exit 1
#    - PIPELINE_ID=$(head -n 1 ${ARTIFACTS_FOLDER}/SDK_PIPELINE_ID.txt)
#    - echo "PIPELINE_ID =" $PIPELINE_ID
#    - python3 ./Tests/sdk_release/wait_for_pipeline.py -g $GITLAB_API_TOKEN -p $PIPELINE_ID -pid 1061


create-release-pull-request:
  stage: release-flow
  extends:
    - .release-sdk
    - .default-job-settings
  needs:
#    - wait-for-demisto-sdk-nightly
#    - wait-for-content-private-nightly
#    - wait-for-content-internal-dist-nightly
    - create-release-branch
  when: manual
  variables:
    RELEASE_VERSION: $RELEASE_VERSION
    GITHUB_TOKEN: $GITHUB_TOKEN
  script:
    - echo "RELEASE_VERSION="$RELEASE_VERSION
    - python3 ./Tests/sdk_release/create_release_pr.py -t $GITHUB_TOKEN -b $RELEASE_VERSION

deploy-sdk-to-pypi:
  stage: release-flow
  extends:
    - .release-sdk
    - .default-job-settings
  needs:
    - create-release-pull-request
  when: manual
  variables:
    RELEASE_VERSION: $RELEASE_VERSION
    GITHUB_TOKEN: $GITHUB_TOKEN
  script:
    - echo "RELEASE_VERSION="$RELEASE_VERSION
    - python3 ./Tests/sdk_release/create_release.py -t $GITHUB_TOKEN -b $RELEASE_VERSION

create-content-pull-request:
  stage: release-flow
  extends:
    - .release-sdk
    - .default-job-settings
  needs:
    - deploy-sdk-to-pypi
  variables:
    RELEASE_VERSION: $RELEASE_VERSION
    REVIEWER: $REVIEWER
    GITHUB_TOKEN: $GITHUB_TOKEN
  script:
    - echo "RELEASE_VERSION="$RELEASE_VERSION
    - echo "REVIEWER="$REVIEWER
#    - python3 ./Tests/sdk_release/wait_for_release.py -b $RELEASE_VERSION
    - python3 ./Tests/sdk_release/wait_for_release.py -b 1.25.3
    - python3 ./Tests/sdk_release/trigger_update_sdk_workflow.py -t $GITHUB_TOKEN -b $RELEASE_VERSION -r $REVIEWER
    - python3 ./Tests/sdk_release/wait_for_release_prs.py -t $GITHUB_TOKEN -b $RELEASE_VERSION



