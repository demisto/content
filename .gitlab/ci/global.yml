.default-cache:
  cache:
    key:
      files:
        - "dev-requirements-py3.txt"
        - "package-lock.json"
      prefix: $CI_COMMIT_REF_SLUG
    paths:
      - $PIP_CACHE_DIR
      - venv/
      - node_modules/
      - .npm/
    policy: pull


### Global Script Snippets ###

.create-id-set: &create-id-set
  - section_start "Create ID Set" --collapsed
  - demisto-sdk create-id-set -o ./Tests/id_set.json >> $ARTIFACTS_FOLDER/logs/create_id_set.log
  - cp ./Tests/id_set.json $ARTIFACTS_FOLDER
  - section_end "Create ID Set"

.download-demisto-conf:
  - section_start "Download content-test-conf" --collapsed
  - ./Tests/scripts/download_demisto_conf.sh  >> $ARTIFACTS_FOLDER/logs/installations.log
  - section_end "Download content-test-conf"

.open-ssh-tunnel:
  - section_start "Open SSH Tunnel" --collapsed
  - cat $SSH_CONFIGURATION >> ~/.ssh/config
  - chmod 700 ~/.ssh/config
  - ./Tests/scripts/open_ssh_tunnel.sh
  - section_end "Open SSH Tunnel"


.clone_and_export_variables: &clone_and_export_variables
  - source .gitlab/helper_functions.sh
  - git checkout $CI_COMMIT_BRANCH
  - git config diff.renameLimit 6000
  - mkdir -p -m 777 $ARTIFACTS_FOLDER/
  - |
    if [[ -f "$BASH_ENV" ]]; then
      source "$BASH_ENV"
    fi
  - source .circleci/content_release_vars.sh
  - export PATH="${PWD}/node_modules/.bin:${PATH}"
  - section_start "Granting execute permissions on files" --collapsed
  - chmod +x ./Tests/scripts/*
  - chmod +x ./Tests/Marketplace/*
  - section_end "Granting execute permissions on files"

.install_venv: &install_venv
  - section_start "Installing Virtualenv" --collapsed
  - |
    if [ -f "./venv/bin/activate" ]; then
      echo "found venv"
    else
      echo "installing venv"
      NO_HOOKS=1 SETUP_PY2=yes .hooks/bootstrap >> $ARTIFACTS_FOLDER/logs/installations.log 2>&1
      venv/bin/pip3 install -r .circleci/build-requirements.txt >> $ARTIFACTS_FOLDER/logs/installations.log 2>&1
    fi
  - source ./venv/bin/activate
  - |
    if [ -n "${DEMISTO_SDK_NIGHTLY}" ]; then
      echo "Installing SDK from master branch" | tee --append $ARTIFACTS_FOLDER/logs/installations.log
      pip3 install git+https://github.com/demisto/demisto-sdk@master >> $ARTIFACTS_FOLDER/logs/installations.log 2>&1
    fi
  - section_end "Installing Virtualenv"

.install_ssh_keys: &install_ssh_keys
  - section_start "Installing SSH keys" --collapsed
  - eval $(ssh-agent -s)
  - chmod 400 $OREGON_CI_KEY
  - ssh-add $OREGON_CI_KEY
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - section_end "Installing SSH keys"

.default-before-script:
  before_script:
    - *clone_and_export_variables
    - section_start "Creating new clean logs folder" --collapsed
    - rm -rf $ARTIFACTS_FOLDER/logs
    - mkdir -p $ARTIFACTS_FOLDER/logs
    - section_end "Creating new clean logs folder"
    - *install_venv
    - *install_ssh_keys
    - section_start "Build Parameters"
    - set | grep -E "^NIGHTLY=|^INSTANCE_TESTS=|^SERVER_BRANCH_NAME=|^ARTIFACT_BUILD_NUM=|^DEMISTO_SDK_NIGHTLY=|^TIME_TO_LIVE=|^CONTRIB_BRANCH=|^FORCE_PACK_UPLOAD=|^PACKS_TO_UPLOAD=|^BUCKET_UPLOAD=|^GCS_MARKET_BUCKET=|^SLACK_CHANNEL=|^TERM=|^FORCE_COLOR="
    - python --version
    - python3 --version
    - node --version
    - npm --version
    - demisto-sdk --version
    - section_end "Build Parameters"

.default-after-script:
  after_script:
    - *clone_and_export_variables
    - *install_venv
    - *install_ssh_keys
    - section_start "Notify Slack"
    - |
      if [ -n "${SLACK_ONLY_IF}" ]; then
        ./Tests/scripts/slack_notifier.sh "$SLACK_TEST_TYPE" "$SLACK_ENV_RESULTS" "$SLACK_CHANNEL"
      else
        echo "Skipping Slack"
      fi
    - section_end "Notify Slack"
    - section_start "Destroy instances"
    - |
      if [ -n "${DESTROY_INSTANCES}" ]; then
        python3 ./Tests/scripts/destroy_instances.py $ARTIFACTS_FOLDER $ARTIFACTS_FOLDER/env_results.json "$INSTANCE_ROLE" "$TIME_TO_LIVE"
      fi
    - section_end "Destroy instances"

.default-job-settings:
  extends:
    - .default-cache
    - .default-before-script
    - .default-after-script

.run-unittests-and-lint:
  needs: []
  stage: unittests-and-validations
  artifacts:
    expire_in: 30 days
    paths:
      - /builds/xsoar/content/unit-tests
      - /builds/xsoar/content/artifacts/*
  extends:
    - .default-job-settings
  script:
    - section_start "Test Infrustracture"
    - python3 -m pytest ./Tests/scripts/infrastructure_tests/ -v
    - python3 -m pytest ./Tests/Marketplace/Tests/ -v
    - python3 -m pytest ./Tests/scripts/utils/tests -v
    - python3 -m pytest ./Tests/tests -v
    - python3 -m pytest ./Tests/private_build/ -v
    - python3 -m pytest Utils -v
    - |
      if [ -n "${DEMISTO_SDK_NIGHTLY}" ] ; then
      ./Tests/scripts/sdk_pylint_check.sh
      fi
    - section_end "Test Infrustracture"
    - section_start "Run Unit Testing and Lint"
    - |
      if [[ -n $FORCE_BUCKET_UPLOAD || -n $BUCKET_UPLOAD ]] && [[ "$(echo "$GCS_MARKET_BUCKET" | tr '[:upper:]' '[:lower:]')" != "marketplace-dist" ]]; then
        echo "Skipping validations when uploading to a test bucket."
      else
        echo "demisto-sdk version: $(demisto-sdk --version)"
        echo "mypy version: $(mypy --version)"
        echo "flake8 py2 version: $(python2 -m flake8 --version)"
        echo "flake8 py3 version: $(python3 -m flake8 --version)"
        echo "bandit py2 version: $(python2 -m bandit --version 2>&1)"
        echo "bandit py3 version: $(python3 -m bandit --version 2>&1)"
        echo "vulture py2 version: $(python2 -m vulture --version 2>&1)"
        echo "vulture py3 version: $(python3 -m vulture --version 2>&1)"
        SHOULD_LINT_ALL=$(./Tests/scripts/should_lint_all.sh)
        mkdir ./unit-tests
        if [ -n "$SHOULD_LINT_ALL" ]; then
          echo -e  "----------\nLinting all because:\n${SHOULD_LINT_ALL}\n----------"
          demisto-sdk lint -p 8 -a -q --test-xml ./unit-tests --log-path $ARTIFACTS_FOLDER --failure-report $ARTIFACTS_FOLDER
        else
          demisto-sdk lint -p 8 -g -v --test-xml ./unit-tests --log-path $ARTIFACTS_FOLDER --failure-report $ARTIFACTS_FOLDER
        fi
      fi
    - section_end "Run Unit Testing and Lint"

.run-validations:
  stage: unittests-and-validations
  extends:
    - .default-job-settings
  needs: []
  artifacts:
    expire_in: 30 days
    paths:
      - /builds/xsoar/content/artifacts/*
  script:
    - section_start "Look For Secrets"
    - demisto-sdk secrets --post-commit --ignore-entropy
    - section_end "Look For Secrets"
    - section_start "Create id set"
    - *create-id-set
    - section_end "Create id set"
    - section_start "Merge public and private id sets"
    - |
      if [[ $CI_COMMIT_BRANCH =~ pull/[0-9]+ ]]; then
          echo "Skipping, Should not run on contributor's branch."
      else
        gcloud auth activate-service-account --key-file="$GCS_MARKET_KEY" >> $ARTIFACTS_FOLDER/logs/auth.out
        echo "successfully activated google cloud service account"

        echo "Download private ID set"
        gsutil cp "gs://marketplace-dist/content/private_id_set.json" $ARTIFACTS_FOLDER/unified_id_set.json
        echo "successfully downloaded private ID set"
        gcloud auth revoke $GCS_ARTIFACTS_ACCOUNT_NAME

        echo "Merge public and private ID sets"
        demisto-sdk merge-id-sets -i1 ./Tests/id_set.json -i2 $ARTIFACTS_FOLDER/unified_id_set.json -o $ARTIFACTS_FOLDER/unified_id_set.json
        echo "successfully merged public and private ID sets"
      fi
    - section_end "Merge public and private id sets"
    - section_start "Update Tests"
    - python3 ./Tests/scripts/update_conf_json.py
    - cp "./Tests/conf.json" "$ARTIFACTS_FOLDER/conf.json"
    - section_end "Update Tests"
    - section_start "Validate Files and Yaml"
    - |
      if [[ "$(echo "$GCS_MARKET_BUCKET" | tr '[:upper:]' '[:lower:]')" != "marketplace-dist" ]]; then
        echo "Skipping the -Validate Files and Yaml- step when uploading to a test bucket."
      else
        echo "Run flake8 on all excluding Packs (Integrations and Scripts) - they will be handled in linting"
        ./Tests/scripts/pyflake.sh *.py
        # do not run pyflake on venv or content-test-conf awsinstancetool
        find . -maxdepth 1 -type d -not \( -path . -o -path ./Packs -o -path ./venv -o -path ./Tests \) | xargs ./Tests/scripts/pyflake.sh
        ./Tests/scripts/pyflake.sh ./Tests/*.py
        find ./Tests -maxdepth 1 -type d -not \( -path ./Tests -o -path ./Tests/scripts \) | xargs ./Tests/scripts/pyflake.sh
        ./Tests/scripts/pyflake.sh ./Tests/scripts/*.py
        find ./Tests/scripts -maxdepth 1 -type d -not \( -path ./Tests/scripts -o -path ./Tests/scripts/awsinstancetool \) | xargs ./Tests/scripts/pyflake.sh
        ./Tests/scripts/validate.sh
      fi
    - section_end "Validate Files and Yaml"
    - section_start "Check Spelling"
    - python3 ./Tests/scripts/circleci_spell_checker.py $CI_COMMIT_BRANCH
    - section_end "Check Spelling"
    - section_start "Check Build Files Are Up To Date"
    - |
      if [[ $$CI_COMMIT_BRANCH =~ pull/[0-9]+ ]]; then
        echo "Skipping, Should not run on contributor's branch."
      else
        ./Tests/scripts/is_file_up_to_date.sh .gitlab-ci.yml
        ./Tests/scripts/is_file_up_to_date.sh .dev-requirements-py2.txt
        ./Tests/scripts/is_file_up_to_date.sh .dev-requirements-py3.txt
      fi
    - section_end "Check Build Files Are Up To Date"
    - section_start "Validate content-test-conf Branch Merged"
    - |
      if [[ $CI_COMMIT_BRANCH = "master" ]]; then
        echo "Skipping, Should not run on master branch."
      else
        # replace slashes ('/') in the branch name, if exist, with underscores ('_')
        UNDERSCORE_CI_BRANCH=${CI_COMMIT_BRANCH//\//_}
        wget --header "Accept: application/vnd.github.v3.raw" --header "Authorization: token $GITHUB_TOKEN" "https://github.com/demisto/content-test-conf/archive/$UNDERSCORE_CI_BRANCH.zip" --no-check-certificate -q || {
          if [ "$?" != "0" ]; then
            echo "No such branch in content-test-conf: $UNDERSCORE_CI_BRANCH"
          else
            echo "ERROR: Found a branch with the same name in contest-test-conf conf.json - $UNDERSCORE_CI_BRANCH.\n Merge it in order to merge the current branch into content repo."
            exit 1
          fi
        }
      fi
    - section_end "Validate content-test-conf Branch Merged"
    - section_start "Validate landingPageSections.json"
    - echo "Download index.zip"
    - INDEX_PATH=$(mktemp)
    - |
      gsutil cp "gs://marketplace-dist/content/packs/index.zip" $INDEX_PATH
    - echo "successfully downloaded index.zip into $INDEX_PATH"

    - UNZIP_PATH=$(mktemp -d)
    - unzip $INDEX_PATH -d $UNZIP_PATH > $ARTIFACTS_FOLDER/logs/unzip_index.log

    - python3 Tests/Marketplace/validate_landing_page_sections.py -i $UNZIP_PATH
    - section_end "Validate landingPageSections.json"
