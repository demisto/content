.sdk-nightly-schedule-rule:
  rules:
    - if: '$CI_PIPELINE_SOURCE =~ /^(schedule)$/ && $DEMISTO_SDK_NIGHTLY == "true"'


.upload-entities-to-cortex-xsoar: &upload-entities-to-cortex-xsoar
  - section_start "Upload Entities to Cortex XSOAR" --collapsed
  - demisto-sdk upload -i Packs/HelloWorld/Integrations/ --insecure
  - demisto-sdk upload -i Packs/HelloWorld/TestPlaybooks/playbook-HelloWorld-Test.yml --insecure
  - demisto-sdk upload -i Packs/HelloWorld/Layouts/layoutscontainer-Hello_World_Test_Layout.json --insecure
  - demisto-sdk upload -i Packs/HelloWorld/IncidentFields/incidentfield-Hello_World_Incident_Test.json --insecure
  - demisto-sdk upload -i Packs/HelloWorld/IncidentTypes/incidenttype-Hello_World_Alert_Test.json --insecure
  - demisto-sdk upload -i Packs/HelloWorld/Classifiers/classifier-mapper-incoming-HelloWorldTest.json --insecure
  - section_end "Upload Entities to Cortex XSOAR"


#### Commented Out Until Resolve Running Docker in Docker #### 
# demisto-sdk-nightly:run-unittests-and-lint:
#   extends:
#     - .run-unittests-and-lint
#     - .sdk-nightly-schedule-rule
#   variables:
#     SLACK_TEST_TYPE: ${CI_JOB_NAME}
#     SLACK_ENV_RESULTS: ${ARTIFACTS_FOLDER}/env_results.json
#     SLACK_ONLY_IF: "true"


demisto-sdk-nightly:run-validations:
  extends:
    - .run-validations
    - .sdk-nightly-schedule-rule
  variables:
    SLACK_TEST_TYPE: ${CI_JOB_NAME}
    SLACK_ENV_RESULTS: ${ARTIFACTS_FOLDER}/env_results.json
    SLACK_ONLY_IF: "true"


demisto_sdk_nightly:check_idset_dependent_commands:
  extends: 
    - .default-job-settings
    - .sdk-nightly-schedule-rule
  stage: unittests-and-validations
  inherit:
    variables: true
  variables:
    IS_NIGHTLY: "false"
    SLACK_TEST_TYPE: ${CI_JOB_NAME}
    SLACK_ENV_RESULTS: ${ARTIFACTS_FOLDER}/env_results.json
    SLACK_ONLY_IF: "true"
  script:
    - section_start "Secrets Detection" --collapsed
    - demisto-sdk secrets --post-commit --ignore-entropy
    - section_end "Secrets Detection"
    - section_start "Update Conf" --collapsed
    - python3 ./Tests/scripts/update_conf_json.py >> $ARTIFACTS_FOLDER/logs/update_conf_json.log 2>&1
    - cp ./Tests/conf.json $ARTIFACTS_FOLDER
    - section_end "Update Conf"
    - !reference [.create-id-set]
    - section_start "Activate GCloud Service Account" --collapsed
    - gcloud auth activate-service-account --key-file="$GCS_MARKET_KEY" >> $ARTIFACTS_FOLDER/logs/auths.log 2>&1
    - echo "successfully activated google cloud service account"
    - section_end "Activate GCloud Service Account"
    - section_start "Download private ID set" --collapsed
    - gsutil cp gs://marketplace-dist/content/private_id_set.json $ARTIFACTS_FOLDER/unified_id_set.json
    - echo "successfully downloaded private ID set"
    - section_end "Download private ID set"
    - gcloud auth revoke >> $ARTIFACTS_FOLDER/logs/auths.log 2>&1
    - section_start "Merge public and private ID sets" --collapsed
    - demisto-sdk merge-id-sets -i1 $ARTIFACTS_FOLDER/id_set.json -i2 $ARTIFACTS_FOLDER/unified_id_set.json -o $ARTIFACTS_FOLDER/unified_id_set.json
    - echo "successfully merged public and private ID sets"
    - section_end "Merge public and private ID sets"
    - section_start "Build Content Descriptor" --collapsed
    - python3 Utils/release_notes_generator.py $CONTENT_VERSION $CI_COMMIT_SHA $CI_BUILD_ID --output $ARTIFACTS_FOLDER/packs-release-notes.md --github-token $GITHUB_TOKEN
    - cp content-descriptor.json $ARTIFACTS_FOLDER
    - section_end "Build Content Descriptor"
    - section_start "Common Server Documentation" --collapsed
    - ./Documentation/commonServerDocs.sh
    - section_end "Common Server Documentation"
    - section_start "Collect Test List and Content Packs" --collapsed
    - python3 ./Tests/scripts/collect_tests_and_content_packs.py -n $IS_NIGHTLY
    - section_end "Collect Test List and Content Packs"
    - section_start "Calculate Packs Dependencies" --collapsed
    - python3 ./Tests/Marketplace/packs_dependencies.py -i $ARTIFACTS_FOLDER/id_set.json -o $ARTIFACTS_FOLDER/packs_dependencies.json
    - section_end "Calculate Packs Dependencies"


demisto-sdk-nightly:create-instance:
  extends: 
    - .default-job-settings
    - .sdk-nightly-schedule-rule
  variables:
    IFRA_ENV_TYPE: "Server Master"
  cache:
    policy: pull-push
  needs: []
  stage: create-instances
  script:
    - !reference [.download-demisto-conf]
    - |
      [ -n "${TIME_TO_LIVE}" ] && TTL=${TIME_TO_LIVE} || TTL=300
      python3 ./Tests/scripts/awsinstancetool/aws_instance_tool.py -envType "$IFRA_ENV_TYPE" -timetolive $TTL -outfile "$ARTIFACTS_FOLDER/env_results.json"


demisto-sdk-nightly:run-commands-against-instance:
  extends:
    - .default-job-settings
    - .sdk-nightly-schedule-rule
  variables:
    DESTROY_INSTANCES: "true"
    INSTANCE_ROLE: "Server Master"
    SLACK_TEST_TYPE: ${CI_JOB_NAME}
    SLACK_ENV_RESULTS: ${ARTIFACTS_FOLDER}/env_results.json
    SLACK_ONLY_IF: "true"
  needs: ["demisto-sdk-nightly:create-instance"]
  dependencies:
    - demisto-sdk-nightly:create-instance
  stage: run-instances
  script:
    - !reference [.open-ssh-tunnel]
    - python3 ./Tests/scripts/wait_until_server_ready.py "$INSTANCE_ROLE"
    - !reference [.download-demisto-conf]
    - |
      export DEMISTO_API_KEY=$(cat $SECRET_CONF_PATH | jq -r '.temp_apikey')
      export DEMISTO_BASE_URL="https://localhost:$(cat $ARTIFACTS_FOLDER/env_results.json | jq -r '.[0].TunnelPort')"
      echo "Server URL: $DEMISTO_BASE_URL"
    - section_start "Unlock HelloWorld Integration and Playbook" --collapsed
    - python3 Tests/sdknightly/unlock_entity.py integration "HelloWorld,HelloWorld Feed"
    - section_end "Unlock HelloWorld Integration and Playbook"
    - section_start "Create and Upload Entities to XSOAR Instance" --collapsed
    - python3 Tests/sdknightly/create_entities_for_nightly_sdk.py HelloWorld --artifacts-folder $ARTIFACTS_FOLDER
    - *upload-entities-to-cortex-xsoar
    - section_end "Create and Upload Entities to XSOAR Instance"
    - section_start "Download Entities from XSOAR Instance" --collapsed
    - demisto-sdk download -o Packs/HelloWorld/ -i HelloWorld --insecure -f
    - demisto-sdk download -o Packs/HelloWorld/ -i HelloWorld-Test --insecure -f
    - demisto-sdk download -o Packs/HelloWorld/ -i "Hello World Incident Test" --insecure -f
    - demisto-sdk download -o Packs/HelloWorld/ -i "Hello World Alert Test" --insecure -f
    - demisto-sdk download -o Packs/HelloWorld/ -i "Hello World Test - Incoming Mapper" --insecure -f
    - section_end "Download Entities from XSOAR Instance"
    - section_start "Format Content Items" --collapsed
    - demisto-sdk format -i Packs/HelloWorld/ -nv -ud -y
    - section_end "Format Content Items"
    - section_start "Run Validate" --collapsed
    - demisto-sdk validate -i Packs/HelloWorld/
    - section_end "Run Validate"
    - section_start "Run Lint" --collapsed
    - demisto-sdk lint -i Packs/HelloWorld/
    - section_end "Run Lint"
    - *upload-entities-to-cortex-xsoar
