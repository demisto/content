.build-machines-cleanup-rule:
  rules:
    - if: '$BUILD_MACHINES_CLEANUP == "true"'

.build-machines-cleanup-rule-always:
  rules:
    - if: '$BUILD_MACHINES_CLEANUP == "true"'
      when: always

stages:
  - security

build-machines-cleanup:
  stage: cleanup
  extends:
    - .build-machines-cleanup-rule
    - .default-job-settings
  script:
    - EXIT_CODE=0
    - !reference [.download-demisto-conf]
    - !reference [.lock-machine]
    - !reference [.uninstall-packs-and-reset-bucket-cloud]
    - !reference [.cloud-machine-information]
    - job-done
    - exit "${EXIT_CODE}"
  after_script:
    - source .gitlab/helper_functions.sh
    - !reference [ .unlock-machine ]
  timeout: 4 hours
  variables:
    CLOUD_MACHINES_TYPE: "nightly"
    CLOUD_MACHINES_COUNT: "all"
    GCS_LOCKS_PATH: "content-locks/locks-xsiam-ga-nightly"
    INSTANCE_ROLE: "XSIAM"
    GCS_QUEUE_FILE: "queue-ga"
    CLOUD_SERVERS_FILE: "xsiam_servers_path"
    CLOUD_API_KEYS: $XSIAM_API_KEYS
    ARTIFACTS_FOLDER: "${ARTIFACTS_FOLDER_MPV2}"
    GCS_MARKET_BUCKET: "${GCS_MARKET_V2_BUCKET}"
    ENV_RESULTS_PATH: "${ARTIFACTS_FOLDER_MPV2}/env_results.json"
    GCS_SOURCE_BUCKET: "$GCS_PRODUCTION_V2_BUCKET"
    GCS_MACHINES_BUCKET: "${TEST_XDR_PREFIX}marketplace-v2-dist-dev/upload-flow/builds-xsiam"
    SERVER_TYPE: "XSIAM"
    MARKETPLACE_NAME: "marketplacev2"
    NON_REMOVABLE_PACKS: "Base"

fan-in-build-machines-cleanup:
  tags:
    - gke
  stage: fan-in
  extends:
    - .build-machines-cleanup-rule-always
  script:
    - echo "fan in"

slack-notify-build-machines-cleanup:
  variables:
    PIPELINE_TO_QUERY: $CI_PIPELINE_ID
    WORKFLOW: 'Build Machines Cleanup'
    JOB_NAME: 'fan-in-build-machines-cleanup'
    # Passes the environment variable from the parent pipeline to the child which can be useful for cases
    # when triggering pipeline with alternate env variable value passed in the API call
    SLACK_CHANNEL: $SLACK_CHANNEL
    SLACK_JOB: 'true'
  extends:
    - .trigger-slack-notification
    - .build-machines-cleanup-rule-always

