# This rule is to not run the build for docker update branches (for non-nightly packs)
.filter-non-nightly-docker-updates-rule:
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^demisto\// && $CI_COMMIT_BRANCH !~ /^demisto\/.*-nightly$/'
      when: never

.push-rule:
  rules:
    - !reference [.filter-non-nightly-docker-updates-rule, rules]
    - if: '$CI_PIPELINE_SOURCE =~ /^(push|contrib)$/'

trigger-private-build:
  tags:
    - gke
  needs: []
  stage: unittests-and-validations
  extends:
    - .default-job-settings
  rules:
    - !reference [.filter-non-nightly-docker-updates-rule, rules]
    - if: '$CI_COMMIT_BRANCH =~ /pull\/[0-9]+/'
      when: never
    - if: '$CI_PIPELINE_SOURCE =~ /^(push|contrib)$/'
    - if: '$NIGHTLY'
  script:
    - echo "====Trigger Private Build===="
    - |
      if [ 'true' = $(./Tests/scripts/check_if_branch_exist.sh -t "${GITHUB_TOKEN}" --repo "demisto/content-private" -b "${CI_COMMIT_BRANCH}") ]; then
        PRIVATE_BRANCH_NAME=$CI_COMMIT_BRANCH
      else
        PRIVATE_BRANCH_NAME='master'
      fi
    - python3 Utils/trigger_private_build.py --github-token $GITHUB_TOKEN --private-branch-name $PRIVATE_BRANCH_NAME
    - sleep 60
    - python3 Utils/get_private_build_status.py --github-token $GITHUB_TOKEN
    - job-done
  timeout: 2 hours

.create-release-notes-and-common-docs:
  - section_start "Create Release Notes and Common Server Documentation" --collapsed
  - echo "Creating Release Notes and Content Descriptor"
  - python3 Utils/release_notes_generator.py $CONTENT_VERSION $GIT_SHA1 $CI_BUILD_ID --output $ARTIFACTS_FOLDER/packs-release-notes.md --github-token $GITHUB_TOKEN
  - cp content-descriptor.json $ARTIFACTS_FOLDER
  - ./Documentation/commonServerDocs.sh
  - section_end "Create Release Notes and Common Server Documentation"

stop-running-pipelines:
  tags:
    - gke
  stage: unittests-and-validations
  needs: []
  extends:
    - .default-job-settings
  variables:
    master_branch_name: master
  rules:
    - !reference [.filter-non-nightly-docker-updates-rule, rules]
    - if: '$CI_PIPELINE_SOURCE =~ /^(push)$/ && $CI_COMMIT_BRANCH != $master_branch_name'
  script:
    - section_start "Stop running pipelines on current branch"
    - Utils/gitlab/stop_running_pipelines.sh $CI_COMMIT_BRANCH $CI_PIPELINE_ID
    - section_end "Stop running pipelines on current branch"


# runs in gitlab for the on-push flow (except for contributors)
run-unittests-and-lint:
  extends:
    - .run-unittests-and-lint
  rules:
    - if: '$BUCKET_UPLOAD == "true"'
      when: never
    - if: '$SECURITY_SCANS == "true"'
      when: never
    - if: '$BUILD_MACHINES_CLEANUP == "true"'
      when: never
    - if: '$FORCE_BUCKET_UPLOAD == "true"'
      when: never
    - if: '$DEMISTO_TEST_NATIVE_CANDIDATE == "true"'
      when: never
    - if: '$DEMISTO_SDK_NIGHTLY != "true"'
    - if: '$CI_PIPELINE_SOURCE =~ /^(push|contrib)$/'


# runs in gitlab for the on-push flow (except for contributors)
run-validations:
  extends:
    - .run-validations
  rules:
    - if: '$NIGHTLY'
    - if: '$CI_PIPELINE_SOURCE =~ /^(push|contrib)$/'


# runs in gitlab for the on-push flow, on every new commit pushed to the branch.
validate-content-conf:
  tags:
    - gke
  stage: unittests-and-validations
  needs: []
  extends:
    - .default-job-settings
  rules:
    - if: '$CI_PIPELINE_SOURCE =~ /^(push)$/'
  script:
    - !reference [ .validate_content_test_conf_branch_merged ]
    - job-done

.generic-prepare-testing-bucket:
  tags:
    - gke
  extends:
    - .default-job-settings
  rules:
    - !reference [.filter-non-nightly-docker-updates-rule, rules]
    - if: "$CI_PIPELINE_SOURCE =~ /^(push|contrib)$/"
    - if: "$NIGHTLY"
  cache:
    policy: pull-push
  variables:
    KUBERNETES_CPU_REQUEST: 2000m
  needs: []
  stage: prepare-testing-bucket
  script:
    - !reference [.download-demisto-conf]
    - !reference [.create-release-notes-and-common-docs]
    - !reference [.secrets-fetch]
    - section_start "Create or update content graph" --collapsed

    - echo "Updating the content graph"
    - mkdir $ARTIFACTS_FOLDER/content_graph
    - demisto-sdk update-content-graph -g --marketplace $MARKETPLACE_VERSION -o $ARTIFACTS_FOLDER/content_graph
    - echo "Successfully updated content graph"

    - section_end "Create or update content graph"

    - section_start "Create Content Artifacts and Update Conf" --collapsed
    - export DEMISTO_SDK_MARKETPLACE=$MARKETPLACE_VERSION  # This is done because the demisto-sdk uses this environment variable.
    - |
      if [[ $MARKETPLACE_VERSION == "xsoar" || $MARKETPLACE_VERSION == "xsoar_saas" ]];  # later the non xsoar will be edited to remove xsoar naming.
      then
        echo "Starting to create artifacts with zip for XSOAR."
        python Tests/scripts/create_artifacts_graph/create_artifacts.py --marketplace "$MARKETPLACE_VERSION" --artifacts-output $ARTIFACTS_FOLDER/content_packs --dependencies-output $ARTIFACTS_FOLDER/packs_dependencies.json --packs-output $ARTIFACTS_FOLDER/packs.json --bucket-upload "$BUCKET_UPLOAD"
      else
        echo "Starting to create artifacts without zip."
        python Tests/scripts/create_artifacts_graph/create_artifacts.py --marketplace "$MARKETPLACE_VERSION" --artifacts-output $ARTIFACTS_FOLDER/content_packs --dependencies-output $ARTIFACTS_FOLDER/packs_dependencies.json --packs-output $ARTIFACTS_FOLDER/packs.json --no-zip --bucket-upload "$BUCKET_UPLOAD"
      fi

    - gcloud auth activate-service-account --key-file="$GCS_ARTIFACTS_KEY"

    - cp "./Tests/conf.json" "$ARTIFACTS_FOLDER/conf.json"
    - section_end "Create Content Artifacts and Update Conf"

    - section_start "Find dependencies changes" --collapsed
    - |
      if [[ -z $BUCKET_UPLOAD || $TEST_UPLOAD == "false" ]]; then
        source ./Tests/scripts/get_previous_master_sha.sh --fail
        echo "Finding pack dependencies diff against $PREVIOUS_MASTER_SHA"
        python Tests/scripts/find_pack_dependencies_changes.py --gitlab-token $GITLAB_API_TOKEN --master-sha $PREVIOUS_MASTER_SHA --job-name $CI_JOB_NAME --artifacts-folder $ARTIFACTS_FOLDER
      else
        echo "Test upload flow - skipping find dependencies changes"
      fi
    - section_end "Find dependencies changes"

    - section_start "Replace Cortex XSOAR" --collapsed
    - |
      if [[ $MARKETPLACE_VERSION == "marketplacev2" ||  $MARKETPLACE_VERSION == "xpanse" ]];
      then
        echo "Replace Cortex XSOAR for non-xsoar build."
        pushd "$ARTIFACTS_FOLDER"
        find content_packs -type f -not \( -path "*/ReleaseNotes/*" \) -exec sed -i -e 's/Cortex XSOAR/'"$PRODUCT_NAME"'/gI' {} \;
        pushd content_packs; zip -r ../content_packs.zip * 1> /dev/null; popd
        rm -rf content_packs
        popd
      fi
    - section_end "Replace Cortex XSOAR"
    - section_start "Collect Tests" --collapsed
    - |
      if [ -n "${INSTANCE_TESTS}" ]; then
        echo "Skipping - not running in INSTANCE_TESTS build"
      else
        [ -n "${NIGHTLY}" ] && IS_NIGHTLY=true || IS_NIGHTLY=false
        python3 ./Tests/scripts/collect_tests/collect_tests.py -n $IS_NIGHTLY --marketplace "$MARKETPLACE_VERSION" --service_account $GCS_MARKET_KEY --graph true --override_all_packs $OVERRIDE_ALL_PACKS -up "${PACKS_TO_UPLOAD}"
      fi
    - section_end "Collect Tests"

    - section_start "Prepare Content Packs for Testing"
    - ./Tests/scripts/prepare_content_packs_for_testing.sh "$MARKETPLACE_BUCKET" "$STORAGE_BASE_PATH" "$MARKETPLACE_VERSION"
    - section_end "Prepare Content Packs for Testing"

    - section_start "Create Instances for XSOAR"
    - |
      if [[ ${MARKETPLACE_VERSION} = "xsoar" ]]; then
        echo "Creating Instances, only for XSOAR."
        [ -n "${TIME_TO_LIVE}" ] && TTL=${TIME_TO_LIVE} || TTL=300
        time python3 ./gcp/create_instance.py --env-type "$IFRA_ENV_TYPE" --outfile "$ARTIFACTS_FOLDER/env_results.json" --creds $CONTENT_BUILD_GCP --zone $GCP_ZONE
      fi
    - section_end "Create Instances for XSOAR"
    - section_start "Upload Artifacts to GCP" --collapsed
    - ./Tests/scripts/upload_artifacts.sh
    - section_end "Upload Artifacts to GCP"
    - echo "create instances done" > "$ARTIFACTS_FOLDER/create_instances_done.txt"
    - job-done

xsoar-prepare-testing-bucket:
  variables:
    ARTIFACTS_FOLDER: "${ARTIFACTS_FOLDER_XSOAR}"
    MARKETPLACE_VERSION: "xsoar"
    MARKETPLACE_BUCKET: "$GCS_MARKET_BUCKET"
  extends:
    - .generic-prepare-testing-bucket

xsoar-saas-prepare-testing-bucket:
  variables:
    ARTIFACTS_FOLDER: "${ARTIFACTS_FOLDER_XSOAR_SAAS}"
    MARKETPLACE_VERSION: "xsoar_saas"
    MARKETPLACE_BUCKET: "$GCS_MARKET_XSOAR_SAAS_BUCKET"
  extends:
    - .generic-prepare-testing-bucket

mpv2-prepare-testing-bucket:
  variables:
    ARTIFACTS_FOLDER: "${ARTIFACTS_FOLDER_MPV2}"
    MARKETPLACE_VERSION: "marketplacev2"
    MARKETPLACE_BUCKET: "$GCS_MARKET_V2_BUCKET"
    PRODUCT_NAME: "Cortex XSIAM"
  extends:
    - .generic-prepare-testing-bucket

xpanse-prepare-testing-bucket:
  variables:
    ARTIFACTS_FOLDER: "${ARTIFACTS_FOLDER_XPANSE}"
    MARKETPLACE_VERSION: "xpanse"
    PRODUCT_NAME: "Cortex XPANSE"
    MARKETPLACE_BUCKET: "$GCS_MARKET_XPANSE_BUCKET"
  extends:
    - .generic-prepare-testing-bucket

add-dep-changes-in-pr-comment:
  tags:
    - gke
  stage: prepare-testing-bucket
  extends:
    - .default-job-settings
  needs: ['mpv2-prepare-testing-bucket', 'xpanse-prepare-testing-bucket', 'xsoar-prepare-testing-bucket']
  when: always
  except:
  - triggers
  - schedules
  script:
    - |
      if [[ $CI_COMMIT_BRANCH != "master" ]]; then
        python3 ./Tests/scripts/update_pack_dependencies_changes_in_pr.py --github-token $GITHUB_TOKEN --current-sha $CI_COMMIT_SHA --current-branch $CI_COMMIT_BRANCH --artifacts-folder $ARTIFACTS_FOLDER --mandatory-only true
      fi

.test_content_on_xsoar_server_instances_base:
  tags:
    - gke
  extends:
    - .default-job-settings
    - .push-rule
  variables:
    ARTIFACTS_FOLDER: "${ARTIFACTS_FOLDER_XSOAR}"
    ENV_RESULTS_PATH: "${ARTIFACTS_FOLDER_XSOAR}/env_results.json"
    SERVER_TYPE: "XSOAR"
  stage: run-instances
  needs:
    - job: xsoar-prepare-testing-bucket
      optional: true
  script:
    - EXIT_CODE=0
    - section_start "Check if should run Server Master"
    - |
      echo "Instance role:${INSTANCE_ROLE}"
      if [ -n "${NIGHTLY}" ] && [ "${INSTANCE_ROLE}" != "Server Master" ]; then
        echo "Not running the instance flow, not a Server Master instance and we are in a nightly build."
        job-done
        exit 0
      fi
    - section_end "Check if should run Server Master"
    - !reference [.download-demisto-conf]
    - !reference [.secrets-fetch]
    - export TEMP=$(cat $ARTIFACTS_FOLDER/filter_envs.json | jq ".\"$INSTANCE_ROLE\"")
    # If instance was not created
    - |
      if [[ "$TEMP" != "true" && -z "${NIGHTLY}" ]]; then
        echo "Instance with role $INSTANCE_ROLE was not created"
        job-done
        exit 0
      fi
    - !reference [.ssh-config-setup]
    - section_start "Wait Until Server Ready"
    - |
        [ -n "${NIGHTLY}" ] && IS_NIGHTLY=true || IS_NIGHTLY=false
        python3 ./Tests/scripts/wait_until_server_ready.py  -n ${IS_NIGHTLY} --instance-role "${INSTANCE_ROLE}"
    - section_end "Wait Until Server Ready"
    - section_start "Copy env results to artifacts folder" --collapsed
    - |
      # workaround for the hard-coded value in the sdk
      cp "$ARTIFACTS_FOLDER/env_results.json" "./artifacts/env_results.json"
      cp "$ARTIFACTS_FOLDER/filter_file.txt" "./artifacts/filter_file.txt"

    - section_end "Copy env results to artifacts folder"
    - section_start "Install Packs and run Test-Module"
    - ./Tests/scripts/install_content_and_test_integrations.sh "$INSTANCE_ROLE" "$SERVER_TYPE" || EXIT_CODE=$?
    - cp -f $ARTIFACTS_FOLDER/conf.json Tests/conf.json
    - section_end "Install Packs and run Test-Module"
    - section_start "Wait Until Server Ready"
    - echo Going to sleep for 15 minutes to allow server finish indexing
    - sleep-with-progress 900 30 "Sleeping... " 150
    - echo "Done sleeping!"
    - section_end "Wait Until Server Ready"
    - section_start "Run Tests"
    - ./Tests/scripts/run_tests.sh "$INSTANCE_ROLE" || EXIT_CODE=$?
    - |
      if [[ -f ./Tests/failed_tests.txt ]]; then
        cp ./Tests/failed_tests.txt $ARTIFACTS_FOLDER/failed_tests.txt
      fi
    - |
      if [[ -f ./Tests/succeeded_tests.txt ]]; then
        cp ./Tests/succeeded_tests.txt $ARTIFACTS_FOLDER/succeeded_tests.txt
      fi
    - |
      if [[ -f ./Tests/test_playbooks_report.json ]]; then
        cp ./Tests/test_playbooks_report.json $ARTIFACTS_FOLDER/test_playbooks_report.json
      fi
    - section_end "Run Tests"
    - job-done
    - exit $EXIT_CODE
  after_script:
    - !reference [.default-after-script]
    - !reference [.install_ssh_keys]
    - !reference [.ssh-config-setup]
    - section_start "Destroy Instances"
    - python3 ./Tests/scripts/destroy_instances.py --artifacts-dir $ARTIFACTS_FOLDER --env-file $ARTIFACTS_FOLDER/env_results.json --instance-role "$INSTANCE_ROLE"
    - if [ $? -ne 0 ]; then
        echo "Failed to destroy instances, exit code"$?";
      fi
    - section_end "Destroy Instances"

tests_xsoar_server:
  extends:
    - .test_content_on_xsoar_server_instances_base
  #  No need to trigger in case of release branch or docker update branches (non-nightly packs)
  rules:
    - !reference [.filter-non-nightly-docker-updates-rule, rules]
    - if: '$CI_PIPELINE_SOURCE =~ /^(push|contrib)$/'
    - if: '$NIGHTLY'
      when: always
      variables:
        KUBERNETES_CPU_REQUEST: 2000m
  parallel:
    matrix:
      - INSTANCE_ROLE:
        - "Server 6.9"
        - "Server 6.10"
        - "Server 6.11"
        - "Server 6.12"
        - "Server Master"

fan-in-nightly:
  tags:
    - gke
  stage: fan-in
  rules:
    - if: '$NIGHTLY'
      when: always
  script:
    - echo "fan in"

jobs-done-check-nightly:
  extends:
    - .jobs-done-check
  needs: ['run-unittests-and-lint', 'run-validations', 'trigger-private-build', 'mpv2-prepare-testing-bucket', 'xpanse-prepare-testing-bucket', 'xsoar-prepare-testing-bucket', 'xsoar-saas-prepare-testing-bucket', 'xsiam_server_ga', 'tests_xsoar_server']
  tags:
    - gke
  rules:
    - if: '$NIGHTLY'
      when: always

jobs-done-check-on-push:
  extends:
    - .push-rule
    - .jobs-done-check
  needs:
    - job: run-unittests-and-lint
      optional: true
    - job: trigger-private-build
      optional: true
    - job: validate-content-conf
      optional: true
    - job: mpv2-prepare-testing-bucket
      optional: true
    - job: xpanse-prepare-testing-bucket
      optional: true
    - job: xsoar-prepare-testing-bucket
      optional: true
    - job: xsoar-saas-prepare-testing-bucket
      optional: true
    - job: xsiam_server_ga
      optional: true
    - job: tests_xsoar_server
      optional: true
    - job: xsoar_ng_server_ga
      optional: true
  tags:
    - gke


slack-notify-nightly-build:
  extends:
    - .trigger-slack-notification
  rules:
    - if: '$NIGHTLY'
      when: always
  variables:
    PIPELINE_TO_QUERY: $CI_PIPELINE_ID
    WORKFLOW: 'Content Nightly'
    JOB_NAME: 'fan-in-nightly'
    # Passes the environment variable from the parent pipeline to the child which can be useful for cases
    # when triggering pipeline with alternate env variable value passed in the API call
    SLACK_CHANNEL: $SLACK_CHANNEL
    SLACK_JOB: 'true'


.test_content_on_cloud_server_instances_base:
  tags:
    - gke
    - us-west1
  extends:
    - .default-job-settings
    - .push-rule
  variables:
    EXTRACT_PRIVATE_TESTDATA: "true"
  stage: run-instances
  script:
    - EXIT_CODE=0
    - !reference [.download-demisto-conf]
    - !reference [.secrets-fetch]
    - section_start "Are there tests to run?" --collapsed
    - |
      if ! [[ -s $ARTIFACTS_FOLDER/content_packs_to_install.txt || -s $ARTIFACTS_FOLDER/filter_file.txt ]]; then
        # The files are empty.
        echo "Not running the instance flow, no tests to run were found."
        job-done
        exit $EXIT_CODE
      fi
    - cp "$ARTIFACTS_FOLDER/filter_file.txt" "./artifacts/filter_file.txt"
    - section_end "Are there tests to run?"

    - !reference [.lock-machine]
    - !reference [.uninstall-packs-and-reset-bucket-cloud]

    - section_start "Install Packs and run Test-Module"
    - ./Tests/scripts/install_content_and_test_integrations.sh "$INSTANCE_ROLE" "$SERVER_TYPE" || EXIT_CODE=$?
    - section_end "Install Packs and run Test-Module"

    - section_start "Run Tests"
    - cp -f $ARTIFACTS_FOLDER/conf.json Tests/conf.json
    - ./Tests/scripts/run_tests.sh "$INSTANCE_ROLE" || EXIT_CODE=$?
    - |
      if [[ -f ./Tests/failed_tests.txt ]]; then
        cp ./Tests/failed_tests.txt $ARTIFACTS_FOLDER/failed_tests.txt
      fi
    - |
      if [[ -f ./Tests/succeeded_tests.txt ]]; then
        cp ./Tests/succeeded_tests.txt $ARTIFACTS_FOLDER/succeeded_tests.txt
      fi
    - section_end "Run Tests"

    - section_start "Test Modeling Rules"
    - ./Tests/scripts/test_modeling_rules.sh || EXIT_CODE=$?
    - section_end "Test Modeling Rules"

    - !reference [.cloud-machine-information]
    - job-done
    - exit $EXIT_CODE
  after_script:
    - source .gitlab/helper_functions.sh
    - !reference [.unlock-machine]

#xsiam_server_dev:
#  extends:
#    - .test_content_on_xsiam_server_instances_base
#  rules:
#    - if: '$CI_PIPELINE_SOURCE =~ /^(push|contrib)$/'
#    - if: '$NIGHTLY'
#      when: always
#  variables:
#    INSTANCE_ROLE: "XSIAM Master"
#    GCS_QUEUE_FILE: "queue-master"
#    TEST_MACHINES_LIST: "test-machines-master"


xsiam_server_ga:
  extends:
    - .test_content_on_cloud_server_instances_base
  rules:
    - !reference [.filter-non-nightly-docker-updates-rule, rules]
    - if: '$CI_PIPELINE_SOURCE =~ /^(push|contrib)$/'
    - if: '$NIGHTLY'
      when: always
      variables:
        CLOUD_MACHINES_TYPE: "nightly"
        CLOUD_MACHINES_COUNT: 1
        GCS_LOCKS_PATH: "content-locks/locks-xsiam-ga-nightly"
  variables:
    CLOUD_MACHINES_TYPE: "build"
    CLOUD_MACHINES_COUNT: 1
    INSTANCE_ROLE: "XSIAM"
    GCS_QUEUE_FILE: "queue-ga"
    GCS_LOCKS_PATH: "content-locks/locks-xsiam-ga"
    CLOUD_SERVERS_FILE: "xsiam_servers_path"
    CLOUD_API_KEYS: $XSIAM_API_KEYS
    ARTIFACTS_FOLDER: "${ARTIFACTS_FOLDER_MPV2}"
    GCS_MARKET_BUCKET: "${GCS_MARKET_V2_BUCKET}"
    ENV_RESULTS_PATH: "${ARTIFACTS_FOLDER_MPV2}/env_results.json"
    GCS_SOURCE_BUCKET: "$GCS_PRODUCTION_V2_BUCKET"
    GCS_MACHINES_BUCKET: "marketplace-v2-dist-dev/upload-flow/builds-xsiam"
    SERVER_TYPE: "XSIAM"
    MARKETPLACE_NAME: "marketplacev2"
    NON_REMOVABLE_PACKS: "Base"
    JIRA_COMPONENT: "Test Modeling Failure"
    JIRA_ISSUE_TYPE: "XSOAR Dev Bug"
    JIRA_ISSUE_UNRESOLVED_TRANSITION_NAME: "Backlog"
    JIRA_PROJECT_ID: "CIAC"
    JIRA_SERVER_URL: "https://jira-hq.paloaltonetworks.local"
    JIRA_VERIFY_SSL: "False"
    JIRA_LABELS: '["XSIAM"]'
    # Jira additional fields are a json string that will be parsed into a dictionary containing the name of the field as the key and the value as a dictionary containing the value of the field.
    JIRA_ADDITIONAL_FIELDS: '{"customfield_17166":{"value": "IN"},"customfield_17167":{"value": "FALSE"},"customfield_17168":{"value": "Single"}}'
  needs:
    - job: mpv2-prepare-testing-bucket
      optional: true
  artifacts:
    when: always
    expire_in: 30 days
    reports:
      junit:
        - ${ARTIFACTS_FOLDER}/modeling_rules_results.xml
    paths:
      - ${ARTIFACTS_FOLDER}/modeling_rules_results.xml
      - ${CI_PROJECT_DIR}/artifacts/*  # restoring the default artifacts path from the job default settings
      - ${CI_PROJECT_DIR}/pipeline_jobs_folder/*  # restoring the default artifacts path from the job default settings

xsoar_ng_server_ga:
  extends:
    - .test_content_on_cloud_server_instances_base
  rules:
    - !reference [.filter-non-nightly-docker-updates-rule, rules]
    - if: '$CI_PIPELINE_SOURCE =~ /^(push|contrib)$/'
      when: always
  variables:
    CLOUD_MACHINES_TYPE: "build"
    CLOUD_MACHINES_COUNT: 1
    INSTANCE_ROLE: "XSIAM"
    GCS_QUEUE_FILE: "queue-ga"
    GCS_LOCKS_PATH: "content-locks/locks-xsoar-ng"
    CLOUD_SERVERS_FILE: "xsoar_ng_servers_path"
    CLOUD_API_KEYS: $XSOAR_NG_API_KEYS
    GCS_SOURCE_BUCKET: "${GCS_PRODUCTION_BUCKET}"
    ARTIFACTS_FOLDER: "${ARTIFACTS_FOLDER_XSOAR}"
    ENV_RESULTS_PATH: "${ARTIFACTS_FOLDER_XSOAR}/env_results.json"
    GCS_MACHINES_BUCKET: "marketplace-dist-dev/upload-flow/builds-xsoar-ng"
    SERVER_TYPE: "XSIAM"
    MARKETPLACE_NAME: "xsoar"
    NON_REMOVABLE_PACKS: "Base"
  needs:
    - job: xsoar-prepare-testing-bucket
      optional: true


test-upload-flow:
  tags:
    - gke
  extends:
    - .default-job-settings
  rules:
    - !reference [.filter-non-nightly-docker-updates-rule, rules]
    - if: '$CI_PIPELINE_SOURCE =~ /^(push|contrib)$/'
  variables:
    ALL_BUCKETS: "$GCS_MARKET_BUCKET_DEV,$GCS_MARKET_V2_BUCKET_DEV"
  stage: unittests-and-validations
  script:
    - section_start "Checks Whether to Trigger a Test Upload"
    - SHOULD_SKIP_TEST_UPLOAD=$(./Utils/should_trigger_test_upload.sh)
    - if [ -z "$SHOULD_SKIP_TEST_UPLOAD" ]; then
    -   echo "No upload-flow related files were modified, skipping upload test"
    -   exit 0
    - fi
    - echo "Found modified files that should be tested in upload-flow"
    - section_end "Checks Whether to Trigger a Test Upload"

    - section_start "Create Testing Branch"
    - export BRANCH="${CI_COMMIT_BRANCH}-upload_test_branch-$(date +%s)"
    - python3 ./Utils/test_upload_flow/create_test_branch.py -tb $BRANCH -a $ARTIFACTS_FOLDER -g $GITLAB_PUSH_TOKEN
    - echo $BRANCH
    - section_end "Create Testing Branch"

    - section_start "Trigger Test Upload Flow On Testing Branch"
    # retry mechanism for trigger upload pipeline in case it failed because of gitlab connectivity issues.
    - for _ in {1..3}; do
    -   export pipeline_id=$(./Utils/trigger_test_upload_flow.sh -ct $GITLAB_SVC_USER_TOKEN -g -b $BRANCH | jq .id)
    -   if [ "${pipeline_id}" != "null" ]; then
    -     break
    -   fi
    -   echo "Sleeping for 10 seconds before retrying"
    -   sleep 10
    - done
    - echo "Successful triggered test upload - ${CI_SERVER_URL}/${CI_PROJECT_NAMESPACE}/content/-/pipelines/$pipeline_id"  # disable-secrets-detection
    - section_end "Trigger Test Upload Flow On Testing Branch"

    - section_start "Wait For Upload To Finish"
    - python3 ./Utils/test_upload_flow/wait_for_upload.py -p $pipeline_id -g $GITLAB_API_TOKEN
    - section_end "Wait For Upload To Finish"

    - section_start "Verify Created Testing Bucket"
    - current_storage_base_path="upload-flow/builds/$BRANCH/$pipeline_id/content/packs"
    - python3 ./Utils/test_upload_flow/verify_bucket.py -a $ARTIFACTS_FOLDER -s $GCS_MARKET_KEY -sb $current_storage_base_path -b $ALL_BUCKETS
    - section_end "Verify Created Testing Bucket"

.server_test_playbooks_report:
  stage: test_playbooks_report
  rules:
    - if: '$NIGHTLY'
  extends:
    - .default-job-settings
  script:
    - python3 ./Tests/Marketplace/print_test_playbook_summary.py --failed_tests_path $ARTIFACTS_FOLDER/failed_tests.txt --succeeded_tests_path $ARTIFACTS_FOLDER/succeeded_tests.txt


merge-dev-secrets:
  tags:
    - gke
  extends:
    - .default-job-settings
  variables:
    master_branch_name: master
  rules:
    - !reference [ .filter-non-nightly-docker-updates-rule, rules ]
    - if: '$CI_PIPELINE_SOURCE =~ /^(push)$/ && $CI_COMMIT_BRANCH == $master_branch_name'
  stage: unittests-and-validations
  script:
    - section_start "Download content-test-conf and infra" --collapsed
    - ./Tests/scripts/download_conf_repos.sh 2>&1 | tee --append "${ARTIFACTS_FOLDER}/logs/download_conf_repos.log"
    - section_end "Download content-test-conf and infra"
    - section_start "Merging and deleting dev secrets" --collapsed
    - python3 ./Tests/scripts/merge_and_delete_dev_secrets.py -sa "$GSM_SERVICE_ACCOUNT" --gsm_project_id_dev "$GSM_PROJECT_ID_DEV" --gsm_project_id_prod "$GSM_PROJECT_ID" >> $ARTIFACTS_FOLDER/logs/merge_secrets.log
    - section_end "Merging and deleting dev secrets"
  allow_failure: true

tests_xsoar_server-test_playbooks_results:
  variables:
    ARTIFACTS_FOLDER: "${ARTIFACTS_FOLDER_XSOAR}"
  extends: .server_test_playbooks_report
  needs: ["tests_xsoar_server: [Server Master]"]
  dependencies:
    - "tests_xsoar_server: [Server Master]"

xsiam_server_ga-test_playbooks_results:
  variables:
    ARTIFACTS_FOLDER: "${ARTIFACTS_FOLDER_MPV2}"
  extends: .server_test_playbooks_report
  needs: ["xsiam_server_ga"]


