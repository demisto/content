graph-create-instances:
  tags:
    - gke
  extends:
    - .default-job-settings
  rules:
    - if: '$CI_PIPELINE_SOURCE =~ /^(push|contrib)$/'
    - if: '$NIGHTLY'
    - if: '$INSTANCE_TESTS'
  cache:
    policy: pull-push
  variables:
    ARTIFACTS_FOLDER: "${ARTIFACTS_FOLDER_XSOAR}"
    KUBERNETES_CPU_REQUEST: 1000m
  allow_failure: true

  needs: []
  stage: create-instances
  script:
    - !reference [.download-demisto-conf]
    - !reference [.create-release-notes-and-common-docs]
    - section_start "Create content graph" --collapsed
    - neo4j-admin --version
    - demisto-sdk create-content-graph -o $ARTIFACTS_FOLDER/content-graph.dump
    - section_end "Create content graph"

    - section_start "Create Content Artifacts and Update Conf" --collapsed
    - python Tests/scripts/create_artifacts_graph/create_artifacts.py --marketplace "xsoar" --artifacts-output $ARTIFACTS_FOLDER/content_packs --dependencies-output $ARTIFACTS_FOLDER/packs_dependencies.json
    - gcloud auth activate-service-account --key-file="$GCS_ARTIFACTS_KEY"
    - cp "./Tests/conf.json" "$ARTIFACTS_FOLDER/conf.json"
    - section_end "Create Content Artifacts and Update Conf"

    - section_start "Collect Tests V2" --collapsed
    - |
      if [ -n "${INSTANCE_TESTS}" ]; then
        echo "Skipping - not running in INSTANCE_TESTS build"
      else
        [ -n "${NIGHTLY}" ] && IS_NIGHTLY=true || IS_NIGHTLY=false
        python3 ./Tests/scripts/collect_tests/collect_tests.py -n $IS_NIGHTLY --marketplace "xsoar" --service_account $GCS_MARKET_KEY --graph true
      fi
    - cp $ARTIFACTS_FOLDER/content_packs_to_install.txt $ARTIFACTS_FOLDER/content_packs_to_install-graph.txt
    - section_end "Collect Tests V2"
    
    - section_start "Prepare Content Packs for Testing" --collapsed
    - ./Tests/scripts/prepare_content_packs_for_testing.sh "$GCS_MARKET_BUCKET" "$STORAGE_BASE_PATH"
    - section_end "Prepare Content Packs for Testing"

    - section_start "Create Instances"
    - |
      [ -n "${TIME_TO_LIVE}" ] && TTL=${TIME_TO_LIVE} || TTL=300
      python3 ./Tests/scripts/awsinstancetool/aws_instance_tool.py -envType "$IFRA_ENV_TYPE" -timetolive $TTL -outfile "$ARTIFACTS_FOLDER/env_results.json"
    - section_end "Create Instances"

    - section_start "Upload Artifacts to GCP" --collapsed
    - ./Tests/scripts/upload_artifacts.sh
    - section_end "Upload Artifacts to GCP"


graph-prepare-testing-bucket-mpv2:
  tags:
    - gke
  extends:
    - .default-job-settings
  rules:
    - if: '$CI_PIPELINE_SOURCE =~ /^(push|contrib)$/'
    - if: '$NIGHTLY'
  cache:
    policy: pull-push
  variables:
    ARTIFACTS_FOLDER: "${ARTIFACTS_FOLDER_MPV2}"
    KUBERNETES_CPU_REQUEST: 1000m
  needs: []
  stage: create-instances
  allow_failure: true
  script:
    - !reference [.download-demisto-conf]
    - !reference [.create-release-notes-and-common-docs]
    
    - section_start "Create content graph" --collapsed
    - demisto-sdk create-content-graph -o $ARTIFACTS_FOLDER/content-graph.dump
    - section_end "Create content graph"

    - section_start "Create Content Artifacts and Update Conf" --collapsed
    - python Tests/scripts/create_artifacts_graph/create_artifacts.py --marketplace "marketplacev2" --artifacts-output $ARTIFACTS_FOLDER/content_packs --dependencies-output $ARTIFACTS_FOLDER/packs_dependencies.json --no-zip

    - gcloud auth activate-service-account --key-file="$GCS_ARTIFACTS_KEY"

    - cp "./Tests/conf.json" "$ARTIFACTS_FOLDER/conf.json"
    - section_end "Create Content Artifacts and Update Conf"

    - section_start "Replace Cortex XSOAR" --collapsed
    - pushd "$ARTIFACTS_FOLDER"
    - find content_packs -type f -not \( -path "*/ReleaseNotes/*" \) -exec sed -i -e 's/Cortex XSOAR/'"$PRODUCT_NAME"'/gI' {} \;
    - pushd content_packs; zip -r ../content_packs.zip * 1> /dev/null; popd
    - rm -rf content_packs
    - popd
    - section_end "Replace Cortex XSOAR"

    - section_start "Collect Tests V2" --collapsed
    - |
      if [ -n "${INSTANCE_TESTS}" ]; then
        echo "Skipping - not running in INSTANCE_TESTS build"
      else
        [ -n "${NIGHTLY}" ] && IS_NIGHTLY=true || IS_NIGHTLY=false
        python3 ./Tests/scripts/collect_tests/collect_tests.py -n $IS_NIGHTLY --marketplace "marketplacev2" --service_account $GCS_MARKET_KEY --graph true
      fi
    - cp $ARTIFACTS_FOLDER/content_packs_to_install.txt $ARTIFACTS_FOLDER/content_packs_to_install-graph.txt
    - section_end "Collect Tests V2"

    - section_start "Prepare Content Packs for Testing" --collapsed
    - ./Tests/scripts/prepare_content_packs_for_testing.sh "$GCS_MARKET_V2_BUCKET" "$STORAGE_BASE_PATH" "marketplacev2"
    - section_end "Prepare Content Packs for Testing"

    - section_start "Upload Artifacts to GCP" --collapsed
    - ./Tests/scripts/upload_artifacts.sh
    - section_end "Upload Artifacts to GCP"


compare_zips:
  needs: ["prepare-testing-bucket-mpv2", "graph-prepare-testing-bucket-mpv2", "create-instances", "graph-create-instances"]
  stage: stage-compare
  rules:
    - if: '$CI_PIPELINE_SOURCE =~ /^(push|contrib)$/'
    - if: '$NIGHTLY'
  extends:
    - .default-job-settings
  allow_failure: true
  script:
    - echo "compare between graph and id_set"
    - python3 ./Tests/scripts/utils/compare_staging_graph.py --artifacts $ARTIFACTS_FOLDER_XSOAR --marketplace xsoar --output-path $ARTIFACTS_FOLDER_XSOAR/report -s "$SLACK_TOKEN"
    - python3 ./Tests/scripts/utils/compare_staging_graph.py --artifacts $ARTIFACTS_FOLDER_MPV2 --marketplace marketplacev2 --output-path $ARTIFACTS_FOLDER_MPV2/report -s "$SLACK_TOKEN"


