.sdk-nightly-schedule-rule:
  rules:
    - if: '$CI_PIPELINE_SOURCE =~ /^(schedule|trigger)$/ && $DEMISTO_SDK_NIGHTLY == "true"'

# used for jobs which we want to run in a pipeline even when previous jobs in the pipeline fail e.g. Slack notification
.sdk-nightly-schedule-rule-always:
  rules:
    - if: '$CI_PIPELINE_SOURCE =~ /^(schedule|trigger)$/ && $DEMISTO_SDK_NIGHTLY == "true"'
      when: always

.change-file-ids: &change-file-ids
  - python3 ./Tests/scripts/sdk_nightly_change_json_file_fields.py Packs/HelloWorld/Classifiers/classifier-mapper-incoming-HelloWorldTest.json name

.upload-entities-to-cortex-xsoar: &upload-entities-to-cortex-xsoar
  - section_start "Upload Entities to Cortex XSOAR" --collapsed
  - demisto-sdk upload -i Packs/HelloWorld/Integrations/ --insecure
  - demisto-sdk upload -i Packs/HelloWorld/TestPlaybooks/playbook-HelloWorld-Test.yml --insecure
  - demisto-sdk upload -i Packs/HelloWorld/IncidentFields/incidentfield-Hello_World_IncidentField_Test.json --insecure
  - demisto-sdk upload -i Packs/HelloWorld/IncidentTypes/incidenttype-Hello_World_Alert_Test.json --insecure
  - section_end "Upload Entities to Cortex XSOAR"


.export_xsiam_machine_constants: &export_xsiam_machine_constants
  - IFS=', ' read -r -a CLOUD_CHOSEN_MACHINE_ID_ARRAY <<< "${CLOUD_CHOSEN_MACHINE_IDS}"
  - |
    for CLOUD_CHOSEN_MACHINE_ID in "${CLOUD_CHOSEN_MACHINE_ID_ARRAY[@]}"; do
      export XSIAM_SERVER_CONFIG=$(jq -r ".[\"${CLOUD_CHOSEN_MACHINE_ID}\"]" < "$CLOUD_SERVERS_PATH")
      export DEMISTO_BASE_URL=$(echo "$XSIAM_SERVER_CONFIG" | jq -r ".[\"base_url\"]")
      export XSIAM_AUTH_ID=$(echo "$XSIAM_SERVER_CONFIG" | jq -r ".[\"x-xdr-auth-id\"]")
      export DEMISTO_API_KEY=$(jq -r ".[\"${CLOUD_CHOSEN_MACHINE_ID}\"]" < "cloud_api_keys.json")
      export XSIAM_TOKEN=$(jq -r ".[\"${CLOUD_CHOSEN_MACHINE_ID}\"]" < "cloud_api_tokens.json")
    done

.export_xsoar_ng_machine_constants: &export_xsoar_ng_machine_constants
  - IFS=', ' read -r -a CLOUD_CHOSEN_MACHINE_ID_ARRAY <<< "${CLOUD_CHOSEN_MACHINE_IDS}"
  - |
    for CLOUD_CHOSEN_MACHINE_ID in "${CLOUD_CHOSEN_MACHINE_ID_ARRAY[@]}"; do
      export XSOAR_NG_SERVER_CONFIG=$(jq -r ".[\"${CLOUD_CHOSEN_MACHINE_ID}\"]" < "$CLOUD_SERVERS_PATH")
      export DEMISTO_BASE_URL=$(echo "$XSOAR_NG_SERVER_CONFIG" | jq -r ".[\"base_url\"]")
      export XSIAM_AUTH_ID=$(echo "$XSOAR_NG_SERVER_CONFIG" | jq -r ".[\"x-xdr-auth-id\"]")
      export DEMISTO_API_KEY=$(jq -r ".[\"${CLOUD_CHOSEN_MACHINE_ID}\"]" < "cloud_api_keys.json")
    done

demisto-sdk-nightly:run-unittests-and-lint:
  extends:
    - .run-unittests-and-lint
    - .sdk-nightly-schedule-rule

demisto-sdk-nightly:run-validations:
  extends:
    - .run-validations
    - .sdk-nightly-schedule-rule

demisto_sdk_nightly:check_idset_dependent_commands:
  tags:
    - gke
  extends:
    - .default-job-settings
    - .sdk-nightly-schedule-rule
  stage: unittests-and-validations
  needs: []
  inherit:
    variables: true
  variables:
    IS_NIGHTLY: "false"
    KUBERNETES_CPU_REQUEST: 1000m
  script:
    - section_start "Secrets Detection" --collapsed
    - demisto-sdk secrets --post-commit --ignore-entropy
    - section_end "Secrets Detection"
    - section_start "Update Conf" --collapsed
    - cp ./Tests/conf.json $ARTIFACTS_FOLDER
    - section_end "Update Conf"
    - !reference [.create-id-set]
    - section_start "Activate GCloud Service Account" --collapsed
    - gcloud auth activate-service-account --key-file="$GCS_MARKET_KEY" >> "${ARTIFACTS_FOLDER}/logs/gcloud_auth.log" 2>&1
    - echo "successfully activated google cloud service account"
    - section_end "Activate GCloud Service Account"
    - section_start "Download private ID set" --collapsed
    - gsutil cp gs://${TEST_XDR_PREFIX}marketplace-dist/content/private_id_set.json $ARTIFACTS_FOLDER/unified_id_set.json
    - echo "successfully downloaded private ID set"
    - section_end "Download private ID set"
    - gcloud auth revoke >> $ARTIFACTS_FOLDER/logs/auths.log 2>&1
    - section_start "Merge public and private ID sets" --collapsed
    - demisto-sdk merge-id-sets -i1 $ARTIFACTS_FOLDER/id_set.json -i2 $ARTIFACTS_FOLDER/unified_id_set.json -o $ARTIFACTS_FOLDER/unified_id_set.json
    - echo "successfully merged public and private ID sets"
    - section_end "Merge public and private ID sets"
    - section_start "Common Server Documentation" --collapsed
    - ./Documentation/commonServerDocs.sh
    - section_end "Common Server Documentation"
    - section_start "Collect Test List and Content Packs" --collapsed
    - python3 ./Tests/scripts/collect_tests/collect_tests.py -n $IS_NIGHTLY
    - section_end "Collect Test List and Content Packs"
    - section_start "Calculate Packs Dependencies" --collapsed
    - demisto-sdk find-dependencies -idp $ARTIFACTS_FOLDER/id_set.json --output-path $ARTIFACTS_FOLDER/packs_dependencies.json --all-packs-dependencies
    - section_end "Calculate Packs Dependencies"
    - job-done

demisto-sdk-nightly:xsoar-prepare-testing-bucket:
  tags:
    - gke
  extends:
    - .default-job-settings
    - .sdk-nightly-schedule-rule
  variables:
    IFRA_ENV_TYPE: "Server Master"
    KUBERNETES_CPU_REQUEST: 2000m
    MARKETPLACE_VERSION: "xsoar"
    MARKETPLACE_BUCKET: "$GCS_MARKET_BUCKET"

  cache:
    policy: pull-push
  needs: []
  stage: prepare-testing-bucket
  script:
    - unset DEMISTO_SDK_GRAPH_FORCE_CREATE
    - !reference [.generic-prepare-testing-bucket, script]
    - job-done

demisto-sdk-nightly:mpv2-prepare-testing-bucket:
  tags:
    - gke
  extends:
    - .default-job-settings
    - .sdk-nightly-schedule-rule
  variables:
    ARTIFACTS_FOLDER: "${ARTIFACTS_FOLDER_MPV2}"
    MARKETPLACE_VERSION: "marketplacev2"
    MARKETPLACE_BUCKET: "$GCS_MARKET_V2_BUCKET"
    PRODUCT_NAME: "Cortex XSIAM"
    IFRA_ENV_TYPE: "Server Master"
    KUBERNETES_CPU_REQUEST: 2000m
  cache:
    policy: pull-push
  needs: []
  stage: prepare-testing-bucket
  script:
    - unset DEMISTO_SDK_GRAPH_FORCE_CREATE
    - !reference [.generic-prepare-testing-bucket, script]
    - job-done

demisto-sdk-nightly:xpanse-prepare-testing-bucket:
  tags:
    - gke
  extends:
    - .default-job-settings
    - .sdk-nightly-schedule-rule
  variables:
    ARTIFACTS_FOLDER: "${ARTIFACTS_FOLDER_XPANSE}"
    MARKETPLACE_VERSION: "xpanse"
    PRODUCT_NAME: "Cortex XPANSE"
    MARKETPLACE_BUCKET: "$GCS_MARKET_XPANSE_BUCKET"
    IFRA_ENV_TYPE: "Server Master"
    KUBERNETES_CPU_REQUEST: 2000m
  cache:
    policy: pull-push
  needs: []
  stage: prepare-testing-bucket
  script:
    - unset DEMISTO_SDK_GRAPH_FORCE_CREATE
    - !reference [.generic-prepare-testing-bucket, script]
    - job-done

demisto-sdk-nightly:xsoar-saas-prepare-testing-bucket:
  tags:
    - gke
  extends:
    - .default-job-settings
    - .sdk-nightly-schedule-rule
  variables:
    ARTIFACTS_FOLDER: "${ARTIFACTS_FOLDER_XSOAR}"
    MARKETPLACE_VERSION: "xsoar_saas"
    MARKETPLACE_BUCKET: "$GCS_MARKET_XSOAR_SAAS_BUCKET"
    IFRA_ENV_TYPE: "Server Master"
    KUBERNETES_CPU_REQUEST: 2000m
  cache:
    policy: pull-push
  needs: []
  stage: prepare-testing-bucket
  script:
    - unset DEMISTO_SDK_GRAPH_FORCE_CREATE
    - !reference [.generic-prepare-testing-bucket, script]
    - job-done

demisto-sdk-nightly:test-upload-flow:
  tags:
    - gke
  extends:
    - .default-job-settings
    - .sdk-nightly-schedule-rule
  variables:
    ALL_BUCKETS: "$GCS_MARKET_BUCKET_DEV,$GCS_MARKET_V2_BUCKET_DEV"
  needs: []
  stage: unittests-and-validations
  script:
    - !reference [test-upload-flow, script]

demisto-sdk-nightly:run-end-to-end-tests-xsoar:
  tags:
    - gce # can't run docker in docker on gke
  extends:
    - .default-job-settings
    - .sdk-nightly-schedule-rule-always
  services: # needed for running lint
    - name: docker.art.code.pan.run/build-tools--image-dind:20.10.12-dind
      alias: docker
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    INSTANCE_ROLE: "Server Master"
    PRODUCT_TYPE: "XSOAR"
    SERVER_TYPE: "XSOAR"
    ARTIFACTS_FOLDER_INSTANCE: "${ARTIFACTS_FOLDER}/instance_Server Master"
  needs: ["demisto-sdk-nightly:xsoar-prepare-testing-bucket"]
  stage: run-instances
  script:
    - !reference [.ssh-config-setup]
    - section_start "Create Artifacts instance directory" --collapsed
    - |
      echo "Creating Artifacts instance directory: ${ARTIFACTS_FOLDER_INSTANCE}"
      [ ! -d "${ARTIFACTS_FOLDER_INSTANCE}" ] && mkdir -p "${ARTIFACTS_FOLDER_INSTANCE}"
      echo "${INSTANCE_ROLE}" > "${ARTIFACTS_FOLDER_INSTANCE}/instance_role.txt"
    - section_end "Create Artifacts instance directory"
    - section_start "Wait Until Server Ready" --collapsed

    - |
      [ -n "${NIGHTLY}" ] && IS_NIGHTLY=true || IS_NIGHTLY=false
      python3 ./Tests/scripts/wait_until_server_ready.py  -n ${IS_NIGHTLY} --instance-role "${INSTANCE_ROLE}" || EXIT_CODE=$?
    - section_end "Wait Until Server Ready"

    - !reference [.download-demisto-conf]
    - !reference [.secrets-fetch]
    - |
      export DEMISTO_BASE_URL="https://$(cat $ARTIFACTS_FOLDER/env_results.json | jq -r '.[0].InstanceDNS')"
      echo "Server URL: $DEMISTO_BASE_URL"

    - section_start "Unlock HelloWorld Integration and Playbook" --collapsed
    - python3 Tests/sdknightly/unlock_entity.py integration "HelloWorld,HelloWorld Feed"
    - section_end "Unlock HelloWorld Integration and Playbook"

    - section_start "Create and Upload Entities to XSOAR Instance" --collapsed
    - python3 Tests/sdknightly/create_entities_for_nightly_sdk.py HelloWorld --artifacts-folder $ARTIFACTS_FOLDER
    - python3 Tests/sdknightly/create_entities_for_nightly_sdk.py AzureSentinel --artifacts-folder $ARTIFACTS_FOLDER
    - demisto-sdk upload -i Packs/AzureSentinel -z --insecure
    - *upload-entities-to-cortex-xsoar
    - section_end "Create and Upload Entities to XSOAR Instance"

    - section_start "Download Entities from XSOAR Instance" --collapsed
    - demisto-sdk download -lf --insecure
    - demisto-sdk download -o Packs/HelloWorld/ -i HelloWorld --insecure -f
    - demisto-sdk download -o Packs/HelloWorld/ -i HelloWorld-Test --insecure -f
    - section_end "Download Entities from XSOAR Instance"

    - section_start "Install Packs and run test-content" --collapsed
    - demisto-sdk upload -i Packs/Whois --insecure -z
    - cp -f "${ARTIFACTS_FOLDER}/conf.json" Tests/conf.json
    - !reference [.run_tests]
    - section_end "Install Packs and run test-content"

    - section_start "Destroy instances"
    - python3 ./Tests/scripts/destroy_instances.py --artifacts-dir $ARTIFACTS_FOLDER --env-file $ARTIFACTS_FOLDER/env_results.json --instance-role "$INSTANCE_ROLE"
    - destroy_instances_exit_code=$?
    - |
      if [ "${destroy_instances_exit_code}" -ne 0 ]; then
        echo "Failed to destroy instances, exit code: ${destroy_instances_exit_code}"
      fi
    - section_end "Destroy instances"
    - job-done

demisto-sdk-nightly:run-end-to-end-tests-mpv2:
  tags:
    - gce
  extends:
    - .default-job-settings
    - .sdk-nightly-schedule-rule-always
  services: # needed for running e2e tests for docker
    - name: docker.art.code.pan.run/build-tools--image-dind:20.10.12-dind
      alias: docker
  variables:
      CLOUD_MACHINES_TYPE: "build"
      CLOUD_MACHINES_COUNT: 1
      INSTANCE_ROLE: "XSIAM"
      GCS_QUEUE_FILE: "queue-ga"
      GCS_LOCKS_PATH: "content-locks/locks-xsiam-ga"
      CLOUD_SERVERS_FILE: "xsiam_servers_path"
      XSIAM_SERVERS_PATH: "./xsiam_servers.json"
      CLOUD_API_KEYS: $XSIAM_API_KEYS
      CLOUD_API_TOKENS: $XSIAM_TOKENS
      ARTIFACTS_FOLDER: "${ARTIFACTS_FOLDER_MPV2}"
      GCS_MARKET_BUCKET: "${GCS_MARKET_V2_BUCKET}"
      ENV_RESULTS_PATH: "${ARTIFACTS_FOLDER_MPV2}/env_results.json"
      GCS_SOURCE_BUCKET: "$GCS_PRODUCTION_V2_BUCKET"
      GCS_MACHINES_BUCKET: "marketplace-v2-dist-dev/upload-flow/builds-xsiam"
      SERVER_TYPE: "XSIAM"
      MARKETPLACE_NAME: "marketplacev2"
      NON_REMOVABLE_PACKS: "Base"
      EXTRACT_PRIVATE_TESTDATA: "true"
  needs: ["demisto-sdk-nightly:mpv2-prepare-testing-bucket"]
  stage: run-instances
  script:
    - EXIT_CODE=0
    - echo -e "\nSemperisDSP" >> "$ARTIFACTS_FOLDER/content_packs_to_install.txt"
    - echo "SemperisDSP/ModelingRules/SemperisDSP" >> "$ARTIFACTS_FOLDER/modeling_rules_to_test.txt"
    - cat "$ARTIFACTS_FOLDER/modeling_rules_to_test.txt"

    - !reference [.download-demisto-conf]
    - !reference [.secrets-fetch]
    - !reference [.lock-machine]

    - CLOUD_SERVERS_PATH=$(cat $CLOUD_SERVERS_FILE)
    - echo ${CLOUD_API_KEYS} > "cloud_api_keys.json"
    - echo "${CLOUD_API_TOKENS}" > "cloud_api_tokens.json"

    - !reference [.export_xsiam_machine_constants]
    - echo "Server URL $DEMISTO_BASE_URL"
    - echo "XSIAM_AUTH_ID $XSIAM_AUTH_ID"
    - echo "Checking infra."

    - section_start "Copy env results to artifacts folder" --collapsed
    - |
      # workaround for the hard-coded value in the sdk
      cp "${ARTIFACTS_FOLDER}/filter_file.txt" "./artifacts/filter_file.txt"
    - section_end "Copy env results to artifacts folder"

    - section_start "Test Modeling Rules" --collapsed
    - demisto-sdk upload -z -x -i Packs/SemperisDSP --insecure
    - ./Tests/scripts/test_modeling_rules.sh || EXIT_CODE=$?
    - section_end "Test Modeling Rules"

    - section_start "Create Entities and Upload" --collapsed
    - python3 Tests/sdknightly/create_entities_for_nightly_sdk.py HelloWorld --artifacts-folder $ARTIFACTS_FOLDER
    - demisto-sdk upload -i Packs/HelloWorld --insecure -z -x
    - section_end "Create Entities and Upload"

    - section_start "Download Entities" --collapsed
    - demisto-sdk download -lf --insecure
    - demisto-sdk download -o Packs/HelloWorld/ -i CommonServerUserPowerShell --insecure -f
    - section_end "Download Entities"

    - section_start "Install Packs and run test-content" --collapsed
    - cp -f "${ARTIFACTS_FOLDER}/conf.json" Tests/conf.json
    - demisto-sdk upload -i Packs/Whois --insecure -z
    - !reference [.run_tests]
    - section_end "Install Packs and run test-content"

    - !reference [.cloud-machine-information]
    - exit $EXIT_CODE

  after_script:
    - source .gitlab/helper_functions.sh
    - !reference [.unlock-machine]

demisto-sdk-nightly:run-end-to-end-tests-xsoar-ng:
  tags:
    - gce
  extends:
    - .default-job-settings
    - .sdk-nightly-schedule-rule-always
  services: # needed for running e2e tests for docker
    - name: docker.art.code.pan.run/build-tools--image-dind:20.10.12-dind
      alias: docker
  variables:
    CLOUD_MACHINES_TYPE: "build"
    CLOUD_MACHINES_COUNT: 1
    INSTANCE_ROLE: "XSOAR SAAS"
    SERVER_TYPE: "XSOAR SAAS"
    GCS_QUEUE_FILE: "queue-ga"
    GCS_LOCKS_PATH: "content-locks/locks-xsoar-ng"
    CLOUD_SERVERS_FILE: "xsoar_ng_servers_path"
    CLOUD_API_KEYS: $XSOAR_NG_API_KEYS
    GCS_SOURCE_BUCKET: "${GCS_PRODUCTION_XSOAR_SAAS_BUCKET}"
    ARTIFACTS_FOLDER: "${ARTIFACTS_FOLDER_XSOAR}"
    ARTIFACTS_FOLDER_INSTANCE: "${ARTIFACTS_FOLDER_XSOAR}/instance_saas"
    ENV_RESULTS_PATH: "${ARTIFACTS_FOLDER_XSOAR}/env_results.json"
    GCS_MACHINES_BUCKET: "${TEST_XDR_PREFIX}marketplace-saas-dist-dev/upload-flow/builds-xsoar-ng"
    MARKETPLACE_NAME: "xsoar_saas"
    NON_REMOVABLE_PACKS: "Base"
  needs: ["demisto-sdk-nightly:xsoar-saas-prepare-testing-bucket"]
  stage: run-instances
  script:
    - EXIT_CODE=0
    - !reference [.download-demisto-conf]
    - !reference [.secrets-fetch]
    - !reference [.lock-machine]

    - CLOUD_SERVERS_PATH=$(cat $CLOUD_SERVERS_FILE)
    - echo ${CLOUD_API_KEYS} > "cloud_api_keys.json"

    - !reference [.uninstall-packs-and-reset-bucket-cloud]
    - !reference [.export_xsoar_ng_machine_constants]

    - echo "Checking infra."
    - echo "Server URL $DEMISTO_BASE_URL"

    - section_start "Copy env results to artifacts folder" --collapsed
    - |
      # workaround for the hard-coded value in the sdk
      cp "${ARTIFACTS_FOLDER}/filter_file.txt" "./artifacts/filter_file.txt"
    - section_end "Copy env results to artifacts folder"

    - section_start "Create and Upload Entities to XSOAR Instance" --collapsed
    - python3 Tests/sdknightly/create_entities_for_nightly_sdk.py HelloWorld --artifacts-folder $ARTIFACTS_FOLDER
    - python3 Tests/sdknightly/create_entities_for_nightly_sdk.py AzureSentinel --artifacts-folder $ARTIFACTS_FOLDER
    - demisto-sdk download -lf --insecure
    - demisto-sdk upload -i Packs/AzureSentinel --insecure -z
    - demisto-sdk upload -i Packs/HelloWorld/TestPlaybooks/playbook-HelloWorld-Test.yml --insecure
    - demisto-sdk upload -i Packs/HelloWorld/IncidentFields/incidentfield-Hello_World_IncidentField_Test.json --insecure
    - demisto-sdk upload -i Packs/HelloWorld/IncidentTypes/incidenttype-Hello_World_Alert_Test.json --insecure
    - section_end "Create and Upload Entities to XSOAR Instance"

    - section_start "Download Entities from XSOAR Instance" --collapsed
    - demisto-sdk download -lf --insecure
    - demisto-sdk download -o Packs/HelloWorld -i HelloWorld --insecure -f
    - demisto-sdk download -o Packs/HelloWorld/ -i CommonServerUserPowerShell --insecure -f
    - demisto-sdk download -o Packs/HelloWorld/ -i HelloWorld-Test --insecure -f
    - section_end "Download Entities from XSOAR Instance"

    # - section_start "Install Packs and run Test-Module" --collapsed
    # - cat "$ARTIFACTS_FOLDER/filter_file.txt" 
    # - ./Tests/scripts/install_content_and_test_integrations.sh || EXIT_CODE=$?
    # - cp -f "${ARTIFACTS_FOLDER}/conf.json" Tests/conf.json
    # - section_end "Install Packs and run Test-Module"

    - section_start "Install Packs and run test-content" --collapsed
    - cp -f "${ARTIFACTS_FOLDER}/conf.json" Tests/conf.json
    - demisto-sdk upload -i Packs/Whois --insecure -z
    - !reference [.run_tests]
    - section_end "Install Packs and run test-content"

    - !reference [.cloud-machine-information]
    - job-done
    - exit $EXIT_CODE

  after_script:
    - source .gitlab/helper_functions.sh
    - !reference [.unlock-machine]

demisto-sdk-nightly:fan-in:
  tags:
    - gke
  stage: fan-in
  extends:
    - .sdk-nightly-schedule-rule-always
  script:
    - echo "fan in"

demisto-sdk-nightly:trigger-slack-notify:
  extends:
    - .trigger-slack-notification
    - .sdk-nightly-schedule-rule-always
  variables:  # Passes the environment variable from the parent pipeline to the child which can be useful for cases when triggering pipeline with alternate env variable value passed in the API call.
    PIPELINE_TO_QUERY: $CI_PIPELINE_ID
    WORKFLOW: "Demisto SDK Nightly"
    JOB_NAME: "demisto-sdk-nightly:fan-in"
    SLACK_CHANNEL: $SLACK_CHANNEL
    SLACK_JOB: "true"
    SLACK_ALLOW_FAILURE: 'false'
    CI_PROJECT_ID: $CI_PROJECT_ID
    CI_SERVER_URL: $CI_SERVER_URL
    JIRA_SERVER_URL: $JIRA_SERVER_URL
    JIRA_VERIFY_SSL: $JIRA_VERIFY_SSL
    JIRA_API_KEY: $JIRA_API_KEY
    JIRA_PROJECT_ID: $JIRA_PROJECT_ID
    JIRA_ISSUE_UNRESOLVED_TRANSITION_NAME: $JIRA_ISSUE_UNRESOLVED_TRANSITION_NAME
