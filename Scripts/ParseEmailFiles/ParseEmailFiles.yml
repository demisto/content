commonfields:
  id: ParseEmailFiles
  version: -1
name: ParseEmailFiles
script: ''
type: python
tags:
- email
- phishing
- enhancement
- file
comment: Parse an email from an eml or msg file and populate all relevant context
  data to investigate the email. Also extracts inner attachments and returns them
  to the war room. The incident labels themselves are preserved and not modified -
  only the "Label/x" context items that originated from the labels, and the best practice
  is to rely on these for the remainder of the playbook.
enabled: true
args:
- name: entryid
  required: true
  default: true
  description: Entry ID with the Email as a file in msg or eml format
- name: parse_only_headers
  auto: PREDEFINED
  predefined:
  - "true"
  - "false"
  description: Will parse only the headers and return headers table
  defaultValue: "false"
- name: max_depth
  description: How many levels deep we should parse the attached emails (e.g. email contains an emails contains an email). Default depth level is 3. Minimum level is 1, if set to 1 the script will parse only the first level email
  defaultValue: "3"
outputs:
- contextPath: Email.To
  description: This shows to whom the message was addressed, but may not contain the
    recipient's address.
  type: string
- contextPath: Email.CC
  description: Email 'cc' addresses
  type: string
- contextPath: Email.From
  description: This displays who the message is from, however, this can be easily
    forged and can be the least reliable.
  type: string
- contextPath: Email.Subject
  description: Email subject
  type: string
- contextPath: Email.HTML
  description: Email 'html' body if exists
  type: string
- contextPath: Email.Text
  description: Email 'text' body if exists
  type: string
- contextPath: Email.Depth
  description: The depth of the email. Depth=0 for the first level email. If email1 contains email2 contains email3. Then email1 depth is 0, email2 depth is 1, email3 depth is 2
  type: number
- contextPath: Email.Headers
  description: Deprecated - use Email.HeadersMap output instead. The full email headers
    as a single string
  type: string
- contextPath: Email.HeadersMap
  description: The full email headers json
  type: Unknown
- contextPath: Email.HeadersMap.From
  description: This displays who the message is from, however, this can be easily forged and can be the least reliable.
  type: Unknown
- contextPath: Email.HeadersMap.To
  description: This shows to whom the message was addressed, but may not contain the recipient's address.
  type: Unknown
- contextPath: Email.HeadersMap.Subject
  description: Email subject
  type: String
- contextPath: Email.HeadersMap.Date
  description: The date and time the email message was composed
  type: Unknown
- contextPath: Email.HeadersMap.CC
  description: Email 'cc' addresses
  type: Unknown
- contextPath: Email.HeadersMap.Reply-To
  description: The email address for return mail
  type: String
- contextPath: Email.HeadersMap.Received
  description: List of all the servers/computers through which the message traveled
  type: String
- contextPath: Email.HeadersMap.Message-ID
  description: A unique string assigned by the mail system when the message is first created. These can easily be forged. (e.g. 5c530c1b.1c69fb81.bd826.0eff@mx.google.com)
  type: String
- contextPath: Email.Attachments
  description: The list of attachment names in the email
  type: string
- contextPath: Email.Format
  description: The format of the email if available
  type: string
scripttarget: 0
runonce: false
runas: DBotWeakRole
releaseNotes: "-"
tests:
- ParseEmailFiles-test
