commonfields:
  id: ExtractHash
  version: -1
name: ExtractHash
script: |-
  var text = args.text;
  if (typeof text !== 'string') {
      text = JSON.stringify(args.text).replace(/\\n/g,' '); // need to replace \n
  }
  var whitelist = getCSVListAsArray('Indicators Whitelist');
  var matches = [], found;
  var regMD5 = /\b[a-fA-F\d]{32}\b/gm;
  while (found = regMD5.exec(text)) {
      if (whitelist.indexOf(found[0]) < 0) {
          matches.push(found[0]);
      }
  }
  var regSHA1 = /\b[a-fA-F\d]{40}\b/gm;
  while (found = regSHA1.exec(text)) {
      if (whitelist.indexOf(found[0]) < 0) {
          matches.push(found[0]);
      }
  }
  var regSHA256 = /\b[a-fA-F\d]{64}\b/gm;
  while (found = regSHA256.exec(text)) {
      if (whitelist.indexOf(found[0]) < 0) {
          matches.push(found[0]);
      }
  }
  var ec = {File: []};
  var md = '### Extract hash\n';
  for (var i=0; i<matches.length; i++) {
      var f = {};
      var hashType = matches[i].length === 32 ? 'MD5' : matches[i].length === 40 ? 'SHA1' : 'SHA256';
      f[hashType] = matches[i];
      ec.File.push(f);
      md += '- ' + matches[i] + '\n';
  }
  return {Type: entryTypes.note, Contents: ec.File, ContentsFormat: formats.json, HumanReadable: md, EntryContext: ec};
type: javascript
tags:
- Utility
comment: Extract md5, sha1, sha256 from the given text and place them both as output
  and in the context of a playbook
system: true
enabled: true
args:
- name: text
  required: true
  default: true
  description: The text to extract hashes from. If object will convert to JSON.
outputs:
- contextPath: File.MD5
  description: Extracted MD5
- contextPath: File.SHA1
  description: Extracted SHA1
- contextPath: File.SHA256
  description: Extracted SHA256
scripttarget: 0
