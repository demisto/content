commonfields:
  id: UnEscapeURLs
  version: -1
name: UnEscapeURLs
script: |-
  function format_url(input) {
      // Check if it is a Microsoft ATP Safe Link
      var atp_link_re = /(https:\/\/\w*|\w*)\.safelinks\.protection\.outlook\.com\/\?url=/;
      if (atp_link_re.test(input)) {
          var index_of_param_section = 1;
          var url_as_parts = input.split("?");
          var url_params_section = null;
          if (index_of_param_section < url_as_parts.length) {
              url_params_section = url_as_parts[index_of_param_section];
          }
          var url_params = null;
          if (url_params_section !== null) {
              url_params = url_params_section.split("&");
          }
          var encoded_url = null;
          if (url_params !== null) {
              for (i = 0; i < url_params.length; i++) {
                  param_name = url_params[i].split("=");
                  if (param_name[0] == "url") encoded_url = param_name[1];
              }
          }
          if (encoded_url === null) {
              error_msg = "Could not decode ATP Safe Link. Returning original URL.";
              logInfo(error_msg);
              return input;
          }
          decoded_url = decodeURIComponent(encoded_url);
          return decoded_url;
      }
      // Check if it is a Proofpoint Protected URL
      var PROOFPOINT_PREFIXES = ['https://urldefense.proofpoint.com/v1/url?u=', 'https://urldefense.proofpoint.com/v2/url?u='];
      var v = 0;
      if (input.indexOf(PROOFPOINT_PREFIXES[0]) === 0) {
          v = 1;
      } else if (input.indexOf(PROOFPOINT_PREFIXES[1]) === 0) {
          v = 2;
      }
      // Not Proofpoint so just un-escape
      if (v === 0) {
          var url = input.replace(/\[\.\]/g, '.').replace(/hxxp/i, 'http').replace(/&amp;/g, '&');
          // Normalize the URL with http prefix
          if (url.search(/http/i) !== 0 && url.search(/ftp/i) !== 0) {
              return 'http://' + url;
          }
          return url;
      }
      // If from Proofpoint then no need to un-escape or normalize
      var re = /&.*$/;
      var reg = /%\d{2}/g;
      var clean = input.substr(PROOFPOINT_PREFIXES[v - 1].length).replace(/-/g, '%').replace(/_/g, '/').replace('%3A//', '://').replace(re, '').replace('%3F', '?').replace('%3D', '=').replace(reg, '@');
      try {
          clean = decodeURI(clean);
      } catch (e) {
        // Ignore if can't decodeURI
      }

      return clean;
  }

  function format_url_list(url_list) {
      var len = url_list.length;
      var formatted_urls = new Array(len);
      url_list.forEach(function(the_url, index) {
          formatted_urls[index] = format_url(the_url.trim());
      });
      return formatted_urls;
  }

  var urls;
  // It is assumed that args.input is a string
  var unformatted_urls = argToList(args.input);
  urls = format_url_list(unformatted_urls);
  return urls;
type: javascript
tags:
- indicator-format
comment: |-
  Extract URLs redirected by security tools like Proofpoint.
  Changes https://urldefense.proofpoint.com/v2/url?u=https-3A__example.com_something.html -> https://example.com/something.html
  Also, un-escape URLs that are escaped for safety with formats like hxxps://www[.]demisto[.]com
enabled: true
args:
- name: input
  description: The URL(s) to process
  isArray: true
scripttarget: 0
runonce: false
runas: DBotWeakRole
tests:
  - UnEscapeURL-Test
