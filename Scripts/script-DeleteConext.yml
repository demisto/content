commonfields:
  id: DeleteContext
  version: -1
name: DeleteContext
script: |
  function errorEntry(text) {
      return  {
          ContentsFormat: formats.text,
          Type: entryTypes.error,
          Contents: text
      };
  }

  var fieldsToDelete;
  var shouldDeleteAll = (args.all === 'yes');
  if(!shouldDeleteAll && !args.key) {
      return {Contents: 'You must specify key or all=yes',
                      ContentsFormat: formats.text,
                      Type: entryTypes.error};
  }
  if(shouldDeleteAll) {
      var keysToKeep = (args.keysToKeep) ? args.keysToKeep.split(',') : [];
      fieldsToDelete = Object.keys(invContext);

      // delete each field in context
      var errorsStr = "";
      for (var i = 0; i < fieldsToDelete.length; i++) {
          if (keysToKeep.indexOf(fieldsToDelete[i]) == -1) {
              var result = executeCommand('delContext', { key: fieldsToDelete[i], id: args.id });
              if(!result || result.type === entryTypes.error) {
                  errorsStr = errorsStr + "\n" + result.Contents;
              }
          }
      }
      if (errorsStr) {
          return "Context cleared with the folloing errors:" + errorsStr;
      } else {
          return "Context cleared";
      }
  } else if (args.index) {
      // delete key in a specific index
      var index = parseInt(args.index);
      if (isNaN(index)) {
          return errorEntry("Invalid index " + args.index)
      }
      var contextVal = invContext[args.key];
      if (!contextVal) {
          return "Key [" + args.key + "] was not found.";
      }
      if (!Array.isArray(contextVal)) {
          contextVal = [contextVal];
      }

      if (index < 0 || index >= contextVal.length) {
          return errorEntry("Index out of range " + args.index)
      }

      // splice is not supported currently
      var newArr = [];
      for (var i = 0; i < contextVal.length; i++) {
          if (i !== index) {
              newArr.push(contextVal[i])
          }
      }

      if (newArr.length === 0) {
          executeCommand('delContext', { key: args.key });
      } else {
          setContext(args.key, newArr);
      }

      return "Successfully deleted index " + index + " from key " + args.key;
  } else {
      return executeCommand('delContext', { key: args.key });
  }
type: javascript
tags:
- Utility
comment: Delete field from context
enabled: true
args:
- name: key
  default: true
  description: The key to delete from the context
- name: all
  auto: PREDEFINED
  predefined:
  - "yes"
  - "no"
  description: if you choose yes - all context will be deleted
- name: keysToKeep
  description: Context keys (top-level keys) to keep when deleting all context. Use
    comma to specify multiple values
- name: index
  description: index to delete in case 'key' argument was specified
scripttarget: 0
runonce: false
releaseNotes: Added the ability to delete speficif index in a key (_index_ argument).