commonfields:
  id: ExtractURL
  version: -1
name: ExtractURL
script: |-
  var checkRegex = function(reg,str){
      if(reg.indexOf('~') === 0){
          reg = reg.substring(1);
          return str.match(reg);
      }

      return false;
  }

  var text = args.text;
  if (typeof text !== 'string') {
      text = JSON.stringify(args.text).replace(/\\n/g,' '); // need to replace \n
  }
  var matches = {}, found;
  var reg = /(?:(?:https?|ftp):\/\/|www\.|ftp\.)(?:\([-A-Z0-9+&@#\/%=~_|$?!:,.]*\)|[-A-Z0-9+&@#\/%=~_|$?!:,.])*(?:\([-A-Z0-9+&@#\/%=~_|$?!:,.]*\)|[A-Z0-9+&@#\/%=~_|$])/gmi;
  var filtered = ['http://schemas.microsoft.com/office/2004/12/omml', 'http://www.w3.org/TR/REC-html40'];
  var whitelist = getCSVListAsArray('Indicators Whitelist');
  while (found = reg.exec(text)) {
      matches[found[0]] = true;
      for (var i = 0 ; i < whitelist.length; i++) {
          if (whitelist[i] === found[0]) {
              delete matches[found[0]];
              break;
          }else if(checkRegex(whitelist[i],found[0])){
                  delete matches[found[0]];
                  break;
          }
      }
  }
  var uniqueMatches = Object.keys(matches);
  var ec = {URL: []};
  var md = '### Extract URL\n';
  for (var i=0; i < uniqueMatches.length; i++) {
      ec.URL.push({Data: uniqueMatches[i]});
      md += '- ' + uniqueMatches[i] + '\n';
  }
  return {Type: entryTypes.note, Contents: ec.URL, ContentsFormat: formats.json, HumanReadable: md, EntryContext: ec};
type: javascript
tags:
- Utility
comment: Extract URLs from the given text and place them both as output and in the
  context of a playbook. If given an object, will convert to JSON.
enabled: true
args:
- name: text
  required: true
  default: true
  description: The text to extract URLs from. If object will convert to JSON.
outputs:
- contextPath: URL.Data
  description: Extracted URLs
scripttarget: 0
