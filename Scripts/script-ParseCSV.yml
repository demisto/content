commonfields:
  id: ParseCSV
  version: -1
name: ParseCSV
script: |
  import re
  import csv
  import socket

  def is_valid_ipv4_address(address):
      try:
          socket.inet_pton(socket.AF_INET, address)
      except AttributeError:  # no inet_pton here, sorry
          try:
              socket.inet_aton(address)
          except socket.error:
              return False
          return address.count('.') == 3
      except socket.error:  # not a valid address
          return False
      return True

  csvEntry = None

  iplist = []
  domainlist = []
  hashlist = []

  ipcount = 0
  domaincount = 0
  hashcount = 0

  dArgs = demisto.args()

  file = dArgs['file'] if 'file' in dArgs else None
  parseip = int(dArgs['ips']) if 'ips' in dArgs else -1
  parsedomain = int(dArgs['domains']) if 'domains' in dArgs else -1
  parsehash = int(dArgs['hashes']) if 'hashes' in dArgs else -1
  parseAll = True if dArgs['parseAll'] == 'yes' else False

  if parseip == -1 and parsedomain == -1 and parsehash == -1 and not parseAll:
      demisto.results( { "Type" : entryTypes["error"], "ContentsFormat" : formats["text"], "Contents" : 'Select a field to extract.' } )
      exit()

  # find the csv file entry by name
  entries = demisto.executeCommand('getEntries', {})
  for entry in entries:
      fn = demisto.get(entry, 'File')

      is_text = type(fn) in [unicode, str]
      is_correct_file = file.lower() == fn.lower()
      is_csv = fn.lower().endswith('.csv')

      if is_text and is_correct_file and is_csv:
          csvEntry = entry
          break

  if not csvEntry:
      demisto.results({
          "Type" : entryTypes["error"],
          "ContentsFormat" : formats["text"],
          "Contents" : 'No csv file found in the war room. Ensure the file was uploaded and the filename has ".csv" extension.'
      })
      exit(0)

  res = demisto.executeCommand('getFilePath', {'id': entry['ID']})
  filePath = res[0]['Contents']['path']
  if parseAll:
      all_csv = []
      with open(filePath, mode='r') as f:
          records = csv.DictReader(f)
          for row in records:
              all_csv.append(row)

          ec = { 'ParseCSV.ParsedCSV': all_csv }
          demisto.results({
              "Type" : entryTypes["note"],
              "ContentsFormat" : formats["json"],
              "ReadableContentsFormat" : formats["markdown"],
              "Contents" : all_csv,
              "EntryContext": ec,
              "HumanReadable": tableToMarkdown(file, all_csv)
          })

  if parseip == -1 and parsedomain == -1 and parsehash == -1:
      # stop the script if no need to parse ips,domains or hashes
      exit(0)

  with open(filePath, 'rU') as f:
      has_header = csv.Sniffer().has_header(f.read(1024))
      f.seek(0)

      csvdata = csv.reader(f)

      if has_header:
          next(csvdata)

      md = '### Parsed Data Table\n'+('IPs |' if 'ips' in dArgs else '') + ('Domains |' if 'domains' in dArgs else '') + ('Hashes |' if 'hashes' in dArgs else '') + '\n'
      md += ('- |' if 'ips' in dArgs else '') + ('- |' if 'domains' in dArgs else '') + ('- |' if 'hashes' in dArgs else '') + '\n'
      content = ''

      for row in csvdata:
          content += ','.join(row) + '\n'
          if parseip != -1:
              md += (row[parseip] + '|' if row[parseip] else ' |')
              is_ip = re.search( r'([0-9]{1,3}\.){3}[0-9]{1,3}', row[parseip] )
              is_valid = is_valid_ipv4_address(row[parseip])
              if is_ip and is_valid:
                  iplist.append(row[parseip])

          if parsedomain != -1:
              md += (row[parsedomain] + '|' if row[parsedomain] else ' |')
              has_dot = '.' in row[parsedomain]
              no_spaces = ' ' not in row[parsedomain]
              if has_dot and no_spaces:
                  domainlist.append(row[parsedomain])

          if parsehash != -1:
              md += (row[parsehash] + '|' if row[parsehash] else ' |')
              is_hash = re.search( r'[0-9A-Fa-f]{32,128}', row[parsehash] )
              if is_hash:
                  hashlist.append(row[parsehash])
          md += '\n'

  context = {}
  if iplist:
      old_iplist = list(demisto.get( demisto.context(), 'ips')) if demisto.get( demisto.context(), 'ips' ) else []
      iplist = list(set(iplist) - set(old_iplist))
      if len(iplist) > 0:
          context["IP"] = []
          for ip in iplist:
              context["IP"].append({"Address" : ip})

  if domainlist:
      old_domainlist = list(demisto.get( demisto.context(), 'domains')) if demisto.get( demisto.context(), 'domains' ) else []
      domainlist = list(set(domainlist) - set(old_domainlist))
      if len(domainlist) > 0:
          context["Domain"] = []
          for domain in domainlist:
              context["Domain"].append({"Name": domain})

  if hashlist:
      old_hashlist = list(demisto.get( demisto.context(), 'hashes')) if demisto.get( demisto.context(), 'hashes' ) else []
      hashlist = list(set(hashlist) - set(old_hashlist))
      if len(hashlist) > 0:
          context["File"] = []
          for hash in hashlist:
              if len(hash)==32: context["File"].append({"MD5" : hash})
              if len(hash)==64: context["File"].append({"SHA256" : hash})
              if len(hash)==40: context["File"].append({"SHA1" : hash})

  demisto.results( { "Type" : entryTypes["note"], "ContentsFormat" : formats["text"], "Contents" : content ,"HumanReadable" : md, "EntryContext": context })
type: python
tags:
- file
- csv
- Utility
comment: This script will parse a CSV file and place the unique IPs, Domains and Hashes
  into the context.
enabled: true
args:
- name: file
  required: true
  default: true
  description: The name of the file. The file must be uploaded to the War Room.
- name: ips
  description: The column number that contains IP Addresses. (First column is column
    0)
- name: domains
  description: The column number that contains domains. (First column is column 0)
- name: hashes
  description: The column number that contains file hashes. (First column is column
    0)
- name: parseAll
  auto: PREDEFINED
  predefined:
  - "yes"
  - "no"
  description: parses and converts all the rows in csv into json and puts into context.
  defaultValue: "yes"
outputs:
- contextPath: IP.Address
  description: IP address found in parsed file
- contextPath: Domain.Name
  description: Domain found in parsed file
- contextPath: File.MD5
  description: MD5 found in parsed file
- contextPath: File.SHA1
  description: SHA1 found in parsed file
- contextPath: File.SHA256
  description: SHA256 found in parsed file
- contextPath: ParseCSV.ParsedCSV
  description: Parsed csv in form of JSON array
scripttarget: 0
releaseNotes: "ParseCSV by default will parse the whole csv"