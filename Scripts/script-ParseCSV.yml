commonfields:
  id: ParseCSV
  version: -1
name: ParseCSV
script: |
  import re
  import csv
  import socket

  def is_valid_ipv4_address(address):
      try:
          socket.inet_pton(socket.AF_INET, address)
      except AttributeError:  # no inet_pton here, sorry
          try:
              socket.inet_aton(address)
          except socket.error:
              return False
          return address.count('.') == 3
      except socket.error:  # not a valid address
          return False
      return True

  csvEntry = None

  iplist = []
  domainlist = []
  hashlist = []

  ipcount = 0
  domaincount = 0
  hashcount = 0

  dArgs = demisto.args()

  file = dArgs['file'] if 'file' in dArgs else None
  parseip = int(dArgs['ips']) if 'ips' in dArgs else None
  parsedomain = int(dArgs['domains']) if 'domains' in dArgs else None
  parsehash = int(dArgs['hashes']) if 'hashes' in dArgs else None
  parseAll = demisto.args()['parseAll'] if 'parseAll' in dArgs else None

  if not parseip and not parsedomain and not parsehash and not parseAll:
      demisto.results( { "Type" : entryTypes["error"], "ContentsFormat" : formats["text"], "Contents" : 'Please select a field to extract.' } )
      exit()

  entries = demisto.executeCommand('getEntries', {})
  for entry in entries:
      fn = demisto.get(entry, 'File')

      is_text = type(fn) in [unicode, str]
      is_correct_file = file.lower() == fn.lower()
      is_csv = fn.lower().endswith('.csv')

      if is_text and is_correct_file and is_csv:
          csvEntry = entry
          break

  if csvEntry:
      res = demisto.executeCommand('getFilePath', {'id': entry['ID']})
      filePath = res[0]['Contents']['path']
      if parseAll:
          allCsv = []
          with open(filePath, mode='r') as f:
              records = csv.DictReader(f)
              for row in records:
                  allCsv.append(row)

              demisto.results({
                  "Type" : entryTypes["note"],
                  "ContentsFormat" : formats["json"],
                  "ReadableContentsFormat" : formats["markdown"],
                  "Contents" : allCsv,
                  "HumanReadable": tableToMarkdown(file, allCsv)
              })

      with open(filePath, 'rU') as f:
          has_header = csv.Sniffer().has_header(f.read(1024))
          f.seek(0)

          csvdata = csv.reader(f)

          if has_header:
              next(csvdata)

          for row in csvdata:
              if parseip is not None and parseip != '':
                  is_unique = row[parseip] not in iplist
                  is_ip = re.search( r'([0-9]{1,3}\.){3}[0-9]{1,3}', row[parseip] )
                  is_valid = is_valid_ipv4_address(row[parseip])

                  if is_unique and is_ip and is_valid:
                      iplist.append(row[parseip])

              if parsedomain is not None and parsedomain != '':
                  is_unique = row[parsedomain] not in domainlist
                  has_dot = '.' in row[parsedomain]
                  no_spaces = ' ' not in row[parsedomain]

                  if is_unique and has_dot and no_spaces:
                      domainlist.append(row[parsedomain])

              if parsehash is not None and parsehash != '':
                  is_unique = row[parsehash] not in hashlist
                  is_hash = re.search( r'[0-9A-Fa-f]{32,128}', row[parsehash] )

                  if is_unique and is_hash:
                      hashlist.append(row[parsehash])

      if iplist:
          old_iplist = list(demisto.get( demisto.context(), 'ips' )) if demisto.get( demisto.context(), 'ips' ) else []
          iplist = list(set(iplist) - set(old_iplist))
          ipcount = len(iplist)
          appendContext('ips', iplist)

      if domainlist:
          old_domainlist = list(demisto.get( demisto.context(), 'domains' )) if demisto.get( demisto.context(), 'domains' ) else []
          domainlist = list(set(domainlist) - set(old_domainlist))
          domaincount = len(domainlist)
          appendContext('domains', domainlist)

      if hashlist:
          old_hashlist = list(demisto.get( demisto.context(), 'hashes' )) if demisto.get( demisto.context(), 'hashes' ) else []
          hashlist = list(set(hashlist) - set(old_hashlist))
          hashcount = len(hashlist)
          appendContext('hashes', hashlist)

      if iplist or domainlist or hashlist:
          demisto.results('Parsed CSV: %s, %d IPs, %d Domains, %d Hashes added to the current context' % ( file, ipcount, domaincount, hashcount ))
  else:
      demisto.results( { "Type" : entryTypes["error"], "ContentsFormat" : formats["text"], "Contents" : 'No csv file found in the war room. Ensure the file was uploaded and the filename ends in ".csv".' } )
type: python
tags:
- file
- csv
- Utility
comment: This script will parse a CSV file and place the unique IPs, Domains and Hashes
  into the context.
args:
- name: file
  required: true
  default: true
  description: The name of the file. The file must be uploaded to the War Room.
- name: ips
  description: The column number that contains IP Addresses. (First column is column
    0)
- name: domains
  description: The column number that contains domains. (First column is column 0)
- name: hashes
  description: The column number that contains file hashes. (First column is column
    0)
- name: parseAll
  description: parses and converts all the rows in csv into json and puts into context.
scripttarget: 0
dependson: {}
timeout: 120ns
