commonfields:
  id: CBSearch
  version: -1
name: CBSearch
script: |-
  //Script to query carbon black servers:
  //type must be either 'processes' or 'binary'
  //can provide query & number of rows to return
  function formatresults(rows, columns) {
      var table = [];
      for (var index in rows) {
          var row = rows[index];
          if (typeof (row) === "object") {
              tablerow = {};
              for (var name in row) {
                  var value = row[name];
                  if (typeof (value) === "object") {
                      value = JSON.stringify(value);
                  }
                  var columnIndex = columns.indexOf(name);
                  var columnName;
                  if (columnIndex !== -1) {
                      columnName = columnIndex.toString() + ". " + name;
                  } else {
                      columnName = name;
                  }
                  tablerow[columnName] = value;
              }
              table.push(tablerow);
          }
      }
      return table;
  }
  var output = [];
  var searchType = args.type ? args.type : 'processes';
  if ((searchType !== 'processes') && (searchType !== 'binary')) {
      output.push({ContentsFormat: formats.text, Type: entryTypes.error, Contents: "Error! type must be 'processes' or 'binary"});
  } else {
      var res = [];
      var columns = [];
      if (searchType === 'processes') {
          columns = ["hostname", "username", "process_pid", "path", "process_md5", "start", "os_type", "parent_pid", "sensor_id"];
      } else {
          columns = ["md5", "observed_filename", "original_filename", "is_executable_image", "endpoint", "signed", "os_type"];
      }
      myArgs = {
        start: args.start ? args.start : '0',
        rows: args.rows ? args.rows : '20'
      };
      if(args.query)
          myArgs.query = args.query;
          if(searchType == 'binary')
              res = executeCommand('cb-' + searchType, myArgs);
          else
              res = executeCommand('cb-get-' + searchType, myArgs);
      var table = formatresults(res[0].Contents.results, columns);
      output.push({ContentsFormat: formats.table, Type: entryTypes.note, Contents: table});
  }
  return output;
type: javascript
tags:
- carbon-black
- endpoint
- enhancement
comment: Use the CBSearch script to search Carbon Black for process and binary information.
enabled: true
args:
- name: type
  description: 'The search type. Can be "processes" or "binary".
- name: query
  default: true
  description: The query to run, in Carbon Black syntax.
- name: rows
  description: Number of rows to return. If omitted, the default follows the default specified in the Carbon
    Black API documentation. The default is currently 10.
- name: start
  description: 'The row at which to start the response. Allows pagination through large response. If omitted, the default follows the default specified in the Carbon
    Black API documentation. The default is currently 0.'
scripttarget: 0
dependson:
  must: []
  should:
  - cb-get-processes
  - cb-binary
runonce: false
