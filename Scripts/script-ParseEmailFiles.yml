commonfields:
  id: ParseEmailFiles
  version: -1
name: ParseEmailFiles
script: |-
  from email import message_from_string
  from email.header import decode_header
  from base64 import b64decode
  import re

  # --- LICENSE -----------------------------------------------------------------
  #
  #    Copyright 2013 Matthew Walker
  #
  #    This program is free software: you can redistribute it and/or modify
  #    it under the terms of the GNU General Public License as published by
  #    the Free Software Foundation, either version 3 of the License, or
  #    (at your option) any later version.
  #
  #    This program is distributed in the hope that it will be useful,
  #    but WITHOUT ANY WARRANTY; without even the implied warranty of
  #    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  #    GNU General Public License for more details.
  #
  #    You should have received a copy of the GNU General Public License
  #    along with this program.  If not, see <http://www.gnu.org/licenses/>.
  import os
  import sys
  import glob
  import string
  import random
  import traceback
  import email.utils
  import olefile as OleFile
  from email.parser import HeaderParser
  from email.parser import Parser as EmailParser

  reload(sys)
  sys.setdefaultencoding('utf8')

  # This property information was sourced from
  # http://www.fileformat.info/format/outlookmsg/index.htm
  # on 2013-07-22.
  properties = {
      '001A': 'Message class',
      '0037': 'Subject',
      '003D': 'Subject prefix',
      '0040': 'Received by name',
      '0042': 'Sent repr name',
      '0044': 'Rcvd repr name',
      '004D': 'Org author name',
      '0050': 'Reply rcipnt names',
      '005A': 'Org sender name',
      '0064': 'Sent repr adrtype',
      '0065': 'Sent repr email',
      '0070': 'Topic',
      '0075': 'Rcvd by adrtype',
      '0076': 'Rcvd by email',
      '0077': 'Repr adrtype',
      '0078': 'Repr email',
      '007d': 'Message header',
      '0C1A': 'Sender name',
      '0C1E': 'Sender adr type',
      '0C1F': 'Sender email',
      '0E02': 'Display BCC',
      '0E03': 'Display CC',
      '0E04': 'Display To',
      '0E1D': 'Subject (normalized)',
      '0E28': 'Recvd account1 (uncertain)',
      '0E29': 'Recvd account2 (uncertain)',
      '1000': 'Message body',
      '1008': 'RTF sync body tag',
      '1035': 'Message ID (uncertain)',
      '1046': 'Sender email (uncertain)',
      '3001': 'Display name',
      '3002': 'Address type',
      '3003': 'Email address',
      '39FE': '7-bit email (uncertain)',
      '39FF': '7-bit display name',
      # Attachments (37xx)
      '3701': 'Attachment data',
      '3703': 'Attachment extension',
      '3704': 'Attachment short filename',
      '3707': 'Attachment long filename',
      '370E': 'Attachment mime tag',
      '3712': 'Attachment ID (uncertain)',
      # Address book (3Axx):
      '3A00': 'Account',
      '3A02': 'Callback phone no',
      '3A05': 'Generation',
      '3A06': 'Given name',
      '3A08': 'Business phone',
      '3A09': 'Home phone',
      '3A0A': 'Initials',
      '3A0B': 'Keyword',
      '3A0C': 'Language',
      '3A0D': 'Location',
      '3A11': 'Surname',
      '3A15': 'Postal address',
      '3A16': 'Company name',
      '3A17': 'Title',
      '3A18': 'Department',
      '3A19': 'Office location',
      '3A1A': 'Primary phone',
      '3A1B': 'Business phone 2',
      '3A1C': 'Mobile phone',
      '3A1D': 'Radio phone no',
      '3A1E': 'Car phone no',
      '3A1F': 'Other phone',
      '3A20': 'Transmit dispname',
      '3A21': 'Pager',
      '3A22': 'User certificate',
      '3A23': 'Primary Fax',
      '3A24': 'Business Fax',
      '3A25': 'Home Fax',
      '3A26': 'Country',
      '3A27': 'Locality',
      '3A28': 'State/Province',
      '3A29': 'Street address',
      '3A2A': 'Postal Code',
      '3A2B': 'Post Office Box',
      '3A2C': 'Telex',
      '3A2D': 'ISDN',
      '3A2E': 'Assistant phone',
      '3A2F': 'Home phone 2',
      '3A30': 'Assistant',
      '3A44': 'Middle name',
      '3A45': 'Dispname prefix',
      '3A46': 'Profession',
      '3A48': 'Spouse name',
      '3A4B': 'TTYTTD radio phone',
      '3A4C': 'FTP site',
      '3A4E': 'Manager name',
      '3A4F': 'Nickname',
      '3A51': 'Business homepage',
      '3A57': 'Company main phone',
      '3A58': 'Childrens names',
      '3A59': 'Home City',
      '3A5A': 'Home Country',
      '3A5B': 'Home Postal Code',
      '3A5C': 'Home State/Provnce',
      '3A5D': 'Home Street',
      '3A5F': 'Other adr City',
      '3A60': 'Other adr Country',
      '3A61': 'Other adr PostCode',
      '3A62': 'Other adr Province',
      '3A63': 'Other adr Street',
      '3A64': 'Other adr PO box',
      '3FF7': 'Server (uncertain)',
      '3FF8': 'Creator1 (uncertain)',
      '3FFA': 'Creator2 (uncertain)',
      '3FFC': 'To email (uncertain)',
      '403D': 'To adrtype (uncertain)',
      '403E': 'To email (uncertain)',
      '5FF6': 'To (uncertain)'}



  def windowsUnicode(string):
      if string is None:
          return None
      if sys.version_info[0] >= 3:  # Python 3
          return str(string, 'utf_16_le')
      else:  # Python 2
          return unicode(string, 'utf_16_le')

  def randomFileName():
      return 'UnknownFilename ' + ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(5)) + ".bin"

  class Attachment:
      def __init__(self, msg, dir_):
          # Get long filename
          self.longFilename = msg._getStringStream([dir_, '__substg1.0_3707'])
          # Get short filename
          self.shortFilename = msg._getStringStream([dir_, '__substg1.0_3704'])
          # Get attachment data
          self.data = msg._getStream([dir_, '__substg1.0_37010102'])
      def save(self):
          # Use long filename as first preference
          filename = self.longFilename
          # Otherwise use the short filename
          if filename is None:
              filename = self.shortFilename
          # Otherwise just make something up!
          if filename is None:
              filename = randomFileName()
          f = open(filename, 'wb')
          f.write(self.data)
          f.close()
          return filename
  class Message(OleFile.OleFileIO):
      def __init__(self, filename):
          OleFile.OleFileIO.__init__(self, filename)
      def _getStream(self, filename):
          if self.exists(filename):
              stream = self.openstream(filename)
              return stream.read()
          else:
              return None
      def _getStringStream(self, filename, prefer='unicode'):
          """Gets a string representation of the requested filename.
          Checks for both ASCII and Unicode representations and returns
          a value if possible.  If there are both ASCII and Unicode
          versions, then the parameter /prefer/ specifies which will be
          returned.
          """
          if isinstance(filename, list):
              # Join with slashes to make it easier to append the type
              filename = "/".join(filename)
          asciiVersion = self._getStream(filename + '001E')
          unicodeVersion = windowsUnicode(self._getStream(filename + '001F'))
          if asciiVersion is None:
              return unicodeVersion
          elif unicodeVersion is None:
              return asciiVersion
          else:
              if prefer == 'unicode':
                  return unicodeVersion
              else:
                  return asciiVersion
      @property
      def subject(self):
          return self._getStringStream('__substg1.0_0037')
      @property
      def header(self):
          try:
              return self._header
          except Exception:
              headerText = self._getStringStream('__substg1.0_007D')
              if headerText is not None:
                  self._header = EmailParser().parsestr(headerText)
              else:
                  self._header = None
              return self._header
      @property
      def date(self):
          # Get the message's header and extract the date
          if self.header is None:
              return None
          else:
              return self.header['date']
      @property
      def parsedDate(self):
          return email.utils.parsedate(self.date)
      @property
      def sender(self):
          try:
              return self._sender
          except Exception:
              # Check header first
              if self.header is not None:
                  headerResult = self.header["from"]
                  if headerResult is not None:
                      self._sender = headerResult
                      return headerResult
              # Extract from other fields
              text = self._getStringStream('__substg1.0_0C1A')
              email = self._getStringStream('__substg1.0_0C1F')
              result = None
              if text is None:
                  result = email
              else:
                  result = text
                  if email is not None:
                      result = result + " <" + email + ">"
              self._sender = result
              return result
      @property
      def to(self):
          try:
              return self._to
          except Exception:
              # Check header first
              if self.header is not None:
                  headerResult = self.header["to"]
                  if headerResult is not None:
                      self._to = headerResult
                      return headerResult
              # Extract from other fields
              # TODO: This should really extract data from the recip folders,
              # but how do you know which is to/cc/bcc?
              display = self._getStringStream('__substg1.0_0E04')
              self._to = display
              return display
      @property
      def cc(self):
          try:
              return self._cc
          except Exception:
              # Check header first
              if self.header is not None:
                  headerResult = self.header["cc"]
                  if headerResult is not None:
                      self._cc = headerResult
                      return headerResult
              # Extract from other fields
              # TODO: This should really extract data from the recip folders,
              # but how do you know which is to/cc/bcc?
              display = self._getStringStream('__substg1.0_0E03')
              self._cc = display
              return display
      @property
      def body(self):
          # Get the message body
          return self._getStringStream('__substg1.0_1000')
      @property
      def attachments(self):
          try:
              return self._attachments
          except Exception:
              # Get the attachments
              attachmentDirs = []
              for dir_ in self.listdir():
                  if dir_[0].startswith('__attach') and dir_[0] not in attachmentDirs:
                      attachmentDirs.append(dir_[0])
              self._attachments = []
              for attachmentDir in attachmentDirs:
                  self._attachments.append(Attachment(self, attachmentDir))
              return self._attachments
      def save(self, raw=False):
          if useFileName:
              # strip out the extension
              dirName = filename.split('/').pop().split('.')[0]
          else:
              # Create a directory based on the date and subject of the message
              d = self.parsedDate
              if d is not None:
                  dirName = '{0:02d}-{1:02d}-{2:02d}_{3:02d}{4:02d}'.format(*d)
              else:
                  dirName = "UnknownDate"
              if self.subject is None:
                  subject = "[No subject]"
              else:
                  subject = "".join(i for i in self.subject if i not in r'\/:*?"<>|')
              dirName = dirName + " " + subject
          def addNumToDir(dirName):
              # Attempt to create the directory with a '(n)' appended
              for i in range(2, 100):
                  try:
                      newDirName = dirName + " (" + str(i) + ")"
                      os.makedirs(newDirName)
                      return dirName
                  except Exception:
                      pass
              return None
          try:
              os.makedirs(dirName)
          except Exception:
              newDirName = addNumToDir(dirName)
              if newDirName is not None:
                  dirName = newDirName
              else:
                  raise Exception(
                      "Failed to create directory '%s'. Does it already exist?" %
                      dirName
                      )
          oldDir = os.getcwd()
          try:
              os.chdir(dirName)
              # Save the message body
              fext = 'json' if toJson else 'text'
              f = open("message." + fext, "w")
              # From, to , cc, subject, date
              def xstr(s):
                  return '' if s is None else str(s)
              attachmentNames = []
              # Save the attachments
              for attachment in self.attachments:
                  attachmentNames.append(attachment.save())
              if toJson:
                  import json
                  from imapclient.imapclient import decode_utf7
                  emailObj = {'from': xstr(self.sender),
                              'to': xstr(self.to),
                              'cc': xstr(self.cc),
                              'subject': xstr(self.subject),
                              'date': xstr(self.date),
                              'attachments': attachmentNames,
                              'body': decode_utf7(self.body)}
                  f.write(json.dumps(emailObj, ensure_ascii=True))
              else:
                  f.write("From: " + xstr(self.sender) + "\n")
                  f.write("To: " + xstr(self.to) + "\n")
                  f.write("CC: " + xstr(self.cc) + "\n")
                  f.write("Subject: " + xstr(self.subject) + "\n")
                  f.write("Date: " + xstr(self.date) + "\n")
                  f.write("-----------------\n\n")
                  f.write(self.body)
              f.close()
          except Exception:
              self.saveRaw()
              raise
          finally:
              # Return to previous directory
              os.chdir(oldDir)
      def saveRaw(self):
          # Create a 'raw' folder
          oldDir = os.getcwd()
          try:
              rawDir = "raw"
              os.makedirs(rawDir)
              os.chdir(rawDir)
              sysRawDir = os.getcwd()
              # Loop through all the directories
              for dir_ in self.listdir():
                  sysdir = "/".join(dir_)
                  code = dir_[-1][-8:-4]
                  global properties
                  if code in properties:
                      sysdir = sysdir + " - " + properties[code]
                  os.makedirs(sysdir)
                  os.chdir(sysdir)
                  # Generate appropriate filename
                  if dir_[-1].endswith("001E"):
                      filename = "contents.txt"
                  else:
                      filename = "contents"
                  # Save contents of directory
                  f = open(filename, 'wb')
                  f.write(self._getStream(dir_))
                  f.close()
                  # Return to base directory
                  os.chdir(sysRawDir)
          finally:
              os.chdir(oldDir)
      def dump(self):
          # Prints out a summary of the message
          print('Message')
          print('Subject:', self.subject)
          print('Date:', self.date)
          print('Body:')
          print(self.body)
      def debug(self):
          for dir_ in self.listdir():
              if dir_[-1].endswith('001E'):  # FIXME: Check for unicode 001F too
                  print("Directory: " + str(dir))
                  print("Contents: " + self._getStream(dir))
  ########################################################################################################################
  REGEX_EXTRACT_EMAIL = '<([^>]*)>'
  ENCODINGS_TYPES = set(['utf-8', 'iso8859-1'])

  def extractAddress(s):
      if type(s) not in [str, unicode]:
          return s
      res = re.findall(REGEX_EXTRACT_EMAIL, s)
      if res:
          return ', '.join(res)
      else:
          return s


  def dataToMD(emailData):
      md = "### Results:\n"

      md += "* {0}:\t{1}\n".format('From', emailData['From'])
      md += "* {0}:\t{1}\n".format('To',emailData['To'])
      md += "* {0}:\t{1}\n".format('CC', emailData['CC'])
      md += u"* {0}:\t{1}\n".format('Subject', emailData['Subject'])
      if emailData['Text']:
          md += u"* {0}:\t{1}\n".format('Body/Text', emailData['Text'])
      if emailData['HTML']:
          md += u"* {0}:\t{1}\n".format('Body/HTML', emailData['HTML'])
      md += "* {0}:\t{1}\n".format('Attachments', emailData['Attachments'])
      md += "* {0}:\t{1}\n".format('Headers', emailData['Headers'])
      return md


  def handleMsg(filePath):
      r = []
      attachments = []
      msg = Message(filePath)
      if not msg:
          r += [{"Type": entryTypes["error"], "ContentsFormat": formats["text"], "Contents": "Could not parse msg file!"}]
      headers = []
      if msg.header:
          for h in msg.header.walk():
              headers.append(str(h))
      for a in msg.attachments:
          fname = randomFileName()
          if a.longFilename:
              fname = a.longFilename
          elif a.shortFilename:
              fname = a.shortFilename
          if fname and a.data:
              fname = getUtfString(fname, 'fname')
              attachments.append(fname)
              r.append(fileResult(fname, a.data))

      body = getUtfString(msg.body, 'Body')

      emailData = {
          'To': extractAddress(msg.to),
          'CC': extractAddress(msg.cc),
          'From': extractAddress(msg.sender),
          'Subject': getUtfString(msg.subject, 'Subject'),
          'HTML': body,
          'Text': body,
          'Headers': '\n'.join(headers),
          'Attachments': '' if not attachments else ','.join(attachments)
      }

      return r, [{'ContentsFormat': formats['markdown'], 'Type': entryTypes['note'], 'Contents': dataToMD(emailData),
          'EntryContext': {'Email': emailData}}]


  def getUtfString(text, field):
      if text is None:
        text = ''
      try:
          utfString = text.encode('utf-8')
      except Exception as ex:
          utfString = text.decode('utf-8','ignore').encode('utf-8')
          temp = demisto.uniqueFile()
          with open(demisto.investigation()['id'] + '_' + temp,'wb') as f:
              f.write(text)
          demisto.results({'Contents': str(ex) + '\n\nOpen HEX viewer to review.', 'ContentsFormat': formats['text'], 'Type': entryTypes['file'], 'File': field, 'FileID': temp})

      return utfString


  def convert_to_unicode(s):
      global ENCODINGS_TYPES
      try:
          encoded_s, encoding = decode_header(s)[0]
          s = encoded_s.decode(encoding).encode('utf-8').strip()
          ENCODINGS_TYPES.add(encoding)
      except Exception:
          for encoding in ENCODINGS_TYPES:
              try:
                  s = s.decode(encoding).encode('utf-8').strip()
                  break
              except:
                  pass

      return s


  def handleEml(filePath, b64=False):
      global ENCODINGS_TYPES
      r = []
      with open(filePath, 'rb') as emlFile:
          fileData = emlFile.read()
          if b64:
              fileData = b64decode(fileData)

          parser = HeaderParser()
          headers = parser.parsestr(fileData)

          header_list = []
          for item in headers.items():
              item_dict = {}
              item_dict['name'] = item[0]
              item_dict['value'] = convert_to_unicode(item[1])

              header_list.append(item_dict)

          eml = message_from_string(fileData)
          if not eml:
              r += [{"Type": entryTypes["error"], "ContentsFormat": formats["text"], "Contents": "Could not parse eml file!"}]
          html = ''
          text = ''
          attachments = []

          parts = [eml]
          while parts:
              part = parts.pop()
              if part.is_multipart() or part.get_content_type().startswith('multipart'):
                  parts += part.get_payload()
              elif part.get_filename():
                  file_name = convert_to_unicode(part.get_filename())
                  attachments.append(file_name)
                  demisto.setContext('AttachmentName', file_name)
                  r.append(fileResult(file_name, part.get_payload(decode=True)))
              elif part.get_content_type() == 'text/html':
                  html = getUtfString(part.get_payload(decode=True), 'HTML')
              elif part.get_content_type() == 'text/plain':
                  text = getUtfString(part.get_payload(decode=True), 'TEXT')

          emailData = {
              'To': extractAddress(eml['To']),
              'CC': extractAddress(eml['Cc']),
              'From': extractAddress(eml['From']),
              'Subject': convert_to_unicode(eml['Subject']),
              'HTML': convert_to_unicode(html),
              'Text': convert_to_unicode(text),
              'Headers': header_list,
              'Attachments': '' if not attachments else ','.join(attachments),
              'Format': eml.get_content_type()
          }

          return r, [{'ContentsFormat': formats['markdown'], 'Type': entryTypes['note'], 'Contents': dataToMD(emailData),
              'EntryContext': {'Email': emailData}}]


  res = []
  fileType = ''
  try:
      fileType = demisto.executeCommand('getEntry', {'id': demisto.args()['entryid']})[0]['FileMetadata']['info']
      filePath = demisto.executeCommand('getFilePath', {'id': demisto.args()['entryid']})[0]['Contents']['path']
  except Exception, ex:
      res += [{"Type": entryTypes["error"], "ContentsFormat": formats["text"], "Contents": str(ex)}]

  if 'Composite Document File V2 Document'.lower() in fileType.lower() or 'CDFV2 Microsoft Outlook Message'.lower() in fileType.lower():
      temp1, temp2 = handleMsg(filePath)
      res += temp1
      res += temp2
  elif 'rfc 822 mail' in fileType.lower():
      temp1, temp2 = handleEml(filePath)
      res += temp1
      res += temp2
  elif 'ASCII text' in fileType:
      try:
          # Try to open the email as-is
          with open(filePath, 'rb') as f:
              filecontents = f.read()
          if 'Content-Type:'.lower() in filecontents.lower():
              temp1, temp2 = handleEml(filePath, b64 = False)
              res += temp1
              res += temp2
          else:
              # Try a base64 decode
              decodedBase64 = b64decode(filecontents)
              if 'Content-Type:'.lower() in filecontents.lower():
                  temp1, temp2 = handleEml(filePath, b64 = True)
                  res += temp1
                  res += temp2
              else:
                  res += [{"Type": entryTypes["error"], "ContentsFormat": formats["text"], "Contents": "Could not extract email from file. Base64 decode did not include rfc 822 strings"}]
      except Exception as e:
          res += [{"Type": entryTypes["error"], "ContentsFormat": formats["text"], "Contents": "Exception while trying to decode email from within base64: " + str(e)}]
  else:
      res += [{"Type": entryTypes["error"], "ContentsFormat": formats["text"], "Contents": "Unknown file format: " + fileType}]

  demisto.results(res if res else 'Done.')
type: python
tags:
- email
- phishing
- enhancement
- file
comment: Parse an email from an eml or msg file and populate all relevant context
  data to investigate the email. Also extracts inner attachments and returns them
  to the war room. The incident labels themselves are preserved and not modified -
  only the "Label/x" context items that originated from the labels, and the best practice
  is to rely on these for the remainder of the playbook. Requires pip and access to
  python repository to install "olefile" package.
enabled: true
args:
- name: entryid
  required: true
  default: true
  description: Entry ID with the Email as a file in msg or eml format
outputs:
- contextPath: Email.To
  description: Email 'to' addresses
- contextPath: Email.CC
  description: Email 'cc' addresses
- contextPath: Email.From
  description: Email 'from' sender
- contextPath: Email.Subject
  description: Email subject
- contextPath: Email.HTML
  description: Email 'html' body if exists
- contextPath: Email.Text
  description: Email 'text' body if exists
- contextPath: Email.Headers
  description: The full email headers as a single string
- contextPath: Email.Attachments
  description: The list of attachment names in the email
- contextPath: Email.Format
  description: The format of the email if available
scripttarget: 0
runonce: false
tests:
  - ParseEmailFiles-test
