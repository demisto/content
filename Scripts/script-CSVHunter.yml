commonfields:
  id: CSVHunter
  version: -1
name: CSVHunter
script: |-
  import re
  import csv
  import socket

  def is_valid_ipv4_address(address):
      try:
          socket.inet_pton(socket.AF_INET, address)
      except AttributeError:  # no inet_pton here, sorry
          try:
              socket.inet_aton(address)
          except socket.error:
              return False
          return address.count('.') == 3
      except socket.error:  # not a valid address
          return False
      return True

  csvEntry = None

  iplist = []
  domainlist = []
  hashlist = []
  md5hashlist = []
  sha1hashlist = []
  sha256hashlist = []
  ipcount = 0
  domaincount = 0
  hashcount = 0
  md5hashcount = 0
  sha1hashcount = 0
  sha256hashcount = 0

  dArgs = demisto.args()

  file = dArgs['file'] if 'file' in dArgs else None


  entries = demisto.executeCommand('getEntries', {})
  for entry in entries:
      fn = demisto.get(entry, 'File')

      is_text = type(fn) in [unicode, str]
      is_correct_file = file.lower() == fn.lower()
      is_csv = fn.lower().endswith('.csv')

      if is_text and is_correct_file and is_csv:
          csvEntry = entry
          break

  if csvEntry:
      res = demisto.executeCommand('getFilePath', {'id': entry['ID']})
      with open(res[0]['Contents']['path'], 'rU') as f:
          has_header = csv.Sniffer().has_header(f.read(1024))
          f.seek(0)

          csvdata = csv.reader(f)

          if has_header:
              next(csvdata)

          for row in csvdata:
              colCounter = 0
              for col in row:
                  is_ip = False
                  if re.search( r'([0-9]{1,3}\.){3}[0-9]{1,3}', row[colCounter] ):
                      is_ip = True

                  # 1471db385e5447683d0b7c4647c86fff
                  # 56165a1da7fe16efa41fbbde8f0100c605a52b1e032af281939cb86c198cba0a
                  #^[a-f0-9]{32}$
                  is_md5 = False
                  if len(row[colCounter]) == 32 and re.search( r'[0-9A-Fa-f]{32}', row[colCounter]):
                      is_md5 = True

                  is_sha1 = False
                  if len(row[colCounter]) == 40 and re.search( r'[0-9A-Fa-f]{40}', row[colCounter]):
                      is_sha1 = True

                  is_sha256 = False
                  if len(row[colCounter]) == 64 and re.search(r'[0-9A-Fa-f]{64}', row[colCounter]):
                      is_sha256 = True

                  is_domain = False
                  if re.search(r'((?=[a-z0-9-]{1,63}\.)(xn--)?[a-z0-9]+(-[a-z0-9]+)*\.)+[a-z]{2,63}', row[colCounter]):
                      is_domain = True

                  if is_ip is True:
                      is_unique = row[colCounter] not in iplist
                      is_valid = is_valid_ipv4_address(row[colCounter])
                      if is_unique and is_ip and is_valid:
                          iplist.append(row[colCounter])
                  elif is_md5 is True:
                      is_unique = row[colCounter] not in md5hashlist
                      if is_unique and is_md5:
                          md5hashlist.append(row[colCounter])
                  elif is_sha1 is True:
                      is_unique = row[colCounter] not in sha1hashlist
                      if is_unique and is_sha1:
                          sha1hashlist.append(row[colCounter])
                  elif is_sha256 is True:
                      is_unique = row[colCounter] not in sha256hashlist
                      if is_unique and is_sha256:
                          sha256hashlist.append(row[colCounter])
                  elif is_domain is True:
                      is_unique = row[colCounter] not in domainlist
                      has_dot = '.' in row[colCounter]
                      no_spaces = ' ' not in row[colCounter]
                      if is_unique and has_dot and no_spaces:
                          domainlist.append(row[colCounter])
                  colCounter += 1
      
      if iplist:
          old_iplist = list(demisto.get( demisto.context(), 'IP' )) if demisto.get( demisto.context(), 'IP' ) else []
          iplist = list(set(iplist) - set(old_iplist))
          ipcount = len(iplist)
          appendContext('IP', iplist)

      if domainlist:
          old_domainlist = list(demisto.get( demisto.context(), 'DomainName' )) if demisto.get( demisto.context(), 'DomainName' ) else []
          domainlist = list(set(domainlist) - set(old_domainlist))
          domaincount = len(domainlist)
          appendContext('DomainName', domainlist)


      if domainlist:
          old_domainlist = list(demisto.get( demisto.context(), 'DomainName' )) if demisto.get( demisto.context(), 'DomainName' ) else []
          domainlist = list(set(domainlist) - set(old_domainlist))
          domaincount = len(domainlist)
          appendContext('DomainName', domainlist)

      if md5hashlist:
          old_md5hashlist = list(demisto.get( demisto.context(), 'File.MD5' )) if demisto.get( demisto.context(), 'File.MD5' ) else []
          md5hashlist = list(set(md5hashlist) - set(old_md5hashlist))
          md5hashcount = len(md5hashlist)
          appendContext('FileFoundMD5', md5hashlist)

      if sha1hashlist:
          old_sha1hashlist = list(demisto.get( demisto.context(), 'File.SHA1' )) if demisto.get( demisto.context(), 'File.SHA1' ) else []
          sha1hashlist = list(set(sha1hashlist) - set(old_md5hashlist))
          sha1hashcount = len(sha1hashlist)
          appendContext('FileFoundSHA1', sha1hashlist)

      if sha256hashlist:
          old_md5hashlist = list(demisto.get( demisto.context(), 'File.SHA256' )) if demisto.get( demisto.context(), 'File.SHA256' ) else []
          sha256hashlist = list(set(sha256hashlist) - set(old_md5hashlist))
          sha256hashcount = len(sha256hashlist)
          appendContext('FileFoundSHA256', sha256hashlist)


      demisto.results('Parsed CSV: %s, %d IPs, %d Domains, %d Md5, %d Sha1, %d Sha256 added to the current context' % ( file, ipcount, domaincount, md5hashcount, sha1hashcount, sha256hashcount))
  else:
      demisto.results( { "Type" : entryTypes["error"], "ContentsFormat" : formats["text"], "Contents" : 'No csv file found in the war room. Ensure the file was uploaded and the filename ends in ".csv".' } )
type: python
tags:
- file
- csv
comment: This script will parse a CSV file and place the unique IPs, Domains and Hashes
  into the context. It will go through all of the rows and columns hunting for data to add to the context of the incident.
enabled: true
args:
- name: file
  required: true
  default: true
  description: The name of the file. The file must be uploaded to the War Room.
scripttarget: 0
timeout: 120ns
system: true
