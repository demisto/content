commonfields:
  id: ReadFile
  version: -1
name: ReadFile
script: |-
  maxFileSize = demisto.get(demisto.args(), 'maxFileSize')
  if maxFileSize:
      maxFileSize = int(maxFileSize)
  else:
      maxFileSize = 1024**2
  res = demisto.executeCommand('getFilePath', {'id': demisto.args()['entryID']})
  with open(res[0]['Contents']['path'], 'r') as f:
      data = f.read(maxFileSize)
      data = data.decode(demisto.args().get("encoding"), errors="replace")
      data = data.encode('utf-8')

  if data:
      message = 'Read %d bytes from file.' % (len(data))
      demisto.results({"Type" : entryTypes["note"],
                       "ContentsFormat" : formats["text"],
                       "Contents" : {"FileData": data},
                       "HumanReadable": message,
                       "EntryContext": {"FileData": data}
                       })
  else:
      demisto.results( { "Type" : entryTypes["error"], "ContentsFormat" : formats["text"], "Contents" : 'No data could be read.' } )
type: python
tags:
- Utility
- ingestion
comment: Load the contents of a file into context.
enabled: true
args:
- name: entryID
  required: true
  default: true
  description: War room entryID of the file to read.
- name: maxFileSize
  required: false
  default: false
  description: Maximal file size to load, in bytes. Default is 1MB.
- name: encoding
  description: The character encoding of the file
  defaultValue: utf-8
outputs:
- contextPath: FileData
  description: Data read from war room file
scripttarget: 0
