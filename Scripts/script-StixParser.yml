commonfields:
  id: StixParser
  version: -1
name: StixParser
script: |-
  from stix.core import STIXPackage
  import json
  import tempfile
  with tempfile.NamedTemporaryFile() as temp:
      temp.write(demisto.args()['iocXml'].encode('utf-8'))
      temp.flush()
      stix_package = STIXPackage.from_xml(temp.name)
  data = []
  i = 0
  def create_new_ioc(data, i, time, pkg_id, ind_id):
      data.append({})
      data[i]['CustomFields'] = {'indicatorId': ind_id, 'stixPackageId':pkg_id}
      data[i]['source'] = ind_id.split(':')[0]
      if time is not None:
          data[i]['timestamp'] = time.strftime('%Y-%m-%dT%H:%M:%S.%fZ')
  stix_id = stix_package.id_
  if  stix_package.indicators:
    for ind in stix_package.indicators:
        ind_id = ind.id_
        for obs in ind.observables:
            if hasattr(obs.object_.properties, 'hashes'):
                #File object
                for digest in obs.object_.properties.hashes:
                    if hasattr(digest,'simple_hash_value'):
                        if isinstance(digest.simple_hash_value.value, list):
                            for hash in digest.simple_hash_value.value:
                                create_new_ioc(data, i, ind.timestamp, stix_id, ind_id)
                                data[i]['indicator_type'] = 'File'
                                data[i]['value'] = hash
                                i = i + 1
                        else:
                            create_new_ioc(data, i, ind.timestamp, stix_id, ind_id)
                            data[i]['indicator_type'] = 'File'
                            data[i]['value'] = digest.simple_hash_value.value.strip()
                            i = i + 1
            elif hasattr(obs.object_.properties, 'category'):
                #Address object
                category = obs.object_.properties.category
                if category.startswith( 'ip' ):
                    for ip in obs.object_.properties.address_value.values:
                        create_new_ioc(data, i, ind.timestamp, stix_id, ind_id)
                        data[i]['indicator_type'] = 'IP'
                        data[i]['value'] = ip
                        i = i + 1
            elif hasattr(obs.object_.properties, 'type_'):
                if obs.object_.properties.type_ == 'URL':
                    #URI object
                    create_new_ioc(data,i,ind.timestamp, stix_id, ind_id)
                    data[i]['indicator_type'] = 'URL'
                    data[i]['value'] = obs.object_.properties.value.value
                    i = i + 1
                elif hasattr(obs.object_.properties.value, 'values'):
                    for url in obs.object_.properties.value.values:
                        #URI object
                        create_new_ioc(data,i,ind.timestamp, stix_id, ind_id)
                        data[i]['indicator_type'] = 'URL'
                        data[i]['value'] = url
                        i = i + 1
  json_data = json.dumps(data)
  demisto.results(json_data)
type: python
tags:
- stix
- ioc
comment: Parse Stix files to Demisto indicators
enabled: true
args:
- name: iocXml
  required: true
  default: true
  description: ioc xml in stix format
scripttarget: 0
dependson: {}
timeout: 0s
dockerimage: demisto/stix
system: true
