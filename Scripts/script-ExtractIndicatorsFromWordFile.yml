commonfields:
  id: ExtractIndicatorsFromWordFile
  version: -1
name: ExtractIndicatorsFromWordFile
fromversion: 4.1.0
script: |-
  import subprocess
  import sys
  from docx import Document
  from docx.opc.exceptions import PackageNotFoundError
  from docx.opc.constants import RELATIONSHIP_TYPE as RT

  class WordParser:

      def __init__(self):
          self.res = []
          self.errEntry = {
            "Type": entryTypes["error"],
            "ContentsFormat": formats["text"],
            "Contents": ""
          }
          self.file_path = ""
          self.file_name = ""
          self.file_type = ""
          self.all_data = ""

      def get_file_details(self):
          cmd_res = demisto.executeCommand('getFilePath', {'id': demisto.args().get("entryID")})
          file_res = cmd_res[0]
          if isError(file_res):
              file_res["Contents"] = "Error fetching entryID: " + file_res["Contents"]
              self.res = file_res
          else:  # Got file path:
              self.file_path = file_res.get('Contents').get('path')
              self.file_name = file_res.get('Contents').get('name')
              self.file_type = demisto.dt(demisto.context(), "File(val.EntryID === '{}')".format(demisto.args().get('entryID')))[0].get("Type")

      def convert_doc_to_docx(self):
          conversion_res = subprocess.check_output(['soffice', '--headless', '--convert-to', 'docx', self.file_path])  # Requires office-utils docker image
          output_file_name = self.file_name[0:self.file_name.rfind('.')] + '.docx'
          self.file_path = self.file_path + ".docx"
          with open(self.file_path, 'rb') as f:
              contents = f.read()
              f_data = f.read()
              self.res = fileResult(output_file_name, f_data)

      def extract_indicators(self):
          try:
              document = Document(self.file_path)
              self.all_data = self.get_paragraphs(document)
              self.all_data += self.get_tables(document)
              self.all_data += self.get_core_properties(document)
              self.all_data += self.get_hyperlinks(document)
          except PackageNotFoundError as e:
              self.errEntry["Contents"] = "Input file is not a valid docx/doc file."
              self.res = self.errEntry
          except BaseException as e:
              self.errEntry["Contents"] = "Error occurred while parsing input file.\nException info: " + str(e)
              self.res = self.errEntry

      def get_paragraphs(self, document):
          return '\n'.join([para.text for para in document.paragraphs])

      def get_tables(self, document):
          all_cells_txt = ""
          if document.tables:
              for table in document.tables:
                  for row in table.rows:
                      for cell in row.cells:
                          for para in cell.paragraphs:
                              all_cells_txt += (" " + para.text)
          return " ".join(all_cells_txt.split())  # Removes extra whitespaces

      def get_core_properties(self, document):
          all_properties_txt = document.core_properties.author + " " +\
          document.core_properties.category + " " +\
          document.core_properties.comments + " " +\
          document.core_properties.identifier + " " +\
          document.core_properties.keywords + " " +\
          document.core_properties.subject + " " +\
          document.core_properties.title + " "
          return " ".join(all_properties_txt.split())

      def get_hyperlinks(self, document):
          all_hyperlinks = ""
          rels = document.part.rels
          for rel in rels:
              if rels[rel].reltype == RT.HYPERLINK:
                  all_hyperlinks += (rels[rel]._target + " ")
          return all_hyperlinks


      def parse_word(self):
          self.get_file_details()
          if self.file_name.endswith(".doc") or "Composite Document File V2 Document" in self.file_type:
              self.convert_doc_to_docx()
              self.extract_indicators()
          elif self.file_name.endswith(".docx") or "Microsoft Word 2007+" in self.file_type:
              self.extract_indicators()
          else:
              return_error("Input file is not a doc file.")

  # Parsing:
  parser = WordParser()
  parser.parse_word()

  # Returning Indicators:
  indicators_hr = demisto.executeCommand("extractIndicators", {
      'text': parser.all_data})[0][u'Contents']
  demisto.results( {
      'Type': entryTypes['note'],
      'ContentsFormat': formats['text'],
      'Contents': indicators_hr,
      'HumanReadable': indicators_hr
                   })

  # Returning all parsed data:
  demisto.results(parser.all_data.encode('utf-8'))

  # Returning error:
  if parser.res:  # If there was an error:
      if "Error occurred while parsing input" in parser.res["Contents"] or "Input file is not a valid" in parser.res["Contents"]:
          demisto.results(parser.res)  # Return error too


type: python
tags:
- parser
- autoextract
- doc
- docx
- word
comment: |-
  Used to extract indicators from Word files (DOC, DOCX).
  The script does not extract data from macros (e.g., embedded code).
enabled: true
args:
- name: entryID
  required: true
  description: The entry ID of the word document to be parsed for indicators. The
    document can be either in DOC or DOCX format.
scripttarget: 0
runonce: false
dockerimage: demisto/office-utils:1.0.0.91
runas: DBotWeakRole
tests:
  - Extract Indicators From File - test