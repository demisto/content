commonfields:
  id: GenerateSummaryReports
  version: -1
name: GenerateSummaryReports
script: |
  let res = [];
  let ids = argToList(args.ids);
  if(!Array.isArray(ids)) {
      ids = [ids]; //single element case
  }
  ids = ids.filter(function(value, index, self) { // make sure array is unique
      return self.indexOf(value) === index;
  });
  const ec = {SummaryReports: []};
  ids.forEach(function(id) {
      const reportEntries =  executeCommand("generateSummaryReport", {name: args.name, type: args.type, incidentId: id});
      res = res.concat(reportEntries);
      if(reportEntries[0] && reportEntries[0].File) {
          ec.SummaryReports.push({IncidentID: id, ReportName: args.name, File: reportEntries[0].File, FileID: reportEntries[0].FileID})
      }
      wait(1); //required to avoid generated file name conflicts
  });
  res.push({
      Type: entryTypes.note,
      Contents: ec,
      ContentsFormat: formats.json,
      HumanReadable: tableToMarkdown("Summary Reports", ec.SummaryReports),
      EntryContext: ec
  });
  return res;
type: javascript
tags:
- Utility
comment: Generate report summaries for the passed incidents.
enabled: true
args:
- name: name
  description: Report name to generate
  defaultValue: Investigation Summary
- name: type
  description: Report type to generate
  defaultValue: pdf
- name: ids
  required: true
  description: Incident ids to generate reports for
  isArray: true
outputs:
- contextPath: SummaryReports.IncidentID
  description: Incident ID of each generated report
  type: number
- contextPath: SummaryReports.ReportName
  description: The report name
  type: string
- contextPath: SummaryReports.File
  description: File name of the report file
  type: string
- contextPath: SummaryReports.FileID
  description: File ID of the generated report
  type: string
scripttarget: 0
runonce: false
runas: DBotWeakRole
