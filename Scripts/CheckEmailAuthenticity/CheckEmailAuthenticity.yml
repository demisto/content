args:
- auto: PREDEFINED
  default: false
  description: Authentication-Results header from mail
  isArray: false
  name: authentication_results
  predefined:
  - admin
  required: false
  secret: false
- auto: PREDEFINED
  default: false
  description: Received -SPF header from Email
  isArray: false
  name: received_spf
  predefined:
  - admin
  required: false
  secret: false
comment: Checks Email authenticity based on its SPF, DMARC and DKIM
commonfields:
  id: 0974bb77-e56c-4a5b-861e-8a4a6d00c3eb
  version: -1
enabled: true
name: CheckEmailAuthenticity
outputs:
- contextPath: Email.SPF.MessageID
  description: SPF ID
  type: String
- contextPath: Email.SPF.Validation-Result
  description: 'Validation Result. Could be: None / Neutral / Pass / Fail / SoftFail
    / TempError / PermError'
  type: String
- contextPath: Email.SPF.Reason
  description: Reason listed in SPF (if found)
  type: String
- contextPath: Email.SPF.Sender-IP
  description: Email Sender IP
  type: String
- contextPath: Email.DKIM.Message-ID
  description: 'Validation Result. Could be: None / Pass / Fail / Policy / Neutral
    / Temperror / Permerror'
  type: String
- contextPath: Email.DKIM.Reason
  description: DKIM Reason (if found)
  type: String
- contextPath: Email.DMARC.Message-ID
  description: DMARC ID
  type: String
- contextPath: Email.DMARC.Validation-Result
  description: 'DMARC Reason. Could be: None / Pass / Fail / Temperror / Permerror'
  type: String
- contextPath: Email.DMARC.Tags
  description: DMARC Tags (if found)
  type: String
- contextPath: EMail.DMARC.From-Domain
  description: Sender's Domain
  type: String
- contextPath: Email.DKIM.Signing-Domain
  description: Sender's Domain
  type: String
- contextPath: Email.AuthenticityCheck
  description: 'Could be: Fail / Suspicious / Undetermined / Pass'
  type: Unknown
script: |-
  import demistomock as demisto
  from CommonServerPython import *
  from CommonServerUserPython import *

  try:
      auth=demisto.args().get('authentication_results')
      spf=demisto.args().get('received_spf')


  except Exception as ex:
      demisto.error(str(ex) + "\n\nTrace:\n" + traceback.format_exc())
      return_error(ex.message)
system: false
tags:
- phishing
- ews
- email
timeout: '0'
type: python
runas: DBotWeakRole
runonce: false
