args:
- auto: PREDEFINED
  default: false
  description: Authentication-Results header from mail
  isArray: false
  name: authentication_results
  predefined:
  - admin
  required: false
  secret: false
- auto: PREDEFINED
  default: false
  description: Received -SPF header from Email
  isArray: false
  name: received_spf
  predefined:
  - admin
  required: false
  secret: false
comment: Checks Email authenticity based on its SPF, DMARC and DKIM
commonfields:
  id: 0974bb77-e56c-4a5b-861e-8a4a6d00c3eb
  version: -1
enabled: true
name: CheckEmailAuthenticity
outputs:
- contextPath: Email.SPF.MessageID
  description: SPF ID
  type: String
- contextPath: Email.SPF.Validation-Result
  description: 'Validation Result. Could be: None / Neutral / Pass / Fail / SoftFail
    / TempError / PermError'
  type: String
- contextPath: Email.SPF.Reason
  description: Reason listed in SPF (if found)
  type: String
- contextPath: Email.SPF.Sender-IP
  description: Email Sender IP
  type: String
- contextPath: Email.DKIM.Message-ID
  description: 'Validation Result. Could be: None / Pass / Fail / Policy / Neutral
    / Temperror / Permerror'
  type: String
- contextPath: Email.DKIM.Reason
  description: DKIM Reason (if found)
  type: String
- contextPath: Email.DMARC.Message-ID
  description: DMARC ID
  type: String
- contextPath: Email.DMARC.Validation-Result
  description: 'DMARC Reason. Could be: None / Pass / Fail / Temperror / Permerror'
  type: String
- contextPath: Email.DMARC.Tags
  description: DMARC Tags (if found)
  type: String
- contextPath: EMail.DMARC.From-Domain
  description: Sender's Domain
  type: String
- contextPath: Email.DKIM.Signing-Domain
  description: Sender's Domain
  type: String
- contextPath: Email.AuthenticityCheck
  description: 'Could be: Fail / Suspicious / Undetermined / Pass'
  type: Unknown
script: |-
  import re
  import traceback

  '''HELPER FUNCTIONS'''


  def get_spf(auth, spf):
      spf_context = {}
      if auth == None:
          spf_context["Validation-Result"] = spf.split(" ")[0].lower()
          sender_ip=re.findall(r"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", spf)
      else:
          result= re.search(r"spf=(\w+)", auth)
          if result is not None:
              spf_context["Validation-Result"]=result.group(1)
          sender_ip=re.findall(r"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", auth)
      if sender_ip!=[]:
          spf_context["Sender-IP"] = sender_ip[0]
      if spf is not None:
          spf_context["Reason"] = re.findall(r"[(](.+)[)]", spf)[0]
      return spf_context

  def get_dkim(auth):
      dkim_context={}
      if auth!=None:
          result = re.search(r"dkim=(\w+)", auth)
          if result is not None:
              dkim_context["Validation-Result"] = result.group(1)
          reason= re.findall("dkim=\w+ [(](.+)[)]",auth)
          if reason!=[]:
              dkim_context["Reason"] = reason[0]
          domain=re.findall("dkim=[\w\W]+\W(\w+\.com)",auth)
          if domain!=[]:
              dkim_context["Signing-Domain"]=domain[0]
      return dkim_context

  def get_dmarc(auth):
      dmarc_context={}
      if auth!=None:
          d=1

  try:
      auth = demisto.args().get('authentication_results')
      spf = demisto.args().get('received_spf')
      if auth is None and spf is None:
          context = {
              "Email.AuthenticityCheck": "undetermined"
          }
          return_outputs("No header information was found.", context)
          sys.exit(0)
      spf_data = get_spf(auth, spf)
      dkim_data=get_dkim(auth)
      demisto.results(spf_data)

  except Exception as ex:
      demisto.error(str(ex) + "\n\nTrace:\n" + traceback.format_exc())
      return_error(ex.message)
system: false
tags:
- phishing
- ews
- email
timeout: '0'
type: python
runas: DBotWeakRole
runonce: false
