commonfields:
  id: CommonServerPython
  version: -1
name: CommonServerPython
script: |-
  # Common functions script
  # =======================
  # This script will be appended to each server script before being executed.
  # Please notice that to add custom common code, add it to the CommonServerUserPython script
  from datetime import datetime, timedelta
  import time
  import json
  import optparse
  import sys
  import os
  import re
  from collections import OrderedDict

  import xml.etree.cElementTree as ET

  IS_PY3 = sys.version_info[0] == 3
  STRING_TYPES = (str, bytes) if IS_PY3 else (str, unicode)

  entryTypes = {'note': 1, 'downloadAgent': 2, 'file': 3, 'error': 4, 'pinned': 5, 'userManagement': 6, 'image': 7, 'plagroundError': 8, 'entryInfoFile': 9, 'map': 15}
  formats = {'html': 'html', 'table': 'table', 'json': 'json', 'text': 'text', 'dbotResponse': 'dbotCommandResponse', 'markdown': 'markdown'}
  brands = {'xfe': 'xfe', 'vt': 'virustotal', 'wf': 'WildFire', 'cy': 'cylance', 'cs': 'crowdstrike-intel'}
  providers = {'xfe': 'IBM X-Force Exchange', 'vt': 'VirusTotal', 'wf': 'WildFire', 'cy': 'Cylance', 'cs': 'CrowdStrike'}
  thresholds = {'xfeScore': 4, 'vtPositives': 10, 'vtPositiveUrlsForIP': 30}
  dbotscores = {'Critical': 4, 'High': 3, 'Medium': 2,'Low': 1, 'Unknown': 0, 'Informational': 0.5}

  def urljoin(url, suffix=""):
      """
          Will join url and its suffix

          Example:
          "https://google.com/", "/"   => "https://google.com/"
          "https://google.com", "/"   => "https://google.com/"
          "https://google.com", "api"   => "https://google.com/api"
          "https://google.com", "/api"  => "https://google.com/api"
          "https://google.com/", "api"  => "https://google.com/api"
          "https://google.com/", "/api" => "https://google.com/api"

          :type url: ``string``
          :param url: URL string (required)

          :type suffix: ``string``
          :param suffix: the second part of the url

          :rtype: ``string``
          :return: Full joined url
      """
      if url[-1:] != "/":
          url = url + "/"

      if suffix.startswith("/"):
          suffix = suffix[1:]
          return url + suffix

      return url + suffix

  def positiveUrl(entry):
      """
         Checks if the given entry from a URL reputation query is positive (known bad) (deprecated)

         :type entry: ``dict``
         :param entry: URL entry (required)

         :return: True if bad, false otherwise
         :rtype: ``bool``
      """
      if entry['Type'] != entryTypes['error'] and entry['ContentsFormat'] == formats['json']:
          if entry['Brand'] == brands['xfe']:
              return demisto.get(entry, 'Contents.url.result.score') > thresholds['xfeScore']
          if entry['Brand'] == brands['vt']:
              return demisto.get(entry, 'Contents.positives') > thresholds['vtPositives']
          if entry['Brand'] == brands['cs'] and demisto.get(entry, 'Contents'):
              c = demisto.get(entry, 'Contents')[0]
              return demisto.get(c, 'indicator') and demisto.get(c, 'malicious_confidence') in ['high', 'medium']
      return False


  def positiveFile(entry):
      """
         Checks if the given entry from a file reputation query is positive (known bad) (deprecated)

         :type entry: ``dict``
         :param entry: File entry (required)

         :return: True if bad, false otherwise
         :rtype: ``bool``
      """
      if entry['Type'] != entryTypes['error'] and entry['ContentsFormat'] == formats['json']:
          if entry['Brand'] == brands['xfe'] and (demisto.get(entry, 'Contents.malware.family') or demisto.gets(entry, 'Contents.malware.origins.external.family')):
              return True
          if entry['Brand'] == brands['vt']:
              return demisto.get(entry, 'Contents.positives') > thresholds['vtPositives']
          if entry['Brand'] == brands['wf']:
              return demisto.get(entry, 'Contents.wildfire.file_info.malware') == 'yes'
          if entry['Brand'] == brands['cy'] and demisto.get(entry, 'Contents'):
              contents = demisto.get(entry, 'Contents')
              k = contents.keys()
              if k and len(k) > 0:
                  v = contents[k[0]]
                  if v and demisto.get(v, 'generalscore'):
                      return v['generalscore'] < -0.5
          if entry['Brand'] == brands['cs'] and demisto.get(entry, 'Contents'):
              c = demisto.get(entry, 'Contents')[0]
              return demisto.get(c, 'indicator') and demisto.get(c, 'malicious_confidence') in ['high', 'medium']
      return False


  def vtCountPositives(entry):
      """
         Counts the number of detected URLs in the entry

         :type entry: ``dict``
         :param entry: Demisto entry (required)

         :return: The number of detected URLs
         :rtype: ``int``
      """
      positives = 0
      if demisto.get(entry, 'Contents.detected_urls'):
          for detected in demisto.get(entry, 'Contents.detected_urls'):
              if demisto.get(detected, 'positives') > thresholds['vtPositives']:
                  positives += 1
      return positives


  def positiveIp(entry):
      """
         Checks if the given entry from a file reputation query is positive (known bad) (deprecated)

         :type entry: ``dict``
         :param entry: IP entry (required)

         :return: True if bad, false otherwise
         :rtype: ``bool``
      """
      if entry['Type'] != entryTypes['error'] and entry['ContentsFormat'] == formats['json']:
          if entry['Brand'] == brands['xfe']:
              return demisto.get(entry, 'Contents.reputation.score') > thresholds['xfeScore']
          if entry['Brand'] == brands['vt'] and demisto.get(entry, 'Contents.detected_urls'):
              return vtCountPositives(entry) > thresholds['vtPositiveUrlsForIP']
          if entry['Brand'] == brands['cs'] and demisto.get(entry, 'Contents'):
              c = demisto.get(entry, 'Contents')[0]
              return demisto.get(c, 'indicator') and demisto.get(c, 'malicious_confidence') in ['high', 'medium']
      return False


  def formatEpochDate(t):
      """
         Convert a time expressed in seconds since the epoch to a string representing local time

         :type t: ``int``
         :param t: Time represented in seconds (required)

         :return: A string representing local time
         :rtype: ``str``
      """
      if t:
          return time.ctime(t)
      return ''


  def compareDates(date1, date2, dateFormat):
      """
         Compares two dates and returns the delta.
         If instead of date passed string 'now' then it will be compared to current time.
         Date format must be according to python date formats: https://docs.python.org/2/library/datetime.html

         :type date1: ``int`` or ``str``
         :param date1: First date to be compared (required)

         :type date2: ``int`` or ``str``
         :param date2: Second date tobe compared (required)

         :return: The delta of the two dates
         :rtype: ``int``
      """
      first = None
      if date1 == 'now':
          first = datetime.now(tzlocal())
      elif isinstance(date1, basestring):
          first = parse(date1)

      second = None
      if date2 == 'now':
          second = datetime.now(tzlocal())
      elif isinstance(date2, basestring):
          second = parse(date2)
      delta = first - second

      return delta


  def shortCrowdStrike(entry):
      """
         Display CrowdStrike Intel results in Markdown (deprecated)

         :type entry: ``dict``
         :param entry: CrowdStrike result entry (required)

         :return: A Demisto entry containing the shortened CrowdStrike info
         :rtype: ``dict``
      """
      if entry['Type'] != entryTypes['error'] and entry['ContentsFormat'] == formats['json']:
          if entry['Brand'] == brands['cs'] and demisto.get(entry, 'Contents'):
              c = demisto.get(entry, 'Contents')[0]
              csRes = '## CrowdStrike Falcon Intelligence'
              csRes += '\n\n### Indicator - ' + demisto.gets(c, 'indicator')
              labels = demisto.get(c, 'labels')
              if labels:
                  csRes += '\n### Labels'
                  csRes += '\nName|Created|Last Valid'
                  csRes += '\n----|-------|----------'
                  for label in labels:
                      csRes += '\n' + demisto.gets(label, 'name') + '|' + formatEpochDate(demisto.get(label, 'created_on')) + '|' + formatEpochDate(demisto.get(label, 'last_valid_on'))
              relations = demisto.get(c, 'relations')
              if relations:
                  csRes += '\n### Relations'
                  csRes += '\nIndicator|Type|Created|Last Valid'
                  csRes += '\n---------|----|-------|----------'
                  for r in relations:
                      csRes += '\n' + demisto.gets(r, 'indicator') + '|' + demisto.gets(r, 'type') + '|' + formatEpochDate(demisto.get(label, 'created_date')) + '|' + formatEpochDate(demisto.get(label, 'last_valid_date'))
              return {'ContentsFormat': formats['markdown'], 'Type': entryTypes['note'], 'Contents': csRes}
      return entry


  def shortUrl(entry):
      """
         Formats a URL reputation entry into a short table (deprecated)

         :type entry: ``dict``
         :param entry: URL result entry (required)

         :return: A Demisto entry containing the shortened URL info
         :rtype: ``dict``
      """
      if entry['Type'] != entryTypes['error'] and entry['ContentsFormat'] == formats['json']:
          c = entry['Contents']
          if entry['Brand'] == brands['xfe']:
              return {'ContentsFormat': formats['table'], 'Type': entryTypes['note'], 'Contents': {
                  'Country': c['country'], 'MalwareCount': demisto.get(c, 'malware.count'),
                  'A': demisto.gets(c, 'resolution.A'), 'AAAA': demisto.gets(c, 'resolution.AAAA'),
                  'Score': demisto.get(c, 'url.result.score'), 'Categories': demisto.gets(c, 'url.result.cats'),
                  'URL': demisto.get(c, 'url.result.url'), 'Provider': providers['xfe'], 'ProviderLink': 'https://exchange.xforce.ibmcloud.com/url/' + demisto.get(c, 'url.result.url')}}
          if entry['Brand'] == brands['vt']:
              return {'ContentsFormat': formats['table'], 'Type': entryTypes['note'], 'Contents': {
                  'ScanDate': c['scan_date'], 'Positives': c['positives'], 'Total': c['total'],
                  'URL': c['url'], 'Provider': providers['vt'], 'ProviderLink': c['permalink']}}
          if entry['Brand'] == brands['cs'] and demisto.get(entry, 'Contents'):
              return shortCrowdStrike(entry)
      return {'ContentsFormat': 'text', 'Type': 4, 'Contents': 'Unknown provider for result: ' + entry['Brand']}


  def shortFile(entry):
      """
         Formats a file reputation entry into a short table (deprecated)

         :type entry: ``dict``
         :param entry: File result entry (required)

         :return: A Demisto entry containing the shortened file info
         :rtype: ``dict``
      """
      if entry['Type'] != entryTypes['error'] and entry['ContentsFormat'] == formats['json']:
          c = entry['Contents']
          if entry['Brand'] == brands['xfe']:
              cm = c['malware']
              return {'ContentsFormat': formats['table'], 'Type': entryTypes['note'], 'Contents': {
                  'Family': cm['family'], 'MIMEType': cm['mimetype'], 'MD5': cm['md5'][2:] if 'md5' in cm else '',
                  'CnCServers': demisto.get(cm, 'origins.CncServers.count'), 'DownloadServers': demisto.get(cm, 'origins.downloadServers.count'),
                  'Emails': demisto.get(cm, 'origins.emails.count'), 'ExternalFamily': demisto.gets(cm, 'origins.external.family'),
                  'ExternalCoverage': demisto.get(cm, 'origins.external.detectionCoverage'), 'Provider': providers['xfe'],
                  'ProviderLink': 'https://exchange.xforce.ibmcloud.com/malware/' + cm['md5'].replace('0x', '')}}
          if entry['Brand'] == brands['vt']:
              return {'ContentsFormat': formats['table'], 'Type': entryTypes['note'], 'Contents': {
                  'Resource': c['resource'], 'ScanDate': c['scan_date'], 'Positives': c['positives'],
                  'Total': c['total'], 'SHA1': c['sha1'], 'SHA256': c['sha256'], 'Provider': providers['vt'], 'ProviderLink': c['permalink']}}
          if entry['Brand'] == brands['wf']:
              c = demisto.get(entry, 'Contents.wildfire.file_info')
              if c:
                  return {'Contents': {'Type': c['filetype'], 'Malware': c['malware'], 'MD5': c['md5'], 'SHA256': c['sha256'], 'Size': c['size'], 'Provider': providers['wf']},
                          'ContentsFormat': formats['table'], 'Type': entryTypes['note']}
          if entry['Brand'] == brands['cy'] and demisto.get(entry, 'Contents'):
              contents = demisto.get(entry, 'Contents')
              k = contents.keys()
              if k and len(k) > 0:
                  v = contents[k[0]]
                  if v and demisto.get(v, 'generalscore'):
                      return {'Contents': {'Status': v['status'], 'Code': v['statuscode'], 'Score': v['generalscore'], 'Classifiers': str(v['classifiers']), 'ConfirmCode': v['confirmcode'], 'Error': v['error'], 'Provider': providers['cy']},
                              'ContentsFormat': formats['table'], 'Type': entryTypes['note']}
          if entry['Brand'] == brands['cs'] and demisto.get(entry, 'Contents'):
              return shortCrowdStrike(entry)
      return {'ContentsFormat': formats['text'], 'Type': entryTypes['error'], 'Contents': 'Unknown provider for result: ' + entry['Brand']}


  def shortIp(entry):
      """
         Formats an ip reputation entry into a short table (deprecated)

         :type entry: ``dict``
         :param entry: IP result entry (required)

         :return: A Demisto entry containing the shortened IP info
         :rtype: ``dict``
      """
      if entry['Type'] != entryTypes['error'] and entry['ContentsFormat'] == formats['json']:
          c = entry['Contents']
          if entry['Brand'] == brands['xfe']:
              cr = c['reputation']
              return {'ContentsFormat': formats['table'], 'Type': entryTypes['note'], 'Contents': {
                  'IP': cr['ip'], 'Score': cr['score'], 'Geo': str(cr['geo']), 'Categories': str(cr['cats']),
                  'Provider': providers['xfe']}}
          if entry['Brand'] == brands['vt']:
              return {'ContentsFormat': formats['table'], 'Type': entryTypes['note'], 'Contents': {'Positive URLs': vtCountPositives(entry), 'Provider': providers['vt']}}
          if entry['Brand'] == brands['cs'] and demisto.get(entry, 'Contents'):
              return shortCrowdStrike(entry)
      return {'ContentsFormat': formats['text'], 'Type': entryTypes['error'], 'Contents': 'Unknown provider for result: ' + entry['Brand']}


  def shortDomain(entry):
      """
         Formats a domain reputation entry into a short table (deprecated)

         :type entry: ``dict``
         :param entry: Domain result entry (required)

         :return: A Demisto entry containing the shortened domain info
         :rtype: ``dict``
      """
      if entry['Type'] != entryTypes['error'] and entry['ContentsFormat'] == formats['json']:
          if entry['Brand'] == brands['vt']:
              return {'ContentsFormat': formats['table'], 'Type': entryTypes['note'], 'Contents': {'Positive URLs': vtCountPositives(entry), 'Provider': providers['vt']}}
      return {'ContentsFormat': formats['text'], 'Type': entryTypes['error'], 'Contents': 'Unknown provider for result: ' + entry['Brand']}


  def isError(entry):
      """
         Check if the given entry is an error entry

         :type entry: ``dict``
         :param entry: Demisto entry (required)

         :return: True if the entry is an error entry, false otherwise
         :rtype: ``bool``
      """
      return type(entry) == dict and entry['Type'] == entryTypes['error']


  def FormatADTimestamp(ts):
      """
         Formats an Active Directory timestamp into human readable time representation

         :type ts: ``int``
         :param ts: The timestamp to be formatted (required)

         :return: A string represeting the time
         :rtype: ``str``
      """
      return ( datetime(year=1601, month=1, day=1) + timedelta(seconds = int(ts)/10**7) ).ctime()


  def PrettifyCompactedTimestamp(x):
      """
         Formats a compacted timestamp string into human readable time representation

         :type x: ``str``
         :param x: The timestamp to be formatted (required)

         :return: A string represeting the time
         :rtype: ``str``
      """
      return '%s-%s-%sT%s:%s:%s' % (x[:4], x[4:6], x[6:8], x[8:10], x[10:12], x[12:])


  def NormalizeRegistryPath(strRegistryPath):
      """
         Normalizes a registry path string

         :type strRegistryPath: ``str``
         :param strRegistryPath: The registry path (required)

         :return: The normalized string
         :rtype: ``str``
      """
      dSub = {
          'HKCR' : 'HKEY_CLASSES_ROOT',
          'HKCU' : 'HKEY_CURRENT_USER',
          'HKLM' : 'HKEY_LOCAL_MACHINE',
          'HKU' : 'HKEY_USERS',
          'HKCC' : 'HKEY_CURRENT_CONFIG',
          'HKPD' : 'HKEY_PERFORMANCE_DATA'
      }
      for k in dSub:
          if strRegistryPath[:len(k)] == k:
              return dSub[k] + strRegistryPath[len(k):]
      return strRegistryPath


  def scoreToReputation(score):
      """
         Converts score (in number format) to human readable reputation format

         :type score: ``int``
         :param score: The score to be formatted (required)

         :return: The formatted score
         :rtype: ``str``
      """
      to_str = {
          4 : 'Critical',
          3 : 'Bad',
          2 : 'Suspicious',
          1 : 'Good',
          0.5 : 'Informational',
          0 : 'Unknown'
      }
      return to_str.get(score, 'None')


  class IntegrationLogger(object):
      """
        a logger for python integrations:
        use LOG(<message>) to add a record to the logger (message can be any object with __str__)
        use LOG.print_log() to display all records in War-Room and server log.

        :type message: ``str``
        :param message: The message to be logged

        :return: No data returned
        :rtype: ``None``
      """
      def __init__(self, ):
          self.messages = []

      def __call__(self, message):
          self.messages.append('%s' % (message, ))

      def print_log(self, verbose=False):
          text = 'Full Integration Log:\n' + '\n'.join(self.messages)
          if verbose:
            demisto.log(text)
          demisto.info(text)

  """
  a logger for python integrations:
  use LOG(<message>) to add a record to the logger (message can be any object with __str__)
  use LOG.print_log() to display all records in War-Room and server log.
  """
  LOG = IntegrationLogger()


  def formatAllArgs(args, kwds):
      """
      makes a nice string representation of all the arguments

      :type args: ``list``
      :param args: function arguments (required)

      :type kwds: ``dict``
      :param kwds: function keyword arguments (required)

      :return: string representation of all the arguments
      :rtype: ``string``
      """
      allargs = [repr(a) for a in args]
      for key,item in kwds.items():
          allargs.append('{}={}'.format(key, item))
      formattedArgs = ', '.join(allargs)

      return formattedArgs


  def logger(func):
      """
      decorator function to log the function call using LOG

      :type func: ``function``
      :param func: function to call (required)

      :return: returns the func return value.
      :rtype: ``any``
      """
      def func_wrapper(*args, **kwargs):
          LOG('calling {}({})'.format(func.func_name, formatAllArgs(args, kwargs)))
          return func(*args, **kwargs)

      return func_wrapper


  def formatCell(data, is_pretty=True):
      """
         Convert a given object to md while decending multiple levels

         :type data: ``str`` or ``list``
         :param data: The cell content (required)

         :type is_pretty: ``bool``
         :param is_pretty: Should cell content be prettified (default is True)

         :return: The formatted cell content as a string
         :rtype: ``str``
      """
      l_format = '\n' if is_pretty else ''
      if isinstance(data, STRING_TYPES):
          return data
      elif isinstance(data, dict):
          return '\n'.join(['{}: {}'.format(k, flattenCell(v, is_pretty)) for k, v in data.items()])
      else:
          return flattenCell(data, is_pretty)


  def flattenCell(data, is_pretty=True):
      """
         Flattens a markdown table cell content into a single string

         :type data: ``str`` or ``list``
         :param data: The cell content (required)

         :type is_pretty: ``bool``
         :param is_pretty: Should cell content be pretified (default is True)

         :return: A sting representation of the cell content
         :rtype: ``str``
      """
      indent = 4 if is_pretty else None
      if isinstance(data, STRING_TYPES):
          return data
      elif isinstance(data, list):
          string_list = []
          for d in data:
              try:
                  string_list.append(str(d))
              except UnicodeEncodeError:
                  string_list.append(d.encode('utf-8'))

          return ',\n'.join(string_list)
      else:
          return json.dumps(data, indent=indent, ensure_ascii=False)


  def FormatIso8601(t):
      """
         Convert a time expressed in seconds to ISO 8601 time format string

         :type t: ``int``
         :param t: Time expressed in seconds (required)

         :return: An ISO 8601 time format string
         :rtype: ``str``
      """
      return t.strftime("%Y-%m-%dT%H:%M:%S")


  def argToList(arg):
      """
         Converts a string representation of args to a python list

         :type arg: ``str`` or ``list``
         :param arg: Args to be converted (required)

         :return: A python list of args
         :rtype: ``list``
      """
      if not arg:
          return []
      if isinstance(arg, list):
          return arg
      if isinstance(arg, STRING_TYPES):
          if arg[0] == '[' and arg[-1] == ']':
              return json.loads(arg)
          return [s.strip() for s in arg.split(',')]
      return arg

  def appendContext(key, data, dedup=False):
      """
         Append data to the investigation context

         :type key: ``str``
         :param key: The context path (required)

         :type data: ``any``
         :param data: Data to be added to the context (required)

         :type dedup: ``bool``
         :param dedup: True if de-duplication is required. Default is False.

         :return: No data returned
         :rtype: ``None``
      """
      if not data:
        return
      existing = demisto.get(demisto.context(), key)
      if existing:
          strBased = isinstance(data, STRING_TYPES) and isinstance(existing, STRING_TYPES)
          if strBased:
              data = data.split(',')
              existing = existing.split(',')
          newVal = data + existing
          if dedup:
              newVal = list(set(newVal))
          if strBased:
              newVal = ','.join(newVal)
          demisto.setContext(key, newVal)
      else:
          demisto.setContext(key, data)

  def tableToMarkdown(name, t, headers=None, headerTransform=None, removeNull=False, metadata=None):
      """
         Converts a demisto table in JSON form to a Markdown table

         :type name: ``str``
         :param name: The name of the table (required)

         :type t: ``dict`` or ``list``
         :param t: The JSON table - List of dictionaries with the same keys or a single dictionary (required)

         :type headers: ``list`` or ``string``
         :keyword headers: A list of headers to be presented in the output table (by order). If string will be passed then table will have single header. Default will include all available headers.

         :type headerTransform: ``function``
         :keyword headerTransform: A function that formats the original data headers (optional)

         :type removeNull: ``bool``
         :keyword removeNull: Remove empty columns from the table. Deafult is False

         :type metadata: ``str``
         :param metadata: Metadata about the table contents

         :return: A string representation of the markdown table
         :rtype: ``str``
      """

      mdResult = ''
      if name:
          mdResult = '### ' + name + '\n'

      if metadata:
          mdResult += metadata + '\n'

      if not t or len(t) == 0:
          mdResult += '**No entries.**\n'
          return mdResult

      if not isinstance(t, list):
          t = [t]

      if headers and isinstance(headers, STRING_TYPES):
          headers = [headers]

      if not isinstance(t[0], dict):
          # the table cotains only simple objects (strings, numbers)
          # should be only one header
          if headers and len(headers) > 0:
              header = headers[0]
              t = map(lambda item: dict((h, item) for h in [header]), t)
          else:
              raise Exception("Missing headers param for tableToMarkdown. Example: headers=['Some Header']")

      # in case of headers was not provided (backward compatibility)
      if not headers:
          headers = list(t[0].keys())

      if removeNull:
          headers_aux = headers[:]
          for header in headers_aux:
              if all(obj.get(header) in ('', None, [], {}) for obj in t):
                  headers.remove(header)

      if t and len(headers) > 0:
          newHeaders = []
          if headerTransform is None:
              headerTransform = lambda s: s
          for header in headers:
              newHeaders.append(headerTransform(header))
          mdResult += '|'
          if len(newHeaders) == 1:
              mdResult += newHeaders[0]
          else:
              mdResult += '|'.join(newHeaders)
          mdResult += '|\n'
          sep = '---'
          mdResult += '|' + '|'.join([sep] * len(headers)) + '|\n'
          for entry in t:
              vals = [stringEscapeMD((formatCell(entry.get(h, ''), False) if entry.get(h) is not None else ''), True, True) for h in headers]
              mdResult += '|'
              if len(vals) == 1:
                  mdResult += vals[0]
              else:
                  mdResult += '|'.join(vals)
              mdResult += '|\n'

      else:
          mdResult += '**No entries.**\n'

      return mdResult

  tblToMd = tableToMarkdown

  def underscoreToCamelCase(s):
      """
         Convert an underscore separated string to camel case

         :type s: ``str``
         :param s: The string to convert (e.g. hello_world) (required)

         :return: The converted string (e.g. HelloWorld)
         :rtype: ``str``
      """
      components = s.split('_')
      return ''.join(x.title() for x in components)


  def createContextSingle(obj, id=None, keyTransform=None, removeNull=False):
      """
          Recieves a dict with flattened key values, and converts them into nested dicts

          :type data: ``dict`` or ``list``
          :param data: The data to be added to the context (required)

          :type id: ``str``
          :keyword id: The ID of the context entry

          :type keyTransform: ``function``
          :keyword keyTransform: A formatting function for the markdown table headers

          :type removeNull: ``bool``
          :keyword removeNull: True if empty columns should be removed, false otherwise

          :return: The converted context list
          :rtype: ``list``
      """
      res = {}
      if keyTransform is None:
          keyTransform = lambda s: s
      keys = obj.keys()
      for key in keys:
          if removeNull and obj[key] in ('', None, [], {}):
              continue
          values = key.split('.')
          current = res
          for v in values[:-1]:
              current.setdefault(v, {})
              current = current[v]
          current[keyTransform(values[-1])] = obj[key]

      if id is not None:
          res.setdefault('ID', id)
      return res


  def createContext(data, id=None, keyTransform=None, removeNull=False):
      """
          Recieves a dict with flattened key values, and converts them into nested dicts

          :type data: ``dict`` or ``list``
          :param data: The data to be added to the context (required)

          :type id: ``str``
          :keyword id: The ID of the context entry

          :type keyTransform: ``function``
          :keyword keyTransform: A formatting function for the markdown table headers

          :type removeNull: ``bool``
          :keyword removeNull: True if empty columns should be removed, false otherwise

          :return: The converted context list
          :rtype: ``list``
      """
      if isinstance(data, (list, tuple)):
          return [createContextSingle(d, id, keyTransform, removeNull) for d in data]
      else:
          return createContextSingle(data, id, keyTransform, removeNull)


  def sectionsToMarkdown(root):
      """
         Converts a list of Demisto JSON tables to markdown string of tables

         :type root: ``dict`` or ``list``
         :param root: The JSON table - List of dictionaries with the same keys or a single dictionary (required)

         :return: A string representation of the markdown table
         :rtype: ``str``
      """
      mdResult = ''
      if isinstance(root, dict):
          for section in root:
              data = root[section]
              if isinstance(data, dict):
                  data = [data]
              data = [{k: formatCell(row[k]) for k in row} for row in data]
              mdResult += tblToMd(section, data)
      return mdResult


  def fileResult(filename, data, file_type=None):
      """
         Creates a file from the given data

         :type filename: ``str``
         :param filename: The name of the file to be created (required)

         :type data: ``str``
         :param data: The file data (required)

         :type file_type: ``str``
         :param file_type: one of the entryTypes file or entryInfoFile (optional)

         :return: A Demisto war room entry
         :rtype: ``dict``
      """
      if file_type is None:
          file_type = entryTypes['file']
      temp = demisto.uniqueFile()
      with open(demisto.investigation()['id'] + '_' + temp,'wb') as f:
          f.write(data)
      return {'Contents': '', 'ContentsFormat': formats['text'], 'Type': file_type, 'File': filename, 'FileID': temp}


  def hash_djb2(s, seed=5381):
    """
     Hash string with djb2 hash function

     :type s: ``str``
     :param s: The input string to hash

     :type seed: ``int``
     :param seed: The seed for the hash function (default is 5381)

     :return: The hashed value
     :rtype: ``int``
    """
    hash = seed
    for x in s:
        hash = (( hash << 5) + hash) + ord(x)
    return hash & 0xFFFFFFFF

  def file_result_existing_file(filename, saveFilename=None):
      """
         Rename an existing file

         :type filename: ``str``
         :param filename: The name of the file to be modified (required)

         :type saveFilename: ``str``
         :param saveFilename: The new file name

         :return: A Demisto war room entry
         :rtype: ``dict``
      """
      temp = demisto.uniqueFile()
      os.rename(filename, demisto.investigation()['id'] + '_' + temp)
      return {'Contents': '', 'ContentsFormat': formats['text'], 'Type': entryTypes['file'],
          'File': saveFilename if saveFilename else filename, 'FileID': temp}


  def flattenRow(rowDict):
      """
         Flatten each element in the given rowDict

         :type rowDict: ``dict``
         :param rowDict: The dict to be flattened (required)

         :return: A flattened dict
         :rtype: ``dict``
      """
      return {k: formatCell(rowDict[k]) for k in rowDict}


  def flattenTable(tableDict):
      """
         Flatten each row in the given tableDict

         :type tableDict: ``dict``
         :param tableDict: The table to be flattened (required)

         :return: A flattened table
         :rtype: ``dict``
      """
      return [flattenRow(row) for row in tableDict]

  MARKDOWN_CHARS = "\`*_{}[]()#+-!"


  def stringEscapeMD(st, minimal_escaping=False, escape_multiline=False):
      """
         Escape any chars that might break a markdown string

         :type st: ``str``
         :param st: The string to be modified (required)

         :type minimal_escaping: ``bool``
         :param minimal_escaping: Whether replace all special characters or table format only (optional)

         :type escape_multiline: ``bool``
         :param escape_multiline: Whether convert line-ending characters (optional)

         :return: A modified string
         :rtype: ``str``
      """
      if escape_multiline:
          st = st.replace('\r\n', '<br>')#Windows
          st = st.replace('\r', '<br>')#old Mac
          st = st.replace('\n', '<br>')#Unix

      if minimal_escaping:
          for c in '|':
              st = st.replace(c, '\\' + c)
      else:
          st = "".join([ "\\" + str(c) if c in MARKDOWN_CHARS else str(c) for c in st])

      return st


  def raiseTable(root, key):
      newInternal = {}
      if key in root and isinstance(root[key], dict):
          for sub in root[key]:
              if sub not in root:
                  root[sub] =root[key][sub]
              else:
                  newInternal[sub] = root[key][sub]
          if newInternal:
              root[key] = newInternal
          else:
              del root[key]


  def zoomField(item, fieldName):
      if isinstance(item, dict) and fieldName in item:
          return item[fieldName]
      else:
          return item

  def isCommandAvailable(cmd):
      """
         Check the list of available modules to see whether a command is currently available to be run.

         :type cmd: ``str``
         :param cmd: The command to check (required)

         :return: True if command is available, False otherwise
         :rtype: ``bool``
      """
      modules = demisto.getAllSupportedCommands()
      for m in modules:
          if modules[m] and isinstance(modules[m], list):
              for c in modules[m]:
                  if c['name'] == cmd:
                      return True
      return False

  def epochToTimestamp(epoch):
      return datetime.utcfromtimestamp(epoch / 1000.0).strftime("%Y-%m-%d %H:%M:%S")

  def formatTimeColumns(data, timeColumnNames):
      for row in data:
          for k in timeColumnNames:
              row[k] = epochToTimestamp(row[k])

  def strip_tag(tag):
      strip_ns_tag = tag
      split_array = tag.split('}')
      if len(split_array) > 1:
          strip_ns_tag = split_array[1]
          tag = strip_ns_tag
      return tag


  def elem_to_internal(elem, strip_ns=1, strip=1):
      """Convert an Element into an internal dictionary (not JSON!)."""

      d = OrderedDict()
      elem_tag = elem.tag
      if strip_ns:
          elem_tag = strip_tag(elem.tag)
      for key, value in list(elem.attrib.items()):
          d['@' + key] = value

      # loop over subelements to merge them
      for subelem in elem:
          v = elem_to_internal(subelem, strip_ns=strip_ns, strip=strip)

          tag = subelem.tag
          if strip_ns:
              tag = strip_tag(subelem.tag)

          value = v[tag]
          try:
              # add to existing list for this tag
              d[tag].append(value)
          except AttributeError:
              # turn existing entry into a list
              d[tag] = [d[tag], value]
          except KeyError:
              # add a new non-list entry
              d[tag] = value

      text = elem.text
      tail = elem.tail
      if strip:
          # ignore leading and trailing whitespace
          if text:
              text = text.strip()
          if tail:
              tail = tail.strip()

      if tail:
          d['#tail'] = tail

      if d:
          # use #text element if other attributes exist
          if text:
              d["#text"] = text
      else:
          # text is the value if no attributes
          d = text or None
      return {elem_tag: d}


  def internal_to_elem(pfsh, factory=ET.Element):

      """Convert an internal dictionary (not JSON!) into an Element.
      Whatever Element implementation we could import will be
      used by default; if you want to use something else, pass the
      Element class as the factory parameter.
      """

      attribs = OrderedDict()
      text = None
      tail = None
      sublist = []
      tag = list(pfsh.keys())
      if len(tag) != 1:
          raise ValueError("Illegal structure with multiple tags: %s" % tag)
      tag = tag[0]
      value = pfsh[tag]
      if isinstance(value, dict):
          for k, v in list(value.items()):
              if k[:1] == "@":
                  attribs[k[1:]] = v
              elif k == "#text":
                  text = v
              elif k == "#tail":
                  tail = v
              elif isinstance(v, list):
                  for v2 in v:
                      sublist.append(internal_to_elem({k: v2}, factory=factory))
              else:
                  sublist.append(internal_to_elem({k: v}, factory=factory))
      else:
          text = value
      e = factory(tag, attribs)
      for sub in sublist:
          e.append(sub)
      e.text = text
      e.tail = tail
      return e


  def elem2json(elem, options, strip_ns=1, strip=1):

      """Convert an ElementTree or Element into a JSON string."""

      if hasattr(elem, 'getroot'):
          elem = elem.getroot()

      if 'pretty' in options:
          return json.dumps(elem_to_internal(elem, strip_ns=strip_ns, strip=strip), indent=4, separators=(',', ': '))
      else:
          return json.dumps(elem_to_internal(elem, strip_ns=strip_ns, strip=strip))


  def json2elem(json_data, factory=ET.Element):

      """Convert a JSON string into an Element.
      Whatever Element implementation we could import will be used by
      default; if you want to use something else, pass the Element class
      as the factory parameter.
      """

      return internal_to_elem(json.loads(json_data), factory)


  def xml2json(xmlstring, options={}, strip_ns=1, strip=1):
      """
         Convert an XML string into a JSON string.

         :type xmlstring: ``str``
         :param xmlstring: The string to be converted (required)

         :return: The converted JSON
         :rtype: ``dict`` or ``list``
      """
      elem = ET.fromstring(xmlstring)
      return elem2json(elem, options, strip_ns=strip_ns, strip=strip)


  def json2xml(json_data, factory=ET.Element):

      """Convert a JSON string into an XML string.
      Whatever Element implementation we could import will be used by
      default; if you want to use something else, pass the Element class
      as the factory parameter.
      """

      if not isinstance(json_data, dict):
          json_data = json.loads(json_data)

      elem = internal_to_elem(json_data, factory)
      return ET.tostring(elem, encoding='unicode')

  def get_hash_type(hash_file):
      """
         Checks the type of the given hash. Returns 'md5', 'sha1', 'sha256' or 'Unknown'.

         :type hash_file: ``str``
         :param hash_file: The hash to be checked (required)

         :return: The hash type
         :rtype: ``str``
      """
      hash_len = len(hash_file)
      if (hash_len == 32):
          return 'md5'
      elif (hash_len == 40):
          return 'sha1'
      elif (hash_len == 64):
          return 'sha256'
      else:
          return 'Unknown'

  def is_ip_valid(s):
      """
         Checks if the given string represents a valid IPv4 address

         :type s: ``str``
         :param s: The string to be checked (required)

         :return: True if the given string represents a valid IP address, False otherwise
         :rtype: ``bool``
      """
      a = s.split('.')
      if len(a) != 4:
          return False
      for x in a:
          if not x.isdigit():
              return False
          i = int(x)
          if i < 0 or i > 255:
              return False
      return True

  def return_error(message):
      """
         Returns error entry with given message and exits the script

         :type message: ``str``
         :param message: The message to return in the entry (required)

         :return: Error entry object
         :rtype: ``dict``
      """
      demisto.results({
          'Type': entryTypes['error'],
          'ContentsFormat': formats['text'],
          'Contents': message
      })
      sys.exit(0)

  def camelize(src, delim=' '):
      """
          Convert all keys of a dictionary (or list of dictionaries) to CamelCase (with capital first letter)

          :type src: ``dict`` or ``list``
          :param src: The dictionary (or list of dictionaries) to convert the keys for. (required)

          :type delim: ``str``
          :param delim: The delimiter between two words in the key (e.g. delim=' ' for "Start Date"). Default ' '.

          :return: The dictionary (or list of dictionaries) with the keys in CamelCase.
          :rtype: ``dict`` or ``list``
      """
      def camelize_str(src_str, delim):
          components = src_str.split(delim)
          return ''.join(map(lambda x: x.decode('utf-8').title(), components))

      if isinstance(src, list):
          return map(lambda x: camelize(x, delim), src)
      src = {camelize_str(k, delim): v for k,v in src.iteritems()}
      return src

  # Constants for common merge paths
  outputPaths = {
    'file': 'File(val.MD5 && val.MD5 == obj.MD5 || val.SHA1 && val.SHA1 == obj.SHA1 || val.SHA256 && val.SHA256 == obj.SHA256 || val.SHA512 && val.SHA512 == obj.SHA512 || val.CRC32 && val.CRC32 == obj.CRC32 || val.CTPH && val.CTPH == obj.CTPH)',
    'ip': 'IP(val.Address && val.Address == obj.Address)',
    'url': 'URL(val.Data && val.Data == obj.Data)',
    'domain': 'Domain(val.Name && val.Name == obj.Name)',
    'cve': 'CVE(val.ID && val.ID == obj.ID)',
    'email': 'Account.Email(val.Address && val.Address == obj.Address)',
    'dbotscore': 'DBotScore(val.Indicator == obj.Indicator && val.Vendor == obj.Vendor)'
  }

  ############################### REGEX FORMATTING ###############################
  regexFlags = re.M #Multi line matching
  #for the global(/g) flag use re.findall({regex_format},str)
  #else, use re.match({regex_format},str)

  ipv4Regex = r'\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b'
  emailRegex = r'\b[^@]+@[^@]+\.[^@]+\b'
  hashRegex = r'\b[0-9a-fA-F]+\b'

  md5Regex = re.compile(r'\b[0-9a-fA-F]{32}\b', regexFlags)
  sha1Regex = re.compile(r'\b[0-9a-fA-F]{40}\b', regexFlags)
  sha256Regex = re.compile(r'\b[0-9a-fA-F]{64}\b', regexFlags)

  ############################### REGEX FORMATTING end ###############################

  def string_to_table_header(string):
      """
        Checks if string, change underscores to spaces, capitalize every word.
        Example: "one_two" to "One Two"

        :type string: ``str``
        :param string: The string to be converted (required)

        :return: The converted string
        :rtype: ``str``
      """
      if isinstance(string, STRING_TYPES):
          return " ".join(word.capitalize() for word in string.replace("_"," ").split())
      else:
          raise Exception('The key is not a string: {}'.format(string))

  def string_to_context_key(string):
      """
       Checks if string, removes underscores, capitalize every word.
       Example: "one_two" to "OneTwo"

       :type string: ``str``
       :param string: The string to be converted (required)

       :return: The converted string
       :rtype: ``str``
      """
      if isinstance(string, STRING_TYPES):
          return "".join(word.capitalize() for word in string.split('_'))
      else:
          raise Exception('The key is not a string: {}'.format(string))

  def parse_date_range(date_range, date_format = None, to_timestamp = False):
      """
        Parses date_range string to a tuple date strings (start, end). Input must be in format 'number date_range_unit')
        Examples: (2 hours, 4 minutes, 6 month, 1 day, etc.)

        :type date_range: ``str``
        :param date_range: The date range to be parsed (required)

        :type date_format: ``str``
        :param date_format: Date format to convert the date_range to. (optional)

        :type to_timestamp: ``bool``
        :param to_timestamp: If set to True, then will return time stamp rather than a datetime.datetime. (optional)

        :return: The parsed date range.
        :rtype: ``(datetime.datetime, datetime.datetime)`` or ``(int, int)`` or ``(str, str)``
      """
      range_split = date_range.split(' ')
      if len(range_split) != 2:
          return_error('date_range must be "number date_range_unit", examples: (2 hours, 4 minutes, 6 months, 1 day, etc.)')

      number = int(range_split[0])
      if not range_split[1] in ['minute', 'minutes', 'hour', 'hours', 'day', 'days', 'month', 'months', 'year', 'years']:
          return_error('The unit of date_range is invalid. Must be minutes, hours, days, months or years')

      end_time = datetime.now()
      start_time = datetime.now()
      unit = range_split[1]
      if 'minute' in unit:
          start_time = end_time - timedelta(minutes=number)
      elif 'hour' in unit:
          start_time = end_time - timedelta(hours=number)
      elif 'day' in unit:
          start_time = end_time - timedelta(days=number)
      elif 'month' in unit:
          start_time = end_time - timedelta(days=number*30)
      elif 'year' in unit:
          start_time = end_time - timedelta(days=number*365)

      if to_timestamp:
          return date_to_timestamp(start_time), date_to_timestamp(end_time)

      if date_format:
          return datetime.strftime(start_time, date_format), datetime.strftime(end_time, date_format)

      return start_time, end_time

  def timestamp_to_datestring(timestamp, date_format="%Y-%m-%dT%H:%M:%S.000Z"):
      """
        Parses timestamp (milliseconds) to a date string in the provided date format (by default: ISO 8601 format)
        Examples: (1541494441222, 1541495441000, etc.)

        :type timestamp: ``int`` or ``str``
        :param timestamp: The timestamp to be parsed (required)

        :type date_format: ``str``
        :param date_format: The date format the timestamp should be parsed to. (optional)

        :return: The parsed timestamp in the date_format
        :rtype: ``str``
      """
      return datetime.fromtimestamp(int(timestamp) / 1000.0).strftime(date_format)

  def date_to_timestamp(date_str_or_dt, date_format='%Y-%m-%dT%H:%M:%S'):
      """
        Parses date_str_or_dt in the given format (default: %Y-%m-%dT%H:%M:%S) to miliseconds
        Examples: ('2018-11-06T08:56:41', '2018-11-06T08:56:41', etc.)

        :type date_str_or_dt: ``str`` or ``datetime.datetime``
        :param date_str_or_dt: The date to be parsed. (required)

        :type date_format: ``str``
        :param date_format: The date format of the date string (will be ignored if date_str_or_dt is of type datetime.datetime). (optional)

        :return: The parsed timestamp.
        :rtype: ``int``
      """
      if isinstance(date_str_or_dt, basestring):
          return int(time.mktime(time.strptime(date_str_or_dt, date_format))*1000)

      # otherwise datetime.datetime
      return int(time.mktime(date_str_or_dt.timetuple()*1000))

type: python
tags:
- infra
- server
comment: Common code that will be merged into each server script when it runs
system: true
scripttarget: 0
dependson: {}
timeout: 0s
tests:
  - TestPYCommonServer
