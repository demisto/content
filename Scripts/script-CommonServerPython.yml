commonfields:
  id: CommonServerPython
  version: 1
name: CommonServerPython
script: |-
  # Common functions script
  # =======================
  # This script will be appended to each server script before being executed.
  # Please notice that to add custom common code, add it to the CommonServerUserPython script
  from datetime import datetime, timedelta
  import time
  import json
  import optparse
  import sys
  import os
  from collections import OrderedDict

  import xml.etree.cElementTree as ET

  entryTypes = {'note': 1, 'downloadAgent': 2, 'file': 3, 'error': 4, 'pinned': 5, 'userManagement': 6, 'image': 7, 'plagroundError': 8, 'entryInfoFile': 9, 'map': 15}
  formats = {'html': 'html', 'table': 'table', 'json': 'json', 'text': 'text', 'dbotResponse': 'dbotCommandResponse', 'markdown': 'markdown'}
  brands = {'xfe': 'xfe', 'vt': 'virustotal', 'wf': 'WildFire', 'cy': 'cylance', 'cs': 'crowdstrike-intel'}
  providers = {'xfe': 'IBM X-Force Exchange', 'vt': 'VirusTotal', 'wf': 'WildFire', 'cy': 'Cylance', 'cs': 'CrowdStrike'}
  thresholds = {'xfeScore': 4, 'vtPositives': 10, 'vtPositiveUrlsForIP': 30}
  # Checks if the given entry from a URL reputation query is positive (known bad)
  def positiveUrl(entry):
      if entry['Type'] != entryTypes['error'] and entry['ContentsFormat'] == formats['json']:
          if entry['Brand'] == brands['xfe']:
              return demisto.get(entry, 'Contents.url.result.score') > thresholds['xfeScore']
          if entry['Brand'] == brands['vt']:
              return demisto.get(entry, 'Contents.positives') > thresholds['vtPositives']
          if entry['Brand'] == brands['cs'] and demisto.get(entry, 'Contents'):
              c = demisto.get(entry, 'Contents')[0]
              return demisto.get(c, 'indicator') and demisto.get(c, 'malicious_confidence') in ['high', 'medium']
      return False
  def positiveFile(entry):
      if entry['Type'] != entryTypes['error'] and entry['ContentsFormat'] == formats['json']:
          if entry['Brand'] == brands['xfe'] and (demisto.get(entry, 'Contents.malware.family') or demisto.gets(entry, 'Contents.malware.origins.external.family')):
              return True
          if entry['Brand'] == brands['vt']:
              return demisto.get(entry, 'Contents.positives') > thresholds['vtPositives']
          if entry['Brand'] == brands['wf']:
              return demisto.get(entry, 'Contents.wildfire.file_info.malware') == 'yes'
          if entry['Brand'] == brands['cy'] and demisto.get(entry, 'Contents'):
              contents = demisto.get(entry, 'Contents')
              k = contents.keys()
              if k and len(k) > 0:
                  v = contents[k[0]]
                  if v and demisto.get(v, 'generalscore'):
                      return v['generalscore'] < -0.5
          if entry['Brand'] == brands['cs'] and demisto.get(entry, 'Contents'):
              c = demisto.get(entry, 'Contents')[0]
              return demisto.get(c, 'indicator') and demisto.get(c, 'malicious_confidence') in ['high', 'medium']
      return False
  def vtCountPositives(entry):
      positives = 0
      if demisto.get(entry, 'Contents.detected_urls'):
          for detected in demisto.get(entry, 'Contents.detected_urls'):
              if demisto.get(detected, 'positives') > thresholds['vtPositives']:
                  positives += 1
      return positives
  def positiveIp(entry):
      if entry['Type'] != entryTypes['error'] and entry['ContentsFormat'] == formats['json']:
          if entry['Brand'] == brands['xfe']:
              return demisto.get(entry, 'Contents.reputation.score') > thresholds['xfeScore']
          if entry['Brand'] == brands['vt'] and demisto.get(entry, 'Contents.detected_urls'):
              return vtCountPositives(entry) > thresholds['vtPositiveUrlsForIP']
          if entry['Brand'] == brands['cs'] and demisto.get(entry, 'Contents'):
              c = demisto.get(entry, 'Contents')[0]
              return demisto.get(c, 'indicator') and demisto.get(c, 'malicious_confidence') in ['high', 'medium']
      return False
  def formatEpochDate(t):
      if t:
          return time.ctime(t)
      return ''
  def compareDates(date1, date2, dateFormat):
    # should return delta between two dates
    # if instead of date passed string 'now' then will be compared to current time
    # date format must be according to python date formats: https://docs.python.org/2/library/datetime.html
    first = None
    if date1 == 'now':
        first = datetime.now(tzlocal())
    elif isinstance(date1, basestring):
        first = parse(date1)

    second = None
    if date2 == 'now':
        second = datetime.now(tzlocal())
    elif isinstance(date2, basestring):
        second = parse(date2)
    delta = first - second

    return delta
  def shortCrowdStrike(entry):
      if entry['Type'] != entryTypes['error'] and entry['ContentsFormat'] == formats['json']:
          if entry['Brand'] == brands['cs'] and demisto.get(entry, 'Contents'):
              c = demisto.get(entry, 'Contents')[0]
              csRes = '## CrowdStrike Falcon Intelligence'
              csRes += '\n\n### Indicator - ' + demisto.gets(c, 'indicator')
              labels = demisto.get(c, 'labels')
              if labels:
                  csRes += '\n### Labels'
                  csRes += '\nName|Created|Last Valid'
                  csRes += '\n----|-------|----------'
                  for label in labels:
                      csRes += '\n' + demisto.gets(label, 'name') + '|' + formatEpochDate(demisto.get(label, 'created_on')) + '|' + formatEpochDate(demisto.get(label, 'last_valid_on'))
              relations = demisto.get(c, 'relations')
              if relations:
                  csRes += '\n### Relations'
                  csRes += '\nIndicator|Type|Created|Last Valid'
                  csRes += '\n---------|----|-------|----------'
                  for r in relations:
                      csRes += '\n' + demisto.gets(r, 'indicator') + '|' + demisto.gets(r, 'type') + '|' + formatEpochDate(demisto.get(label, 'created_date')) + '|' + formatEpochDate(demisto.get(label, 'last_valid_date'))
              return {'ContentsFormat': formats['markdown'], 'Type': entryTypes['note'], 'Contents': csRes}
      return entry
  def shortUrl(entry):
      if entry['Type'] != entryTypes['error'] and entry['ContentsFormat'] == formats['json']:
          c = entry['Contents']
          if entry['Brand'] == brands['xfe']:
              return {'ContentsFormat': formats['table'], 'Type': entryTypes['note'], 'Contents': {
                  'Country': c['country'], 'MalwareCount': demisto.get(c, 'malware.count'),
                  'A': demisto.gets(c, 'resolution.A'), 'AAAA': demisto.gets(c, 'resolution.AAAA'),
                  'Score': demisto.get(c, 'url.result.score'), 'Categories': demisto.gets(c, 'url.result.cats'),
                  'URL': demisto.get(c, 'url.result.url'), 'Provider': providers['xfe'], 'ProviderLink': 'https://exchange.xforce.ibmcloud.com/url/' + demisto.get(c, 'url.result.url')}}
          if entry['Brand'] == brands['vt']:
              return {'ContentsFormat': formats['table'], 'Type': entryTypes['note'], 'Contents': {
                  'ScanDate': c['scan_date'], 'Positives': c['positives'], 'Total': c['total'],
                  'URL': c['url'], 'Provider': providers['vt'], 'ProviderLink': c['permalink']}}
          if entry['Brand'] == brands['cs'] and demisto.get(entry, 'Contents'):
              return shortCrowdStrike(entry)
      return {'ContentsFormat': 'text', 'Type': 4, 'Contents': 'Unknown provider for result: ' + entry['Brand']}
  def shortFile(entry):
      if entry['Type'] != entryTypes['error'] and entry['ContentsFormat'] == formats['json']:
          c = entry['Contents']
          if entry['Brand'] == brands['xfe']:
              cm = c['malware']
              return {'ContentsFormat': formats['table'], 'Type': entryTypes['note'], 'Contents': {
                  'Family': cm['family'], 'MIMEType': cm['mimetype'], 'MD5': cm['md5'][2:] if 'md5' in cm else '',
                  'CnCServers': demisto.get(cm, 'origins.CncServers.count'), 'DownloadServers': demisto.get(cm, 'origins.downloadServers.count'),
                  'Emails': demisto.get(cm, 'origins.emails.count'), 'ExternalFamily': demisto.gets(cm, 'origins.external.family'),
                  'ExternalCoverage': demisto.get(cm, 'origins.external.detectionCoverage'), 'Provider': providers['xfe'],
                  'ProviderLink': 'https://exchange.xforce.ibmcloud.com/malware/' + cm['md5'].replace('0x', '')}}
          if entry['Brand'] == brands['vt']:
              return {'ContentsFormat': formats['table'], 'Type': entryTypes['note'], 'Contents': {
                  'Resource': c['resource'], 'ScanDate': c['scan_date'], 'Positives': c['positives'],
                  'Total': c['total'], 'SHA1': c['sha1'], 'SHA256': c['sha256'], 'Provider': providers['vt'], 'ProviderLink': c['permalink']}}
          if entry['Brand'] == brands['wf']:
              c = demisto.get(entry, 'Contents.wildfire.file_info')
              if c:
                  return {'Contents': {'Type': c['filetype'], 'Malware': c['malware'], 'MD5': c['md5'], 'SHA256': c['sha256'], 'Size': c['size'], 'Provider': providers['wf']},
                          'ContentsFormat': formats['table'], 'Type': entryTypes['note']}
          if entry['Brand'] == brands['cy'] and demisto.get(entry, 'Contents'):
              contents = demisto.get(entry, 'Contents')
              k = contents.keys()
              if k and len(k) > 0:
                  v = contents[k[0]]
                  if v and demisto.get(v, 'generalscore'):
                      return {'Contents': {'Status': v['status'], 'Code': v['statuscode'], 'Score': v['generalscore'], 'Classifiers': str(v['classifiers']), 'ConfirmCode': v['confirmcode'], 'Error': v['error'], 'Provider': providers['cy']},
                              'ContentsFormat': formats['table'], 'Type': entryTypes['note']}
          if entry['Brand'] == brands['cs'] and demisto.get(entry, 'Contents'):
              return shortCrowdStrike(entry)
      return {'ContentsFormat': formats['text'], 'Type': entryTypes['error'], 'Contents': 'Unknown provider for result: ' + entry['Brand']}
  def shortIp(entry):
      if entry['Type'] != entryTypes['error'] and entry['ContentsFormat'] == formats['json']:
          c = entry['Contents']
          if entry['Brand'] == brands['xfe']:
              cr = c['reputation']
              return {'ContentsFormat': formats['table'], 'Type': entryTypes['note'], 'Contents': {
                  'IP': cr['ip'], 'Score': cr['score'], 'Geo': str(cr['geo']), 'Categories': str(cr['cats']),
                  'Provider': providers['xfe']}}
          if entry['Brand'] == brands['vt']:
              return {'ContentsFormat': formats['table'], 'Type': entryTypes['note'], 'Contents': {'Positive URLs': vtCountPositives(entry), 'Provider': providers['vt']}}
          if entry['Brand'] == brands['cs'] and demisto.get(entry, 'Contents'):
              return shortCrowdStrike(entry)
      return {'ContentsFormat': formats['text'], 'Type': entryTypes['error'], 'Contents': 'Unknown provider for result: ' + entry['Brand']}
  def shortDomain(entry):
      if entry['Type'] != entryTypes['error'] and entry['ContentsFormat'] == formats['json']:
          if entry['Brand'] == brands['vt']:
              return {'ContentsFormat': formats['table'], 'Type': entryTypes['note'], 'Contents': {'Positive URLs': vtCountPositives(entry), 'Provider': providers['vt']}}
      return {'ContentsFormat': formats['text'], 'Type': entryTypes['error'], 'Contents': 'Unknown provider for result: ' + entry['Brand']}
  def isError(entry):
      return type(entry) == dict and entry['Type'] == entryTypes['error']
  def FormatADTimestamp(ts):
      return ( datetime(year=1601, month=1, day=1) + timedelta(seconds = int(ts)/10**7) ).ctime()
  def PrettifyCompactedTimestamp(x):
      return '%s-%s-%sT%s:%s:%s' % (x[:4], x[4:6], x[6:8], x[8:10], x[10:12], x[12:])
  def NormalizeRegistryPath(strRegistryPath):
      dSub = {
          'HKCR' : 'HKEY_CLASSES_ROOT',
          'HKCU' : 'HKEY_CURRENT_USER',
          'HKLM' : 'HKEY_LOCAL_MACHINE',
          'HKU' : 'HKEY_USERS',
          'HKCC' : 'HKEY_CURRENT_CONFIG',
          'HKPD' : 'HKEY_PERFORMANCE_DATA'
      }
      for k in dSub:
          if strRegistryPath[:len(k)] == k:
              return dSub[k] + strRegistryPath[len(k):]
      return strRegistryPath


  class IntegrationLogger(object):
      def __init__(self, ):
          self.messages = []

      def __call__(self, message):
          self.messages.append('%s' % (message, ))

      def print_log(self, ):
          text = 'Full Integration Log:\n' + '\n'.join(self.messages)
          demisto.log(text)
          demisto.info(text)

  '''
  a logger for oython integrations:
  use LOG(<message>) to add a record to the logger (message can be any object with __str__)
  use LOG.print_log() to display all records in War-Room and server log.
  '''
  LOG = IntegrationLogger()


  def formatCell(data, is_pretty=True):
      l_format = '\n' if is_pretty else ''
      if type(data) in [unicode, str]:
          return data
      elif isinstance(data, dict):
          return l_format.join([k + ': ' + flattenCell(data[k], is_pretty) for k in data])
      else:
          return flattenCell(data, is_pretty)

  def flattenCell(data, is_pretty=True):
      indent = 4 if is_pretty else None
      if type(data) in [unicode, str]:
          return data
      else:
          return json.dumps(data, indent=indent)

  def FormatIso8601(t):
      return t.strftime("%Y-%m-%dT%H:%M:%S")

  def argToList(arg):
      if not arg:
          return []
      if isinstance(arg, list):
          return arg
      if type(arg) in [str, unicode]:
          if arg[0] == '[' and arg[-1] == ']':
              return json.loads(arg)
          return [s.strip() for s in arg.split(',')]
      return arg

  def appendContext(key, data, dedup=False):
      if not data:
        return
      existing = demisto.get(demisto.context(), key)
      if existing:
          strBased = type(data) in [str, unicode] and type(existing) in [str, unicode]
          if strBased:
              data = data.split(',')
              existing = existing.split(',')
          newVal = data + existing
          if dedup:
              newVal = list(set(newVal))
          if strBased:
              newVal = ','.join(newVal)
          demisto.setContext(key, newVal)
      else:
          demisto.setContext(key, data)

  def tableToMarkdown(name, t, headers=None):
      '''
      Converts a demisto table in JSON form to a Markdown table
      @param {String} name - the name of the table
      @param {Object(s)} t - the JSON table - Array of objects with the same keys or a single objects
      @param {list} headers - optinal, the output markdown table will show only these headers (by order)
      @returns {string} array from the original string-list
      '''
      if not isinstance(t, list):
          t = [t]
      # in case of headers was not provided (backward compatibility)
      if not headers:
          headers = t[0].keys()

      mdResult = ''
      if name:
          mdResult = '### ' + name + '\n'

      if t:
          if len(headers) == 1:
              mdResult += headers[0]+'|' + '\n'
          else:
              mdResult += '|'.join(headers) + '\n'

          sep = '-'
          if len(headers) == 1:
              sep = '-|'
          mdResult += '|'.join([sep] * len(headers)) + '\n'
          for entry in t:
              vals = [(formatCell(entry[h], False) if h in entry else '') for h in headers]
              if len(vals) == 1:
                  mdResult += vals[0] + '|' + '\n'
              else:
                  mdResult += '|'.join(vals) + '\n'
      else:
          mdResult += '**No entries.**\n'
      return mdResult


  tblToMd = tableToMarkdown

  def createContextSingle(obj, id=None):
      res = {}
      keys = obj.keys()
      for key in keys:
          values = key.split('.')
          current = res
          for v in values[:-1]:
              current.setdefault(v, {})
              current = current[v]
          current[values[-1]] = obj[key]

      if id is not None:
          res.setdefault('ID', id)
      return res


  def createContext(data, id=None):
      if isinstance(data, (list, tuple)):
          return [createContextSingle(d, id) for d in data]
      else:
          return createContextSingle(data, id)


  def mapSingleObj(obj, mapFields, filter_func=None):
      if filter_func is None:
          filter_func = lambda mf: True

      d = {}
      for f in mapFields:
          if filter_func(f):
              d[f['to']] = demisto.dt(obj, f['from'])

      return d


  def mapObj(content, mapFields, filter_func=None):
      '''
      Converts object fields according to mapping dictionary
      @param content - original content to copy
      @param mapFields - an object assosiating source and destination object fields
      @filter_func - function to filter out fields
      @returns the mapped object
      '''
      if isinstance(content, (list, tuple)):
          return [mapSingleObj(item, mapFields, filter_func) for item in content]
      else:
          return mapSingleObj(content, mapFields, filter_func)


  def createEntry(result, translator, MDfilter=None):
      '''
      Creates war room entry
      @param {dict} result - the raw result to be parsed
      @param {dict} translator - maps raw data to war room output. Should be of the following format:
      {
        contextPath: <context-path>,
        title: <war-room-title>,
        innerPath: (optional) path to the root of all data in result dictionary.
        data: [
              {to: <dest-key>, from: <orig-key>, (optional) humanReadable: <true/false>},
              {to: <dest-key>, from: <orig-key>, (optional) humanReadable: <true/false>},
              ...
          ]
      }
      * dest-key/orig-key should be sparated with '.' (e.g. 'File.Malicious')
      * dest-key is also used for war room table headers
      * humanReadable states whether field should appear in war room table. Default is true.
      @param {function} MDfilter - (optional) filters out fields that shouldn't be displayed in warroom (returns true/false). Default uses humanReadable field.
      @returns {dict} - the war room entry
      '''
      # filters out all fields where humanReadable is false
      if MDfilter is None:
          MDfilter = lambda mf: mf.get('humanReadable', True)

      entry = {
          'Type': entryTypes['note'],
          'Contents': result,
          'ContentsFormat': formats['json'],
          'ReadableContentsFormat': formats['markdown'],
      }

      content = demisto.dt(result, translator['innerPath']) if 'innerPath' in translator else result;
      translatedMD = mapObj(content, translator['data'], MDfilter)
      entry['HumanReadable'] = tableToMarkdown(translator['title'], translatedMD)

      translatedContext = mapObj(content, translator['data'])
      context = createContext(translatedContext)
      entry['EntryContext'] = {translator['contextPath'] : context}

      return entry

  def sectionsToMarkdown(root):
      mdResult = ''
      if isinstance(root, dict):
          for section in root:
              data = root[section]
              if isinstance(data, dict):
                  data = [data]
              data = [{k: formatCell(row[k]) for k in row} for row in data]
              mdResult += tblToMd(section, data)
      return mdResult


  def fileResult(filename, data):
      temp = demisto.uniqueFile()
      with open(demisto.investigation()['id'] + '_' + temp,'wb') as f:
          f.write(data)
      return {'Contents': '', 'ContentsFormat': formats['text'], 'Type': entryTypes['file'], 'File': filename, 'FileID': temp}


  def file_result_existing_file(filename, saveFilename = None):
      """ Create a file result from an existing file by moving it into the right file name """
      temp = demisto.uniqueFile()
      os.rename(filename, demisto.investigation()['id'] + '_' + temp)
      return {'Contents': '', 'ContentsFormat': formats['text'], 'Type': entryTypes['file'],
          'File': saveFilename if saveFilename else filename, 'FileID': temp}


  def flattenRow(rowDict):
      return {k: formatCell(rowDict[k]) for k in rowDict}


  def flattenTable(tableDict):
      return [flattenRow(row) for row in tableDict]

  MARKDOWN_CHARS = "\`*_{}[]()#+-!"


  def stringEscapeMD(st):
      return "".join([ "\\" + str(c) if c in MARKDOWN_CHARS else str(c) for c in st])


  def raiseTable(root, key):
      newInternal = {}
      if key in root and isinstance(root[key], dict):
          for sub in root[key]:
              if sub not in root:
                  root[sub] =root[key][sub]
              else:
                  newInternal[sub] = root[key][sub]
          if newInternal:
              root[key] = newInternal
          else:
              del root[key]


  def zoomField(item, fieldName):
      if isinstance(item, dict) and fieldName in item:
          return item[fieldName]
      else:
          return item

  def isCommandAvailable(cmd):
      modules = demisto.getAllSupportedCommands()
      for m in modules:
          if modules[m] and isinstance(modules[m], list):
              for c in modules[m]:
                  if c['name'] == cmd:
                      return True
      return False

  def epochToTimestamp(epoch):
      return datetime.utcfromtimestamp(epoch / 1000.0).strftime("%Y-%m-%d %H:%M:%S")
  def formatTimeColumns(data, timeColumnNames):
      for row in data:
          for k in timeColumnNames:
              row[k] = epochToTimestamp(row[k])

  def strip_tag(tag):
      strip_ns_tag = tag
      split_array = tag.split('}')
      if len(split_array) > 1:
          strip_ns_tag = split_array[1]
          tag = strip_ns_tag
      return tag


  def elem_to_internal(elem, strip_ns=1, strip=1):
      """Convert an Element into an internal dictionary (not JSON!)."""

      d = OrderedDict()
      elem_tag = elem.tag
      if strip_ns:
          elem_tag = strip_tag(elem.tag)
      for key, value in list(elem.attrib.items()):
          d['@' + key] = value

      # loop over subelements to merge them
      for subelem in elem:
          v = elem_to_internal(subelem, strip_ns=strip_ns, strip=strip)

          tag = subelem.tag
          if strip_ns:
              tag = strip_tag(subelem.tag)

          value = v[tag]

          try:
              # add to existing list for this tag
              d[tag].append(value)
          except AttributeError:
              # turn existing entry into a list
              d[tag] = [d[tag], value]
          except KeyError:
              # add a new non-list entry
              d[tag] = value
      text = elem.text
      tail = elem.tail
      if strip:
          # ignore leading and trailing whitespace
          if text:
              text = text.strip()
          if tail:
              tail = tail.strip()

      if tail:
          d['#tail'] = tail

      if d:
          # use #text element if other attributes exist
          if text:
              d["#text"] = text
      else:
          # text is the value if no attributes
          d = text or None
      return {elem_tag: d}


  def internal_to_elem(pfsh, factory=ET.Element):

      """Convert an internal dictionary (not JSON!) into an Element.
      Whatever Element implementation we could import will be
      used by default; if you want to use something else, pass the
      Element class as the factory parameter.
      """

      attribs = OrderedDict()
      text = None
      tail = None
      sublist = []
      tag = list(pfsh.keys())
      if len(tag) != 1:
          raise ValueError("Illegal structure with multiple tags: %s" % tag)
      tag = tag[0]
      value = pfsh[tag]
      if isinstance(value, dict):
          for k, v in list(value.items()):
              if k[:1] == "@":
                  attribs[k[1:]] = v
              elif k == "#text":
                  text = v
              elif k == "#tail":
                  tail = v
              elif isinstance(v, list):
                  for v2 in v:
                      sublist.append(internal_to_elem({k: v2}, factory=factory))
              else:
                  sublist.append(internal_to_elem({k: v}, factory=factory))
      else:
          text = value
      e = factory(tag, attribs)
      for sub in sublist:
          e.append(sub)
      e.text = text
      e.tail = tail
      return e


  def elem2json(elem, options, strip_ns=1, strip=1):

      """Convert an ElementTree or Element into a JSON string."""

      if hasattr(elem, 'getroot'):
          elem = elem.getroot()

      if options.has_key('pretty'):
          return json.dumps(elem_to_internal(elem, strip_ns=strip_ns, strip=strip), indent=4, separators=(',', ': '))
      else:
          return json.dumps(elem_to_internal(elem, strip_ns=strip_ns, strip=strip))


  def json2elem(json_data, factory=ET.Element):

      """Convert a JSON string into an Element.
      Whatever Element implementation we could import will be used by
      default; if you want to use something else, pass the Element class
      as the factory parameter.
      """

      return internal_to_elem(json.loads(json_data), factory)


  def xml2json(xmlstring, options={}, strip_ns=1, strip=1):

      """Convert an XML string into a JSON string."""

      elem = ET.fromstring(xmlstring)
      return elem2json(elem, options, strip_ns=strip_ns, strip=strip)


  def json2xml(json_data, factory=ET.Element):

      """Convert a JSON string into an XML string.
      Whatever Element implementation we could import will be used by
      default; if you want to use something else, pass the Element class
      as the factory parameter.
      """
      if not isinstance(json_data, dict):
          json_data = json.loads(json_data)

      elem = internal_to_elem(json_data, factory)
      return ET.tostring(elem)

  # return 'md5', 'sha1', 'sha256' or 'Unknown' upon the given hash file
  def get_hash_type(hash_file):
      hash_len = len(hash_file)
      if (hash_len == 32):
          return 'md5'
      elif (hash_len == 40):
          return 'sha1'
      elif (hash_len == 64):
          return 'sha256'
      else:
          return 'Unknown'

  # ensure that s is the form of <number>.<number>.<number>.<number>
  def is_ip_valid(s):
      a = s.split('.')
      if len(a) != 4:
          return False
      for x in a:
          if not x.isdigit():
              return False
          i = int(x)
          if i < 0 or i > 255:
              return False
      return True

  # Constants for common merge paths
  outputPaths = {
    'file': 'File(val.MD5 && val.MD5 == obj.MD5 || val.SHA1 && val.SHA1 == obj.SHA1 || val.SHA256 && val.SHA256 == obj.SHA256)',
    'ip': 'IP(val.Address && val.Address == obj.Address)',
    'url': 'URL(val.Data && val.Data == obj.Data)',
    'domain': 'Domain(val.Name && val.Name == obj.Name)',
    'cve': 'CVE(val.ID && val.ID == obj.ID)',
    'email': 'Account.Email(val.Address && val.Address == obj.Address)'
  }

type: python
tags:
- infra
- server
comment: Common code that will be merged into each server script when it runs
system: true
scripttarget: 0
dependson: {}
timeout: 0s
releaseNotes: "Removed dq implementation, using demisto.dt instead"