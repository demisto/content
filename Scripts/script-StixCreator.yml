commonfields:
  id: StixCreator
  version: -1
name: StixCreator
script: |-
  ''' IMPORTS '''
  import json

  from stix2 import Indicator, Bundle

  indicators = []

  userArgs = demisto.args().get('indicators','Unknown')
  if isinstance(userArgs, dict) == True:
      all_args = json.loads(json.dumps(userArgs))
  else:
      try:
          all_args = json.loads(demisto.args().get('indicators','Unknown'))
      except:
          return_error('indicators argument is invalid json object')

  counter = 0
  for indicator_fields in all_args:
      demisto_indicator_type = all_args[indicator_fields].get('indicator_type','Unknown')
      value = all_args[indicator_fields].get('value','')
      source_system = all_args[indicator_fields].get('source','')
      demisto_score = all_args[indicator_fields].get('score','')
      first_seen = all_args[indicator_fields].get('firstSeen','1970-01-01T00:00:00+00:00')
      demisto_created = all_args[indicator_fields].get('timestamp','1970-01-01T00:00:00+00:00')
      last_seen = all_args[indicator_fields].get('lastSeen','1970-01-01T00:00:00+00:00')
      counter+=1
      stix_type_and_value = ""

      if demisto_indicator_type.lower() == "File MD5".lower():
          stix_type_and_value = "[file:hashes.md5 = '" + value + "']"
      elif demisto_indicator_type.lower() == "File SHA-1".lower():
          stix_type_and_value = "[file:hashes.sha1 = '" + value + "']"
      elif demisto_indicator_type.lower() == "File SHA1".lower():
          stix_type_and_value = "[file:hashes.sha1 = '" + value + "']"
      elif demisto_indicator_type.lower() == "File SHA256".lower():
          stix_type_and_value = "[file:hashes.sha256 = '" + value + "']"
      elif demisto_indicator_type.lower() == "File SHA-256".lower():
          stix_type_and_value = "[file:hashes.sha256 = '" + value + "']"
      elif demisto_indicator_type.lower() == "IP".lower():
          stix_type_and_value = "[ipv4-addr:value = '" + value + "']"
      elif demisto_indicator_type.lower() == "URL".lower():
          stix_type_and_value = "[url:value = '" + value + "']"
      else:
          stix_type_and_value = "[{}:value = '{}']".format(demisto_indicator_type.lower(),value)

      label_as_type = demisto_indicator_type.lower()

      if demisto_score.lower() == "bad":
          demisto_score = "High"
      elif demisto_score.lower() == "suspicious":
          demisto_score = "Medium"
      elif demisto_score.lower() == "good":
          demisto_score = "None"
      else:
          demisto_score = "Not Specified"

      indicator = Indicator(labels=[label_as_type],
                            pattern=stix_type_and_value,
                            source=source_system,
                            created=demisto_created,
                            modified=last_seen,
                            firstSeen=first_seen,
                            score=demisto_score,
                            allow_custom=True)

      indicators.append(indicator)

  if counter > 1:
      bundle = Bundle(indicators)
      context = {
          'StixExportedIndicators(val.pattern && val.pattern == obj.pattern)': json.loads(str(bundle))
      }
      return_outputs(readable_output="",
                     outputs=context,
                     raw_response=str(bundle))
  else:

      context = {
          'StixExportedIndicators(val.pattern && val.pattern == obj.pattern)': json.loads(str(indicators[0]))
      }
      return_outputs(readable_output="",
                     outputs=context,
                     raw_response=str(indicators[0]))
type: python
tags: []
comment: Gets a list of indicators from the indicators argument, and generates a JSON file in STIX 2.0 format.
enabled: true
args:
- name: indicators
  required: true
  description: A JSON object of all indicators and their fields, indicator index mapped to Demisto indicator fields.
outputs:
- contextPath: StixExportedIndicators.created
  description: The date/time that the indicator was created.
  type: date
- contextPath: StixExportedIndicators.firstSeen
  description: The date/time that the indicator was first seen.
  type: date
- contextPath: StixExportedIndicators.source
  description: The source system for this indicator.
  type: string
- contextPath: StixExportedIndicators.type
  description: The STIX type (always exported as "indicator").
  type: string
- contextPath: StixExportedIndicators.pattern
  description: ' The type and value of indicators, for example: URL, IPv4, domain, email, and so on. '
  type: string
- contextPath: StixExportedIndicators.score
  description: The STIX impact score ("High", "Medium", "None", or "Not Specified")
  type: string
- contextPath: StixExportedIndicators.modified
  description: The date/time that the indicator was last seen.
  type: date
scripttarget: 0
runonce: false
dockerimage: demisto/stix2:1.0.0.204
runas: DBotWeakRole
releaseNotes: "New automation"
tests:
- StixCreator-Test
