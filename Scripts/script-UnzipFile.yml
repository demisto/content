commonfields:
  id: UnzipFile
  version: -1
name: UnzipFile
script: |-
  import zipfile
  import os

  filePath = None
  fileEntryID = ''
  if demisto.args().has_key('fileName') or demisto.args().has_key('lastZipFileInWarroom'):
      entries = demisto.executeCommand('getEntries', {})
      for entry in entries:
          fn = demisto.get(entry, 'File')

          is_text = type(fn) in [unicode, str]
          is_correct_file = demisto.args().get('fileName', '').lower() == fn.lower()
          is_zip = fn.lower().endswith('.zip')

          if is_text and is_zip:
              if demisto.args().has_key('fileName') and is_correct_file:
                  fileEntryID = entry['ID']
                  break
              if demisto.args().has_key('lastZipFileInWarroom'):
                  fileEntryID = entry['ID']

          if fileEntryID == '':
              errorMessage = ''
              if demisto.args().has_key('fileName'):
                  demisto.results({
                      'Type': entryTypes['error'],
                      'ContentsFormat': formats['text'],
                      'Contents': demisto.args().has_key('fileName') + ' not such file in war room'
                  })
              if demisto.args().has_key('lastZipFileInWarroom'):
                  demisto.results({
                      'Type': entryTypes['error'],
                      'ContentsFormat': formats['text'],
                      'Contents': 'Not found zip file in war room'
                  })

              sys.exit(0)

  if demisto.args().has_key('entryID'):
      fileEntryID = demisto.args().get('entryID')

  if not fileEntryID:
      demisto.results({
          'Type': entryTypes['error'],
          'ContentsFormat': formats['text'],
          'Contents': 'You must set entryID or fileName or lastZipFileInWarroom=true when executing Unzip script'
      })
      sys.exit(0)

  res = demisto.executeCommand('getFilePath', {'id': fileEntryID})
  if res[0]['Type'] == entryTypes['error']:
      demisto.results({
          'Type': entryTypes['error'],
          'ContentsFormat': formats['text'],
          'Contents': 'Failed to get the file path for entry: ' + fileEntryID
      })
      sys.exit(0)

  filePath = res[0]['Contents']['path']

  password = demisto.args().get('password', None)

  filenames = []
  with zipfile.ZipFile(filePath,"r") as zip_ref:
      zip_ref.extractall(pwd=password)
      for name in zip_ref.namelist():
          if name == os.path.basename(name):
              filenames.append(name)

  results = []
  for filename in filenames:
      demisto.results(file_result_existing_file(filename))

  results.append(
      {
          'Type': entryTypes['note'],
          'ContentsFormat': formats['json'],
          'Contents': { 'extractedFiles': filenames },
          'EntryContext': { 'ExtractedFiles': filenames, 'File(val.EntryID=="' + fileEntryID + '").Unzipped': True },
          'ReadableContentsFormat' : formats['markdown'],
          'HumanReadable': tableToMarkdown('Extracted Files', [ { 'name': x } for x in filenames ])
      })

  demisto.results(results)
type: python
tags:
- Utility
- file
comment: Unzip a file using fileName or entryID to specify a file. Files unzipped
  will be pushed to the war room and names will be pushed to the context.
args:
- name: fileName
  default: true
  description: output filename
  deprecated: true
- name: password
  secret: true
  description: optional password which zip file protected by
- name: entryID
  description: entry id of the attached zip file in the warroom
- name: lastZipFileInWarroom
  description: write 'yes' (or any other value) if zip file is last zip file in war-rpom
  deprecated: true
outputs:
- contextPath: ExtractedFiles
  description: list of file names which extracted from zip
scripttarget: 0
