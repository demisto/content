commonfields:
  id: ProofpointDecodeURL
  version: -1
name: ProofpointDecodeURL
script: |
  import argparse
  import json
  import re
  import sys

  from urllib.parse import parse_qs, unquote, urlparse

  valid_versions = ['v1', 'v2']

  def find_version(url):
       match = re.search(r'https://urldefense.proofpoint.com/(?P<version>v[0-9])/', url)
       return match.group('version')

  def ppdecode(url, return_all=False):
      try:
          version = find_version(url)
      except AttributeError:
          raise RuntimeError('This does not appear to be a valid proofpoint url: {}'.format(url))
      else:
          if version not in valid_versions:
              raise RuntimeError('Ppdecode is unprepared to handle this version of proofpoint urls: {}'.format(url))
      parsed_url = urlparse(url)
      query_components = parse_qs(parsed_url.query)
      if sys.version_info[0] < 3:
          translated_url = query_components['u'][0].translate(string.maketrans('-_', '%/'))
      else:
          translated_url = query_components['u'][0].translate(str.maketrans('-_', '%/'))
      decoded_url = unquote(translated_url)
      query_components['decoded_url'] = decoded_url
      query_components['proofpoint_version'] = version
      return query_components

  try:
      results = ppdecode(demisto.args()['url'])
      ec = {'URL': {'Data': results['decoded_url']}}
      demisto.results({'ContentsFormat': formats['markdown'], 'Type': entryTypes['note'], 'Contents': results, 'EntryContext': ec, 'HumanReadable': '#### Decoded URL\n' + results['decoded_url']})


  except RuntimeError as e:
      demisto.results({"Type":entryTypes["error"], "ContentsFormat":formats["text"], "Contents":str(e)})
      sys.exit(e)
type: python
tags: []
comment: Decode ProofPoint URLs to get the actual URLs
enabled: true
args:
- name: url
  required: true
  default: true
  description: URL to decode
outputs:
- contextPath: URL.Data
  description: Decoded URLs
scripttarget: 0
dockerimage: demisto/python3
