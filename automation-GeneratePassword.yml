args:
- defaultValue: "0"
  description: Minimum number of lower case characters to include in password.
  name: min_lcase
- defaultValue: "10"
  description: Maximum number of lower case characters to include in password.
  name: max_lcase
- defaultValue: "0"
  description: Minimum number of upper case characters to include in password.
  name: min_ucase
- defaultValue: "10"
  description: Maximum number of upper case characters to include in password.
  name: max_ucase
- defaultValue: "0"
  description: Minimum number of digits to include in password.
  name: min_digits
- defaultValue: "10"
  description: Maximum number of digits to include in password.
  name: max_digits
- defaultValue: "0"
  description: Minimum number of symbols to include in password.
  name: min_symbols
- defaultValue: "10"
  description: Maximum number of symbols to include in password.
  name: max_symbols
- auto: PREDEFINED
  defaultValue: "false"
  description: Enable to see various values as they pass through the function.
  name: debug
  predefined:
  - "true"
  - "false"
comment: "This function generates a password and allows various parameters to customize
  the properties of the password depending on the use case (e.g. password complexity
  requirements).  The default behavior is to generate a password of  *random length*
  including all four character classes (upper, lower, digits, symbols) with at least
  five and at most ten characters per class. \n\nThe min_* values all default to 0.
  This means that if the command is executed in this way:\n!GeneratePassword max_lcase=10\nIt
  is possible that a password of length zero could be generated. It is therefore recommended
  to always include a min_* parameter that matches. \n\nThe debug parameter will print
  certain properties of the command into the WarRoom for easy diagnostics."
commonfields:
  id: GeneratePassword
  version: -1
enabled: true
name: GeneratePassword
outputs:
- contextPath: NEW_PASSWORD
  description: The new password generated for the user.
runonce: false
script: |+
  dArgs = {
      'debug': args.debug = (args.debug === 'true'),
      'max_lcase': parseInt(args.max_lcase),
      'min_lcase': parseInt(args.min_lcase),
      'max_ucase': parseInt(args.max_ucase),
      'min_ucase': parseInt(args.min_lcase),
      'max_digits': parseInt(args.max_digits),
      'min_digits': parseInt(args.min_digits),
      'max_symbols': parseInt(args.max_symbols),
      'min_symbols': parseInt(args.min_symbols)
  };

  // randomize our selected charaters
  function randomSort(a, b) {
      return Math.random() > 0.5 ? -1 : 1;
  }

  function printCharValues(pw) {
      var s = [];
      for (i = 0; i < pw.length; i++) {
          s.push(pw.charCodeAt(i));
      }
      log("Ascii for password = " + s.toString());
  }

  if(args.debug) {
     log(JSON.stringify(dArgs));
  }

  // Define the characters of our classes
  var lcase   = "abcdefghijklmnopqrstuvwxyz";
  var ucase   = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  var n       = "0123456789";
  var s       = "!@#$%^&*()[]+:\"?_><=';/-.,\\|";

  // randomize the amount of characters we get as per parameters
  var numu = dArgs.max_ucase   - dArgs.min_ucase   >= 0 ? Math.floor(Math.random() * (dArgs.max_ucase   - dArgs.min_ucase   + 1)) + dArgs.min_ucase   : 0;
  var numl = dArgs.max_lcase   - dArgs.min_lcase   >= 0 ? Math.floor(Math.random() * (dArgs.max_lcase   - dArgs.min_lcase   + 1)) + dArgs.min_lcase   : 0;
  var numn = dArgs.max_digits  - dArgs.min_digits  >= 0 ? Math.floor(Math.random() * (dArgs.max_digits  - dArgs.min_digits  + 1)) + dArgs.min_digits  : 0;
  var nums = dArgs.max_symbols - dArgs.min_symbols >= 0 ? Math.floor(Math.random() * (dArgs.max_symbols - dArgs.min_symbols + 1)) + dArgs.min_symbols : 0;

  if(numu + numl + numn + nums === 0) {
     return  { ContentsFormat: formats.text, Type:entryTypes.error, Contents: 'error: insane password. No character length.'};
  }

  // start with a blank password.
  var pw = "";

  // iterate through each character class and add
  for (var i = 0; i < numu; i++) {
     pw += ucase[Math.floor(Math.random() * ucase.length)];
  }
  for (var i = 0; i < numl; i++) {
     pw += lcase[Math.floor(Math.random() * lcase.length)];
  }
  for (var i = 0; i < numn; i++) {
     pw += n[Math.floor(Math.random() * n.length)];
  }
  for (var i = 0; i < nums; i++) {
     pw += s[Math.floor(Math.random() * s.length)];
  }

  // randomize our new password string
  var rpw = (pw.split('').sort(randomSort)).join('');

  if(args.debug) {
      printCharValues(rpw);
  }
  return {
          Type: entryTypes.note,
          Contents: {"NEW_PASSWORD": rpw},          // used by raw_contents = true
          ContentsFormat: formats.json,             // defines the source format
          HumanReadable: tableToMarkdown('Newly Generated Password', {"password": rpw}),
          EntryContext: {"NEW_PASSWORD": rpw}       // same as setcontext
  };

scripttarget: 0
system: true
tags:
- Utility
type: javascript
