id: TestParseEmailFile-deprecated-script
version: -1
fromversion: 5.0.0
name: TestParseEmailFile-deprecated-script
starttaskid: "0"
tasks:
  "0":
    id: "0"
    taskid: 903859f8-95b8-4702-8e7f-06940e7b8087
    type: start
    task:
      id: 903859f8-95b8-4702-8e7f-06940e7b8087
      version: -1
      name: ""
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "1"
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 450,
          "y": 50
        }
      }
    note: false
    timertriggers: []
  "1":
    id: "1"
    taskid: 69dc8a79-43b0-4893-8fd3-dd7c365befd4
    type: regular
    task:
      id: 69dc8a79-43b0-4893-8fd3-dd7c365befd4
      version: -1
      name: DeleteContext
      description: Delete field from context
      scriptName: DeleteContext
      type: regular
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "2"
    scriptarguments:
      all:
        simple: "yes"
      key: {}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 450,
          "y": 230
        }
      }
    note: false
    timertriggers: []
  "2":
    id: "2"
    taskid: d3723f5a-a6db-4658-8b07-a5aa9a4f7bc9
    type: regular
    task:
      id: d3723f5a-a6db-4658-8b07-a5aa9a4f7bc9
      version: -1
      name: http
      description: Sends http request. Returns the response as json.
      scriptName: http
      type: regular
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "3"
    scriptarguments:
      body: {}
      filename:
        simple: ParseEmailFiles_test_email.eml
      headers: {}
      insecure: {}
      method:
        simple: GET
      password: {}
      proxy: {}
      saveAsFile:
        simple: "yes"
      unsecure: {}
      url:
        simple: https://raw.githubusercontent.com/demisto/content/master/TestData/ParseEmailFiles_test_email.eml
      username: {}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 450,
          "y": 410
        }
      }
    note: false
    timertriggers: []
  "3":
    id: "3"
    taskid: 2aef4635-5c2d-42fd-8e6c-c53e79b3789d
    type: regular
    task:
      id: 2aef4635-5c2d-42fd-8e6c-c53e79b3789d
      version: -1
      name: ParseEmailFile
      description: Parse an email from an eml or msg file and populate all relevant
        context data to investigate the email. Also extracts inner attachments and
        returns them to the war room. The incident labels themselves are preserved
        and not modified - only the "Label/x" context items that originated from the
        labels, and the best practice is to rely on these for the remainder of the
        playbook. Requires pip and access to python repository to install "olefile"
        package.
      scriptName: ParseEmailFile
      type: regular
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "4"
      - "8"
      - "11"
      - "13"
      - "14"
    scriptarguments:
      entryid:
        complex:
          root: File
          filters:
          - - operator: isEqualString
              left:
                value:
                  simple: File.Name
                iscontext: true
              right:
                value:
                  simple: ParseEmailFiles_test_email.eml
          transformers:
          - operator: getField
            args:
              field:
                value:
                  simple: EntryID
    results:
    - AttachmentName
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 450,
          "y": 590
        }
      }
    note: false
    timertriggers: []
  "4":
    id: "4"
    taskid: 56073346-f603-4fef-814f-9e0722b785bf
    type: regular
    task:
      id: 56073346-f603-4fef-814f-9e0722b785bf
      version: -1
      name: VerifyContext - To
      description: |-
        Verifies path in context:
        - Verifies path existence
        - If matching object is an array: verify fields exists in each of the objects in the array
        - If matching object is not an array: verify fields exists in matching object
        - if 'expectedValue' is given: ensure that the given value is equal to the context path
      scriptName: VerifyContext
      type: regular
      iscommand: false
      brand: ""
    scriptarguments:
      expectedValue:
        simple: shachar@demisto.com, yaakovi@demisto.com
      fields: {}
      path:
        simple: Label/Email
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 352,
          "y": 769
        }
      }
    note: false
    timertriggers: []
  "8":
    id: "8"
    taskid: b358b937-e009-4f9f-8d11-e06b9b1c5ce0
    type: regular
    task:
      id: b358b937-e009-4f9f-8d11-e06b9b1c5ce0
      version: -1
      name: VerifyContext - Subject
      description: |-
        Verifies path in context:
        - Verifies path existence
        - If matching object is an array: verify fields exists in each of the objects in the array
        - If matching object is not an array: verify fields exists in matching object
        - if 'expectedValue' is given: ensure that the given value is equal to the context path
      scriptName: VerifyContext
      type: regular
      iscommand: false
      brand: ""
    scriptarguments:
      expectedValue:
        simple: ParseEmail test email
      fields: {}
      path:
        simple: Label/Email/subject
    separatecontext: false
    view: |-
      {
        "position": {
          "x": -120,
          "y": 769
        }
      }
    note: false
    timertriggers: []
  "11":
    id: "11"
    taskid: 67bca680-ba86-4f82-86e7-0e9cfdd2a463
    type: condition
    task:
      id: 67bca680-ba86-4f82-86e7-0e9cfdd2a463
      version: -1
      name: AreValuesEqual - verify pdf attachment
      description: Check whether the values provided in arguments are equal. If either
        of the arguments are missing, no is returned.
      scriptName: AreValuesEqual
      type: condition
      iscommand: false
      brand: ""
    nexttasks:
      "yes":
      - "12"
    scriptarguments:
      left:
        complex:
          root: File
          filters:
          - - operator: isEqualString
              left:
                value:
                  simple: File.Extension
                iscontext: true
              right:
                value:
                  simple: pdf
          accessor: MD5
      right:
        simple: 9060c2d4f48745de19a5690d8e6cabe1
    results:
    - AreValuesEqual
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 1213,
          "y": 769
        }
      }
    note: false
    timertriggers: []
  "12":
    id: "12"
    taskid: 4a76c3ff-9054-44c5-85ce-2455d2055ec8
    type: title
    task:
      id: 4a76c3ff-9054-44c5-85ce-2455d2055ec8
      version: -1
      name: Validate Non-Unicode parsing
      type: title
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "15"
      - "16"
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 400,
          "y": 1107
        }
      }
    note: false
    timertriggers: []
  "13":
    id: "13"
    taskid: dc24ae89-4d87-44c1-89b3-34453ab501c2
    type: condition
    task:
      id: dc24ae89-4d87-44c1-89b3-34453ab501c2
      version: -1
      name: AreValuesEqual - verify docx attachment
      description: Check whether the values provided in arguments are equal. If either
        of the arguments are missing, no is returned.
      scriptName: AreValuesEqual
      type: condition
      iscommand: false
      brand: ""
    nexttasks:
      "yes":
      - "12"
    scriptarguments:
      left:
        complex:
          root: File
          filters:
          - - operator: isEqualString
              left:
                value:
                  simple: File.Extension
                iscontext: true
              right:
                value:
                  simple: docx
          accessor: MD5
      right:
        simple: b842aa8664f41a2dd7fe0d47a9fd4724
    results:
    - AreValuesEqual
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 780,
          "y": 769
        }
      }
    note: false
    timertriggers: []
  "14":
    id: "14"
    taskid: e80ce90d-8d02-4894-845d-05994a3008c4
    type: regular
    task:
      id: e80ce90d-8d02-4894-845d-05994a3008c4
      version: -1
      name: VerifyContext - From
      description: |-
        Verifies path in context:
        - Verifies path existence
        - If matching object is an array: verify fields exists in each of the objects in the array
        - If matching object is not an array: verify fields exists in matching object
        - if 'expectedValue' is given: ensure that the given value is equal to the context path
      scriptName: VerifyContext
      type: regular
      iscommand: false
      brand: ""
    scriptarguments:
      expectedValue:
        simple: shachar@demisto.com
      fields: {}
      path:
        simple: Label/Email/from
    separatecontext: false
    view: |-
      {
        "position": {
          "x": -558,
          "y": 769
        }
      }
    note: false
    timertriggers: []
  "15":
    id: "15"
    taskid: dd0fb53b-faef-4710-8c8b-bbe5a7439c73
    type: regular
    task:
      id: dd0fb53b-faef-4710-8c8b-bbe5a7439c73
      version: -1
      name: Non Unicode Subject
      scriptName: http
      type: regular
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "18"
    scriptarguments:
      body: {}
      filename:
        simple: EmailWithNonAsciiSubject.eml
      headers: {}
      insecure: {}
      method:
        simple: GET
      password: {}
      proxy: {}
      saveAsFile:
        simple: "yes"
      unsecure: {}
      url:
        simple: https://github.com/demisto/content/raw/master/TestData/EmailWithNonAsciiSubject.eml
      username: {}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 400,
          "y": 1280
        }
      }
    note: false
    timertriggers: []
  "16":
    id: "16"
    taskid: 56ce604e-d2a4-402b-889f-71b154acb37e
    type: regular
    task:
      id: 56ce604e-d2a4-402b-889f-71b154acb37e
      version: -1
      name: Non Unicode Attachment Name
      scriptName: http
      type: regular
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "17"
    scriptarguments:
      body: {}
      filename:
        simple: EmailWithNonAsciiAttachmentName.eml
      headers: {}
      insecure: {}
      method:
        simple: GET
      password: {}
      proxy: {}
      saveAsFile:
        simple: "yes"
      unsecure: {}
      url:
        simple: https://github.com/demisto/content/raw/master/TestData/EmailWithNonAsciiAttachmentName.eml
      username: {}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 880,
          "y": 1280
        }
      }
    note: false
    timertriggers: []
  "17":
    id: "17"
    taskid: dad3eb22-7ad1-4fb5-8239-268165b943ff
    type: regular
    task:
      id: dad3eb22-7ad1-4fb5-8239-268165b943ff
      version: -1
      name: ParseEmailFiles
      description: Parse an email from an eml or msg file and populate all relevant
        context data to investigate the email. Also extracts inner attachments and
        returns them to the war room. The incident labels themselves are preserved
        and not modified - only the "Label/x" context items that originated from the
        labels, and the best practice is to rely on these for the remainder of the
        playbook. Requires pip and access to python repository to install "olefile"
        package.
      scriptName: ParseEmailFiles
      type: regular
      iscommand: false
      brand: ""
    scriptarguments:
      entryid:
        complex:
          root: File
          filters:
          - - operator: isEqualString
              left:
                value:
                  simple: File.Name
                iscontext: true
              right:
                value:
                  simple: EmailWithNonAsciiAttachmentName.eml
          transformers:
          - operator: getField
            args:
              field:
                value:
                  simple: EntryID
    results:
    - AttachmentName
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 880,
          "y": 1470
        }
      }
    note: false
    timertriggers: []
  "18":
    id: "18"
    taskid: 68f6eb4b-98a8-49db-87c2-ec2d5e0cd7fc
    type: regular
    task:
      id: 68f6eb4b-98a8-49db-87c2-ec2d5e0cd7fc
      version: -1
      name: ParseEmailFiles
      description: Parse an email from an eml or msg file and populate all relevant
        context data to investigate the email. Also extracts inner attachments and
        returns them to the war room. The incident labels themselves are preserved
        and not modified - only the "Label/x" context items that originated from the
        labels, and the best practice is to rely on these for the remainder of the
        playbook. Requires pip and access to python repository to install "olefile"
        package.
      scriptName: ParseEmailFiles
      type: regular
      iscommand: false
      brand: ""
    scriptarguments:
      entryid:
        complex:
          root: File
          filters:
          - - operator: isEqualString
              left:
                value:
                  simple: File.Name
                iscontext: true
              right:
                value:
                  simple: EmailWithNonAsciiSubject.eml
          transformers:
          - operator: getField
            args:
              field:
                value:
                  simple: EntryID
    results:
    - AttachmentName
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 430,
          "y": 1470
        }
      }
    note: false
    timertriggers: []
view: |-
  {
    "linkLabelsPosition": {},
    "paper": {
      "dimensions": {
        "height": 1515,
        "width": 2151,
        "x": -558,
        "y": 50
      }
    }
  }
inputs: []
outputs: []
