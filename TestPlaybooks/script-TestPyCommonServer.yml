commonfields:
  id: TestPYCommonServer
  version: -1
name: TestPYCommonServer
script: |-
  import copy
  INFO = {'b' : 1,
      'a': {
          'safd' : 3,
          'b' : [
              {'c' : {'d' : 432}, 'd' : 2},
              {'c' : {'f' : 1}},
              {'b' : 1234},
              {'c' : {'d' : 4567}},
              {'c' : {'d' : 11}},
              {'c' : {'d' : u'asdf'}}],
          'c' : {'d' : 10},
          }
      }

  def test_dq():
      # expected_x = [432, 4567, 11, 'asdf']
      # x = dq(INFO, 'a.b.c.d'.split('.'))

      # if x != expected_x:
      #     raise ValueError('expected: [%s]\n %s\ngot: [%s]\n%s' % (type(expected_x), expected_x, type(x), x))

      demisto.results('DQ tests finished successfully! - deprecated')

  def test_entry():
      #entry = createEntry(INFO, {
      #        'contextPath' : 'PY.Test(val.ID && val.ID == obj.ID)',
      #        'title' : 'Python DQ Test',
      #        'innerPath' : 'a.b',
      #        'data' : [
      #            {'to' : 'd_label', 'from' : u'c.d'},
      #            {'to' : 'e_hidden', 'from' : u'c.e', 'humanReadable' : False},
      #        ],
      #    })

      # demisto.results(entry)
      demisto.results('ok')

  def test_xml():
      import json

      xml = "<work><employee><id>100</id><name>foo</name></employee><employee><id>200</id><name>goo</name></employee></work>"
      jsonExpected = '{"work": {"employee": [{"id": "100", "name": "foo"}, {"id": "200", "name": "goo"}]}}'

      jsonActual = xml2json(xml)
      assert jsonActual == jsonExpected, "expected\n" + jsonExpected + "\n to equal \n" + jsonActual

      jsonDict = json.loads(jsonActual)
      assert jsonDict['work']['employee'][0]['id'] == "100", 'id of first employee must be 100'
      assert jsonDict['work']['employee'][1]['name'] == "goo", 'name of second employee must be goo'

      xmlActual = json2xml(jsonActual)
      assert xmlActual == xml, "expected\n" + xml + "\n to equal \n" + xmlActual

      demisto.results('XML tests finished successfully!')


  def toEntry(table):
      return {

          'Type' : entryTypes['note'],
          'Contents': table,
          'ContentsFormat': formats['table'],
          'ReadableContentsFormat' : formats['markdown'],
          'HumanReadable' : table
      }


  def test_tbl_to_md():
      tables = []
      data = [
          {
              'header_1': 'a1',
              'header_2': 'b1',
              'header_3': 'c1'
          },
          {
              'header_1': 'a2',
              'header_2': 'b2',
              'header_3': 'c2'
          },
          {
              'header_1': 'a3',
              'header_2': 'b3',
              'header_3': 'c3'
          },
      ]

      # sanity
      table = tableToMarkdown('tableToMarkdown test', data)
      expected_table = '''### tableToMarkdown test
  |header_2|header_3|header_1|
  |---|---|---|
  |b1|c1|a1|
  |b2|c2|a2|
  |b3|c3|a3|
  '''
      tables.append((table, expected_table, ))

      # header transform
      table_transform = tableToMarkdown('tableToMarkdown test with headerTransform', data, headerTransform=underscoreToCamelCase)
      expected_table_transform = '''### tableToMarkdown test with headerTransform
  |Header2|Header3|Header1|
  |---|---|---|
  |b1|c1|a1|
  |b2|c2|a2|
  |b3|c3|a3|
  '''
      tables.append((table_transform, expected_table_transform, ))

      # escaping characters: multiline + md-chars
      data2 = copy.deepcopy(data)
      for i, d in enumerate(data2):
          d['header_2'] = 'b%d.1\nb%d.2' % (i+1, i+1, )
          d['header_3'] = 'c%d|1' % (i+1, )

      table_multiline = tableToMarkdown('tableToMarkdown test with multiline', data2)
      expected_table_multiline = '''### tableToMarkdown test with multiline
  |header_2|header_3|header_1|
  |---|---|---|
  |b1.1<br>b1.2|c1\|1|a1|
  |b2.1<br>b2.2|c2\|1|a2|
  |b3.1<br>b3.2|c3\|1|a3|
  '''
      tables.append((table_multiline, expected_table_multiline, ))

      # url + empty data
      data3 = copy.deepcopy(data)
      for i, d in enumerate(data3):
          d['header_3'] = '[url](https:\\demisto.com)'
          d['header_2'] = None
      table_url_missing_info = tableToMarkdown('tableToMarkdown test with url and missing info', data3)
      expected_table_url_missing_info = '''### tableToMarkdown test with url and missing info
  |header_2|header_3|header_1|
  |---|---|---|
  ||[url](https:\\demisto.com)|a1|
  ||[url](https:\\demisto.com)|a2|
  ||[url](https:\\demisto.com)|a3|
  '''
      tables.append((table_url_missing_info, expected_table_url_missing_info, ))

      # single column table
      table_single_column = tableToMarkdown('tableToMarkdown test with single column', data, ['header_1'])
      expected_table_single_column = '''### tableToMarkdown test with single column
  |header_1|
  |---|
  |a1|
  |a2|
  |a3|
  '''
      tables.append((table_single_column, expected_table_single_column, ))

      # list values
      data4 = copy.deepcopy(data)
      for i, d in enumerate(data4):
          d['header_3'] = [i+1, 'second item']
          d['header_2'] = 'hi'
      table_list_field = tableToMarkdown('tableToMarkdown test with list field', data4)
      expected_table_list_field = '''### tableToMarkdown test with list field
  |header_2|header_3|header_1|
  |---|---|---|
  |hi|1,<br>second item|a1|
  |hi|2,<br>second item|a2|
  |hi|3,<br>second item|a3|
  '''
      tables.append((table_list_field, expected_table_list_field, ))

      # all fields are empty
      data5 = [
          {
              'a' : None,
              'b' : None,
              'c' : None,
          } for _ in range(3)
      ]
      table_all_none = tableToMarkdown('tableToMarkdown test with all none fields', data5)
      expected_table_all_none = '''### tableToMarkdown test with all none fields
  |a|c|b|
  |---|---|---|
  ||||
  ||||
  ||||
  '''
      tables.append((table_all_none, expected_table_all_none, ))

      # all fields are empty - removed
      table_all_none2 = tableToMarkdown('tableToMarkdown test with all none fields2', data5, removeNull=True)
      expected_table_all_none2 = '''### tableToMarkdown test with all none fields2
  **No entries.**
  '''
      tables.append((table_all_none2, expected_table_all_none2, ))

      # header not on first object
      data6 = copy.deepcopy(data)
      data6[1]['extra_header'] = 'sample'
      table_extra_header = tableToMarkdown('tableToMarkdown test with extra header', data6, headers=['header_1', 'header_2', 'extra_header'])
      expected_table_extra_header = '''### tableToMarkdown test with extra header
  |header_1|header_2|extra_header|
  |---|---|---|
  |a1|b1||
  |a2|b2|sample|
  |a3|b3||
  '''
      tables.append((table_extra_header, expected_table_extra_header, ))

      # no such header
      table_no_headers = tableToMarkdown('tableToMarkdown test with no headers', data, headers=['no', 'header', 'found'], removeNull=True)
      expected_table_no_headers = '''### tableToMarkdown test with no headers
  **No entries.**
  '''
      tables.append((table_no_headers, expected_table_no_headers, ))


      # dict value
      data7 = copy.deepcopy(data)
      data7[1]['extra_header'] = {'sample' : 'qwerty', 'sample2' : 'asdf'}
      table_dict_record = tableToMarkdown('tableToMarkdown test with dict record', data7, headers=['header_1', 'header_2', 'extra_header'])
      expected_dict_record = '''### tableToMarkdown test with dict record
  |header_1|header_2|extra_header|
  |---|---|---|
  |a1|b1||
  |a2|b2|sample: qwerty<br>sample2: asdf|
  |a3|b3||
  '''
      tables.append((table_dict_record, expected_dict_record, ))

      # string header (instead of list)
      table_string_header = tableToMarkdown('tableToMarkdown string header', data, 'header_1')
      expected_string_header_tbl = '''### tableToMarkdown string header
  |header_1|
  |---|
  |a1|
  |a2|
  |a3|
  '''
      tables.append((table_string_header, expected_string_header_tbl, ))

      # list of string values instead of list of dict objects
      table_string_array = tableToMarkdown('tableToMarkdown test with string array', ['foo', 'bar', 'katz'], ['header_1'])
      expected_string_array_tbl = '''### tableToMarkdown test with string array
  |header_1|
  |---|
  |foo|
  |bar|
  |katz|
  '''
      tables.append((table_string_array, expected_string_array_tbl, ))

      # combination: string header + string values list
      table_string_array_string_header = tableToMarkdown('tableToMarkdown test with string array and string header', ['foo', 'bar', 'katz'], 'header_1')
      expected_string_array_string_header_tbl = '''### tableToMarkdown test with string array and string header
  |header_1|
  |---|
  |foo|
  |bar|
  |katz|
  '''
      tables.append((table_string_array_string_header, expected_string_array_string_header_tbl, ))

      results = [actual == expected for actual, expected in tables]

      if all(results):
          demisto.results('ok')
      else:
          for result, (actual, expected) in zip(results, tables):
              if not result:
                  demisto.results(toEntry(actual))
                  demisto.results(toEntry(expected))

          demisto.results(str(results))
          demisto.results(return_error('failure'))

  def test_hash_djb2():
      assert hash_djb2("test") == 2090756197, "Invalid value of hash_djb2"

  def test_camelize():
      assert camelize([{'chookity_bop': 'asdasd'}, {'ab_c': 'd e', 'fgh_ijk': 'lm', 'nop': 'qr_st'}], '_').__str__ == "[{u'ChookityBop': 'asdasd'}, {u'AbC': 'd e', u'Nop': 'qr_st', u'FghIjk': 'lm'}]"
      assert camelize({'ab_c': 'd e', 'fgh_ijk': 'lm', 'nop': 'qr_st'}, '_').__str__ == "{u'AbC': 'd e', u'Nop': 'qr_st', u'FghIjk': 'lm'}"

  ''' MAIN TEST RUNNER '''
  TESTS = {
      'DQ' : test_dq,
      # 'XML' : test_xml,
      'ENTRY' : test_entry,
      'TBLMD' : test_tbl_to_md,
      'HASH'  : test_hash_djb2,
      'CAMELIZE': test_camelize
  }

  test_type = demisto.args()['test_type']
  if test_type not in TESTS:
      demisto.results('Invalid test: %s' % (test_type, ))
  else:
      TESTS[test_type]()
type: python
tags: []
comment: Tests for common function dq
enabled: true
args:
- name: test_type
  required: true
  default: true
  auto: PREDEFINED
  predefined:
  - DQ
  - ENTRY
  - XML
  - TBLMD
  - HASH
  description: one of python common server testing features
  defaultValue: dq
scripttarget: 0
runonce: false
