commonfields:
  id: TestPYCommonServer
  version: 32
name: TestPYCommonServer
script: |-
  INFO = {'b' : 1,
      'a': {
          'safd' : 3,
          'b' : [
              {'c' : {'d' : 432}, 'd' : 2},
              {'c' : {'f' : 1}},
              {'b' : 1234},
              {'c' : {'d' : 4567}},
              {'c' : {'d' : 11}},
              {'c' : {'d' : u'asdf'}}],
          'c' : {'d' : 10},
          }
      }

  def test_dq():
      # expected_x = [432, 4567, 11, 'asdf']
      # x = dq(INFO, 'a.b.c.d'.split('.'))

      # if x != expected_x:
      #     raise ValueError('expected: [%s]\n %s\ngot: [%s]\n%s' % (type(expected_x), expected_x, type(x), x))

      demisto.results('DQ tests finished successfully!')

  def test_entry_MD():
      #entry = createEntry(INFO, {
      #        'contextPath' : 'PY.Test(val.ID && val.ID == obj.ID)',
      #        'title' : 'Python DQ Test',
      #        'innerPath' : 'a.b',
      #        'data' : [
      #            {'to' : 'd_label', 'from' : u'c.d'},
      #            {'to' : 'e_hidden', 'from' : u'c.e', 'humanReadable' : False},
      #        ],
      #    })

      # demisto.results(entry)
      demisto.results('ok')

  def test_xml():
      import json

      xml = "<work><employee><id>100</id><name>foo</name></employee><employee><id>200</id><name>goo</name></employee></work>"
      jsonExpected = '{"work": {"employee": [{"id": "100", "name": "foo"}, {"id": "200", "name": "goo"}]}}'

      jsonActual = xml2json(xml)
      assert jsonActual == jsonExpected, "expected\n" + jsonExpected + "\n to equal \n" + jsonActual

      jsonDict = json.loads(jsonActual)
      assert jsonDict['work']['employee'][0]['id'] == "100", 'id of first employee must be 100'
      assert jsonDict['work']['employee'][1]['name'] == "goo", 'name of second employee must be goo'

      xmlActual = json2xml(jsonActual)
      assert xmlActual == xml, "expected\n" + xml + "\n to equal \n" + xmlActual

      demisto.results('XML tests finished successfully!')


  ''' MAIN TEST RUNNER '''
  TESTS = {
      'DQ' : test_dq,
      'MD' : test_entry_MD,
  }

  test_type = demisto.args()['test_type']
  if test_type not in TESTS:
      demisto.results('Invalid test: %s' % (test_type, ))
  else:
      TESTS[test_type]()
type: python
tags: []
comment: Tests for common function dq
enabled: true
args:
- name: test_type
  required: true
  default: true
  auto: PREDEFINED
  predefined:
  - DQ
  - MD
  - XML
  description: one of python common server testing features
  defaultValue: dq
scripttarget: 0
releaseNotes: "turned script to main testing platform of python common server API"