args:
- default: true
  description: The email address to check
  name: email
  required: true
- description: The domain list to check against for squatting (comma separated)
  isArray: true
  name: domain
  required: true
- defaultValue: "3"
  description: The similarity threshold
  name: threshold
comment: Check if an email address's domain is trying to squat other domain using
  Levenshtein distance algorithm
commonfields:
  id: EmailDomainSquattingReputation
  version: -1
name: EmailDomainSquattingReputation
outputs:
- contextPath: Account
  description: 'A user account '
- contextPath: Account.Email
  description: The account email object
- contextPath: Account.Email.Username
  description: The account email username
  type: string
- contextPath: Account.Email.Address
  description: The account email address
  type: string
- contextPath: Account.Email.Domain
  description: The account email domain
  type: string
- contextPath: Account.Email.Distance
  description: The email address distance compare to the domains in query
  type: number
- contextPath: Account.Email.Distance.Domain
  description: The compared domain
  type: string
- contextPath: Account.Email.Distance.Value
  description: 'The distance between the email domain and the compared domain '
  type: number
- contextPath: DBotScore.Indicator
  description: The Indicator
  type: string
- contextPath: DBotScore.Type
  description: The Indicator Type
  type: string
- contextPath: DBotScore.Vendor
  description: The DBot score vendor
  type: string
- contextPath: DBotScore.Score
  description: The DBot score
  type: number
runonce: false
script: |2-

  var email = args.email;
  var domains = argToList(args.domain);
  var threshold = parseInt(args.threshold);

  var emailParts = email.split('@',2);

  if (emailParts.length < 2){
      return {
          ContentsFormat: formats.text,
          Type: entryTypes.error,
          Contents: email.toString() + " - is not a valid email address"
      };
  }
  var emailObj = {
      Username: emailParts[0],
      Domain: emailParts[1],
      Address : email,
      Distance : []
  };

  domains.forEach(function(domain){
    if(domain) {
        var resp = executeCommand("GetStringsDistance", {inputString: emailObj.Domain, compareString: domain});

        if(isError(resp[0])){
            return resp;
        }

        data = [dq(resp[0], "Contents.Distances")];
        data.forEach(function(entry)
        {
            emailObj.Distance.push(
                {
                    Domain  : dq(entry,"StringB"),
                    Value   : dq(entry,"LevenshteinDistance")
                });
        });
    }
  });
  var ec = {};
  var suspicious = dq(emailObj,"Distance(val.Value > 0 && val.Value < {0}).Value".format(threshold));
  var dbotScore = 0;
  var malicious = null;

  if(suspicious && suspicious.length > 0){
      //add dbot score, suspicious
      ec.DBotScore = {
          Indicator: email,
          Type: 'email',
          Vendor: 'DomainSquatting', Score: 2
      };
      //add suspicious description to the indicator
      malicious = {
          Vendor: "DomainSquatting",
          Description : "The email address domain is suspicious at domain squatting"
      };
  }

  var account = {Email: emailObj};
  if (malicious){
      account.Malicious = malicious;
  }

  ec["Account(val.Email && val.Email.Address && val.Email.Address === obj.Email.Address)"] = account;

  var md = tableToMarkdown("Domain squatting reputation for {0}".format(email),emailObj.Distance);

  return {
      Type: entryTypes.note,
      Contents: emailObj,
      ContentsFormat: formats.json,
      HumanReadable: md,
      EntryContext: ec
  };
scripttarget: 0
system: true
tags:
- email
- reputation
type: javascript
