args:
- default: true
  description: Instance names of ePO servers to update
  name: repos
  required: true
comment: Trigger a Server Task in specific ePO servers to pull latest signatures from
  update server
commonfields:
  id: EPOUpdateRepository
  version: -1
dependson:
  must:
  - epo-command
deprecated: true
name: EPOUpdateRepository
runonce: false
script: |
  def generateText(tbl):
      return '\n\n'.join(['\n'.join([k + ': ' + row[k] for k in row]) for row in tbl])

  def generateHtml(cols, tbl):
      html = ""
      if tbl and isinstance(tbl, list) and len(tbl) > 0:
          html = """<style type="text/css">
  .tg  {border-collapse:collapse;border-spacing:0;border-color:#bbb;}
  .tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#888;color:#594F4F;}
  .tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:5px 15px 5px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#888;color:#493F3F;}
  .tg .tg-9zxc{vertical-align:top;text-align:left; }
  .tg .tg-x1ca{background-color:#dfdfdf;vertical-align:top;text-align:center;font-weight:bold;}
  </style>
  <table class="tg">
    <tr>"""
          for colName in cols:
              html += '<th class="tg-x1ca">' + colName + '</th>'
          html += '</tr>'
          for row in tbl:
              html += '<tr>'
              for colName in cols:
                  html += '<th class="tg-9zxc">' + flattenCell(row[colName]).replace('\n', '<br/>') + '</th>'
              html += '</tr>'
          html += '</table>'
      return html


  res = []
  repos = demisto.get(demisto.args(), 'repos')
  if not repos:
      res.append({"Type": entryTypes["error"], "ContentsFormat": formats["text"], "Contents": "Received empty repository name!"})
  else:
      repos = ','.join(repos) if isinstance(repos, list) else repos
      dArgs = {"using": repos,
               "command": "repository.pull",
               "params": "sourceRepository=McAfeeHttp&targetBranch=Current"
              }
      noncompliant = []
      tbl = []
      resCmdName = demisto.executeCommand('epo-command', dArgs)
      try:
          for entry in resCmdName:
              if isError(entry):
                  res = resCmdName
                  break
              else:
                  repoName = entry['ModuleName']
                  resp = demisto.get(entry, 'Contents.response')
                  resultShort = resp[:resp.find('\n')]
                  resultDetails = resp[resp.find('\n')+1:]
                  tbl.append({'Repository': repoName, 'Result': resultShort, 'Result Details': resultDetails})
      except Exception as ex:
          res.append({"Type": entryTypes["error"], "ContentsFormat": formats["text"],
                      "Contents": "Error occurred while parsing output from command. Exception info:\n" + str(ex) + "\n\nInvalid output:\n" + str(resCmdName)})
      #demisto.log(generateHtml(('Repository', 'Result', 'Result Details'),tbl))
      demisto.setContext('repoupdateresultstext', generateText(tbl))
      demisto.setContext('repoupdateresultshtml', generateHtml(('Repository', 'Result', 'Result Details'),tbl))
      res.append({"Type": entryTypes["note"], "ContentsFormat": formats["table"], "Contents": tbl})
  demisto.results(res)
scripttarget: 0
system: true
tags:
- epo
type: python
