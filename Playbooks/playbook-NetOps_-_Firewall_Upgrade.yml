id: NetOps - Firewall Upgrade
version: -1
name: NetOps - Firewall Upgrade
starttaskid: "0"
tasks:
  "0":
    id: "0"
    taskid: b7fe4fdf-e359-4010-89e6-60b4c288f797
    type: start
    task:
      id: b7fe4fdf-e359-4010-89e6-60b4c288f797
      version: -1
      name: ""
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "1"
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 700,
          "y": -210
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "1":
    id: "1"
    taskid: e540b70a-08b7-4979-8266-aa503a1e3500
    type: regular
    task:
      id: e540b70a-08b7-4979-8266-aa503a1e3500
      version: -1
      name: Download the latest content update
      description: Download the latest content update
      script: Panorama|||panorama-download-latest-content-update
      type: regular
      iscommand: true
      brand: Panorama
    nexttasks:
      '#none#':
      - "2"
    scriptarguments:
      target: {}
    reputationcalc: 2
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 700,
          "y": -40
        }
      }
    note: true
    timertriggers: []
    ignoreworker: false
  "2":
    id: "2"
    taskid: a7882af4-ef83-4011-816b-7644c061b489
    type: regular
    task:
      id: a7882af4-ef83-4011-816b-7644c061b489
      version: -1
      name: Check on the content download status
      description: Check content update download status
      script: Panorama|||panorama-content-update-download-status
      type: regular
      iscommand: true
      brand: Panorama
    nexttasks:
      '#none#':
      - "11"
    scriptarguments:
      JobID:
        simple: ${Content.Download.JobID}
      target: {}
    reputationcalc: 2
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 700,
          "y": 180
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "3":
    id: "3"
    taskid: b28debf8-d54b-42b3-841c-5ebfad3cfde6
    type: regular
    task:
      id: b28debf8-d54b-42b3-841c-5ebfad3cfde6
      version: -1
      name: Install the latest content update
      description: Install the latest content update
      script: Panorama|||panorama-install-latest-content-update
      type: regular
      iscommand: true
      brand: Panorama
    nexttasks:
      '#none#':
      - "4"
    scriptarguments:
      target: {}
    reputationcalc: 2
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 700,
          "y": 570
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "4":
    id: "4"
    taskid: 7a4d5036-7cbd-44ba-8894-04588f78b7c1
    type: regular
    task:
      id: 7a4d5036-7cbd-44ba-8894-04588f78b7c1
      version: -1
      name: Check on the content installation status
      description: Content update install status
      script: Panorama|||panorama-content-update-install-status
      type: regular
      iscommand: true
      brand: Panorama
    nexttasks:
      '#none#':
      - "13"
    scriptarguments:
      JobID:
        simple: ${Content.Install.JobID}
      target: {}
    reputationcalc: 2
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 700,
          "y": 760
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "5":
    id: "5"
    taskid: 5f5091be-db9d-4914-80ff-5b4b151a1400
    type: regular
    task:
      id: 5f5091be-db9d-4914-80ff-5b4b151a1400
      version: -1
      name: Check for the latest PAN-OS software
      description: Check/refresh PAN-OS software version from repository
      script: Panorama|||panorama-check-latest-panos-software
      type: regular
      iscommand: true
      brand: Panorama
    nexttasks:
      '#none#':
      - "6"
    scriptarguments:
      target: {}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 700,
          "y": 1150
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "6":
    id: "6"
    taskid: fc6b051f-8eda-47a0-8b5f-7084c5a75647
    type: regular
    task:
      id: fc6b051f-8eda-47a0-8b5f-7084c5a75647
      version: -1
      name: Download the latest PAN-OS software update
      description: Download target PAN-OS version to be installed
      script: Panorama|||panorama-download-panos-version
      type: regular
      iscommand: true
      brand: Panorama
    nexttasks:
      '#none#':
      - "14"
    scriptarguments:
      TargetVersion:
        simple: ${incident.targetfirewallversion}
      target: {}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 700,
          "y": 1340
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "7":
    id: "7"
    taskid: d2b61817-1acc-42db-8e71-b83c84398162
    type: regular
    task:
      id: d2b61817-1acc-42db-8e71-b83c84398162
      version: -1
      name: Install the latest PAN-OS software update
      description: Install target PAN-OS version
      script: Panorama|||panorama-install-panos-version
      type: regular
      iscommand: true
      brand: Panorama
    nexttasks:
      '#none#':
      - "8"
    scriptarguments:
      TargetVersion:
        simple: ${incident.targetfirewallversion}
      target: {}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 700,
          "y": 1930
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "8":
    id: "8"
    taskid: a93efddd-9732-43d4-8360-b5a4f0c9b61e
    type: regular
    task:
      id: a93efddd-9732-43d4-8360-b5a4f0c9b61e
      version: -1
      name: Check on the PAN-OS software installation status
      description: PAN-OS install status
      script: Panorama|||panorama-install-panos-status
      type: regular
      iscommand: true
      brand: Panorama
    nexttasks:
      '#none#':
      - "16"
    scriptarguments:
      JobID:
        simple: ${Panos.Install.JobID}
      target: {}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 700,
          "y": 2110
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "9":
    id: "9"
    taskid: ebcba4bf-20e6-40f5-87b5-410847e31c04
    type: regular
    task:
      id: ebcba4bf-20e6-40f5-87b5-410847e31c04
      version: -1
      name: Reboot the firewall
      description: Reboot Firewall device
      script: Panorama|||panorama-device-reboot
      type: regular
      iscommand: true
      brand: Panorama
    scriptarguments:
      target: {}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 700,
          "y": 2520
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "11":
    id: "11"
    taskid: 14794c89-6d30-463a-812c-9e93b4e5f710
    type: playbook
    task:
      id: 14794c89-6d30-463a-812c-9e93b4e5f710
      version: -1
      name: GenericPolling
      description: |-
        Use this playbook as a sub-playbook to block execution of the master playbook until a remote action is complete.
        This playbook implements polling by continuously running the command in Step \#2 until the operation completes.
        The remote action should have the following structure:

        1. Initiate the operation.
        2. Poll to check if the operation completed.
        3. (optional) Get the results of the operation.
      playbookName: GenericPolling
      type: playbook
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "3"
    scriptarguments:
      AdditionalPollingCommandArgNames: {}
      AdditionalPollingCommandArgValues: {}
      Ids:
        complex:
          root: Content
          accessor: Download.JobID
      Interval:
        simple: "1"
      PollingCommandArgName:
        simple: JobID
      PollingCommandName:
        simple: panorama-content-update-download-status
      Timeout:
        simple: "10"
      dt:
        simple: Content.Download(val.Status !== 'Completed').JobID
    separatecontext: true
    loop:
      iscommand: false
      exitCondition: ""
      wait: 1
    view: |-
      {
        "position": {
          "x": 700,
          "y": 370
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "13":
    id: "13"
    taskid: 6ed771e0-1ce5-47b4-89ea-15635a0cf374
    type: playbook
    task:
      id: 6ed771e0-1ce5-47b4-89ea-15635a0cf374
      version: -1
      name: GenericPolling
      description: |-
        Use this playbook as a sub-playbook to block execution of the master playbook until a remote action is complete.
        This playbook implements polling by continuously running the command in Step \#2 until the operation completes.
        The remote action should have the following structure:

        1. Initiate the operation.
        2. Poll to check if the operation completed.
        3. (optional) Get the results of the operation.
      playbookName: GenericPolling
      type: playbook
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "5"
    scriptarguments:
      AdditionalPollingCommandArgNames: {}
      AdditionalPollingCommandArgValues: {}
      Ids:
        complex:
          root: Content
          accessor: Install.JobID
      Interval:
        simple: "1"
      PollingCommandArgName:
        simple: JobID
      PollingCommandName:
        simple: panorama-content-update-install-status
      Timeout:
        simple: "10"
      dt:
        simple: Content.Install(val.Status !== 'Completed' && val.Status != ‘Failed’).JobID
    separatecontext: true
    loop:
      iscommand: false
      exitCondition: ""
      wait: 1
    view: |-
      {
        "position": {
          "x": 700,
          "y": 960
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "14":
    id: "14"
    taskid: 759690e3-78c2-433f-85ab-b3262b07cdeb
    type: regular
    task:
      id: 759690e3-78c2-433f-85ab-b3262b07cdeb
      version: -1
      name: Download PSN-OS Status
      description: PAN-OS download status
      script: Panorama|||panorama-download-panos-status
      type: regular
      iscommand: true
      brand: Panorama
    nexttasks:
      '#none#':
      - "15"
    scriptarguments:
      JobID:
        simple: ${Panos.Download.JobID}
      target: {}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 700,
          "y": 1540
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "15":
    id: "15"
    taskid: c74d8f1c-3dbd-49f9-8b94-59a9007a0a1c
    type: playbook
    task:
      id: c74d8f1c-3dbd-49f9-8b94-59a9007a0a1c
      version: -1
      name: GenericPolling
      description: |-
        Use this playbook as a sub-playbook to block execution of the master playbook until a remote action is complete.
        This playbook implements polling by continuously running the command in Step \#2 until the operation completes.
        The remote action should have the following structure:

        1. Initiate the operation.
        2. Poll to check if the operation completed.
        3. (optional) Get the results of the operation.
      playbookName: GenericPolling
      type: playbook
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "7"
    scriptarguments:
      AdditionalPollingCommandArgNames: {}
      AdditionalPollingCommandArgValues: {}
      Ids:
        complex:
          root: Panos
          accessor: Download.JobID
      Interval:
        simple: "10"
      PollingCommandArgName:
        simple: JobID
      PollingCommandName:
        simple: panorama-download-panos-status
      Timeout:
        simple: "20"
      dt:
        simple: Panos.Download(val.Status !== 'Completed' && val.Status != ‘Failed’).JobID
    separatecontext: true
    loop:
      iscommand: false
      exitCondition: ""
      wait: 1
    view: |-
      {
        "position": {
          "x": 700,
          "y": 1740
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "16":
    id: "16"
    taskid: 3bcad225-f223-462b-855c-db621f53a3d7
    type: playbook
    task:
      id: 3bcad225-f223-462b-855c-db621f53a3d7
      version: -1
      name: GenericPolling
      description: |-
        Use this playbook as a sub-playbook to block execution of the master playbook until a remote action is complete.
        This playbook implements polling by continuously running the command in Step \#2 until the operation completes.
        The remote action should have the following structure:

        1. Initiate the operation.
        2. Poll to check if the operation completed.
        3. (optional) Get the results of the operation.
      playbookName: GenericPolling
      type: playbook
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "9"
    scriptarguments:
      AdditionalPollingCommandArgNames: {}
      AdditionalPollingCommandArgValues: {}
      Ids:
        complex:
          root: Panos
          accessor: Install.JobID
      Interval:
        simple: "10"
      PollingCommandArgName:
        simple: JobID
      PollingCommandName:
        simple: panorama-install-panos-status
      Timeout:
        simple: "20"
      dt:
        simple: Panos.Install(val.Status !== 'Completed' && val.Status != ‘Failed’).JobID
    separatecontext: true
    loop:
      iscommand: false
      exitCondition: ""
      wait: 1
    view: |-
      {
        "position": {
          "x": 700,
          "y": 2320
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
view: |-
  {
    "linkLabelsPosition": {},
    "paper": {
      "dimensions": {
        "height": 2825,
        "width": 380,
        "x": 700,
        "y": -210
      }
    }
  }
inputs: []
outputs: []
