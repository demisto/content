id: Prisma Cloud Remediation - AWS Security Groups With Inbound Rule Overly Permissive
  To All Traffic
version: -1
fromversion: 5.0.0
name: Prisma Cloud Remediation - AWS Security Groups With Inbound Rule Overly Permissive
  To All Traffic
description: |-
  This playbook remediates the following Prisma Cloud AWS EC2 alerts.

  Prisma Cloud policies remediated:

    - AWS Security Groups with Inbound rule overly permissive to All Traffic
starttaskid: "0"
tasks:
  "0":
    id: "0"
    taskid: 71d4aa73-20de-444e-8e36-37a1f01e8507
    type: start
    task:
      id: 71d4aa73-20de-444e-8e36-37a1f01e8507
      version: -1
      name: ""
      description: ""
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "14"
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 275,
          "y": 370
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "10":
    id: "10"
    taskid: 5cdc8c78-9c81-4a41-840e-960c511afd25
    type: regular
    task:
      id: 5cdc8c78-9c81-4a41-840e-960c511afd25
      version: -1
      name: Revoke public ingress rules permitting all traffic
      description: Revoke all public security group rules.
      script: AWS - EC2|||aws-ec2-revoke-security-group-ingress-rule
      type: regular
      iscommand: true
      brand: AWS - EC2
    nexttasks:
      '#none#':
      - "24"
    scriptarguments:
      cidrIp:
        simple: 0.0.0.0/0
      fromPort:
        complex:
          root: AWS
          accessor: EC2.SecurityGroups.IpPermissions.FromPort
      groupId:
        complex:
          root: AWS
          accessor: EC2.SecurityGroups.GroupId
      ipProtocol:
        simple: "-1"
      region:
        complex:
          root: incident
          accessor: labels.resource
          transformers:
          - operator: ParseJSON
          - operator: getField
            args:
              field:
                value:
                  simple: regionId
      roleArn: {}
      roleSessionDuration: {}
      roleSessionName: {}
      sourceSecurityGroupName: {}
      toPort:
        complex:
          root: AWS
          accessor: EC2.SecurityGroups.IpPermissions.ToPort
    continueonerror: true
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 275,
          "y": 680
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "12":
    id: "12"
    taskid: a5708c90-226c-4d1e-896c-68d0321f506f
    type: regular
    task:
      id: a5708c90-226c-4d1e-896c-68d0321f506f
      version: -1
      name: Manually remove public ingress rules
      description: |-
        1. Sign into the AWS console
        2. Select the specific region from the region drop down on the top right corner
        3. Navigate to the VPC Dashboard
        4. Click on Security Groups in the left window pane
        5. Click on the security group in question
        6. Select the Inbound Rules tab and remove entries containing the CIDR; 0.0.0.0/0 and/or ::/0
        7. Click Save rules
      type: regular
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "21"
    separatecontext: false
    view: |-
      {
        "position": {
          "x": -190,
          "y": 1360
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "14":
    id: "14"
    taskid: aa1677ba-483b-442b-8726-9db0ca7a3c67
    type: regular
    task:
      id: aa1677ba-483b-442b-8726-9db0ca7a3c67
      version: -1
      name: Get security group IP permissions
      description: 'Obtain the latest/current ipPermission to make sure that the automation
        uses the latest ipPermissions. '
      script: AWS - EC2|||aws-ec2-describe-security-groups
      type: regular
      iscommand: true
      brand: AWS - EC2
    nexttasks:
      '#none#':
      - "10"
    scriptarguments:
      filters: {}
      groupIds:
        complex:
          root: incident
          accessor: labels.resource
          transformers:
          - operator: ParseJSON
          - operator: getField
            args:
              field:
                value:
                  simple: id
      groupNames: {}
      region:
        complex:
          root: incident
          accessor: labels.resource
          transformers:
          - operator: ParseJSON
          - operator: getField
            args:
              field:
                value:
                  simple: regionId
      roleArn: {}
      roleSessionDuration: {}
      roleSessionName: {}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 275,
          "y": 510
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "21":
    id: "21"
    taskid: ebb9e96f-2401-4c4e-8567-c134b01e2438
    type: title
    task:
      id: ebb9e96f-2401-4c4e-8567-c134b01e2438
      version: -1
      name: Done
      description: ""
      type: title
      iscommand: false
      brand: ""
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 270,
          "y": 1530
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "23":
    id: "23"
    taskid: b9d6715d-d50f-4cbe-8bb0-e03ff8fd4dc2
    type: condition
    task:
      id: b9d6715d-d50f-4cbe-8bb0-e03ff8fd4dc2
      version: -1
      name: Any public rules permitting all traffic?
      description: Check the security group for any remaining public rules.
      type: condition
      iscommand: false
      brand: ""
    nexttasks:
      '#default#':
      - "21"
      "yes":
      - "12"
    separatecontext: false
    conditions:
    - label: "yes"
      condition:
      - - operator: isEqualString
          left:
            value:
              complex:
                root: AWS
                accessor: EC2.SecurityGroups.IpPermissions.IpRanges.CidrIp
            iscontext: true
          right:
            value:
              simple: 0.0.0.0/0
        - operator: isEqualString
          left:
            value:
              complex:
                root: AWS
                accessor: EC2.SecurityGroups.IpPermissions.Ipv6Ranges.CidrIpv6
            iscontext: true
          right:
            value:
              simple: ::/0
      - - operator: isEqualString
          left:
            value:
              complex:
                root: AWS
                accessor: EC2.SecurityGroups.IpPermissions.IpProtocol
            iscontext: true
          right:
            value:
              simple: "-1"
    view: |-
      {
        "position": {
          "x": 80,
          "y": 1190
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "24":
    id: "24"
    taskid: ebe61cb4-3da0-4271-8b94-a2259c734d1d
    type: condition
    task:
      id: ebe61cb4-3da0-4271-8b94-a2259c734d1d
      version: -1
      name: Was there an error?
      description: Check whether given entry/entries returned an error. Use ${lastCompletedTaskEntries}
        to check the previous task entries. If array is provided, will return yes
        if one of the entries returned an error.
      scriptName: isError
      type: condition
      iscommand: false
      brand: ""
    nexttasks:
      "no":
      - "21"
      "yes":
      - "25"
    scriptarguments:
      entryId:
        simple: ${lastCompletedTaskEntries}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 320,
          "y": 850
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "25":
    id: "25"
    taskid: c5be9188-7ada-4942-82e8-675b6415a982
    type: regular
    task:
      id: c5be9188-7ada-4942-82e8-675b6415a982
      version: -1
      name: Get the latest security group IP permissions
      description: 'Obtain the latest/current ipPermission to make sure that the automation
        uses the latest ipPermissions. '
      script: AWS - EC2|||aws-ec2-describe-security-groups
      type: regular
      iscommand: true
      brand: AWS - EC2
    nexttasks:
      '#none#':
      - "23"
    scriptarguments:
      filters: {}
      groupIds:
        complex:
          root: incident
          accessor: labels.resource
          transformers:
          - operator: ParseJSON
          - operator: getField
            args:
              field:
                value:
                  simple: id
      groupNames: {}
      region:
        complex:
          root: incident
          accessor: labels.resource
          transformers:
          - operator: ParseJSON
          - operator: getField
            args:
              field:
                value:
                  simple: regionId
      roleArn: {}
      roleSessionDuration: {}
      roleSessionName: {}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": -40,
          "y": 1020
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
view: |-
  {
    "linkLabelsPosition": {
      "23_12_yes": 0.56,
      "23_21_#default#": 0.32,
      "24_21_no": 0.24,
      "24_25_yes": 0.53
    },
    "paper": {
      "dimensions": {
        "height": 1225,
        "width": 890,
        "x": -190,
        "y": 370
      }
    }
  }
inputs: []
outputs: []
tests:
- No Test
