commonfields:
  id: QrFullSearch
  version: -1
name: QrFullSearch
script: |
  from time import sleep
  res = []
  search_done = False
  error = False

  timeout = 600
  if 'timeout' in demisto.args():
      timeout = int(demisto.args()['timeout'])
  interval = 10

  if 'interval' in demisto.args():
      interval = int(demisto.args()['interval'])

  search_args = {}
  if 'fields' in demisto.args():
      search_args['fields'] = demisto.args()['fields']
  if 'range' in demisto.args():
      search_args['range'] = demisto.args()['range']


  #########submit query, retrive  search_id########
  query_res = demisto.executeCommand("qr-searches", demisto.args())

  if isError(query_res[0]):
      res.append(query_res)
  else:
      search_id = demisto.get(query_res[0], "Contents.search_id")
      search_args['search_id'] = search_id
  #######polling stage########
      sec = 0

      while (sec < timeout) and not error:
          status_res = demisto.executeCommand("qr-get-search", search_args)
          if isError(status_res[0]):
              res+=status_res
              error = True
              break

          status = demisto.get(status_res[0], "Contents.status")
          if status and status in ['WAIT', 'EXECUTE', 'SORTING']:
              demisto.log('search id is {0} search status is {1}'.format(search_id,status))
          elif status and status == 'COMPLETED':
              search_done = True
          else:
              error = True
              res.append({"Type" : entryTypes["error"], "ContentsFormat" : formats["text"], "Contents" : 'An Error occurred during the search process. search status={0}.'.format(status)})

          if search_done:
              break
          sec += interval
          sleep(interval)

      if sec >= timeout:
        res.append( { "Type" : entryTypes["error"], "ContentsFormat" : formats["text"], "Contents" : 'Timeout reached. waited for {0} seconds'.format(timeout) } )

  #######get results#######
      if search_done:
          results_res = demisto.executeCommand("QrGetSearchResults", search_args)
          res+=results_res

  demisto.results(res)
type: python
subtype: python2
tags:
- QRadar
comment: Full search through QRadar advance query languages
system: true
deprecated: true
args:
- name: query_expression
  required: true
  default: true
  description: The query expressions in AQL
- name: fields
  description: Fields to filter in
- name: timeout
  description: Timeout in seconds. Default is 10 minutes.
- name: interval
  description: Interval to poll for results. Default is 10 seconds.
- name: range
  description: Number of results in return
scripttarget: 0
timeout: 0s
dependson:
  must:
  - qr-searches
  - qr-get-search
  - QrGetSearchResults
