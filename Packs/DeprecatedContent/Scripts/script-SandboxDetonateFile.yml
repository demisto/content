commonfields:
  id: SandboxDetonateFile
  version: -1
name: SandboxDetonateFile
script: >-
  from time import sleep

  res = []

  timeout = 600

  if 'timeout' in demisto.args():
      timeout = int(demisto.args()['timeout'])
  interval = 10

  if 'interval' in demisto.args():
      interval = int(demisto.args()['interval'])

  sandblastDone = False

  cuckooDone = False

  wildfireDone = False

  if demisto.executeCommand('IsIntegrationAvailable',{'brandname': 'WildFire'})[0]['Contents'] != 'yes':
      wildfireDone = True
      #demisto.log('WildFire not available.')
  if demisto.executeCommand('IsIntegrationAvailable',{'brandname': 'Cuckoo Sandbox'})[0]['Contents'] != 'yes':
      cuckooDone = True
      #demisto.log('Cuckoo not available.')
  if demisto.executeCommand('IsIntegrationAvailable',{'brandname': 'Check Point Sandblast'})[0]['Contents'] != 'yes':
      if demisto.executeCommand('IsIntegrationAvailable',{'brandname': 'Check Point Sandblast Appliance'})[0]['Contents'] != 'yes':
          sandblastDone = True
          #demisto.log('Sandblast not available.')

  usingBrand = demisto.get(demisto.args(), 'using-brand')

  if usingBrand:
      if 'wildfire' not in usingBrand.lower():
          wildfireDone = True
      if 'cuckoo sandbox' not in usingBrand.lower():
          cuckooDone = True
      if 'check point sandblast' not in usingBrand.lower():
          sandblastDone = True
  # Get the file's hash

  resFileEntry = demisto.executeCommand('getEntry',{'id': demisto.args()['entryID']})

  if isError(resFileEntry[0]):
      demisto.results(resFileEntry)
      sys.exit()
  else:
      fileMd5 = demisto.get(resFileEntry[0], 'FileMetadata.md5')


  ############ Hash check stage ############

  # Wildfire

  if not wildfireDone:
      resCheckWildfire = demisto.executeCommand("wildfire-report", {"md5": fileMd5})
      if isError(resCheckWildfire[0]):
          if "The report was not found" in resCheckWildfire[0]['Contents']:
              pass # No report in WildFire, need to upload the file
          else: # Any other error should be reported back to war room
              res += resCheckWildfire
              wildfireDone = True
      elif resCheckWildfire[0]['Contents'] != 'failed': # Hash was known since file was already analyzed - just return that answer
          res += resCheckWildfire
          wildfireDone = True

  # Sandblast

  if not sandblastDone:
      resCheckSB = demisto.executeCommand("sandblast-query", {"md5": fileMd5})
      if isError(resCheckSB[0]):
          sandblastDone = True
          res.append(resCheckSB[0])
      elif str(demisto.get(resCheckSB[0], 'Contents.response.te.status.code')) == '1001':
          sandblastDone = True
          data = demisto.get(resCheckSB[0], 'Contents.response')
          data = {x:data.get(x,'') for x in ['file_name', 'file_type', 'md5', 'te']}
          raiseTable(data, 'te')
          res.append({ "Type" : entryTypes["note"], "ContentsFormat" : formats["table"], "Contents" : flattenRow(data) })


  ############ Submit stage ############

  # Wildfire

  if not wildfireDone:
      resWFUpload = demisto.executeCommand("wildfire-upload", {"upload": demisto.args()["entryID"]})
      if isError(resWFUpload[0]):
          wildfireDone = True
          if 'file type is not supported' in resWFUpload[0]['Contents']:
              res.append( { "Type" : entryTypes["note"], "ContentsFormat" : formats["text"], "Contents" : 'WildFire does not support this file type.' } )
          else:
              res += resWFUpload

  # Sandblast

  if not sandblastDone:
      resSBUpload = demisto.executeCommand("sandblast-upload", {"file_id": demisto.args()["entryID"], "file_name" : demisto.args()["entryID"]})
      if isError(resSBUpload[0]):
          sandblastDone = True
          res += resSBUpload
      elif not str(demisto.get(resSBUpload[0], 'Contents.response.status.code')) in ['1001','1002']:
          sandblastDone = True
          res.append( { "Type" : entryTypes["error"], "ContentsFormat" : formats["text"], "Contents" : "Sandblast Error: {0}".format(str(demisto.get(resSBUpload[0], 'Contents.response.status.message'))) } )

  # Cuckoo

  ckTaskId = -1

  if not cuckooDone:
      resCk = demisto.executeCommand("CuckooDetonateFile", {"entryID": demisto.args()["entryID"]})

      if not isError(resCk[0]):
          ckTaskId = resCk[0]['Contents'].split(' ')[-1]
      res += resCk


  ############ Poll stage ############

  sec = 0

  while (sec < timeout):
      # Sandblast
      if not sandblastDone:
          resSBReport = demisto.executeCommand("sb-query", {"md5": fileMd5})

          if isError(resSBReport[0]):
              sandblastDone = True
              res.append(resSBReport[0])
          elif str(demisto.get(resSBReport[0], 'Contents.response.te.status.code')) == '1001':
              sandblastDone = True
              data = demisto.get(resSBReport[0], 'Contents.response')
              data = {x:data.get(x,'') for x in ['file_name', 'file_type', 'md5', 'te']}
              raiseTable(data, 'te')
              res.append({ "Type" : entryTypes["note"], "ContentsFormat" : formats["table"], "Contents" : flattenRow(data) })
          elif str(demisto.get(resSBReport[0], 'Contents.response.te.status.code')) == '1004' and sec > timeout/2: # Give sandblast time to sync that the file has been uploaded, disregard this for a while
              sandblastDone = True
              res.append( { "Type" : entryTypes["error"], "ContentsFormat" : formats["text"], "Contents" : 'Sandblast: problem uploading the file.' } )

      # Wildfire
      if not wildfireDone:
          resWildfireReport = demisto.executeCommand("wildfire-report", {"md5": fileMd5})

          if isError(resWildfireReport[0]):
              if "don't have an available report" in resWildfireReport[0]['Contents']:
                  pass # Wildfire hasn't finished yet
              else: # Any other error should be reported back to war room
                  res += resWildfireReport
                  wildfireDone = True
          elif resWildfireReport[0]['Contents'] != 'failed': # Wildfire finished and has a result
              res += resWildfireReport
              wildfireDone = True

      # Cuckoo
      if not cuckooDone:
          resCS = demisto.executeCommand("CuckooTaskStatus", {"taskID": ckTaskId})
          if isError(resCS[0]):
              res += resCS
          else:
              if demisto.get(resCS[0], 'Contents.task.status') not in ['pending', 'running']:
                  cuckooDone = True
                  errors = demisto.get(resCS[0], 'Contents.task.errors')
                  if errors:
                      res.append( { "Type" : entryTypes["error"], "ContentsFormat" : formats["text"], "Contents" : 'Cuckoo returned errors:\n' + '\n'.join(errors) } )
                  # Try to get the report even if errors occurred, in case errors were not fatal
                  res += demisto.executeCommand("CuckooGetReport", {"taskID": ckTaskId})

      if wildfireDone and cuckooDone and sandblastDone:
          break
      sec += interval
      sleep(interval)

  if sec >= timeout:
      res.append( { "Type" : entryTypes["error"], "ContentsFormat" : formats["text"], "Contents" : 'Timeout reached. Partial results returned.' } )
  if not wildfireDone:
      res.append( { "Type" : entryTypes["error"], "ContentsFormat" : formats["text"], "Contents" : 'Could not retrieve results from Wildfire (may be due to timeout).' } )
  if not cuckooDone:
      res.append( { "Type" : entryTypes["error"], "ContentsFormat" : formats["text"], "Contents" : 'Could not retrieve results from Cuckoo (may be due to timeout).' } )
  if not sandblastDone:
      res.append( { "Type" : entryTypes["error"], "ContentsFormat" : formats["text"], "Contents" : 'Could not retrieve full results from sandblast (may be due to timeout).' } )
  if res:
      demisto.results(res)
  else:
      demisto.results('No results.')
type: python
subtype: python2
tags:
- sandblast
- cuckoo
- wildfire
- fireeye
- task
- sandbox
- enhancement
- file
comment: Deprecated. This script is deprecated. Use the available generic file detonation playbooks instead.
enabled: true
args:
- name: entryID
  required: true
  default: true
  description: ID of the entry containing the file to detonate.
- name: timeout
  description: Timeout in seconds. Default is 10 minutes.
- name: interval
  description: Interval to poll for results. Default is 10 seconds.
scripttarget: 0
dependson:
  should:
  - wildfire-report
  - cuckoo-get-task-report
  - sandblast-upload
  - sandblast-query
system: true
deprecated: true
timeout: 86.4Âµs
runonce: false
tests:
- No test
fromversion: 5.0.0
