commonfields:
  id: TaniumDeployAction
  version: -1
name: TaniumDeployAction
deprecated: true
script: >-
  // An example script for deploying Tanium action with filter

  if (!args.packageName && !args.packageID) {
      return 'Missing parameter: packageName or packageID';
  }

  var packageName = args.packageName || '';

  var packageID = args.packageID || '';

  var packageParams = args.parameters || '';

  var comment = args.comment || '';

  // targetGroup is the properties of the systems on which the requested package should run

  var targetGroup = '\

  <target_group>\
    <and_flag>1</and_flag>\
    <deleted_flag>0</deleted_flag>\
    <filters>\
      <filter>\
       <sensor>\
         <name>IP Address</name>\
       </sensor>\
       <all_values_flag>0</all_values_flag>\
       <ignore_case_flag>1</ignore_case_flag>\
       <not_flag>0</not_flag>\
       <operator>RegexMatch</operator>\
       <value>172.*</value>\
       <value_type>String</value_type>\
    </filter>\
    </filters>\
    <not_flag>0</not_flag>\
    <sub_groups/>\
    <text>Online is \"True\"</text>\
  </target_group>';

  var taniumArgs = {
        'package-name': packageName,
        'package-id': packageID,
        'parameters': packageParams,
        'comment': comment,
        'target-group': targetGroup,
      };
  var res = executeCommand('tn-deploy-package', taniumArgs);

  if (isError(res[0])) {
      return res;
  }


  var contents = dq(res[0],'Contents.packageSpec');

  var cleanContents = {};

  var keys = Object.keys(contents);

  for (var i = 0; i < keys.length; i++) {
      if (contents[keys[i]] || contents[keys[i]] === false) {
          cleanContents[keys[i]] = contents[keys[i]];
      }
  }


  var entry = {
      Type: 1,
      ContentsFormat: 'json',
      Contents: contents,
      ReadableContentsFormat: formats.markdown,
      HumanReadable: tableToMarkdown("Tanium deploy action", cleanContents, null),
      EntryContext: {
          'Tanium.Action(val.ID == obj.ID)': {
              State: "Deployed",
              ID: cleanContents.id,
              Command: cleanContents.command,
              Comment: args.comment,
              PackageName: args.packageName
          }
      }
  };


  return entry;
type: javascript
tags:
- tanium
comment: Deprecated. Execute an action, optionally with parameters, and filtering - based on an existing package. See https://kb.tanium.com/SOAP for more information
args:
- name: packageName
  description: Specify the package name. e.g. !TaniumDeployAction packageName="Clean Stale Tanium Client Data"
- name: packageID
  description: Use the package ID instead of its name
- name: parameters
  description: Use parameters with the package. See https://kb.tanium.com/SOAP for more details
- name: comment
  description: Comment to be added to the action history in the Tanium server
outputs:
- contextPath: Tanium.Action.ID
  description: Action ID in tanium
- contextPath: Tanium.Action.Command
  description: Action command
- contextPath: Tanium.Action.State
  description: Action state
- contextPath: Tanium.Action.Comment
  description: Tanium comment
- contextPath: Tanium.Action.PackageName
  description: Tanium package name
scripttarget: 0
dependson:
  must:
  - tn-deploy-package
timeout: 0s
fromversion: 5.0.0
