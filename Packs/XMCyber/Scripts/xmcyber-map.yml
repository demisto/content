commonfields:
  id: xmcyber-map
  version: -1
name: xmcyber-map
fromversion: 5.0.0
script: |-
  fields = {
      'entityId': 'xmcyberentityid',
      'averageComplexity': 'xmcyberaveragecomplexity',
      'averageComplexityLevel': 'xmcyberaveragecomplexitylevel',
      'affectedEntities': 'xmcyberaffectedentities',
      'entitiesAtRiskList': 'xmcyberaffectedentitieslist',
      'compromisingTechniques': 'xmcybercompromisingtechniques',
      'criticalAssetsAtRisk': 'xmcybercriticalassetsatrisk',
      'criticalAssetsAtRiskLevel': 'xmcybercriticalassetsatrisklevel',
      'criticalAssetsAtRiskList':'xmcybercriticalassetsatrisklist',
      'isAsset': 'xmcyberiscriticalasset',
      'entityType': 'xmcyberentitytype',
      'name': 'xmcyberhostname',
      'entityReport': 'xmcyberentityreport'
  }
  context = demisto.context()
  xmcyber_obj = context['XMCyber']
  if isinstance(context['XMCyber'], list):
      for i in xmcyber_obj:
          try:
              xmcyber_obj = i
              entity_id = xmcyber_obj['entityId']
              break
          except (KeyError, AttributeError):
              continue
  context_values = {key : xmcyber_obj[key] for key in fields.keys()}


  res = demisto.executeCommand('setIncident', {fields[key]: context_values[key] for key in fields.keys() if context_values[key]})

  demisto.log('Completed mapping, excute command result:')
  demisto.log(res)
type: python
tags:
- XM Cyber
comment: Maps the XM Cyber context to fields
enabled: true
scripttarget: 0
subtype: python3
runonce: false
dockerimage: demisto/python3:3.8.6.12176
runas: DBotWeakRole
