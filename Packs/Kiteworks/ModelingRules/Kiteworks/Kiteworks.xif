[MODEL: dataset="kiteworks_kiteworks_raw"]
filter _raw_log ~= "^(?:\S+\s+){5}\{" // JSON Format 
| alter 
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\s*\w+"), 0)),
    syslog_prefix = split(arrayindex(regextract(_raw_log, "\<\d+\>((?:\S+\s*){5})") , 0), " "),
    json_payload = arrayindex(regextract(_raw_log, "(?:\S+\s+){5}(.+)"), 0)
| alter 
    timestamp = arraystring(arrayrange(prefix, 0, 3), " "),
    syslog_hostname = arrayindex(prefix, 3),
    process_name = rtrim(arrayindex(prefix, 4), ":")
| alter syslog_facility = floor(divide(syslog_priority, 8))
| alter syslog_severity = to_string(subtract(syslog_priority, multiply(syslog_facility, 8)))
| alter
    agent_id = json_payload -> agent.id,
    agent_name = json_payload -> agent.name,
    app_host = json_payload -> app_host,
    application = json_payload -> application,
    // attachments = json_payload -> attachments,
    client_device = json_payload -> client_device,
    client_id = json_payload -> client_id,
    client_name = json_payload -> client_name,
    context = json_payload -> data.context, 
    // decoder = json_payload -> decoder,
    description = json_payload -> description,
    // dest_folder = json_payload -> dest_folder,
    // dlp_locked = json_payload -> dlp_locked,
    // ec_source = json_payload -> ec_source,
    email = json_payload -> data.email,
    // email_package_id = json_payload -> email_package_id,
    // enable = json_payload -> enable,
    error_msg = json_payload -> data.error_msg,
    event = json_payload -> event,
    // file = json_payload -> file,
    // file_id = json_payload -> file_id,
    // file_owner = json_payload -> file_owner,
    // firedtimes = json_payload -> firedtimes,
    flag = json_payload -> flag,
    folder_name = json_payload -> data.folder.name,
    folder_path = json_payload -> data.folder.path,
    full_log = json_payload -> full_log,
    // gid_after = json_payload -> gid_after,
    // gname_after = json_payload -> gname_after,
    // groups = json_payload -> groups,
    // hash = json_payload -> hash,
    // hash_algo = json_payload -> hash_algo,
    hostname = json_payload -> data.hostname,
    host_id = json_payload -> data.host_id, 
    id = json_payload -> id,
    // is_folder_upload = json_payload -> is_folder_upload,
    // kp_xfer_transaction_id = json_payload -> kp_xfer_transaction_id,
    // level = json_payload -> level,
    location = json_payload -> location,
    // mail = json_payload -> mail,
    // malicious = json_payload -> malicious,
    // manager = json_payload -> manager,
    mime = json_payload -> data.mime,
    name = json_payload -> data.name,
    node_ip = json_payload -> data.node_ip,
    // parent_folder = json_payload -> parent_folder,
    // perm_after = json_payload -> perm_after,
    // prohibited = json_payload -> prohibited,
    // quarantined = json_payload -> quarantined,
    role_name = json_payload -> data.role_name,
    // rule = json_payload -> rule,
    // scanning_type = json_payload -> scanning_type,
    // secure_body = json_payload -> secure_body,
    // self_copy = json_payload -> self_copy,
    // sender = json_payload -> sender,
    // service_name = json_payload -> service_name,
    session_id = json_payload -> data.session,
    // size = json_payload -> size,
    // skipped = json_payload -> skipped,
    // source_file = json_payload -> source_file,
    // source_folder = json_payload -> source_folder,
    // status_reason = json_payload -> status_reason,
    // subject = json_payload -> subject,
    successful = json_payload -> successful,
    sw_version = json_payload -> data.sw_version,
    // symbolic_path = json_payload -> symbolic_path,
    // syscheck = json_payload -> syscheck,
    target_user_id = json_payload -> data.user.id, 
    target_user_guid = json_payload -> data.user.guid, 
    target_user_name = json_payload -> data.user.name, 
    target_client_id = json_payload -> data.client_id,
    target_client_name = json_payload -> data.name,
    tenant_id = json_payload -> tenant_id,
    timestamp = json_payload -> timestamp,
    token = json_payload -> token,
    token_type = json_payload -> data.token_type,
    // uid_after = json_payload -> uid_after,
    // uname_after = json_payload -> uname_after,
    url_host = json_payload -> url_host,
    // user = json_payload -> user,
    user_agent = json_payload -> user_agent,
    user_id = json_payload -> user_id,
    user_ip = json_payload -> user_ip,
    user_name = json_payload -> user_name,
    user_type = json_payload -> user_type
    // version_added = json_payload -> version_added
| alter 
    event_log_level = if(syslog_severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY, syslog_severity = "1", XDM_CONST.LOG_LEVEL_ALERT, syslog_severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, syslog_severity = "3", XDM_CONST.LOG_LEVEL_ERROR, syslog_severity = "4", XDM_CONST.LOG_LEVEL_WARNING, syslog_severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, syslog_severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, syslog_severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, syslog_severity),
    user_ipv4 = if(user_ip ~= "(?:\d{1,3}\.){3}\d{1,3}", user_ip),
    user_ipv6 = if(user_ip ~= "(?:[a-fA-F\d]{0,4}\:){7}[\wa-fA-F]{0,4}", user_ip),
    node_ipv4 = if(node_ip ~= "(?:\d{1,3}\.){3}\d{1,3}", node_ip),
    node_ipv6 = if(node_ip ~= "(?:[a-fA-F\d]{0,4}\:){7}[\wa-fA-F]{0,4}", node_ip)
| alter 
    // xdm.auth.auth_method = token_type,
    xdm.alert.severity = syslog_severity,
    xdm.email.recipients = if(email != null, email)
    xdm.event.description = description,
    xdm.event.log_level = event_log_level,
    xdm.event.outcome = if(is_successful = "1", XDM_CONST.OUTCOME_SUCCESS, is_successful = 0, XDM_CONST.OUTCOME_FAILED),
    xdm.event.outcome_reason = error_msg,
    xdm.event.type = event,
    xdm.intermediate.process.name = process_name,
    xdm.network.session_id = coalesce(session_id, context),
    xdm.observer.name = syslog_hostname,
    xdm.observer.version = sw_version,
    xdm.session_context_id = context,
    xdm.source.agent.identifier = concat(agent_name, " (", agent_id, ")"),
    xdm.source.application.name = concat(client_id, " (", client_name, ")"),
    xdm.source.host.hostname = if(client_device != "None", client_device),
    xdm.source.ipv4 = user_ipv4,
    xdm.source.ipv6 = user_ipv6,
    xdm.source.user_agent = user_agent,
    xdm.source.user.identifier = user_id,
    xdm.source.user.user_type = user_type, // convert to Enum.USER_TYPE values
    xdm.source.user.username = user_name,
    xdm.target.application.name = application,
    xdm.target.application.name = sw_version,
    xdm.target.file.directory = folder_name,
    xdm.target.file.file_type = mime,
    xdm.target.file.filename = name,
    xdm.target.file.path = folder_path,
    xdm.target.host.device_id = coalesce(host_id, tenant_id),
    xdm.target.host.hostname = coalesce(app_host, url_host),
    xdm.target.ipv4 = node_ipv4,
    xdm.target.ipv6 = node_ipv6,
    xdm.target.resource.id = coalesce(target_user_guid),
    xdm.target.resource.name = coalesce(name),
    xdm.target.resource.value = coalesce(token),
    xdm.target.user.identifier = target_user_id,
    xdm.target.user.username = coalesce(target_user_name, email);