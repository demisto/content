category: Data Enrichment & Threat Intelligence
commonfields:
  id: d407264e-7bf8-4122-841c-a56dd99e2851
  version: -1
configuration:
- display: API Key
  name: api_key
  required: false
  type: 12
- display: Trust any certificate (not secure)
  name: insecure
  required: true
  type: 8
- display: Use system proxy settings
  name: proxy
  required: true
  type: 8
description: Analyze suspicious hashes, URLs, domains and IP addresses
detaileddescription: |-
  ## Hello World
  - This text is markdown
  - Here you should explain how to configure the instance in Demisto
display: Maltiverse
name: d407264e-7bf8-4122-841c-a56dd99e2851
script:
  commands:
  - arguments:
    - default: false
      description: IP address to check
      isArray: false
      name: ip
      required: true
      secret: false
    - default: true
      defaultValue: '5'
      description: If the number of positives is higher than the threshold, the IP
        address will be considered malicious. If the threshold is not specified, the
        default IP threshold, as configured in the instance settings, will be used.
      isArray: false
      name: threshold
      required: false
      secret: false
    - default: false
      defaultValue: 'false'
      description: Return all of the results, note that it can be thousands of results.
        Prefer not to use in playbooks. The default value is "false
      isArray: false
      name: fullResponse
      required: false
      secret: false
    deprecated: false
    description: Checks the reputation of an IP address
    execution: false
    name: ip
    outputs:
    - contextPath: IP.Address
      description: The checked IP address
      type: String
    - contextPath: IP.Geo.Country
      description: The country code of the IP address
      type: String
    - contextPath: IP.Malicious.Description
      description: Describes the reason for the IP to  be in the blacklist
      type: Unknown
    - contextPath: IP.PositiveDetections
      description: The number of sources that positively reported the indicator as
        blacklist
      type: Number
    - contextPath: DBotScore.Score
      description: The DBot score
      type: Number
    - contextPath: DBotScore.Type
      description: The type of indicator
      type: String
    - contextPath: DBotScore.Vendor
      description: The vendor used to calculate the score
      type: String
    - contextPath: DBotScore.Indicator
      description: The indicator that was tested
      type: String
    - contextPath: Maltiverse.IP.Address
      description: The checked IP address
      type: String
    - contextPath: Maltiverse.IP.Classification
      description: Qualitative maliciousness classification for an IoC. Possible values
        are malicious, suspicious, neutral and whitelisted
      type: Unknown
    - contextPath: Maltiverse.IP.Blacklist.FirstSeen
      description: First time that the IoC has been seen
      type: Date
    - contextPath: Maltiverse.IP.Blacklist.LastSeen
      description: Last time that the IoC has been seen
      type: Date
    - contextPath: Maltiverse.IP.Blacklist.Description
      description: Describes the reason for the IP to be in the blacklist
      type: String
    - contextPath: Maltiverse.IP.Blacklist.Source
      description: The name of sources that reported the indicator
      type: String
    - contextPath: Maltiverse.IP.Tags
      description: The type of indicator
      type: String
  - arguments:
    - default: false
      description: Domain address to check
      isArray: false
      name: domain
      required: true
      secret: false
    - default: true
      defaultValue: '5'
      description: If the number of positives is higher than the threshold, the domain
        will be considered malicious. If the thershold is not specified, the default
        domain threshold, as configured in the instance settings, will be used.
      isArray: false
      name: threshold
      required: false
      secret: false
    - default: true
      defaultValue: 'false'
      description: Return all of the results, note that it can be thousands of results.
        Prefer not to use in playbooks. The default value is "false
      isArray: false
      name: fullResponse
      required: false
      secret: false
    deprecated: false
    description: Checks the reputation of a Domain
    execution: false
    name: domain
    outputs:
    - contextPath: Domain.Name
      description: The domain name
      type: String
    - contextPath: Domain.CreationDate
      description: Date when a IoC has been inserted for the first time
      type: Date
    - contextPath: Domain.ModificationDate
      description: Date when a IoC has been updated for the last time
      type: Date
    - contextPath: Domain.Tld
      description: Top Level Domain of the hostname
      type: Number
    - contextPath: Domain.ASName
      description: Autonumous system name of the domain
      type: String
    - contextPath: DBotScore.Score
      description: The DBot score
      type: Number
    - contextPath: DBotScore.Type
      description: The type of indicator
      type: String
    - contextPath: DBotScore.Vendor
      description: The vendor used to calculate the score
      type: String
    - contextPath: DBotScore.Indicator
      description: The indicator that was tested
      type: String
    - contextPath: Maltiverse.Domain.Address
      description: The domain name
      type: String
    - contextPath: Maltiverse.Domain.Classification
      description: Qualitative maliciousness classification for an IoC. Possible value
        are malicious, suspicious, neutral and whitlist
      type: String
    - contextPath: Maltiverse.Domain.Blacklist.Firstseen
      description: First time that the IoC was seen
      type: Date
    - contextPath: Maltiverse.Domain.Blacklist.LastSeen
      description: Last time that the IoC was seen
      type: Date
    - contextPath: Maltiverse.Domain.Blacklist.Description
      description: Describes the reason for the domain to be in the blacklist
      type: Unknown
    - contextPath: Maltiverse.Domain.Blacklist.Source
      description: The name of sources that reported the indicator
      type: String
    - contextPath: Maltiverse.Domain.Tag
      description: Attribute to label an IoC
      type: String
    - contextPath: Maltiverse.Domain.ModificationTime
      description: Date when the IoC was updated for the last time
      type: Date
    - contextPath: Maltiverse.Domain.CreationTime
      description: Date when a IoC was inserted for the first time
      type: Date
    - contextPath: Maltiverse.Domain.TLD
      description: Top level domain of the hostname
      type: String
    - contextPath: Maltiverse.Domain.ResolvedIP.IP
      description: Stores an IP that was resolved by the domain
      type: String
    - contextPath: Maltiverse.Domain.ResolvedIP.Timestamp
      description: Stores an timestamp when an IP address has been resolved by the
        domain
      type: Date
  - arguments:
    - default: false
      description: URL address to check
      isArray: false
      name: url
      required: true
      secret: false
    - default: true
      defaultValue: '5'
      description: If the number of positives is higher than the threshold, the URL
        address will be considered malicious. If the threshold is not specified, the
        default URL threshold, as configured in the instance settings, will be used.
      isArray: false
      name: threshold
      required: false
      secret: false
    - default: true
      defaultValue: 'false'
      description: Return all of the results, note that it can be thousands of results.
        Prefer not to use in playbooks. The default value is "false"
      isArray: false
      name: fullResponse
      required: false
      secret: false
    deprecated: false
    description: Checks the reputation of an URL
    execution: false
    name: url
    outputs:
    - contextPath: URL.Data
      description: The URL
      type: String
    - contextPath: URL.Maicious.Description
      description: Describes the reason for the URL to be in the blacklist
      type: String
    - contextPath: URL.Malicious.Vendor
      description: The vendor that sends the indicator for reputation check.
      type: String
    - contextPath: URL.PositiveDetections
      description: The number of sources that positively reported the indicator as
        blacklist
      type: Number
    - contextPath: DBotScore.Score
      description: The DBot score
      type: Number
    - contextPath: DBotScore.Type
      description: The type of indicato
      type: String
    - contextPath: DBotScore.Vendor
      description: The vendor used to calculate the score
      type: String
    - contextPath: DBotScore.Indicator
      description: The indicator that was tested
      type: String
    - contextPath: Maltiverse.URL.Address
      description: The checked URL
      type: String
    - contextPath: Maltiverse.URL.Classification
      description: Qualitative maliciousness classification for an IoC. Possible values
        are malicious, suspicious, neutral and whitelist
      type: String
    - contextPath: Maltiverse.URL.Blacklist.FirstSeen
      description: First time that the IoC has been seen
      type: Date
    - contextPath: Maltiverse.URL.Blacklist.LastSeen
      description: Last time that the IoC was seen
      type: Date
    - contextPath: Maltiverse.URL.Blacklist.Description
      description: Describes the reason for the URL to be in the blacklist
      type: Date
    - contextPath: Maltiverse.URL.Blacklist.Source
      description: The name of sources that reported the indicator.
      type: String
    - contextPath: Maltiverse.URL.Tag
      description: Attribute to label an IOC
      type: String
    - contextPath: Maltiverse.URL.ModificationTime
      description: Date when the IOC has been updated for the last time.
      type: Date
    - contextPath: Maltiverse.URL.CreationTime
      description: Date when a IOC has been inserted for the first time
      type: Date
    - contextPath: Maltiverse.URL.Hostname
      description: Stores the hostname to which the url belongs
      type: String
    - contextPath: Maltiverse.URL.Domain
      description: Stores the domain to which the hostname belongs. Hostame and domain
        can match on level 2 hostnames
      type: String
    - contextPath: Maltiverse.URL.TLD
      description: Top level domain of the hostname
      type: String
  - arguments:
    - default: false
      description: SHA256 to check
      isArray: false
      name: file
      required: true
      secret: false
    - default: true
      defaultValue: '5'
      description: If the number of positives AV detection is higher than the threshold,
        the file will be considered malicious. If the threshold is not specified,
        the default file threshold, as configured in the instance settings, will be
        used.
      isArray: false
      name: threshold
      required: false
      secret: false
    - default: true
      defaultValue: 'false'
      description: Return all of the results, note that it can be thousands of results.
        Prefer not to use in playbooks. The default value is "false"
      isArray: false
      name: fullResponse
      required: false
      secret: false
    deprecated: false
    description: Check the reputation of a file
    execution: false
    name: file
    outputs:
    - contextPath: File.Name
      description: The full file name (including file extension).
      type: String
    - contextPath: File.MD5
      description: File MD5 hash
      type: String
    - contextPath: File.SHA1
      description: The SHA1 hash of the file
      type: String
    - contextPath: File.SHA256
      description: The SHA256 hash of the file
      type: String
    - contextPath: File.Size
      description: The size of the file in bytes
      type: Number
    - contextPath: File.Extension
      description: The extension of the file
      type: String
    - contextPath: File.Type
      description: Description of the file type based on its magic numbers
      type: String
    - contextPath: File.Path
      description: The path of the file
      type: String
    - contextPath: DBotScore.Score
      description: The DBot score
      type: Number
    - contextPath: DBotScore.Type
      description: The type of indicator
      type: String
    - contextPath: DBotScore.Vendor
      description: The vendor used to calculate the score
      type: String
    - contextPath: DBotScore.Indicator
      description: The indicator that was tested
      type: String
    - contextPath: Maltiverse.File.Score
      description: Qualitative scoring of the maliciousness of the file. Values from
        0 to 100.
      type: Number
    - contextPath: Maltiverse.File.Tags
      description: Attribute to label an IOC
      type: String
    - contextPath: Maltiverse.File.Malicious.Vendor
      description: For malicious files, the vendor that made the decision
      type: String
    - contextPath: Maltiverse.File.Malicious.Description
      description: For malicious files, describes the reason for the file to be malicious
      type: String
    - contextPath: Maltiverse.File.PositiveDetections
      description: The number of sources that positively reported the indicator as
        blacklist.
      type: Number
    - contextPath: Maltiverse.File.Name
      description: The file name
      type: String
    - contextPath: Maltiverse.File.Classification
      description: Qualitative maliciousness classification for an IoC. Possible values
        are malicious, suspicious, neutral and whitelist
      type: String
    - contextPath: Maltiverse.File.Blacklist.FirstSeen
      description: First time that the IoC has been seen.
      type: Date
    - contextPath: Maltiverse.File.Blacklist.LastSeen
      description: Last time that the IoC was seen
      type: Date
    - contextPath: Maltiverse.File.Blacklist.Description
      description: Describes the reason for the URL to be in the blacklist
      type: String
    - contextPath: Maltiverse.File.Blacklist.Source
      description: The name of sources that reported the indicator
      type: String
    - contextPath: Maltiverse.File.ModificationTime
      description: Date when the IOC has been updated for the last time
      type: Date
    - contextPath: Maltiverse.File.CreationTime
      description: Date when a IOC has been inserted for the first time
      type: Date
    - contextPath: Maltiverse.File.Size
      description: Size of the file in bytes
      type: Number
    - contextPath: Maltiverse.File.ProcessList
      description: List of processes raised by the file in runtime.
      type: String
    - contextPath: Maltiverse.File.ContactedHost
      description: List of the IP addresses contacted by the sample in runtime
      type: String
    - contextPath: Maltiverse.File.DNSRequest
      description: List of hostnames resolved by the sample in runtime
      type: String
  dockerimage: demisto/python3:3.7.4.2245
  feed: false
  isfetch: false
  longRunning: false
  longRunningPort: false
  runonce: false
  script: |-
    ''' IMPORTS '''
    from typing import Tuple, Dict
    from _collections import defaultdict
    import requests
    import hashlib

    # Disable insecure warnings
    requests.packages.urllib3.disable_warnings()

    ''' CONSTANTS '''
    DATE_FORMAT = '%Y-%m-%dT%H:%M:%SZ'
    SERVER_URL = 'https://api.maltiverse.com'
    DBOT_SCORE_KEY = 'DBotScore(val.Indicator == obj.Indicator && val.Vendor == obj.Vendor)'


    class Client(BaseClient):
        """
        Client will implement the service API, and should not contain any Demisto logic.
        Should only do requests and return data.
        """

        def __init__(self, url: str, use_ssl: bool, use_proxy: bool, auth_token=None):
            super().__init__(url, verify=use_ssl, proxy=use_proxy, headers={'Accept': 'application/json'})
            if auth_token:
                self._headers.update({'Authorization': 'Bearer ' + auth_token})

        def ip_report(self, ip: str) -> dict:
            if not is_ip_valid(ip):
                raise DemistoException('The given IP was invalid')
            return self._http_request('GET', f'/ip/{ip}')

        def url_report(self, url: str) -> dict:
            sha256_url = urlToSHA256(url)
            return self._http_request('GET', f'/url/{sha256_url}')

        def domain_report(self, domain: str) -> dict:
            return self._http_request('GET', f'/hostname/{domain}')

        def file_report(self, sha256: str) -> dict:
            return self._http_request('GET', f'/sample/{sha256}')


    def test_module(client=None):
        """
        Returning 'ok' indicates that the integration works like it is supposed to. Connection to the service is successful.

        Args:
            client: HelloWorld client

        Returns:
            'ok' if test passed, anything else will fail the test.
        """
        return 'ok' if client.ip_report('8.8.8.8') else 'Connection failed'


    def calculate_score(positive_detections: int, classification: str, threshold: int, anti_virus: int = 0) -> int:
        """
        Calculates Demisto score based on the classification of Maltiverse and number of positive detections in the blacklist.

        Args:
            positive_detections (int): the number of items in the blacklist
            classification (str): the classification given to the IoC by Maltiverse. Can be one of: neutral, whitelist,
            suspicious, malicious
            threshold (int): the score threshold configured by the user.
            anti_virus (int) - optional: used to calculate the score only in the case that the IoC is a file. Indicates the
            number of items in the list of antivirus detections.

        Returns:
            int - Demisto's score for the indicator
        """
        if positive_detections == 0 and classification == 'neutral':
            return 0
        elif classification == 'whitelist':
            return 1
        elif positive_detections <= threshold and classification != 'malicious':
            if anti_virus > 1:
                return 3
            return 2
        elif positive_detections > threshold or classification == 'malicious':
            return 3
        else:  # if reached this line there is a problem with the logic
            return -1


    def urlToSHA256(url: str) -> str:
        """
        Converts a url into its SHA256 hash.

        Args:
            url (str): the url that should be converted into  SHA256

        Returns:
            str - the SHA256 hash of the url
        """
        return hashlib.sha256(url.encode('utf-8')).hexdigest()


    def create_blacklist_context(blacklist):
        """
        Creates the Blacklist part of the context.

        Args:
            blacklist (dict): the 'blacklist' field of the report, containing all information required for the blacklist
            part in the context.

        Returns:
            dict - the dictionary that should be added into the context
        """
        all_fields = [blacklist[i][field] for field in
                      ['description', 'first_seen', 'last_seen', 'source'] for i in range(len(blacklist))]
        description = all_fields[:len(blacklist)]
        first_seen = all_fields[len(blacklist): 2 * len(blacklist)]
        last_seen = all_fields[2 * len(blacklist): 3 * len(blacklist)]
        source = all_fields[3 * len(blacklist):]
        blacklist_context = {
            'Blacklist': {
                'Description': description,
                'FirstSeen': first_seen,
                'LastSeen': last_seen,
                'Source': source
            }
        }

        return blacklist_context


    def ip_command(client: Client, args: Dict[str, str]) -> Tuple[str, dict, any]:
        """
        Executes IP enrichment against Maltiverse.

        Args:
            client (Client): Maltiverse client.
            args (Dict[str, str]): the arguments for the command.
        Returns:
            str: human readable presentation of the IP report.
            dict: the results to return into Demisto's context.
            Any: the raw data from Maltiverse client (used for debugging).
        """

        threshold = int(args.get('threshold'))
        markdown = ''
        context: dict = defaultdict(list)
        reports = []

        for ip in argToList(args.get('ip')):
            report = client.ip_report(ip, )
            positive_detections = len(report.get('blacklist'))

            blacklist_context = create_blacklist_context(report.get('blacklist', []))

            outputs = {
                'Address': report['ip_addr'],
                'Geo.Country': report.get('country_code'),
                'PositiveDetections': positive_detections,
                'Malicious.Description': blacklist_context['Blacklist']['Description']
            }

            additional_info = {string_to_context_key(field): report[field] for field in
                               ['classification', 'tag']}
            additional_info['Address'] = report['ip_addr']

            dbot_score = {'Indicator': report['ip_addr'], 'Type': 'ip', 'Vendor': 'Maltiverse',
                          'Score': calculate_score(positive_detections, report.get('classification', ' '), threshold)}

            maltiverse_ip = {**blacklist_context, **additional_info}

            context[outputPaths['ip']].append(outputs)
            context[f'Maltiverse.{outputPaths["ip"]}'].append(maltiverse_ip)
            context[DBOT_SCORE_KEY].append(dbot_score)

            # todo: check if it needs to appear as IP.Address and so on
            markdown += tableToMarkdown(f'Maltiverse IP reputation for: {report["ip_addr"]}\n', outputs, removeNull=True)
            reports.append(report)

        # todo: delete next line
        print(reports)

        return markdown, context, reports


    def url_command(client: Client, args: Dict[str, str]) -> Tuple[str, dict, any]:
        """
         Executes URL enrichment against Maltiverse.

         Args:
             client (Client): Maltiverse client.
             args (Dict[str, str]): the arguments for the command.
         Returns:
             str: human readable presentation of the URL report.
             dict: the results to return into Demisto's context.
             Any: the raw data from Maltiverse client (used for debugging).
         """

        threshold = int(args.get('threshold'))
        markdown = ''
        context: dict = defaultdict(list)
        reports = []

        for url in argToList(args.get('url', '')):
            report = client.url_report(url)
            positive_detections = len(report.get('blacklist', ''))
            blacklist_context = create_blacklist_context(report.get('blacklist', []))

            outputs = {'Data': report['url'],
                       'PositiveDetections': positive_detections
                       }

            dbot_score = {'Indicator': report['hostname'], 'Type': 'url', 'Vendor': 'Maltiverse',
                          'Score': calculate_score(positive_detections, report.get('classification', ' '), threshold)}

            maltiverse_url = {string_to_context_key(field): report[field] for field in
                              ['classification', 'tag', 'modification_time', 'creation_time', 'hostname', 'domain', 'tld']}
            maltiverse_url['Address'] = report.get('url')
            maltiverse_url = {**maltiverse_url, **blacklist_context}

            md_info = {
                'URL.Data': report['url'],
                'URL.PositiveDetections': positive_detections,
                'Maltiverse.URL.Domain': report['domain'],
                'Maltiverse.URL.ModificationTime': report['modification_time'],
                'Maltiverse.URL.CreationTime': report['creation_time']
            }
            if positive_detections > 0:
                outputs['Malicious.Description'] = blacklist_context['Blacklist']['Description']
                outputs['Malicious.Vendor'] = 'Maltiverse'
                md_info['URL.Malicious.Description'] = blacklist_context['Blacklist']['Description']
                md_info['URL.Malicious.Vendor'] = 'Maltiverse'

            context[outputPaths['url']].append(outputs)
            context[DBOT_SCORE_KEY].append(dbot_score)
            context[f'Maltiverse.{outputPaths["url"]}'].append(maltiverse_url)

            markdown += tableToMarkdown(f'Maltiverse URL Reputation for: {report["url"]}\n',
                                        md_info, removeNull=True)
            reports.append(report)

            return markdown, context, reports


    def domain_command(client: Client, args: Dict[str, str]) -> Tuple[str, dict, any]:
        """
         Executes domain enrichment against Maltiverse.

         Args:
             client (Client): Maltiverse client.
             args (Dict[str, str]): the arguments for the command.
         Returns:
             str: human readable presentation of the domain report.
             dict: the results to return into Demisto's context.
             Any: the raw data from Maltiverse client (used for debugging).
         """
        threshold = int(args.get('threshold'))
        markdown = ''
        context: dict = defaultdict(list)
        reports = []

        for domain in argToList(args.get('domain', '')):
            print("in for")
            report = client.domain_report(domain)
            positive_detections = len(report.get('blacklist', []))

            outputs = {string_to_context_key(field): report[field] for field in
                       ['creation_time', 'modification_time', 'tld']
                       }
            outputs['Name'] = report['hostname']
            outputs['ASName'] = report['as_name']

            dbot_score = {'Indicator': report['hostname'], 'Type': 'Domain', 'Vendor': 'Maltiverse',
                          'Score': calculate_score(positive_detections, report.get('classification', ' '), threshold)}

            blacklist_context = create_blacklist_context(report.get('blacklist', []))

            resolvedIP_info = {
                'ResolvedIP':
                    {
                        'IP': [report['resolved_ip'][i]['ip_addr'] for i in range(len(report['resolved_ip']))],
                        'Timestamp': [report['resolved_ip'][i]['timestamp'] for i in range(len(report['resolved_ip']))]
                    }
            }

            maltiverse_domain = {string_to_context_key(field): report[field] for field in
                                 ['creation_time', 'modification_time', 'tld', 'classification', 'tag']
                                 }
            maltiverse_domain['Address'] = report['hostname']
            maltiverse_domain = {**maltiverse_domain, **blacklist_context}
            maltiverse_domain = {**maltiverse_domain, **resolvedIP_info}

            context[outputPaths['domain']].append(outputs)
            context[DBOT_SCORE_KEY].append(dbot_score)
            context[f'Maltiverse.{outputPaths["domain"]}'].append(maltiverse_domain)

            md_info = {
                'Domain.Name': report['hostname'],
                'Domain.CreationDate': report['creation_time'],
                'Domain.ModificationDate': report['modification_time'],
                'Maltiverse.Domain.ModificationTime': report['modification_time'],
                'Maltiverse.Domain.CreationTime': report['creation_time'],
                'Maltiverse.Domain.ResolvedIP.IP': [report['resolved_ip'][i]['ip_addr'] for i in
                                                    range(len(report['resolved_ip']))]
            }

            markdown += tableToMarkdown(f'Maltiverse Domain Reputation for: {report["hostname"]}\n',
                                        md_info, removeNull=True)
            reports.append(report)

        # todo: delete print
        print(context)

        return markdown, context, reports


    def file_command(client: Client, args: Dict[str, str]) -> Tuple[str, dict, any]:
        """
        Executes file hash enrichment against Maltiverse.

        Args:
            client (Client): Maltiverse client.
            args (Dict[str, str]): the arguments for the command.

        Returns:
             str: human readable presentation of the file hash report.
             dict: the results to return into Demisto's context.
             Any: the raw data from Maltiverse client (used for debugging).
        """
        threshold = int(args.get('threshold'))
        markdown = ''
        context: dict = defaultdict(list)
        reports = []

        for file in argToList(args.get('file', '')):
            report = client.file_report(file)
            positive_detections = len(report.get('blacklist', []))

            outputs = {string_to_context_key(field): report[field] for field in
                       ['md5', 'sha1', 'sha256', 'size', 'type']
                       }
            outputs['Name'] = report['filename'][0]
            outputs['Extension'] = (report['filename'][0]).split('.')[-1]
            outputs['Path'] = report['process_list'][0]['normalizedpath']

            dbot_score = {'Indicator': report['filename'][0], 'Type': 'File', 'Vendor': 'Maltiverse',
                          'Score': calculate_score(positive_detections, report.get('classification', ' '), threshold,
                                                   len(report['antivirus']))}

            blacklist_context = create_blacklist_context(report.get('blacklist', []))

            process_list = {
                'ProcessList': {
                    string_to_context_key(field): report['process_list'][0][field] for field in
                    ['name', 'normalizedpath', 'sha256', 'uid']
                }
            }
            file_malicious = {
                'Malicious': {
                    'Vendor': 'Maltiverse',
                    'Description': blacklist_context['Blacklist']['Description']
                }
            }

            maltiverse_file = {string_to_context_key(field): report[field] for field in
                               ['score', 'classification', 'modification_time', 'creation_time', 'size', 'contacted_host',
                                'dns_request']}
            maltiverse_file['PositiveDetections'] = positive_detections
            maltiverse_file['Name'] = report['filename'][0]
            maltiverse_file['Tag'] = report.get('tag', '')
            maltiverse_file = {**maltiverse_file, **process_list}
            maltiverse_file = {**maltiverse_file, **blacklist_context}
            if positive_detections > 0:
                maltiverse_file = {**maltiverse_file, **file_malicious}

            context[outputPaths['file']].append(outputs)
            context[DBOT_SCORE_KEY].append(dbot_score)
            context[f'Maltiverse.{outputPaths["file"]}'].append(maltiverse_file)

            md_info = {
                'File.Name': report['filename'][0],
                'File.MD5': report['md5'],
                'File.Type': report['type'],
                'Maltiverse.File.PositiveDetections': positive_detections,
                'Maltiverse.File.Classification': report['classification']
            }

            markdown += tableToMarkdown(f'Maltiverse File Reputation for: {report["filename"][0]}\n',
                                        md_info, removeNull=True)
            reports.append(report)
        return markdown, context, reports


    def main():
        params = demisto.params()

        client = Client(SERVER_URL,
                        use_ssl=not params.get('insecure', False),
                        use_proxy=params.get('proxy', False),
                        auth_token=params.get('api_key', None))

        commands = {
            'ip': ip_command,
            'url': url_command,
            'domain': domain_command,
            'file': file_command,
        }

        command = demisto.command()
        LOG(f'Command being called is {command}')

        try:
            if command == 'test-module':
                demisto.results(test_module(client))
            elif command in commands:
                return_outputs(*commands[command](client, demisto.args()))
            else:
                return_error('Command not found.')
        except Exception as e:  # todo: remove raise and uncomment return_error
            raise e
            # return_error(f'Failed to execute {command} command. Error: {e}')


    if __name__ in ('__main__', '__builtin__', 'builtins'):
        main()
  subtype: python3
  type: python
