[MODEL: dataset = fireeye_hx_raw]
alter
        // addressNotificationEvent fields
        addressNotificationEvent_address = json_extract_scalar(event_values, "$['addressNotificationEvent/address']"),
        // dnsLookupEvent fields
        dnsLookupEvent_hostname = json_extract_scalar(event_values, "$['dnsLookupEvent/hostname']"),
        dnsLookupEvent_pid = json_extract_scalar(event_values, "$['dnsLookupEvent/pid']"),
        dnsLookupEvent_ppath = json_extract_scalar(event_values, "$['dnsLookupEvent/ppath']"),
        dnsLookupEvent_process = json_extract_scalar(event_values, "$['dnsLookupEvent/process']"),
        dnsLookupEvent_processPath = json_extract_scalar(event_values, "$['dnsLookupEvent/processPath']"),
        dnsLookupEvent_username = json_extract_scalar(event_values, "$['dnsLookupEvent/username']"),
        // fileWriteEvent fields
        fileWriteEvent_eventReason = json_extract_scalar(event_values, "$['fileWriteEvent/eventReason']"),
        fileWriteEvent_fileExtension = json_extract_scalar(event_values, "$['fileWriteEvent/fileExtension']"),
        fileWriteEvent_fileName = json_extract_scalar(event_values, "$['fileWriteEvent/fileName']"),
        fileWriteEvent_filePath = json_extract_scalar(event_values, "$['fileWriteEvent/filePath']"),
        fileWriteEvent_parentPid = json_extract_scalar(event_values, "$['fileWriteEvent/parentPid']"),
        fileWriteEvent_size = json_extract_scalar(event_values, "$['fileWriteEvent/size']"),
        fileWriteEvent_pid = json_extract_scalar(event_values, "$['fileWriteEvent/pid']"),
        fileWriteEvent_username = json_extract_scalar(event_values, "$['fileWriteEvent/username']"),
        fileWriteEvent_md5 = json_extract_scalar(event_values, "$['fileWriteEvent/md5']"),
        fileWriteEvent_process = json_extract_scalar(event_values, "$['fileWriteEvent/process']"),
        fileWriteEvent_processPath = json_extract_scalar(event_values, "$['fileWriteEvent/processPath']"),
        fileWriteEvent_devicePath = json_extract_scalar(event_values, "$['fileWriteEvent/devicePath']"),
        fileWriteEvent_ppath = json_extract_scalar(event_values, "$['fileWriteEvent/ppath']"),
        // imageLoadEvent fields
        imageLoadEvent_fileExtension = json_extract_scalar(event_values, "$['imageLoadEvent/fileExtension']"),
        imageLoadEvent_filename = json_extract_scalar(event_values, "$['imageLoadEvent/filename']"),
        imageLoadEvent_filePath = json_extract_scalar(event_values, "$['imageLoadEvent/filePath']"),
        imageLoadEvent_fullPath = json_extract_scalar(event_values, "$['imageLoadEvent/fullPath']"),
        imageLoadEvent_devicePath = json_extract_scalar(event_values, "$['imageLoadEvent/devicePath']"),
        imageLoadEvent_ppath = json_extract_scalar(event_values, "$['imageLoadEvent/ppath']"),
        imageLoadEvent_processPath = json_extract_scalar(event_values, "$['imageLoadEvent/processPath']"),
        imageLoadEvent_process = json_extract_scalar(event_values, "$['imageLoadEvent/process']"),
        imageLoadEvent_username = json_extract_scalar(event_values, "$['imageLoadEvent/username']"),
        imageLoadEvent_pid = json_extract_scalar(event_values, "$['imageLoadEvent/pid']"),
        // networkEvent fields
        networkEvent_localIP = json_extract_scalar(event_values, "$['networkEvent/localIP']"),
        networkEvent_protocol = json_extract_scalar(event_values, "$['networkEvent/protocol']"),
        networkEvent_remoteIP = json_extract_scalar(event_values, "$['networkEvent/remoteIP']"),
        networkEvent_pid = json_extract_scalar(event_values, "$['networkEvent/pid']"),
        networkEvent_remotePort = json_extract_scalar(event_values, "$['networkEvent/remotePort']"),
        networkEvent_localPort = json_extract_scalar(event_values, "$['networkEvent/localPort']"),
        networkEvent_ppath = json_extract_scalar(event_values, "$['networkEvent/ppath']"),
        networkEvent_processPath = json_extract_scalar(event_values, "$['networkEvent/processPath']"),
        networkEvent_process = json_extract_scalar(event_values, "$['networkEvent/process']"),
        // urlMonitorEvent fields
        urlMonitorEvent_requestUrl = json_extract_scalar(event_values, "$['urlMonitorEvent/requestUrl']"),
        urlMonitorEvent_urlMethod = json_extract_scalar(event_values, "$['urlMonitorEvent/urlMethod']"),
        urlMonitorEvent_userAgent = json_extract_scalar(event_values, "$['urlMonitorEvent/userAgent']"),
        urlMonitorEvent_pid = json_extract_scalar(event_values, "$['urlMonitorEvent/pid']"),
        urlMonitorEvent_username = json_extract_scalar(event_values, "$['urlMonitorEvent/username']"),
        urlMonitorEvent_process = json_extract_scalar(event_values, "$['urlMonitorEvent/process']"),
        urlMonitorEvent_processPath = json_extract_scalar(event_values, "$['urlMonitorEvent/processPath']"),
        urlMonitorEvent_ppath = json_extract_scalar(event_values, "$['urlMonitorEvent/ppath']"),
        urlMonitorEvent_localPort = json_extract_scalar(event_values, "$['urlMonitorEvent/localPort']"),
        urlMonitorEvent_remotePort = json_extract_scalar(event_values, "$['urlMonitorEvent/remotePort']"),
        // processEvent fields
        processEvent_pid = json_extract_scalar(event_values, "$['urlMonitorEvent/pid']"),
        processEvent_ppath = json_extract_scalar(event_values, "$['urlMonitorEvent/ppath']"),
        processEvent_process = json_extract_scalar(event_values, "$['urlMonitorEvent/process']"),
        // processEvent fields
        registryEvent_pid = json_extract_scalar(event_values, "$['registryEvent/pid']"),
        registryEvent_process = json_extract_scalar(event_values, "$['registryEvent/process']"),
        registryEvent_processPath = json_extract_scalar(event_values, "$['registryEvent/processPath']"),
        registryEvent_ppath = json_extract_scalar(event_values, "$['registryEvent/ppath']")
| alter
        xdm.event.type = coalesce(event_type, json_extract_scalar(condition, "$.event_type")),
        xdm.observer.unique_identifier = json_extract_scalar(appliance, "$._id"),
        xdm.alert.name = coalesce(json_extract_scalar(indicator, "$.display_name"), json_extract_scalar(indicator, "$.name")),
        xdm.alert.subcategory = json_extract_scalar(indicator, "$.category"),
        xdm.alert.original_alert_id = to_string(event_id),
        xdm.intermediate.host.ipv4_addresses = arraycreate(addressNotificationEvent_address),
        xdm.intermediate.host.ipv6_addresses = arraycreate(addressNotificationEvent_address),
        xdm.network.dns.dns_question.name = dnsLookupEvent_hostname,
        xdm.source.process.pid = dnsLookupEvent_pid,
        xdm.source.process.executable.path = dnsLookupEvent_ppath,
        xdm.source.process.name = dnsLookupEvent_process,
        xdm.source.process.executable.directory = dnsLookupEvent_processPath,
        xdm.source.user.username = coalesce(dnsLookupEvent_username,imageLoadEvent_username,urlMonitorEvent_username,fileWriteEvent_username),
        xdm.event.outcome_reason = fileWriteEvent_eventReason,
        xdm.target.file.extension = fileWriteEvent_fileExtension,
        xdm.target.file.filename = fileWriteEvent_fileName,
        xdm.target.file.path = fileWriteEvent_filePath,
        xdm.target.file.directory = fileWriteEvent_filePath,
        xdm.target.process.parent_id = fileWriteEvent_parentPid,
        xdm.target.process.pid = to_number(coalesce(networkEvent_pid,processEvent_pid,registryEvent_pid,urlMonitorEvent_pid,imageLoadEvent_pid,fileWriteEvent_pid)),
        xdm.target.process.name = coalesce(fileWriteEvent_process,imageLoadEvent_process,networkEvent_process, processEvent_process,registryEvent_process,urlMonitorEvent_process),
        xdm.target.process.executable.size = to_number(fileWriteEvent_size),
        xdm.target.module.extension = imageLoadEvent_fileExtension,
        xdm.target.module.filename = imageLoadEvent_filename,
        xdm.target.module.path = imageLoadEvent_filePath,
        xdm.target.module.directory = imageLoadEvent_fullPath,
        xdm.target.process.executable.directory = coalesce(fileWriteEvent_processPath,imageLoadEvent_processPath,networkEvent_processPath,registryEvent_processPath,urlMonitorEvent_processPath),
        xdm.target.process.executable.path = coalesce(fileWriteEvent_ppath,imageLoadEvent_ppath,networkEvent_ppath,processEvent_ppath,registryEvent_ppath,urlMonitorEvent_ppath),
        xdm.target.host.fqdn = coalesce(fileWriteEvent_devicePath,imageLoadEvent_devicePath),
        xdm.source.ipv4 = networkEvent_localIP,
        xdm.source.ipv6 = networkEvent_localIP,
        xdm.source.port = to_number(coalesce(networkEvent_localPort,urlMonitorEvent_localPort)),
        xdm.network.ip_protocol = networkEvent_protocol,
        xdm.target.ipv4 = networkEvent_remoteIP,
        xdm.target.ipv6 = networkEvent_remoteIP,
        xdm.target.port = to_number(coalesce(networkEvent_remotePort,urlMonitorEvent_remotePort)),
        xdm.target.url = urlMonitorEvent_requestUrl,
        xdm.network.http.method = urlMonitorEvent_urlMethod,
        xdm.source.user_agent = urlMonitorEvent_userAgent,
        xdm.observer.name = source,
        xdm.observer.type = subtype,
        xdm.event.outcome = resolution,
        xdm.target.file.md5 = coalesce(md5values,fileWriteEvent_md5);

[MODEL: dataset = fireeye_hx_audit_raw]
// Modeling for Action audit logs
filter _raw_log contains "Action ID"
| alter
        action_id = arrayindex(regextract(_raw_log, "Action ID (\d+)"),0)
| transaction action_id span = 5m
// Extract fields
| alter
       action_id = arraystring(arraydistinct(arraymap(_raw, arrayindex(regextract(json_extract_scalar("@element", "$._raw_log"), "Action ID (\d+)"),0))), ", "),
       session_id = arraystring(arraydistinct(arraymap(_raw, arrayindex(regextract(json_extract_scalar("@element", "$._raw_log"), "session ID (\d+)"),0))), ", "),
       http_request_method = arraystring(arraydistinct(arraymap(_raw, arrayindex(regextract(json_extract_scalar("@element", "$._raw_log"), "descr: ([A-Z]{2,})\s/"),0))), ", "),
       http_url = arraystring(arraydistinct(arraymap(_raw, arrayindex(regextract(json_extract_scalar("@element", "$._raw_log"), "descr: [A-Z]{2,}\s(/[\w/]+)"),0))), ", "),
       http_source_user = arraystring(arraydistinct(arraymap(_raw, arrayindex(regextract(json_extract_scalar("@element", "$._raw_log"), "requested by: user ([^\s]+)"),0))), ", "),
       http_status = lowercase(arraystring(arraydistinct(arraymap(_raw, arrayindex(regextract(json_extract_scalar("@element", "$._raw_log"), "status: ([A-Za-z].+)$"),0))), ", ")),
       param = arraystring (arraymap(_raw, arrayindex(regextract(json_extract_scalar("@element", "$._raw_log"), "param: (.+)$"),0)), ", "),
       domain_name = arraystring (arraymap(_raw, arrayindex(regextract(json_extract_scalar("@element", "$._raw_log"), "domain name: ([^\s,]+)"),0)), ", "),
       ip_address = arraystring (arraymap(_raw, arrayindex(regextract(json_extract_scalar("@element", "$._raw_log"), "IP address: ([^\s,]+)"),0)), ", "),
       source_interface_name = arraystring (arraymap(_raw, arrayindex(regextract(json_extract_scalar("@element", "$._raw_log"), "source interface name: ([^\s,]+)"),0)), ", "),
       descr = arraystring (arraymap(_raw, arrayindex(regextract(json_extract_scalar("@element", "$._raw_log"), "descr: (.+)$"),0)), ", ")
// Mapping fields
| alter
        xdm.event.type = "user actions",
        xdm.event.id = action_id,
        xdm.source.ipv4 = arrayindex(regextract(ip_address, "(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0),
        xdm.source.ipv6 = arrayindex(regextract(ip_address, "([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"),0),
        xdm.source.interface = source_interface_name,
        xdm.event.description = concat(param, ", ", descr),
        xdm.network.session_id = session_id,
        //xdm.network.http.method = if(http_request_method = "ACL", XDM_CONST.HTTP_METHOD_ACL, http_request_method = "BASELINE_CONTROL", XDM_CONST.HTTP_METHOD_BASELINE_CONTROL, http_request_method = "BIND", XDM_CONST.HTTP_METHOD_BIND, http_request_method = "CHECKIN", XDM_CONST.HTTP_METHOD_CHECKIN, http_request_method = "CHECKOUT", XDM_CONST.HTTP_METHOD_CHECKOUT, http_request_method = "CONNECT", XDM_CONST.HTTP_METHOD_CONNECT, http_request_method = "COPY", XDM_CONST.HTTP_METHOD_COPY, http_request_method = "DELETE", XDM_CONST.HTTP_METHOD_DELETE, http_request_method = "GET", XDM_CONST.HTTP_METHOD_GET, http_request_method = "HEAD", XDM_CONST.HTTP_METHOD_HEAD, http_request_method = "LABEL", XDM_CONST.HTTP_METHOD_LABEL, http_request_method = "LINK", XDM_CONST.HTTP_METHOD_LINK, http_request_method = "LOCK", XDM_CONST.HTTP_METHOD_LOCK, http_request_method = "MERGE", XDM_CONST.HTTP_METHOD_MERGE, http_request_method = "MKACTIVITY", XDM_CONST.HTTP_METHOD_MKACTIVITY, http_request_method = "MKCALENDAR", XDM_CONST.HTTP_METHOD_MKCALENDAR, http_request_method = "MKCOL", XDM_CONST.HTTP_METHOD_MKCOL, http_request_method = "MKREDIRECTREF", XDM_CONST.HTTP_METHOD_MKREDIRECTREF, http_request_method = "MKWORKSPACE", XDM_CONST.HTTP_METHOD_MKWORKSPACE, http_request_method = "MOVE", XDM_CONST.HTTP_METHOD_MOVE, http_request_method = "OPTIONS", XDM_CONST.HTTP_METHOD_OPTIONS, http_request_method = "ORDERPATCH", XDM_CONST.HTTP_METHOD_ORDERPATCH, http_request_method = "PATCH", XDM_CONST.HTTP_METHOD_PATCH, http_request_method = "POST", XDM_CONST.HTTP_METHOD_POST, http_request_method = "PRI", XDM_CONST.HTTP_METHOD_PRI, http_request_method = "PROPFIND", XDM_CONST.HTTP_METHOD_PROPFIND, http_request_method = "PROPPATCH", XDM_CONST.HTTP_METHOD_PROPPATCH, http_request_method = "PUT", XDM_CONST.HTTP_METHOD_PUT, http_request_method = "REBIND", XDM_CONST.HTTP_METHOD_REBIND, http_request_method = "REPORT", XDM_CONST.HTTP_METHOD_REPORT, http_request_method = "SEARCH", XDM_CONST.HTTP_METHOD_SEARCH, http_request_method = "TRACE", XDM_CONST.HTTP_METHOD_TRACE, http_request_method = "UNBIND", XDM_CONST.HTTP_METHOD_UNBIND, http_request_method = "UNCHECKOUT", XDM_CONST.HTTP_METHOD_UNCHECKOUT, http_request_method = "UNLINK", XDM_CONST.HTTP_METHOD_UNLINK, http_request_method = "UNLOCK", XDM_CONST.HTTP_METHOD_UNLOCK, http_request_method = "UPDATE", XDM_CONST.HTTP_METHOD_UPDATE, http_request_method = "UPDATEREDIRECTREF", XDM_CONST.HTTP_METHOD_UPDATEREDIRECTREF, http_request_method = "VERSION_CONTROL", XDM_CONST.HTTP_METHOD_VERSION_CONTROL, to_string(http_request_method)),
        xdm.network.http.url = http_url,
        xdm.source.user.username = http_source_user,
        //xdm.event.outcome = if(http_status contains "success", XDM_CONST.OUTCOME_SUCCESS, http_status contains "failue", XDM_CONST.OUTCOME_FAILED, http_status = "CHALLENGE", to_string(http_status))
        xdm.target.domain = domain_name;
// Modeling for authentication audit logs
filter _raw_log contains ": User log"
| alter
        eventtype = arrayindex(regextract(_raw_log, "AUDIT: ([A-Za-z\s]+):"),0)
// Extracting fields
| alter
        xdm.event.type = eventtype,
        auth_userName = arrayindex(regextract(_raw_log, "username '([^']+)'"),0),
        auth_remote_address = arrayindex(regextract(_raw_log, "remote address '([^']+)'"),0),
        auth_auth_method = arrayindex(regextract(_raw_log, "auth method \'([^']+)\'"),0),
        auth_session_id = arrayindex(regextract(_raw_log, "session ID (\d+)"),0),
        auth_role = arrayindex(regextract(_raw_log, "role \'([^']+)\'"),0)
//Mapping fields
| alter
        xdm.auth.auth_method = auth_auth_method,
        xdm.source.user.username = auth_userName,
        xdm.source.ipv4 = arrayindex(regextract(auth_remote_address, "(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0),
        xdm.source.ipv6 = arrayindex(regextract(auth_remote_address, "([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"),0),
        xdm.network.session_id = auth_session_id,
        xdm.event.description = auth_role;
// Modeling for cli audit logs
filter _raw_log contains "[cli.NOTICE]: AUDIT:"
// Mapping fields
| alter
        xdm.event.type = "cli audit",
        xdm.source.user.username = arrayindex(regextract(_raw_log, "user ([^:]+):"),0),
        xdm.source.process.command_line = arrayindex(regextract(_raw_log, "command: (.*)$"),0);
// Modeling for web session audit logs
filter _raw_log contains "[wsmd.NOTICE]: AUDIT:"
// Mapping fields
| alter
        xdm.event.type = "web session",
        xdm.network.session_id = arrayindex(regextract(_raw_log, "Web session (\d+)"),0),
        xdm.event.description = arrayindex(regextract(_raw_log, "\[wsmd.NOTICE\]: AUDIT: (.*)$"),0);
// Modeling for change audit logs
filter _raw_log contains "Config change ID"
| alter
        change_id = arrayindex(regextract(_raw_log, "Config change ID (\d+)"),0)
| transaction change_id span = 5m
// Extracting fields
| alter
        session_id = arraystring(arraydistinct(arraymap(_raw, arrayindex(regextract(json_extract_scalar("@element", "$._raw_log"), "session ID (\d+)"),0))), ", "),
        user_name = arraystring(arraydistinct(arraymap(_raw, arrayindex(regextract(json_extract_scalar("@element", "$._raw_log"), "requested by: user ([^\s]+)"),0))), ", "),
        change_description = arraystring(arraydistinct(arraymap(_raw, arrayindex(regextract(json_extract_scalar("@element", "$._raw_log"), "item 1: (.*)$"),0))), ", ")
// Mapping fields
| alter
        xdm.event.type = "changes",
        xdm.network.session_id = session_id,
        xdm.source.user.username = user_name,
        xdm.event.description = change_description;