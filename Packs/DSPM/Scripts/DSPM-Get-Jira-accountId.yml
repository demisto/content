commonfields:
  id: c02bb7d7-278e-40db-83fc-9a2f5750602f
  version: 53
vcShouldKeepItemLegacyProdMachine: false
name: DSPM-Get-Jira-accountId
script: |
  import requests
  from requests.auth import HTTPBasicAuth

  def get_account_id_by_email(email: str) -> str:
      try:
          result = demisto.executeCommand("dspm-get-integration-cofig", {})
          integration_conf = result[0].get("Contents",{}).get("integration_conf",{})

          # Extract Jira credentials and URL
          jira_url = integration_conf.get('jiraServerUrl')
          api_key = integration_conf.get('jiraApiToken')
          jiraEmail = integration_conf.get('jiraEmail')

          url = f"https://{jira_url}/rest/api/3/user/search"

          query = {
            'query': email
          }

          auth = HTTPBasicAuth(jiraEmail, api_key)
          headers = {
              "Accept": "application/json",
          }


          response = requests.request("GET", url, headers=headers, params=query, auth=auth)
          # print(json.dumps(json.loads(response.text), sort_keys=True, indent=4, separators=(",", ": ")))

          if response.status_code != 200:
              return_error(f"Error in API call [{response.status_code}]: {response.text}")

          users = response.json()
          print(users)
          if not users:
              return_error('No users found for the provided email.')

          # Assuming the first user in the response is the correct one
          return users[0].get('accountId')
      except Exception as e:
          return_error(f"Error while fetching account ID: {str(e)}")

  def main():
      email = demisto.args().get('email')

      account_id = get_account_id_by_email(email)

      # Formatting readable output
      readable_output = f"### Account ID for {email}:\n- **Account ID**: {account_id}"

      return_results(CommandResults(
          readable_output=readable_output,
          outputs_prefix="AccountInfo",
          outputs_key_field="AccountID",
          outputs={"AccountID": account_id}
      ))


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()
type: python
tags: []
enabled: true
args:
- name: email
  required: true
outputs:
- contextPath: AccountInfo
scripttarget: 0
subtype: python3
pswd: ""
runonce: false
dockerimage: demisto/python3:3.10.14.99865
runas: DBotWeakRole
engineinfo: {}
mainengineinfo: {}
