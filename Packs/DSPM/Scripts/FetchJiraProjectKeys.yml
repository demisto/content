commonfields:
  id: bd8ff7bf-775a-4856-82fa-c226c406e27a
  version: 5
vcShouldKeepItemLegacyProdMachine: false
name: FetchJiraProjectKeys
script: |+
  from typing import Dict, Any
  import traceback
  import requests
  from requests.auth import HTTPBasicAuth
  from base64 import b64encode



  def fetch_jira_projects(email: str, api_key: str, jira_url: str) -> str:
      try:
          url = f"https://{jira_url}/rest/api/3/project/search"

          auth = HTTPBasicAuth(email, api_key)
          headers = {
              "Accept": "application/json",
          }

          response = requests.request("GET", url, headers=headers, auth=auth)

          if response.status_code == 200:
              projects = response.json().get('values', [])
              project_keys = [project['key'] for project in projects]
              return project_keys
          else:
              return_error(f"Failed to fetch projects from Jira. Status code: {response.status_code}, Response: {response.text}")
      except Exception as e:
          demisto.error(f"Error while fetching Jira projects: {str(e)}")
          return []

  def get_list_of_projects() -> str:
      try:
          result = demisto.executeCommand("dspm-get-integration-cofig", {})
          integration_conf = result[0].get("Contents",{}).get('integration_config',{})

          # Extract Jira credentials and URL
          api_key = integration_conf.get('jiraApiToken')
          url = integration_conf.get('jiraServerUrl')
          email = integration_conf.get('jiraEmail')

          # Fetch the list of projects from Jira
          return fetch_jira_projects(email, api_key, url)

      except AttributeError:
          demisto.error("Integration context method not found. Ensure you are in the right environment.")
          raise
      except Exception as e:
          demisto.error(f"Error retrieving Jira projects: {str(e)}")
          raise


  def main():
      try:
          projects_list = get_list_of_projects()

          if projects_list:
              demisto.results(f"Projects retrieved successfully: {projects_list}")
          else:
              raise Exception("No projects found.")

          return_results(
              CommandResults(
                  readable_output=tableToMarkdown(
                      "List of Project IDs",
                      [{'Project ID': project_id} for project_id in projects_list],
                      headers=['Project ID'],
                      removeNull=True
                  ),
                  outputs_prefix="projects_list",
                  outputs=projects_list
              )
          )
      except Exception as e:
          return_error(f"Error retrieving Jira Projects: {str(e)}")

  ''' ENTRY POINT '''

  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

type: python
tags: []
comment: This automation script retrieves a list of project keys from Jira for a given
  set of credentials. It interacts with the Jira API to pull all available projects
  and returns their keys. This script is useful for integrating Jira project management
  capabilities into XSOAR workflows, allowing users to identify and work with specific
  Jira projects easily.
enabled: true
outputs:
- contextPath: projects_list
scripttarget: 0
subtype: python3
pswd: ""
runonce: false
dockerimage: demisto/python3:3.10.14.98471
runas: DBotWeakRole
engineinfo: {}
mainengineinfo: {}