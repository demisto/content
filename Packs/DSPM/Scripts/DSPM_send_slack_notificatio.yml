commonfields:
  id: 3950c5bc-cbc4-4a60-81cc-4867ad9acdab
  version: 39
vcShouldKeepItemLegacyProdMachine: false
name: DSPM_send_slack_notificatio
script: |+
  from typing import Dict, Any
  import traceback


  ''' STANDALONE FUNCTION '''


  def send_data_slack_command(args):
      # Extract relevant fields from the incident
      incident = args.get("incident_object")
      projects_list = args.get("projects_list")

      result = demisto.executeCommand("dspm-get-integration-cofig", {})
      integration_conf = result[0].get("Contents",{}).get("integration_conf",{})

      incident_data = {
          "incident_id": incident.get('incidentId'),
          "ruleName": incident.get('ruleName', 'N/A'),
          "severity": incident.get('severity', 'N/A'),
          "assetName": incident.get('name', 'N/A'),
          "assetId": incident.get('assetId', 'N/A'),
          "projectId": incident.get('projectId', 'N/A'),
          "cloudProvider": incident.get('cloudProvider', 'N/A'),
          "cloudEnvironment": incident.get('cloudEnvironment', 'N/A'),
          "firstDiscovered": incident.get('firstDiscovered', 'N/A'),
          "complianceStandards": incident.get('complianceStandards', 'N/A'),
          "assetDigTags": incident.get('assetDigTags',"N/A"),
          "openToWorld": incident.get("openToWorld","N/A"),
          "serviceType":incident.get('serviceType','N/A'),
          "dataTypeGroups":incident.get("dataTypeGroups","N/A"),
          "tags":incident.get("tags","N/A"),
          "remediateDescription": incident.get('remediateDescription','N/A'),
          "username": "manas@metronlabs.com",
          "risk_type": incident.get("ruleName"),
          "project_keys": projects_list,
          "xsoar_credentials": {
              "api_key": integration_conf.get('xsoarApiKey'),
              "xsoar_url": integration_conf.get('xsoarServerUrl'),
          }

      }

      # Convert to JSON
      incident_json = json.dumps(incident_data)
      print(incident_json)
      # Define the endpoint URL and headers for the POST request
      url = 'https://5ceb-202-164-137-91.ngrok-free.app/dspm_receiver'
      headers = {
          'Content-Type': 'application/json'
      }

      # Make the POST request
      response = requests.post(url, headers=headers, data=incident_json)

      if response.status_code == 200:
          demisto.results("Incident data sent successfully.")
      else:
          demisto.results(f"Failed to send incident data. Status code: {response.status_code}, Response: {response.text}")


  ''' MAIN FUNCTION '''
  def main():
      try:
          send_data_slack_command(demisto.args())
      except Exception as ex:
          demisto.error(traceback.format_exc())  # print the traceback
          return_error(f'Failed to execute BaseScript. Error: {str(ex)}')


  ''' ENTRY POINT '''


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

type: python
tags: []
enabled: true
args:
- name: incident_object
  required: true
  type: unknown
- name: projects_list
  required: true
  isArray: true
  defaultValue: '["N/A","N/A"]'
scripttarget: 0
subtype: python3
pswd: ""
runonce: false
dockerimage: demisto/python3:3.10.14.98471
runas: DBotWeakRole
engineinfo: {}
mainengineinfo: {}
