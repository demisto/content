commonfields:
  id: ea589919-2c6d-4575-8ea0-9345cc1675e5
  version: 51
vcShouldKeepItemLegacyProdMachine: false
name: DSPM_fetch_incident_details
script: |+
  from typing import Dict, Any
  import traceback


  def get_incident_details_command(args):
      incident_data = args.get("get_incident_details")

      labels = incident_data.get('labels', {})
      asset = json.loads(labels.get('asset', '{}'))
      asset_details = incident_data.get('assetdetails',{})

      incident_object = {
          "incidentId":incident_data.get('id', 'N/A'),
          "ruleName": labels.get('ruleName', 'N/A'),
          "severity": labels.get('severity', 'N/A'),
          "assetName": asset.get('name', 'N/A'),
          "assetId": asset.get('assetId', 'N/A'),
          "Status": labels.get('status', 'N/A'),
          "projectId": labels.get('projectId', 'N/A'),
          "cloudProvider": labels.get('cloudProvider', 'N/A'),
          "cloudEnvironment": labels.get('cloudEnvironment', 'N/A'),
          "firstDiscovered": labels.get('firstDiscovered', 'N/A'),
          "complianceStandards": labels.get('complianceStandards', 'N/A'),
          "assetDigTags": asset_details.get('assetDigTags',"N/A"),
          "openToWorld": asset_details.get("openToWorld","N/A"),
          "serviceType":asset_details.get('serviceType','N/A'),
          "riskFindingId":labels.get('id', 'N/A'),
          "dataTypeGroups":asset_details.get("dataTypeGroups","N/A"),
          "tags":asset_details.get("assetDigTags","N/A"),
          "remediateDescription": incident_data.get('remediateDescription','N/A'),
          "remediateSteps": incident_data.get('remediateSteps','N/A')
      }
      return incident_object


  ''' MAIN FUNCTION '''

  def main():
      try:
          incident_details = get_incident_details_command(demisto.args())

          return_results(
                CommandResults(
                    readable_output=tableToMarkdown("Incident Details : ", incident_details, removeNull=True),
                    outputs_prefix="incident_object",
                    outputs=incident_details
                )
              )
      except Exception as e:
          demisto.error(f"Error building incident object: {str(e)}")
          return_error(f"Error building incident object: {str(e)}")


  ''' ENTRY POINT '''


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

type: python
tags: []
enabled: true
args:
- name: get_incident_details
  required: true
outputs:
- contextPath: incident_object
scripttarget: 0
subtype: python3
timeout: 362.88ms
pswd: ""
runonce: false
dockerimage: demisto/python3:3.10.14.98471
runas: DBotWeakRole
engineinfo: {}
mainengineinfo: {}