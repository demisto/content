import json
import io
import Intel471MalwareIndicator as feed


def util_load_json(path):
    with io.open(path, mode='r', encoding='utf-8') as f:
        return json.loads(f.read())


def test_build_relationships():
    """
    Given:
        - relationships configuration.
    When:
        - getting indicators feed.
    Then:
        - validate the relationships is created correctly.
    """
    type_ = 'url'
    value_ = 'http://example_url.com'
    malware_family = 'test-malware'

    res = feed.build_relationships(type_, value_, malware_family)

    assert res[0] == {'entityA': 'http://example_url.com', 'entityAFamily': 'Indicator', 'entityAType': 'url',
                      'entityB': 'test-malware', 'entityBFamily': 'Indicator', 'entityBType': 'Malware',
                      'fields': {}, 'name': 'indicator-of', 'reverseName': 'indicated-by',
                      'type': 'IndicatorToIndicator'}


def test_fetch_indicators(requests_mock):
    """Tests the fetch-indicators command function.

    Configures requests_mock instance to generate the appropriate
    get_indicator API response, loaded from a local JSON file. Checks
    the output of the command function with the expected output.
    """
    from Intel471MalwareIndicator import Client, fetch_indicators

    mock_indicators_response = util_load_json('test_data/search_indicators.json')
    requests_mock.get(
        'https://api.intel471.com/v1/indicators/stream?count=1&lastUpdatedFrom=1682899200000',
        json=mock_indicators_response)

    client = Client(auth=('username', 'apikey'))

    girs = [
        {
            "uid": "d42bee57ea536afbe19fdfb1d563a516",
            "data": {
                "gir": {
                    "path": "1.1.6",
                    "name": "Loader malware",
                    "description": "Description of loader malware.",
                    "parent": {
                        "path": "1.1",
                        "name": "Malware variants",
                        "description": "Description of malware variants.",
                        "parent": {
                            "path": "1",
                            "name": "Malware",
                            "description": "Description of malware."
                        }
                    }
                }
            }
        }
    ]

    requests_mock.patch.object(client, 'get_girs', return_value=girs)

    indicators = fetch_indicators(
        client=client,
        save_state=False,
        limit=1
    )

    assert indicators == [
        {
            'value': 'e37cd2b785a4c43205144e5389cacb71f2d89cbc24f999ff11e14f72b82ade72',
            'type': 'file',
            'rawJSON': {
                "data": {
                    "uid": "b47a6e29297153e6f3e7b501c6afcc5a",
                    "source_id": "ca5b8c48ea630c3aa38de3ca06e89b8c6413f4c6",
                    "threat": {
                        "type": "malware",
                        "uid": "b4afbbdc15cd46b1a2b5cec00955a79e",
                        "data": {
                            "malware_family_profile_uid": "b4afbbdc15cd46b1a2b5cec00955a79e",
                            "family": "badware"
                        }
                    },
                    "expiration": 1714424168000,
                    "confidence": "medium",
                    "context": {
                        "description": "executable downloaded by badware malware family"
                    },
                    "mitre_tactics": "command_and_control",
                    "indicator_type": "file",
                    "indicator_data": {
                        "file": {
                            "md5": "2efa2fe37c5e1edf4accae5703af65cb",
                            "sha1": "c92bf6a5bc42e4803052a28c9793cd294832d5ef",
                            "sha256": "e37cd2b785a4c43205144e5389cacb71f2d89cbc24f999ff11e14f72b82ade72",
                            "type": "PEEXE_x86",
                            "size": 1536728,
                            "ssdeep": "47626:RyVRj/5Q4CjPf7p55jwIMdKGlhE/ldH/O846hza7jLWp4EcNz23EP:EnjSTfMdeddfWj7/GNR2",
                            "download_url": "https://api.intel471.com/v1/download/malwareIntel/f32cd2b785a4c4320512b82aec6b.zip"
                        }
                    },
                    "intel_requirements": [
                        "1.1.6"
                    ]
                },
                "meta": {
                    "version": "0.1"
                },
                "last_updated": 1682724802245,
                "uid": "b47a6e29297153e6f3e7b501c6afcc5a",
                "activity": {
                    "first": 1682899254000,
                    "last": 1682899272000
                }
            },
            'fields': {
                'md5': '2efa2fe37c5e1edf4accae5703af65cb',
                'sha1': 'c92bf6a5bc42e4803052a28c9793cd294832d5ef',
                'sha256': 'e37cd2b785a4c43205144e5389cacb71f2d89cbc24f999ff11e14f72b82ade72',
                'ssdeep': '47626:RyVRj/5Q4CjPf7p55jwIMdKGlhE/ldH/O846hza7jLWp4EcNz23EP:EnjSTfMdeddfWj7/GNR2',
                'filetype': 'PEEXE_x86',
                'downloadurl': 'https://api.intel471.com/v1/download/malwareIntel/f32cd2b785a4c4320512b82aec6b.zip',
                'size': 1536728,
                'firstseenbysource': '20230501T010054',
                'lastseenbysource': '20230501T010112',
                'trafficlightprotocol': 'AMBER',
                'tags': [
                    'executable downloaded by badware malware family',
                    'command_and_control',
                    'GIR: 1.1.6 - Loader malware'
                ]
            },
            'relationships': {
                'entityA': 'e37cd2b785a4c43205144e5389cacb71f2d89cbc24f999ff11e14f72b82ade72',
                'entityAFamily': 'Indicator',
                'entityAType': 'file',
                'entityB': 'badware',
                'entityBFamily': 'Indicator',
                'entityBType': 'Malware',
                'fields': {},
                'name': 'indicator-of',
                'reverseName': 'indicated-by',
                'type': 'IndicatorToIndicator'
            }
        }
    ]
