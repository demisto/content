contentitemexportablefields:
  contentitemfields:
    propagationLabels:
    - all
fromversion: 5.0.0
description: This playbook polls all indicators to check if they exist.
id: Indicator Registration Polling - Generic
inputs:
- description: The indicators to check.
  key: indicators
  playbookInputQuery: null
  required: true
  value: {}
- description: How often to check (in minutes).
  key: frequency
  playbookInputQuery: null
  required: true
  value:
    simple: "1"
- description: When to timeout (in minutes).
  key: timeout
  playbookInputQuery: null
  required: true
  value:
    simple: "10"
name: Indicator Registration Polling - Generic
outputs: []
sourceplaybookid: Context Polling - Generic
starttaskid: "0"
tasks:
  "0":
    continueonerrortype: ""
    id: "0"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "1"
    note: false
    quietmode: 0
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: ""
      id: d66a3885-27e3-439d-8855-b5522c6dde35
      iscommand: false
      name: ""
      version: -1
    taskid: d66a3885-27e3-439d-8855-b5522c6dde35
    timertriggers: []
    type: start
    view: |-
      {
        "position": {
          "x": 50,
          "y": 50
        }
      }
  "1":
    continueonerrortype: ""
    id: "1"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    loop:
      exitCondition: ""
      iscommand: false
      max: 100
      wait: 1
    nexttasks:
      '#none#':
      - "8"
    note: false
    quietmode: 0
    scriptarguments:
      AdditionalPollingCommandArgNames:
        simple: encoding
      AdditionalPollingCommandArgValues:
        simple: url-encoding
      Ids:
        complex:
          root: inputs.indicators
          transformers:
          - operator: uniq
          - operator: URLEncode
      Interval:
        complex:
          root: inputs.frequency
      PollingCommandArgName:
        simple: indicator
      PollingCommandName:
        simple: CheckIndicatorValue
      Timeout:
        complex:
          root: inputs.timeout
      dt:
        simple: CheckIndicatorValue(val.Exists==false).EncodedIndicator
    separatecontext: true
    skipunavailable: false
    task:
      brand: ""
      description: |-
        Use this playbook as a sub-playbook to block execution of the master playbook until a remote action is complete.
        This playbook implements polling by continuously running the command in Step \#2 until the operation completes.
        The remote action should have the following structure:

        1. Initiate the operation.
        2. Poll to check if the operation completed.
        3. (optional) Get the results of the operation.
      id: b848db18-f1ef-4c37-8341-f44c1fb2fa84
      iscommand: false
      name: Poll Indicators
      playbookId: GenericPolling
      type: playbook
      version: -1
    taskid: b848db18-f1ef-4c37-8341-f44c1fb2fa84
    timertriggers: []
    type: playbook
    view: |-
      {
        "position": {
          "x": 50,
          "y": 195
        }
      }
  "8":
    continueonerrortype: ""
    id: "8"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    note: false
    quietmode: 0
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: ""
      id: 4652f620-ec05-47da-800c-76426f68efab
      iscommand: false
      name: Done
      type: title
      version: -1
    taskid: 4652f620-ec05-47da-800c-76426f68efab
    timertriggers: []
    type: title
    view: |-
      {
        "position": {
          "x": 50,
          "y": 370
        }
      }
version: -1
view: |-
  {
    "linkLabelsPosition": {},
    "paper": {
      "dimensions": {
        "height": 385,
        "width": 380,
        "x": 50,
        "y": 50
      }
    }
  }
tests:
- No tests