from ast import arg
import demistomock as demisto
from CommonServerPython import *  # noqa # pylint: disable=unused-wildcard-import
import requests
import traceback
from typing import Dict, Any, List

# Disable insecure warnings
requests.packages.urllib3.disable_warnings()  # pylint: disable=no-member


''' CONSTANTS '''
DATE_FORMAT = '%Y-%m-%d %H:%M:%S'
ENDPOINTS = {
    'vulnerability': '/rest/vulnerability'
}


''' CLIENT CLASS '''
class Client(BaseClient):
    def __init__(self, input_url: str, api_key: str, verify_certificate: bool, proxy: bool, endpoint="/rest/vulnerability"):
        base_url = urljoin(input_url, endpoint)
        headers = {
            "Content-Type": "application/json",
            'auth-token': api_key
        }
        super(Client, self).__init__(base_url=base_url,
                                     verify=verify_certificate,
                                     headers=headers,
                                     proxy=proxy)

    def vulnerability_search(self, url_suffix: str, data: dict = {}) -> dict:
        return self._http_request(method='GET', url_suffix=url_suffix, params=data)


''' HELPER FUNCTIONS '''
def _calculate_dbot_score(severity: int) -> int:
    """
    Calculates Dbot score according to table:
    Dbot Score   | severity
     0           | 0
     1           | 1,2
     2           | 3,4
     3           | 5,6,7
    Args:
        severity: value from 1 to 5, determined by iDefense threat indicator

    Returns:
        Calculated score
    """
    dbot_score = Common.DBotScore.NONE

    if severity > 4:
        dbot_score = Common.DBotScore.BAD
    elif severity > 2:
        dbot_score = Common.DBotScore.SUSPICIOUS
    elif severity > 0:
        dbot_score = Common.DBotScore.GOOD

    return dbot_score


def _extract_result(res: dict, dbot_score_type: str, reliability: DBotScoreReliability) -> List[dict]:
    analysis_results = []
    
    if res.get('total_size'):
        results_array = res.get('results', [])
        if len(results_array):
            for result in results_array:
                cpes = []
                indicator_value = result.get('key', '')
                dbot_score: int = _calculate_dbot_score(result.get('severity', 0))
                desc = 'Match found in AccentureCTI database'
                dbot = Common.DBotScore(indicator_value, dbot_score_type, 'ACTIVulnerabilityQuery', dbot_score, desc, reliability)

                vuln_techs = result.get('affects', '').get('vuln_techs', '')
                for vuln in vuln_techs:
                    cpes.append(vuln.get('display_text', ''))

                
                analysis_info = {
                    'Name': result.get('key', ''),
                    'DbotReputation': dbot_score,
                    'CVSS2': result.get('cvss2', ''),
                    'CVSS3': result.get('cvss3', ''),
                    'UUID': result.get('uuid', ''),
                    'CPEs': cpes
                }
                analysis_results.append({'analysis_info': analysis_info, 'dbot': dbot})
                # print(analysis_results)
                
    return analysis_results
            
                

''' COMMAND FUNCTIONS '''

def test_module(client: Client) -> str:
    """Tests API connectivity and authentication'

    Returning 'ok' indicates that the integration works like it is supposed to.
    Connection to the service is successful.
    Raises exceptions if something goes wrong.

    :type client: ``Client``
    :param Client: client to use

    :return: 'ok' if test passed, anything else will fail the test.
    :rtype: ``str``
    """

    message: str = ''
    try:
        # TODO: ADD HERE some code to test connectivity and authentication to your service.
        # This  should validate all the inputs given in the integration configuration panel,
        # either manually or by using an API that uses them.
        message = 'ok'
    except DemistoException as e:
        if 'Forbidden' in str(e) or 'Authorization' in str(e):  # TODO: make sure you capture authentication errors
            message = 'Authorization Error: make sure API Key is correctly set'
        else:
            raise e
    return message



def vuln_command(client: Client, args: dict, reliability: DBotScoreReliability) -> List[CommandResults]:

    vulns : list = argToList(args.get('cve', None))
    if not vulns:
        raise ValueError('vuln not specified')

    result = client.vulnerability_search(url_suffix='/v0', data={'key.values': vulns})
    analysis_results = _extract_result(result, DBotScoreType.CVE, reliability)

    print(analysis_results)

    print("----------------------testing-----------------------")
    # print(result)

    return 0

    return CommandResults(
        outputs_prefix='BaseIntegration',
        outputs_key_field='',
        outputs=result,
    )



''' MAIN FUNCTION '''


def main():

    # api_key = demisto.params().get('credentials', {}).get('password')
    params = demisto.params()
    api_key = params.get('api_token')
    if isinstance(api_key, dict):
        api_key = api_key.get('password')

    base_url = urljoin(params.get('url', ''))
    reliability = params.get('integrationReliability', 'B - Usually reliable')

    if DBotScoreReliability.is_valid_type(reliability):
        reliability = DBotScoreReliability.get_dbot_score_reliability_from_str(reliability)
    else:
        Exception("Accenture CTI error: Please provide a valid value for the Source Reliability parameter")

    commands = {
        'vuln': vuln_command,
    }

    verify_certificate = not params.get('insecure', False)

    proxy = params.get('use_proxy', False)

    try:
        command = demisto.command()
        client = Client(base_url, api_key, verify_certificate, proxy, endpoint=ENDPOINTS['vulnerability'])
        demisto.debug(f'Command being called is {command}')

        if command == 'test-module':
            return_results(test_module(client))
        elif command in commands:
            return_results(commands[command](client, demisto.args(), reliability))


    # Log exceptions and return errors
    except Exception as e:
        demisto.error(traceback.format_exc())  # print the traceback
        return_error(f'Failed to execute {demisto.command()} command.\nError:\n{str(e)}')



if __name__ in ('__main__', '__builtin__', 'builtins'):
    main()
