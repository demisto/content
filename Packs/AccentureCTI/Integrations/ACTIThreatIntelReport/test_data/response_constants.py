RES_JSON_IA_IR = {
    "attack_techniques": [
        {
            "id": "T1047",
            "label": "Windows Management Instrumentation"
        },
        {
            "id": "T1003",
            "label": "Credential Dumping"
        },
        {
            "id": "T1124",
            "label": "System Time Discovery"
        },
        {
            "id": "T1045",
            "label": "Software Packing"
        },
        {
            "id": "T1145",
            "label": "Private Keys"
        },
        {
            "id": "T1046",
            "label": "Network Service Scanning"
        },
        {
            "id": "T1087",
            "label": "Account Discovery"
        },
        {
            "id": "T1165",
            "label": "Startup Items"
        },
        {
            "id": "T1143",
            "label": "Hidden Window"
        },
        {
            "id": "T1022",
            "label": "Data Encrypted"
        },
        {
            "id": "T1063",
            "label": "Security Software Discovery"
        },
        {
            "id": "T1041",
            "label": "Exfiltration Over Command and Control Channel"
        },
        {
            "id": "T1064",
            "label": "Scripting"
        },
        {
            "id": "T1482",
            "label": "Domain Trust Discovery"
        },
        {
            "id": "T1528",
            "label": "Steal Application Access Token"
        },
        {
            "id": "T1007",
            "label": "System Service Discovery"
        },
        {
            "id": "T1107",
            "label": "File Deletion"
        },
        {
            "id": "T1503",
            "label": "Credentials from Web Browsers"
        },
        {
            "id": "T1049",
            "label": "System Network Connections Discovery"
        },
        {
            "id": "T1083",
            "label": "File and Directory Discovery"
        },
        {
            "id": "T1081",
            "label": "Credentials in Files"
        },
        {
            "id": "T1060",
            "label": "Registry Run Keys / Startup Folder"
        },
        {
            "id": "T1082",
            "label": "System Information Discovery"
        },
        {
            "id": "T1179",
            "label": "Hooking"
        },
        {
            "id": "T1135",
            "label": "Network Share Discovery"
        },
        {
            "id": "T1113",
            "label": "Screen Capture"
        },
        {
            "id": "T1059",
            "label": "Command-Line Interface"
        },
        {
            "id": "T1078",
            "label": "Valid Accounts"
        },
        {
            "id": "T1056",
            "label": "Input Capture"
        },
        {
            "id": "T1012",
            "label": "Query Registry"
        },
        {
            "id": "T1035",
            "label": "Service Execution"
        },
        {
            "id": "T1112",
            "label": "Modify Registry"
        },
        {
            "id": "T1057",
            "label": "Process Discovery"
        },
        {
            "id": "T1010",
            "label": "Application Window Discovery"
        },
        {
            "id": "T1055",
            "label": "Process Injection"
        },
        {
            "id": "T1074",
            "label": "Data Staged"
        },
        {
            "id": "T1539",
            "label": "Steal Web Session Cookie"
        },
        {
            "id": "T1518",
            "label": "Software Discovery"
        },
        {
            "id": "T1119",
            "label": "Automated Collection"
        },
        {
            "id": "T1214",
            "label": "Credentials in Registry"
        },
        {
            "id": "T1016",
            "label": "System Network Configuration Discovery"
        },
        {
            "id": "T1050",
            "label": "New Service"
        },
        {
            "id": "T1070",
            "label": "Indicator Removal on Host"
        },
        {
            "id": "T1170",
            "label": "Mshta"
        },
        {
            "id": "T1071",
            "label": "Standard Application Layer Protocol"
        },
        {
            "id": "T1090",
            "label": "Connection Proxy"
        }
    ],
    "created_on": "2021-03-05T21:47:36.000Z",
    "display_text": "Kazuar Revamped: BELUGASTURGEON Significantly Updates Its Espionage Backdoor",
    "dynamic_properties": {},
    "index_timestamp": "2022-02-09T14:18:19.333Z",
    "key": "5ca1bcc4-843f-4a2b-9673-ec294e05a509",
    "last_modified": "2021-07-14T09:17:37.000Z",
    "last_published": "2021-03-05T21:47:36.000Z",
    "links": [
        {
            "created_on": "2017-05-04T17:45:51.000Z",
            "display_text": "Kazuar",
            "key": "Kazuar",
            "relationship": "mentions",
            "relationship_created_on": "2021-03-05T21:47:36.000Z",
            "relationship_last_published": "2021-03-05T21:47:36.000Z",
            "type": "malware_family",
            "uuid": "ef5a7376-0a81-4478-b15d-68369e7196bd",
            "href": "/rest/fundamental/v0/ef5a7376-0a81-4478-b15d-68369e7196bd"
        },
        {
            "created_on": "2020-08-07T20:08:29.000Z",
            "display_text": "Russia-Linked BELUGASTURGEON Uses ComRATv4 to Target Government and Resources Organizations in Europe and Central Asia",
            "key": "033355e6-e57e-4a02-bf3a-c9805d06a259",
            "relationship": "mentions",
            "relationship_created_on": "2021-03-05T21:47:36.000Z",
            "relationship_last_published": "2021-03-05T21:47:36.000Z",
            "type": "intelligence_report",
            "uuid": "9bf2fc44-570d-40ad-b81a-744141ed443e",
            "href": "/rest/document/v0/9bf2fc44-570d-40ad-b81a-744141ed443e"
        }
    ],
    "replication_id": 1626254257462000000,
    "replication_id_ja": 1615483119339000000,
    "sources_external": [
        {
            "datetime": "2017-05-02T23:00:00.000Z",
            "description": "Kazuar: Multiplatform Espionage Backdoor with API Access",
            "name": "Palo Alto Networks",
            "reputation": 4,
            "url": "https://unit42.paloaltonetworks.com/unit42-kazuar-multiplatform-espionage-backdoor-api-access/"
        }
    ],
    "threat_types": [
        "Cyber Espionage"
    ],
    "title": "Kazuar Revamped: BELUGASTURGEON Significantly Updates Its Espionage Backdoor",
    "type": "intelligence_alert",
    "uuid": "a487dfdc-08b4-4909-82ea-2d934c27d901",
    "analysis": "## Key Findings and Judgements\n\n- From analyzing two Kazuar samples, iDefense determined that BELUGASTURGEON has significantly updated the backdoor's codebase when compared to traditional Kazuar samples.\n\n- The updated variant's core functionality supports new commands for espionage campaigns, including keylogging, credential theft, and system enumeration, without requiring additional plugins.\n\n- BELUGASTURGEON operators can now communicate between Kazuar instances  using task forwarding over named pipes without needing Internet connectivity; these enhancements offer functionality similar to that in Carbon and Uroborus.\n\n- Multiple Kazuar infections can now exist on one compromised system but target different users due to updates in Kazuar's mutex generation function.\n\n- HTTP(S) command-and-control (C2) communications now use primary, backup, and last-chance C2 servers to maintain persistence on a compromised device even if some of BELUGASTURGEON's infrastructure is unavailable.\n\n- Because Kazuar can now load from a Windows Registry key into memory, an infection file does not exist on the device and the chance of detection is reduced.\n\n- A comparison of the samples from August 2020 and February 2021 reveal differences in the Kazuar command set and configuration settings. Based on the discovery times of these samples and the changes between them, iDefense assesses the new Kazuar variant is under active development and BELUGASTURGEON will continue to use it for espionage campaigns.\n\n## Overview\n[Kazuar](#/node/malware_family/view/ef5a7376-0a81-4478-b15d-68369e7196bd) is a .NET backdoor the [BELUGASTURGEON (a.k.a. Turla, Snake, Waterbug, Venomous Bear)](#/node/threat_group/view/fb53e479-54e1-4827-abb4-ae1ae1db53e2) threat group has been using in espionage campaigns since at least 2017. [The Kazuar variant that Palo Alto Networks detailed in May 2017](https://unit42.paloaltonetworks.com/unit42-kazuar-multiplatform-espionage-backdoor-api-access/) has commands typical of many backdoors, such as reading, writing, copying, moving, and deleting files on the compromised system; executing commands from the command line; taking screenshots; and capturing webcam images. The version is extensible using a plugin framework to achieve additional functionality. The remote API allows BELUGASTURGEON operators to direct the backdoor to act as a web server and listen for inbound HTTP requests. iDefense identified this version of Kazuar used in various BELUGASTURGEON activity, including a [2020 campaign against the Cypriot government](#/node/intelligence_alert/view/6cc805d7-cb77-443d-afea-d052916fa602).\n\nSince its discovery in 2017, developers have been enhancing Kazuar. In 2019, security researcher [Juan Andr√©s Guerrero-Saade identified](https://www.epicturla.com/blog/sysinturla) Kazuar samples branded to look like the Microsoft SysInternals tool [DebugView](https://docs.microsoft.com/en-us/sysinternals/downloads/debugview). In addition to cosmetic changes, the Kazuar developers moved to a custom packer instead of  obfuscating Kazuar's code with [ConfuserEx](https://yck1509.github.io/ConfuserEx/). \n\nIn the campaign against the Cypriot government, BELUGASTURGEON operators implemented a novel C2 configuration where the Kazuar backdoor receives commands from URLs pointing to internal nodes in the Cypriot government network. [Another Kazuar sample acted as a transfer agent](#/node/malicious_event/view/2c3490cd-c4bb-4aef-b75f-641b76dcff01), proxying commands between the sample with the novel C2 configuration and the C2 server. Despite these developments, the underlying Kazuar codebase, including the backdoor's command set and configuration, remained mostly unchanged.\n## New Kazuar Functionality \nIn February 2021, Defense analyzed two Kazuar samples and noted significant changes in the codebase,  command set, and configuration functionality to warrant classifying the samples as a new variant of the Kazuar backdoor. One sample, shared by an industry partner, was first seen in August 2020; the second sample was uploaded to a third-party malware repository in February 2021. \n\nThe new variant persists on the system by storing the packed Kazuar binary in the Windows Registry and loading itself into memory at runtime without writing an infection file to disk. The variant offers new credential stealing and keylogging functionality, executes payloads in a range of file formats, and enumerates a wide range of system information about the compromised device. \n\nThe backdoor has a built-in command that forwards tasks to other Kazuar instances in a compromised network via named pipes. The ability to communicate among Kazuar instances as well as the overall extended functionality implemented without plugins allows Kazuar to achieve the functionality of some of BELUGASTURGEON's more sophisticated backdoors, such as [Carbon](#/node/malware_family/view/5c48cd58-180b-4d02-b344-5756f3a6fb33) or [Uroborus](#/node/malware_family/view/7c5fc18d-bab8-4928-a716-9b0c5a92a022).\n\nThe new Kazuar variant appears intended for Windows systems as developers have removed the UNIX-related code found in the earlier variant. Other functionality removed includes the remote HTTP API that is replaced with the task forwarding functionality allowing operators to configure Kazuar instances to listen for tasks from other \"remote\" Kazuar instances. \n\nIndications the Kazuar variant is under active development include an Agent Label value, discussed in more detail in the *Configuration Comparison* section, that is likely a version number incremented when there is a new iteration of the backdoor. iDefense also identified changes in the commands and configuration between the sample from August 2020 and February 2021. \n\niDefense analyzed the following samples of the new Kazuar variant:\n\n- **Filename (packed):**  Agent.Protected.exe  \n - **SHA-256 (packed):**  182d5b53a308f8f3904314463f6718fa2705b7438f751581513188d94a9832cd   \n\n - **Filename (unpacked):**  Agent.Original.exe  \n\n     - **SHA-256 (unpacked):**  41cc68bbe6b21a21040a904f3f573fb6e902ea6dc32766f0e7cce3c7318cf2cb  \n     - **File Size (unpacked):** 267 KB  \n     - **Agent Label:**  AGN-AB-03  \n     - **First Seen:** August 2020 (identified by industry partner)\n\n* **Filename (packed):**  Relieved.exe  \n\n - **SHA-256 (packed):**  60f47db216a58d60ca04826c1075e05dd8e6e647f11c54db44c4cc2dd6ee73b9  \n\n  - **Filename (unpacked):**  Musky.exe  \n\n     - **SHA-256 (unpacked):**  1cd4d611dee777a2defb2429c456cb4338bcdd6f536c8d7301f631c59e0ab6b4     \n     - **File Size (unpacked):** 291 KB  \n     - **Agent Label:** AGN-AB-13  \n     - **First Seen:** 15 February 2021 (uploaded to third-party malware repository)  \n\n\nThe following sections examine the differences between the new variant and the traditional Kazuar variant and the areas of active development in the new variant.\n## Codebase Comparisons \niDefense compared the codebase of the  version of Kazuar [detailed by Palo Alto Networks in May 2017](https://unit42.paloaltonetworks.com/unit42-kazuar-multiplatform-espionage-backdoor-api-access/), which will be referred to as the ‚Äútraditional‚Äù variant,  and two samples of Kazuar from August 2020 and February 2021, the ‚Äúnew‚Äù variant,  and identified the following significant variations.\n#### Installation and Persistence\n\n**Traditional Kazuar Variant**\n\nThe traditional version of Kazuar is written to disk on the compromised machine. To maintain persistence on the machine, BELUGASTURGEON  adds  a Windows shortcut (LNK) file to the Windows startup folder or adds a subkey to one of the following Windows Registry keys:\n\n- HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\n- HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\n- HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\n- HKCU\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell\n- HKCU\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\load\n\nOnce the LNK file or Registry key is configured, the Kazuar binary launches at user logon. Operators can configure the persistence method using the ‚Äúautorun‚Äù command.\n\n**New Kazuar Variant**\n\nRather than write the binary to disk, the new Kazuar variant installs itself directly in the Windows Registry. For the sample with Agent Label AGN-AB-03, BELUGASTURGEON operators created a Registry subkey under `HKLM\\SOFTWARE\\Microsoft\\ActiveSync` with the name \"Jhkr.\" The subkey data contains an obfuscated VBScript that, when deobfuscated, is likely a modified version of the publicly available [VBSMeter](https://github.com/Cn33liz/VBSMeter). (VBSMeter is a Meterpreter stager for C# assemblies embedded in VBScript.)\n\nThe packed Kazuar binary is stored in one of the VBScript parameters. When launched, the VBScript  checks for a compatible version of the .NET framework installed on the compromised machine, Base64-decodes the packed Kazuar binary from the parameter, deserializes it, and invokes the packed binary in memory. The VBScript then writes the TXT log file ~TMP0666.tmp into the user's `%Temp%` directory. The packing algorithm is simple: XOR decode and decompress the encoded payload that is initially stored in an array. \n\nKazuar sample AGN-AB-13 is loaded from the Registry key `HKCU\\SOFTWARE\\Microsoft\\Arrases\\Canoed`. iDefense was unable to obtain the value of the Registry key to confirm the same VBScript loaded the sample into memory but assesses this is likely. \n\nThe same packing algorithm encodes the samples in the Registry key. The packed sample writes any unpacking errors to log file `%Temp%\\~TMP0666.txt`, as shown in Exhibit 1. This logging functionality was not present in the packed AGN-AB-03 sample, only in the VBScript used to load the sample.\n\n![alt text](/rest/files/download/34/05/ab/e72860f9a0223f242f42e8301dded7b91c3ed03c611fe4892218edc845/exhibit1.PNG)  \n_Exhibit 1: Packing Algorithm and Logging Functionality for Packed Kazuar Sample_\n\niDefense has not yet determined how BELUGASTURGEON operators gain initial access to the machine and install the Registry keys containing the new variant of Kazuar.\n\n#### Initialization\n\n\n###### Mutex \n\n**Traditional Kazuar Variant**\n\nWhen launched, the traditional Kazuar version gathers system information and generates a [mutex](https://docs.microsoft.com/en-us/windows/win32/sync/mutex-objects)  that ensures only one instance of Kazuar is running on the compromised machine. The mutex is generated using the following steps:\n\n- Obtain the MD5 hash of a string ‚Äú[username]=>singleton-instance-mutex‚Äù\n- Encrypt this MD5 hash using an XOR algorithm and the volume serial number \n- Generate a GUID from the result  and append it to the string ‚ÄúGlobal\\\\‚Äù\n\nExhibit 2 shows how the traditional Kazuar variant generates the mutex. [According to Palo Alto Networks](https://unit42.paloaltonetworks.com/unit42-kazuar-multiplatform-espionage-backdoor-api-access/), if the variant cannot obtain the system‚Äôs storage serial number, it uses a default version of 0xFB1C1A. \n\n![alt text](/rest/files/download/4c/0b/15/a539a2cb938e5d10409cc8d119cfd79400a5e03f37badb37de5e24b0ec/Exhibit2.PNG)   \n_Exhibit 2: Traditional Kazuar Variant Mutex Generation_\n\n**New Kazuar Variant**\n\nThe new variant of Kazuar generates its mutex by XOR-encoding the System Universal Unique Identifier (UUID) value with the current process ID (PID), which has been XOR-encoded with two hardcoded values, as shown in Exhibit 3. The resulting mutex no longer has the prefix  ‚ÄúGlobal\\\\‚Äù indicating it is a local mutex and multiple Kazuar infections can co-exist for different users on one compromised device.\n\n![alt text](/rest/files/download/6d/d8/60/c2914f57d474b1af992bb235466556128510fb251f416728a646a3eb67/Exhibit3.PNG)   \n_Exhibit 3: New Kazuar Variant Mutex Generation_\n\n###### Files Written\n\n**Traditional Kazuar Variant**\n\nThe traditional Kazuar variant writes folders that store the files it generates during execution. The variant writes the folders in the %LocalAppData% directory under a path beginning with \"Microsoft\" and selected from a hardcoded list (see Exhibit 4). The filenames are encoded on disk by calculating the FNV-1a hash of the filename string and XOR-encoding the  hash with the volume serial number and the hardcoded constant 0xBADA55, as shown in Exhibit 5.\n\n ![alt text](/rest/files/download/76/e7/5e/5aae52246f80c7a335e9b32222b09d8c417f9bf9dc931a256626cff650/Exhibit4.PNG)   \n_Exhibit 4: Directory Location for Configuration Files, Traditional Kazuar_\n\n![alt text](/rest/files/download/67/8d/04/34b9f163f8295a86bd222a9d798bbfc0930a34d1c4823af74db2b2b5ba/Exhibit5.PNG)   \n_Exhibit 5: Filename Encoding for Traditional Kazuar_\n\nThe traditional version of Kazuar creates the following folder structure: \n\n- **base:** Folder containing the following subfolders:\n   - **sys:** Folder containing configuration settings in the following files:\n        - 'serv'  ‚Äì Stores the C2 servers. \n        - 'arun' ‚Äì Stores the autorun method. \n        - 'remo' ‚Äì Stores the remote type. \n        - 'cont' ‚Äì Stores the date of last contact with the C2 server. \n        - 'uuid' ‚Äì Stores the compromised device's System UUID.\n        - 'tran' ‚Äì Stores the transport type.\n       - 'intv' ‚Äì Stores the transport interval.\n\n - **log:** Folder containing logs and debug information.\n - **plg:** Folder containing plugins used to extend Kazuar's functionality.\n - **tsk:** Folder tasks for Kazuar to run.\n - **res:** Folder containing results of processed tasks.\n\n**New Kazuar Variant**\n\nLikewise, the new variant of Kazuar writes files to disk during execution under the `%LocalAppData%` directory selecting paths from a hardcoded list beginning with \"Microsoft\"; however, that list is longer in the new version, as shown in Exhibit 6.\n\n![alt text](/rest/files/download/47/2f/cd/d9b75728ce7e443002d93d1e34bb40ae6b11dc7612f2a43f03f842a8ce/Exhibit6.PNG)   \n_Exhibit 6: Directory Location for Configuration Files, New Kazuar_\n\nExhibit 7 shows the filename-encoding function for the new variant of Kazuar. Rather than generating 8-digit hex strings, as done previously, the new version generates 15-digit alphanumeric strings for filenames and folders. Filenames are also appended with a 3-digit file extension. The System UUID is used as a seed and the process involves a series of XOR encodings and a [custom implementation of the FNV-1a hashing algorithm](https://securelist.com/sunburst-backdoor-kazuar/99981/).\n\n![alt text](/rest/files/download/04/30/8d/ba1b97d2f491900af81e852f9076ae8911770c73517a25003a2d30bf16/Exhibit7.PNG)   \n_Exhibit 7: Filename Encoding for New Kazuar_\n\nThe list below contains the file tree of folders and files the new variant creates along with the encoded and decoded filenames. There is still a base folder and folders to contain the log messages and tasks. Kazuar's configuration data is now stored under the \"config\" folder, similar to the \"sys\" folder in the previous variant. (See the *Configuration Comparison* section below for more details.) The \"keys\" file under the \"logs\" folder stores keystrokes captured when the new keylogger is enabled. \n\n```\n%LOCALAPPDATA%\\MICROSOFT\\OFFICE\\VISIO\\ROT3BMLH2ZGRF9X9 (base)\n|\n|_ i4px5nL5PqksWMb.wgw (logs)\n|\n|_ 2YpvIxMopuiQqHsmc   (task)\n|\n|_ i4px5nL5PqksWMb     (logs)\n|          |_ T9j8NFq6Bwtna1B0ej.rub   (keys)\n|       \n|_Tk7Zu3EKOMqtjTnw     (config)\n        |_ 8c9lq3nL3Vv0bGX.apa   (solve_threads)\n        |_ E8rHL1RRAujyu.cea     (keylog_enabled)\n        |_ MTDLUlXsgIf.yni       (transport)\n        |_ O1a1lIxAqUskBdQUf.ebd (amsi_bypass)\n        |_ OiF6UrrFDBhgcwa.qgg   (inject_mode)\n        |_ QQECzNniEHuKHih2f.oli (delegate_enabled)\n        |_ TqTHomCER6vz.zks      (agent_label)\n        |_ tLkhmS2L3cg5.flo      (remote)\n        \n```\n\n###### Execution Paths\n\n**Traditional Kazuar Variant**\n\nUpon launching, the traditional version of Kazuar can take one of four paths of execution, [as described by Palo Alto Networks](https://unit42.paloaltonetworks.com/unit42-kazuar-multiplatform-espionage-backdoor-api-access/):\n\n- If launched with the **install** command-line argument, uses .NET Framework‚Äôs InstallHelper method to install itself as a service.\n- If started in a non-user interactive environment (i.e., no user interface), installs itself as a service using the .NET ServiceBase Class.\n- If executed with the **single** command-line argument or if running in a Mac or UNIX environment, launches an infinite loop that reads tasks from the **tsk** folder and resolves them until none remain. \n- If no arguments are provided and if running in a Windows environment, saves a DLL and injects it into the explorer.exe process. The DLL executable loads the malware‚Äôs executable and runs it within memory of the explorer.exe process. The Kazuar binary code refers to the DLL as \"the shellcode.\"\n\nAs shown in Exhibit 8, the process injection function of the traditional Kazuar variant proceeds as follows:\n- Makes a FindWindow API call to get a handle to the Shell\\_TrayWnd (Windows taskbar) process\n- Calls GetWindowThreadProcessID to get the thread ID of the Shell\\_TrayWnd window\n- Checks if the DLL loader exists in the base folder:\n    - If it does not exist, it writes it (encoded version hardcoded in Kazuar binary)\n- Once DLL loader exists, calls LoadLibrary to load the DLL\n- Calls GetProcAddress to find the address of the DLL loader-exported Install function \n- Calls SetWindowsHookEx to hook the Shell\\_TrayWnd window; the hook runs the \"Install\" function of the DLL loader when the Shell\\_TrayWnd window gets a message in the queue with WH\\_GETMESSAGE on the thread of the target window\n- Calls PostMessage  to post a message in the thread to trigger the hook instantly and load the DLL immediately\n- Sleeps for 0.1 seconds then calls UnhookWindowsHookEx to remove the hook and exit the program; execution is now passed to the injected DLL loader in explorer.exe\n\n ![alt text](/rest/files/download/66/f3/7a/9414dd315d65a3b16ba48441cfcee331075b5729c959991157bd27161c/Exhibit9.PNG)   \n _Exhibit 8: Process Injection of Traditional Kazuar Into explorer.exe Process_\n\n**New Kazuar Variant**\n\nThe new Kazuar variant has four execution paths that depend on the configured **inject_mode** parameter rather than passed as a command-line argument:\n\n- If **inject_mode** is **single**, Kazuar sets a mode variable to \"solver\" if started in user interactive mode or \"system\" if not. Kazuar checks if the current process is mshta.exe (Microsoft HTML application host). If so, Kazuar enumerates all top-level windows on the screen and then hooks and hides the windows. iDefense assesses this is to determine the results of the code run from mshta.exe. \n\n Kazuar then sets up the REMO (remote), KEYL (keylogger), or SOLV (task solving) threads. Also sets the MIND thread that monitors for processes with names containing:\n  - cmdvrt32.dll (Comodo Antivirus) \n  - sbiedll.dll (Sandboxie)\n  - sxin.dll (360 Total Security)\n  - process monitor\n   - wireshark\n   - fiddler\n\n- If **inject_mode** is **remote**, Kazuar repeats the same process as above but only starts the REMO thread to listen for tasks from other Kazuar instances.\n\n- If started in **non-interactive mode**, Kazuar sets up REMO and INJE (injection) threads and then sleeps.\n\n- If none of the above conditions matches, Kazuar checks if it is already running in explorer.exe. If not, it repeats the check to see if it is running the  process mshta.exe and performs the same subsequent activity. Kazuar then injects into explorer.exe using the same method as the traditional Kazuar, described above.\n\nThe new Kazuar variant has three other **inject_mode** values used to inject into transport processes (i.e., used to communicate with the C2 server): \n\n-  If **inject_mode** is **inject**, Kazuar reads the transport processes from the transport configuration file as targets for injection. If there is no transport process present, Kazuar uses the default browser process; if defined, it uses iexplore.exe. \n\n Kazuar checks for the mutex in the target transport process to see if Kazuar is already running. If not, Kazuar opens the transport process using the OpenProcess API call and checks whether it is running under WOW64 with IsWow64Process. \n\n Kazuar then creates a new memory section with RWX protection using NtCreateSection, maps a view of the previously created section to the local Kazuar process with RW protection, and maps the section to the transport process with RX permissions. Kazuar writes the shellcode to the mapped section in the local process and creates a remote thread in the transport process using CreateRemoteThread, pointing the thread to the mapped view to trigger the shellcode.\n\n- If **inject_mode** is **zombify**, Kazuar injects into the user's default browser; if this fails, it injects into svchost.exe. Kazuar uses the [early bird technique](https://www.ired.team/offensive-security/code-injection-process-injection/early-bird-apc-queue-code-injection) to inject itself into the selected process\n\n-  If **inject_mode** is **combined**, Kazuar first attempts to inject using the **inject** process; if this fails, it attempts the **zombify** process.\n\n\n###### AMSI Bypass \n\n**New Kazuar Variant**\n\nBefore selecting an execution path, the new Kazuar variant calls a function that bypasses the [Antimalware Scan Interface (AMSI)](https://docs.microsoft.com/en-us/windows/win32/amsi/antimalware-scan-interface-portal)‚Äîa way for any Windows application to integrate with the installed antimalware product. The AMSI bypass function is shown in Exhibit 9; it was not available in the traditional Kazuar variant.\n\n![alt text](/rest/files/download/e3/46/cb/9adb5488dfda273e37ca6462009bebae7cef14770849d088cc9afc26e1/amsi.PNG)  \n_Exhibit 9: New Kazuar Variant's AMSI Bypass Function_\n\n[ESET previously reported](https://www.welivesecurity.com/2019/05/29/turla-powershell-usage/) on BELUGASTURGEON using AMSI bypass functionality in its PowerShell loaders, and [iDefense has previously analyzed](#/node/intelligence_report/view/9bf2fc44-570d-40ad-b81a-744141ed443e) PowerShell scripts containing AMSI bypass functionality to load BELUGASTURGEON's [securlsa.chk](#/node/malware_family/view/e55ad229-6484-4be3-bf3e-568c96a05b82) backdoor.\n\nThe Kazuar function patches the beginning of [AmsiScanBuffer](https://docs.microsoft.com/en-us/windows/win32/api/amsi/nf-amsi-amsiscanbuffer) to always return 80070057, which [translates to](https://docs.microsoft.com/en-us/windows/win32/seccrypto/common-hresult-values) E\\_INVALIDARG (one or more arguments not valid). The previous PowerShell scripts always patched this buffer to return 1 (AMSI\\_RESULT\\_NOT\\_DETECTED). The new return value is the same value used by the open-source .NET exploitation library [SharpSploit](https://github.com/cobbr/SharpSploit/blob/1407108e638cde3e181c27cb269c8427723884b0/SharpSploit/Evasion/Amsi.cs) suggesting Kazuar developers adapted this functionality from open-source tooling.\n\n## Command Set Comparison\n\n**Traditional Kazuar Variant**\n\nThe following commands, [documented by Palo Alto Networks](https://unit42.paloaltonetworks.com/unit42-kazuar-multiplatform-espionage-backdoor-api-access/) and verified by iDefense, are available in the traditional Kazuar variant: \n\n- **log:** Logs a specified debug message.  \n- **get:** Uploads files from a specified directory. Palo Alto Networks indicated operators can upload files based on their modified, accessed, and created timestamps.  \n- **put:** Writes a payload to the specified file.  \n- **cmd:**  Executes the specified command, writes the output to a temporary file, and uploads the temporary file to the C2 server.    \n- **sleep:** Sleeps for the specified time.  \n- **upgrade:** Changes the current executable‚Äôs file extension to .old and writes the newly provided executable in its place.  \n- **scrshot:** Takes a screenshot of the visible screen and saves it to the specified filename or a filename using the format: [year]-[month]-[day]-[hour]-[minute]-[second]-[millisecond].jpg. Then uploads the file to the C2 server.  \n- **camshot:** Creates a Window called ‚ÄúWebCapt‚Äù to capture an image from an attached webcam, copies the image to the clipboard, and writes the image to a specified file or a filename using the format: [year]-[month]-[day]-[hour]-[minute]-[second]-[millisecond].jpg. Then uploads the file to the C2 server.  \n- **uuid:** Sets the unique agent identifier by providing a specific GUID.  \n- **interval:** Sets the transport intervals (minimum and maximum time intervals) between C2 communications.  \n- **server:** Sets the C2 servers by providing a list of URLs.  \n- **transport:** Sets the transport processes by providing a list of processes where Kazuar injected its code and executed within.  \n- **autorun:** Sets the autorun type‚ÄîDISABLED, WINLOGON, POLICIES, HKCURUN, RUNONCE, LOADKEY, or STARTUP‚Äîas discussed earlier. Kazuar accept the following strings for this command:  \n    - **remote:** Configures remote API settings by specifying URI prefix and port to listen on. While the port used varied between the analyzed samples, iDefense only observed the HTTP prefix used, which instructs Kazuar to act as an HTTP server. The threat actor can then interact with the compromised system using inbound HTTP requests.  \n    - **info:** Gathers system information referred to as: Agent information, System information, User information, Local groups and members, Installed software, Special folders, Environment variables, Network adapters, Active network connections, Logical drives, Running processes, and Opened windows.  \n- **copy:** Copies the specified file to a specified location. Also allows the C2 infrastructure to supply a flag to overwrite the destination file, if it already exists.  \n- **move:** Moves the specified file to a specified location. Also allows the C2 infrastructure to supply a flag to delete the destination file, if it exists.  \n- **remove:** Deletes a specified file. Allows the C2 infrastructure to supply a flag to securely delete a file by overwriting the file with random data before deleting the file.  \n- **finddir:** Finds a specified directory and lists its files including the created and modified timestamps, the size, and file path for each of the files in the directory.  \n- **kill:** Kills a process by name or by process identifier (PID).  \n- **tasklisk:** Lists running processes. Uses a WMI query of `select * from Win32_Process` for a Windows system but can also run `ps -eo comm,pid,ppid,user,start,tty,args` to obtain running processes from a UNIX system.  \n- **suicide:** Likely uninstalls Kazuar, but it is not implemented in the referenced samples.  \n- **plugin:** Installs plugin by loading a provided Assembly, saving it to a file whose name is the MD5 hash of the Assembly‚Äôs name, and calling the Start method.  \n- **plugout:** Removes a plugin based on the Assembly‚Äôs name.  \n- **pluglist:** Gets a list of plugins and determines whether they are ‚Äúworking‚Äù or ‚Äústopped.‚Äù  \n- **run:** Runs a specified executable with supplied arguments and saves its output to a temporary file. Then loads the temporary file to the C2 server.  \n\nIn this Kazuar variant, the C2 server sends the tasks as XML-formatted data containing an action identifier or integer; the numeric action ID is  then translated into the corresponding command from the above set.\n\n**New Kazuar Variant**\n\nThe new Kazuar variant replaces these numeric action IDs with strings for the command names. The following commands have similar functionality in the new variant as they did in the traditional variant:\n\n- **info**\n- **scrshot**\n- **run**\n- **move**\n- **get**\n- **log**\n- **put**\n- **sleep**\n- **kill**\n- **copy**\n\nDevelopers added the following commands to the new variant:\n\n- **steal:** Steal passwords, history, or proxy lists from the following services: FileZilla, Chromium, Mozilla, Outlook, WinSCP, Git, or from the system.  \n- **config:** Set and update Kazuar configuration values, as described in the *Configuration Comparison* section below.  \n- **delegate:** Forward command to remote Kazuar instance using a named pipe and store result in delegated .zip file, as described in the *Command-and-Control Communication* section below under named pipe communications.\n- **psh:**  Execute PowerShell command.\n- **regwrite:** Create Registry key.\n- **regdelete:** Delete Registry key.\n- **vbs:** Execute VBS script with cscript.exe.\n- **regquery:** Query Registry key.\n- **find:** Enumerate a directory; replaces **finddir** command in traditional Kazuar.\n- **forensic:** Enumerate Registry autorun keys, the Program Compatibility Assistant, and the Windows Explorer User Assist Registry keys to determine which program(s) has run on the compromised device.\n- **http:** Execute an HTTP request and save the response to file http<3digits>.rsp.\n- **jsc:** Execute a JavaScript file with cscript.exe.\n- **del:** Delete a file; replaces **remove** command in traditional Kazuar.\n- **unattend:** Enumerate the compromised device's [unattend.xml](https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/update-windows-settings-and-scripts-create-your-own-answer-file-sxs), sysprep.xml, and web.config files to obtain credentials.\n- **schlist:** Enumerate list of scheduled tasks using the [TaskService](https://docs.microsoft.com/en-us/windows/win32/taskschd/taskservice) object.\n- **wmiquery:** Execute a WMI query.\n- **wmicall:** Execute a WMI method.\n\nDevelopers removed several commands from the traditional Kazuar variant while incorporating the functionality into other commands or configuration settings:\n- The **upgrade** and **suicide** commands are replaced by the Registry editing commands (‚Äòregdelete‚Äô and ‚Äòregwrite‚Äô)  now that  Kazuar is stored in a Registry key. \n- The values previously configured by the **uuid**, **jnterval**, **server**, and **transport** commands are now configured using the **config** command. \n- The list of running processes previously obtained with **tasklist** is now returned by **info** along with much more system information. \n- The **autorun** command is not required to configure persistence mechanisms now the Kazuar binary is stored in the Registry. \n- The **plugin** command is no longer necessary since much of the prior information-stealing functionality is implemented within the newer Kazuar. \n- The **remote** command (i.e., HTTP API functionality) has been replaced with task delegation. \n\nThe only functionality apparently not replicated in the new variant is the **camshot** command to take web cam snapshots.\n\nThe commands **schlist**, **wmiquery**, and **wmicall** were present in Kazuar sample AGN-AB-13 but not AGN-AB-03, suggesting the command set of the new variant is under development.\n\n## Configuration Comparison\n\n**Traditional Kazuar Variant**\n\nThe values configured in the traditional Kazuar variant's configuration are:\n\n- **Agent identifier:** Unique agent identifier (GUID format).  \n- **Executable path:**  Path of Kazuar binary on disk.  \n- **Storage path:** Base directory containing Kazuar configuration files.\n- **Fake visible name:** Kazuar filename.\n- **Description label:**  Empty in samples analyzed.\n- **Machine seed:** Seed value derived from System Directory.\n- **Parallel tasks:** Number of tasks to run in parallel.\n- **Last contact:** Last contact from C2 server.\n- **Autorun type:**  Persistence method (LNK file or Registry keys, as described in *Installation and Persistence* section).\n- **Transport interval:** Interval between C2 communications.\n- **Command servers:** C2 servers.\n- **Transport processes:** Process to injected into for C2 communications.\n\n**New Kazuar Variant**\n\nThe updated configuration reflects the broader range of functionality implemented in the new Kazuar variant. The values configured in the new variant's configuration are:\n\n- **Agent label:** Unique Agent Label of format `AGN-AB-<2 digits>`, iterated as updates are made to Kazuar.\n- **Agent UUID:** Unique agent identifier (GUID format).  \n- **Local seed:** Seed value derived from System UUID.\n- **Last contact:** Last contact from C2 server.\n- **Transport type:**  Protocol used for C2 communications; set to \"HTTP\" in both analyzed samples.\n- **Transport main interval:**  Interval between C2 communications.\n- **Transport failed interval:** Interval between failed C2 connections before attempting a retry.\n- **Transport proxy:**  C2 communication proxy; specifies URL, port, and variable to specify when proxy is enabled. This value was empty for both samples iDefense analyzed.\n- **Max server fails:** Number of failed attempts before quitting.\n- **Main servers:**  Primary C2 servers.\n- **Reserved servers:** Backup C2 servers.\n- **Agent regkey:** Registry key where packed Kazuar binary is stored.\n- **Storage root:** Base directory containing Kazuar configuration files.\n- **Config path:** Path to Kazuar configuration directory.\n- **Logs path:**: Path to Kazuar logs file.\n- **Keylogger path:** Path to Kazuar keylogger output file.\n- **Logs size:**  Current size of logs file.\n- **Inject mode:** Inject mode to define execution path and injection method (described in *Installation and Persistence* section).\n- **Solving threads:** Number of threads to run in parallel to solve tasks.\n- **Solving tries:** Maximum number of attempts to solve a task.\n- **Sending tries:** Maximum number of attempts to send task result to C2 server.\n- **Keylogger enabled:** Whether keylogger functionality is enabled (boolean).\n- **Task delegation enabled:** Whether task delegation functionality is enabled (boolean).\n- **AMSI bypass enabled:** Whether AMSI bypass functionality is enabled (boolean).\n- **Delegate system pipe:**  Pipe used to delegate tasks in system mode; also see  *Command-and-Control Communication* section.\n- **Delegate solver pipe:** Pipe used to delegate tasks in solver mode.\n- **Delegate sender pipe:** Pipe used to delegate tasks in sender mode.\n\nIndicating the new Kazuar version is under development, the following values are present in the new Kazuar variant sample AGN-AB-13 but not AGN-AB-03:\n- **Agent regkey**\n- **Delegate system pipe** \n- **Delegate solver pipe** \n- **Delegate sender pipe**\n\n## Command-and-Control Communication\n\n**Traditional Kazuar Variant**\n\nThe traditional Kazuar variant uses its C2 channel to send tasks to the backdoor, receive the results, and exfiltrate data. The variant can use multiple protocols, such as HTTP, HTTPS, FTP, or FTPS, as determined by the prefixes of the hardcoded C2 URLs. [iDefense identified one sample](#/node/intelligence_alert/view/6cc805d7-cb77-443d-afea-d052916fa602) that uses the \"file://\" prefix to communicate across internal nodes in a compromised network, likely via SMB using another Kazuar sample as a transfer agent to forward tasks and results between the C2 server and the first Kazuar sample.\n\n**New Kazuar Variant**\n\nThe new Kazuar samples do not support FTP communications; instead, C2 communications are performed over HTTP(S). Exhibit 10 shows the function that defines the C2 servers:\n\n![alt text](/rest/files/download/e2/97/51/d4d171d120ec49db0128d5c6119399eeb12bf245227e82708290fcf6c3/c2.PNG)  \n_Exhibit 10: Defining C2 Servers in New Kazuar Variant_\n\nThe first two URLs in Exhibit 10 are the \"Main servers\" referred to in the sample's configuration; they act as the primary C2 servers. The third URL is the \"Reserved server\" that Kazuar uses as a backup, if it cannot reach the primary C2s. The fourth URL is the \"Last Chance URL\" that Kazuar uses if communication with the primary and backup C2 servers is lost. \n\nFor sample AGN-AB-03, shown in Exhibit 10, a dummy value (\"www.google.com\") is provided; in sample AGN-AB-13, no value is configured for the \"Last Chance URL.\" However, Kazuar operators can set this to any value. iDefense assesses the operators may choose to use a legitimate web service, such as Pastebin, which allows them to maintain persistence if their own C2 infrastructure is unavailable. [BELUGASTURGEON has previously used a Pastebin project](#/node/intelligence_alert/view/92154a2c-f077-4f16-92d5-2349984ad03e) for C2 communications with its Carbon backdoor.\n\nThe C2 servers identified in the two analyzed samples are:\n\n**AGN-AB-13:**\n - Main servers:\n    - `https://www.rezak[.]com/wp-includes/pomo/pomo.php`\n    - `https://www.hetwittezwaantje[.]nl/wp-includes/rest-api/class-wp-rest-client.php`\n - Reserved server:\n    - `https://aetapet[.]com/wp-includes/IXR/class-IXR-response.php`\n\n**AGN-AB-03:**\n - Main servers:\n    - `https://www.actvoi[.]org/wordpress/wp-includes/fonts/icons/`\n    - `https://www.datalinkelv[.]com/wp-includes/js/pomo/`\n    - `https://www.actvoi.org/wordpress/wp-includes/fonts/`\n - Reserved server:\n    - `https://www.downmags[.]org/wp-includes/pomo/wp/`\n\nIn the new version of Kazuar, HTTP requests are authenticated using an .AspNet.Cookies header rather than an AuthToken cookie. Tasks are forwarded to remote Kazuar instances using the task delegation functionality instead of the remote HTTP API. The task delegation functionality uses named pipes to communicate between Kazuar samples. Exhibit 11 shows the function to generate the pipe name used for communications.\n\n![alt text](/rest/files/download/15/51/62/fe277b22a617898a35647dfe6e6b2d4943dfbeb7e4380c01058995d960/pipe.PNG)   \n_Exhibit 11: New Kazuar Variant Task Delegation Named Pipe_\n\nThe pipe names are GUID values derived from the string `pipename-[system/solver/sender]-AgentLabel` where the values for system, solver, or sender are set based on the **inject_mode**, as described in the *Installation and Persistence* section. \n- **sender** corresponds to the Kazuar instance sending the task.\n- **solver** is set for the Kazuar instance receiving tasks. \n- **system** corresponds to a Kazuar instance started in non-interactive mode. \n\nExhibit 12 shows the function used to send tasks to and receive task results from remote Kazuar instances.\n\n![alt text](/rest/files/download/ac/ec/11/ad97d520210ac43da1c7edd6d91fc4cb59f3e8dd459016a0d335bd0686/pipe2.PNG)  \n_Exhibit 12: New Kazuar Variant Task Delegation Functionality_\n\nTo generate a name for the named pipe, Kazuar uses the `pipename-mode AgentLabel`  format described above replacing \"mode\" with system, solver, or sender as described above and connecting the values for CreateNamedPipe with ConnectNamedPipe. Messages sent over the pipe are encrypted and must begin with PING, PONG, TASK, RESULT, or ERROR. The PING prefix acts as a handshake and expects a PONG response, the TASK prefix is used to send tasks, and the RESULT and ERROR prefixes respond with the results of tasks or any errors.\n\n## Outlook\nAlthough BELUGASTURGEON has made high-level updates to the Kazuar backdoor over the years, the samples from August 2019 and February 2020 represent the first significant update to the malware's codebase since its discovery three years ago. The developers removed the requirement for a plugin framework by incorporating functionality that allows for a wide range of espionage activity such as keylogging, credential stealing, and forensics. Storing the sample as a Registry key rather than on disk decreases the risk of detection in comparison to the older variant.\n\nAdding task delegation functionality makes Kazuar a peer of the group's more sophisticated Carbon and Uroborus backdoors. The group's relatively clumsy prior method of chaining together proxy commands from a C2 server to a Kazuar instance on an internal node without network connection meant task files were written to disk on the internal proxy node. The new functionality forwards tasks directly over named pipes, as done in the group's other backdoors.\n\nDifferences between the August 2019 and February 2020 samples‚Äîwith the addition of commands and updated configuration specifications‚Äîclearly indicate Kazuar is under active development and will continue to be used by BELUGASTURGEON in espionage campaigns.",
    "mitigation": "Check logs for the following indicators of compromise:\n- `182d5b53a308f8f3904314463f6718fa2705b7438f751581513188d94a9832cd` (Kazuar packed)\n- `60f47db216a58d60ca04826c1075e05dd8e6e647f11c54db44c4cc2dd6ee73b9` (Kazuar packed)\n-  `41cc68bbe6b21a21040a904f3f573fb6e902ea6dc32766f0e7cce3c7318cf2cb` (Kazuar unpacked)\n- `1cd4d611dee777a2defb2429c456cb4338bcdd6f536c8d7301f631c59e0ab6b4` (Kazuar unpacked)\n- https://www[.]rezak[.]com/wp-includes/pomo/pomo[.]php\n- https://www[.]hetwittezwaantje[.]nl/wp-includes/rest-api/class-wp-rest-client[.]php\n- https://aetapet[.]com/wp-includes/IXR/class-IXR-response[.]php\n- https://www.actvoi[.]org/wordpress/wp-includes/fonts/icons/\n- https://www.datalinkelv[.]com/wp-includes/js/pomo/9https://www.actvoi.org/wordpress/wp-includes/fonts/\n- https://www.downmags[.]org/wp-includes/pomo/wp/\n\nKazuar developers configure the C2 URIs for each sample; instead monitor for the following more generic indicators:\n-\tRepeated connections to WordPress sites not commonly visited by users in the network, particularly when the URI contains `/wp-includes/pomo/`. \n-\tNamed pipes with names matching the format `///pipe//<GUID>` particularly when used by explorer.exe.\n\nThe following YARA rule matches the analyzed Kazuar samples and may be used for detection or hunting purposes only:\n\n```\nrule new_kazuar_unpacked {\n    meta:\n        desc = \"Detects functions used by new Kazuar Variant.\"\n        author = \"iDefense\"\n        hash1 = \"41cc68bbe6b21a21040a904f3f573fb6e902ea6dc32766f0e7cce3c7318cf2cb\"\n        hash2 = \"1cd4d611dee777a2defb2429c456cb4338bcdd6f536c8d7301f631c59e0ab6b4\"\n\n    strings:\n\n    $a1 = \"Agent.Original.exe\" wide ascii\n    $a2 = \"Musky.exe\" wide ascii\n    $b_amsi = { 28 [4] 3A 01 00 00 00 2A 72 [4] 28 [4] 28 [4] 0A 06 7E [4] 28 [4] 39 [4] 2A 06 72 [4] 28 [4] 28 [4] 0B 07 7E [4] 28 [4] 39 [4] 2A 28 [4] 39 [4] 1C 8D [4] 25 D0 [4] 28 [4] 0C 38 [4] 1E 8D [4] 25 D0 [4] 28 [4] 0C 16 0D 08 8E 69 6A 28 }\n    $b_encoding1 = {}\n    $b_encoding2 = {73[4]0A160B38[4]02076F[4]28[4]0C0608D16f[4]260717580B07026F[4]3f[4]066F[4]2A}\n    $b_pipename = {03 28 [4] 39 07 00 00 00 28 [4] 10 01 02 6F [4] 0A 72 [4] 28 [4] 06 72 [4] 28 [4] 03 28 [4] 0B 28 [4] 07 6F [4] 0C 28 [4] 08 6F [4] 0D 1F 2A 13 04 1F 11 13 05 1F 15 13 06 16 13 08 38 [4] 11 04 11 05 5A 20 [4] 20 [4] 61 5F D2 13 04 11 04 11 06 58 20 [4] 20 [4] 61 5F D2 13 04 09 11 08 8F [4] 25 47 11 04 61 D2 52 11 08 17 58 13 08 11 08 09 8E 69 3F [4] 12 07 09 28 [4] 12 07 72 [4] 28 [4] 28 [4] 6F [4] 2A}\n\n    condition: uint16(0) == 0x5a4d and (1 of ($a*) and 3 of ($b_*)) or (4 of ($b_*)) and filesize < 350KB\n}\n```",
    "severity": 4,
    "abstract": "In February 2021, iDefense analyzed two samples of BELUGASTURGEON's Kazuar backdoor and identified significant codebase differences when compared to older Kazuar samples. Although BELUGASTURGEON has been making high-level changes to Kazuar and using the backdoor in espionage campaigns since at least 2017, the August 2020 and February 2021 samples contain the first significant updates to the malware's codebase since the malware family was identified.\n\nThe updated Kazuar variant introduces commands that support a range of espionage activity, including keylogging, credential stealing, and forensics, without requiring a plugin framework as in prior  Kazuar samples. Using task forwarding, BELUGASTURGEON operators can now communicate with Kazuar instances without using Internet connectivity; this enhanced peer-to-peer (P2P) functionality advances Kazuar to the level of some of BELUGASTURGEON's more sophisticated backdoors.\n\nWhen comparing the two August 2020 and February 2021 Kazuar samples, iDefense identified command set and configuration updates that indicate Kazuar is under active development for future use in BELUGASTURGEON espionage campaigns."
}



expected_output_ia_ir = {
    'DBot': [{'Indicator': 'https://intelgraph.idefense.com/#/node/intelligence_alert/view/a487dfdc-08b4-4909-82ea-2d934c27d901', 'Type': 'ACTI Intelligence Alert', 'Vendor': 'ACTI Threat Intelligence Report', 'Score': 2, 'Reliability': 'B - Usually reliable'}],
    'IA_IR': [{'value': 'https://intelgraph.idefense.com/#/node/intelligence_alert/view/a487dfdc-08b4-4909-82ea-2d934c27d901', 'created_on': '2021-03-05T21:47:36.000Z', 'display_text': 'Kazuar Revamped: BELUGASTURGEON Significantly Updates Its Espionage Backdoor', 'dynamic_properties': {}, 'index_timestamp': '2022-02-09T14:18:19.333Z', 'key': '5ca1bcc4-843f-4a2b-9673-ec294e05a509', 'last_modified': '2021-07-14T09:17:37.000Z', 'last_published': '2021-03-05T21:47:36.000Z', 'links': [{'created_on': '2017-05-04T17:45:51.000Z', 'display_text': 'Kazuar', 'key': 'Kazuar', 'relationship': 'mentions', 'relationship_created_on': '2021-03-05T21:47:36.000Z', 'relationship_last_published': '2021-03-05T21:47:36.000Z', 'type': 'malware_family', 'uuid': 'ef5a7376-0a81-4478-b15d-68369e7196bd', 'href': '/rest/fundamental/v0/ef5a7376-0a81-4478-b15d-68369e7196bd'}, {'created_on': '2020-08-07T20:08:29.000Z', 'display_text': 'Russia-Linked BELUGASTURGEON Uses ComRATv4 to Target Government and Resources Organizations in Europe and Central Asia', 'key': '033355e6-e57e-4a02-bf3a-c9805d06a259', 'relationship': 'mentions', 'relationship_created_on': '2021-03-05T21:47:36.000Z', 'relationship_last_published': '2021-03-05T21:47:36.000Z', 'type': 'intelligence_report', 'uuid': '9bf2fc44-570d-40ad-b81a-744141ed443e', 'href': '/rest/document/v0/9bf2fc44-570d-40ad-b81a-744141ed443e'}], 'threat_types': '\n- Cyber Espionage', 'title': 'Kazuar Revamped: BELUGASTURGEON Significantly Updates Its Espionage Backdoor', 'type': 'intelligence_alert', 'uuid': 'a487dfdc-08b4-4909-82ea-2d934c27d901', 'analysis': '## Key Findings and Judgements\n\n- From analyzing two Kazuar samples, iDefense determined that BELUGASTURGEON has significantly updated the backdoor\'s codebase when compared to traditional Kazuar samples.\n\n- The updated variant\'s core functionality supports new commands for espionage campaigns, including keylogging, credential theft, and system enumeration, without requiring additional plugins.\n\n- BELUGASTURGEON operators can now communicate between Kazuar instances  using task forwarding over named pipes without needing Internet connectivity; these enhancements offer functionality similar to that in Carbon and Uroborus.\n\n- Multiple Kazuar infections can now exist on one compromised system but target different users due to updates in Kazuar\'s mutex generation function.\n\n- HTTP(S) command-and-control (C2) communications now use primary, backup, and last-chance C2 servers to maintain persistence on a compromised device even if some of BELUGASTURGEON\'s infrastructure is unavailable.\n\n- Because Kazuar can now load from a Windows Registry key into memory, an infection file does not exist on the device and the chance of detection is reduced.\n\n- A comparison of the samples from August 2020 and February 2021 reveal differences in the Kazuar command set and configuration settings. Based on the discovery times of these samples and the changes between them, iDefense assesses the new Kazuar variant is under active development and BELUGASTURGEON will continue to use it for espionage campaigns.\n\n## Overview\n[Kazuar](#/node/malware_family/view/ef5a7376-0a81-4478-b15d-68369e7196bd) is a .NET backdoor the [BELUGASTURGEON (a.k.a. Turla, Snake, Waterbug, Venomous Bear)](#/node/threat_group/view/fb53e479-54e1-4827-abb4-ae1ae1db53e2) threat group has been using in espionage campaigns since at least 2017. [The Kazuar variant that Palo Alto Networks detailed in May 2017](https://unit42.paloaltonetworks.com/unit42-kazuar-multiplatform-espionage-backdoor-api-access/) has commands typical of many backdoors, such as reading, writing, copying, moving, and deleting files on the compromised system; executing commands from the command line; taking screenshots; and capturing webcam images. The version is extensible using a plugin framework to achieve additional functionality. The remote API allows BELUGASTURGEON operators to direct the backdoor to act as a web server and listen for inbound HTTP requests. iDefense identified this version of Kazuar used in various BELUGASTURGEON activity, including a [2020 campaign against the Cypriot government](#/node/intelligence_alert/view/6cc805d7-cb77-443d-afea-d052916fa602).\n\nSince its discovery in 2017, developers have been enhancing Kazuar. In 2019, security researcher [Juan Andr√©s Guerrero-Saade identified](https://www.epicturla.com/blog/sysinturla) Kazuar samples branded to look like the Microsoft SysInternals tool [DebugView](https://docs.microsoft.com/en-us/sysinternals/downloads/debugview). In addition to cosmetic changes, the Kazuar developers moved to a custom packer instead of  obfuscating Kazuar\'s code with [ConfuserEx](https://yck1509.github.io/ConfuserEx/). \n\nIn the campaign against the Cypriot government, BELUGASTURGEON operators implemented a novel C2 configuration where the Kazuar backdoor receives commands from URLs pointing to internal nodes in the Cypriot government network. [Another Kazuar sample acted as a transfer agent](#/node/malicious_event/view/2c3490cd-c4bb-4aef-b75f-641b76dcff01), proxying commands between the sample with the novel C2 configuration and the C2 server. Despite these developments, the underlying Kazuar codebase, including the backdoor\'s command set and configuration, remained mostly unchanged.\n## New Kazuar Functionality \nIn February 2021, Defense analyzed two Kazuar samples and noted significant changes in the codebase,  command set, and configuration functionality to warrant classifying the samples as a new variant of the Kazuar backdoor. One sample, shared by an industry partner, was first seen in August 2020; the second sample was uploaded to a third-party malware repository in February 2021. \n\nThe new variant persists on the system by storing the packed Kazuar binary in the Windows Registry and loading itself into memory at runtime without writing an infection file to disk. The variant offers new credential stealing and keylogging functionality, executes payloads in a range of file formats, and enumerates a wide range of system information about the compromised device. \n\nThe backdoor has a built-in command that forwards tasks to other Kazuar instances in a compromised network via named pipes. The ability to communicate among Kazuar instances as well as the overall extended functionality implemented without plugins allows Kazuar to achieve the functionality of some of BELUGASTURGEON\'s more sophisticated backdoors, such as [Carbon](#/node/malware_family/view/5c48cd58-180b-4d02-b344-5756f3a6fb33) or [Uroborus](#/node/malware_family/view/7c5fc18d-bab8-4928-a716-9b0c5a92a022).\n\nThe new Kazuar variant appears intended for Windows systems as developers have removed the UNIX-related code found in the earlier variant. Other functionality removed includes the remote HTTP API that is replaced with the task forwarding functionality allowing operators to configure Kazuar instances to listen for tasks from other "remote" Kazuar instances. \n\nIndications the Kazuar variant is under active development include an Agent Label value, discussed in more detail in the *Configuration Comparison* section, that is likely a version number incremented when there is a new iteration of the backdoor. iDefense also identified changes in the commands and configuration between the sample from August 2020 and February 2021. \n\niDefense analyzed the following samples of the new Kazuar variant:\n\n- **Filename (packed):**  Agent.Protected.exe  \n - **SHA-256 (packed):**  182d5b53a308f8f3904314463f6718fa2705b7438f751581513188d94a9832cd   \n\n - **Filename (unpacked):**  Agent.Original.exe  \n\n     - **SHA-256 (unpacked):**  41cc68bbe6b21a21040a904f3f573fb6e902ea6dc32766f0e7cce3c7318cf2cb  \n     - **File Size (unpacked):** 267 KB  \n     - **Agent Label:**  AGN-AB-03  \n     - **First Seen:** August 2020 (identified by industry partner)\n\n* **Filename (packed):**  Relieved.exe  \n\n - **SHA-256 (packed):**  60f47db216a58d60ca04826c1075e05dd8e6e647f11c54db44c4cc2dd6ee73b9  \n\n  - **Filename (unpacked):**  Musky.exe  \n\n     - **SHA-256 (unpacked):**  1cd4d611dee777a2defb2429c456cb4338bcdd6f536c8d7301f631c59e0ab6b4     \n     - **File Size (unpacked):** 291 KB  \n     - **Agent Label:** AGN-AB-13  \n     - **First Seen:** 15 February 2021 (uploaded to third-party malware repository)  \n\n\nThe following sections examine the differences between the new variant and the traditional Kazuar variant and the areas of active development in the new variant.\n## Codebase Comparisons \niDefense compared the codebase of the  version of Kazuar [detailed by Palo Alto Networks in May 2017](https://unit42.paloaltonetworks.com/unit42-kazuar-multiplatform-espionage-backdoor-api-access/), which will be referred to as the ‚Äútraditional‚Äù variant,  and two samples of Kazuar from August 2020 and February 2021, the ‚Äúnew‚Äù variant,  and identified the following significant variations.\n#### Installation and Persistence\n\n**Traditional Kazuar Variant**\n\nThe traditional version of Kazuar is written to disk on the compromised machine. To maintain persistence on the machine, BELUGASTURGEON  adds  a Windows shortcut (LNK) file to the Windows startup folder or adds a subkey to one of the following Windows Registry keys:\n\n- HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\n- HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\n- HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\n- HKCU\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell\n- HKCU\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\load\n\nOnce the LNK file or Registry key is configured, the Kazuar binary launches at user logon. Operators can configure the persistence method using the ‚Äúautorun‚Äù command.\n\n**New Kazuar Variant**\n\nRather than write the binary to disk, the new Kazuar variant installs itself directly in the Windows Registry. For the sample with Agent Label AGN-AB-03, BELUGASTURGEON operators created a Registry subkey under `HKLM\\SOFTWARE\\Microsoft\\ActiveSync` with the name "Jhkr." The subkey data contains an obfuscated VBScript that, when deobfuscated, is likely a modified version of the publicly available [VBSMeter](https://github.com/Cn33liz/VBSMeter). (VBSMeter is a Meterpreter stager for C# assemblies embedded in VBScript.)\n\nThe packed Kazuar binary is stored in one of the VBScript parameters. When launched, the VBScript  checks for a compatible version of the .NET framework installed on the compromised machine, Base64-decodes the packed Kazuar binary from the parameter, deserializes it, and invokes the packed binary in memory. The VBScript then writes the TXT log file ~TMP0666.tmp into the user\'s `%Temp%` directory. The packing algorithm is simple: XOR decode and decompress the encoded payload that is initially stored in an array. \n\nKazuar sample AGN-AB-13 is loaded from the Registry key `HKCU\\SOFTWARE\\Microsoft\\Arrases\\Canoed`. iDefense was unable to obtain the value of the Registry key to confirm the same VBScript loaded the sample into memory but assesses this is likely. \n\nThe same packing algorithm encodes the samples in the Registry key. The packed sample writes any unpacking errors to log file `%Temp%\\~TMP0666.txt`, as shown in Exhibit 1. This logging functionality was not present in the packed AGN-AB-03 sample, only in the VBScript used to load the sample.\n\n![alt text](/rest/files/download/34/05/ab/e72860f9a0223f242f42e8301dded7b91c3ed03c611fe4892218edc845/exhibit1.PNG)  \n_Exhibit 1: Packing Algorithm and Logging Functionality for Packed Kazuar Sample_\n\niDefense has not yet determined how BELUGASTURGEON operators gain initial access to the machine and install the Registry keys containing the new variant of Kazuar.\n\n#### Initialization\n\n\n###### Mutex \n\n**Traditional Kazuar Variant**\n\nWhen launched, the traditional Kazuar version gathers system information and generates a [mutex](https://docs.microsoft.com/en-us/windows/win32/sync/mutex-objects)  that ensures only one instance of Kazuar is running on the compromised machine. The mutex is generated using the following steps:\n\n- Obtain the MD5 hash of a string ‚Äú[username]=>singleton-instance-mutex‚Äù\n- Encrypt this MD5 hash using an XOR algorithm and the volume serial number \n- Generate a GUID from the result  and append it to the string ‚ÄúGlobal\\\\‚Äù\n\nExhibit 2 shows how the traditional Kazuar variant generates the mutex. [According to Palo Alto Networks](https://unit42.paloaltonetworks.com/unit42-kazuar-multiplatform-espionage-backdoor-api-access/), if the variant cannot obtain the system‚Äôs storage serial number, it uses a default version of 0xFB1C1A. \n\n![alt text](/rest/files/download/4c/0b/15/a539a2cb938e5d10409cc8d119cfd79400a5e03f37badb37de5e24b0ec/Exhibit2.PNG)   \n_Exhibit 2: Traditional Kazuar Variant Mutex Generation_\n\n**New Kazuar Variant**\n\nThe new variant of Kazuar generates its mutex by XOR-encoding the System Universal Unique Identifier (UUID) value with the current process ID (PID), which has been XOR-encoded with two hardcoded values, as shown in Exhibit 3. The resulting mutex no longer has the prefix  ‚ÄúGlobal\\\\‚Äù indicating it is a local mutex and multiple Kazuar infections can co-exist for different users on one compromised device.\n\n![alt text](/rest/files/download/6d/d8/60/c2914f57d474b1af992bb235466556128510fb251f416728a646a3eb67/Exhibit3.PNG)   \n_Exhibit 3: New Kazuar Variant Mutex Generation_\n\n###### Files Written\n\n**Traditional Kazuar Variant**\n\nThe traditional Kazuar variant writes folders that store the files it generates during execution. The variant writes the folders in the %LocalAppData% directory under a path beginning with "Microsoft" and selected from a hardcoded list (see Exhibit 4). The filenames are encoded on disk by calculating the FNV-1a hash of the filename string and XOR-encoding the  hash with the volume serial number and the hardcoded constant 0xBADA55, as shown in Exhibit 5.\n\n ![alt text](/rest/files/download/76/e7/5e/5aae52246f80c7a335e9b32222b09d8c417f9bf9dc931a256626cff650/Exhibit4.PNG)   \n_Exhibit 4: Directory Location for Configuration Files, Traditional Kazuar_\n\n![alt text](/rest/files/download/67/8d/04/34b9f163f8295a86bd222a9d798bbfc0930a34d1c4823af74db2b2b5ba/Exhibit5.PNG)   \n_Exhibit 5: Filename Encoding for Traditional Kazuar_\n\nThe traditional version of Kazuar creates the following folder structure: \n\n- **base:** Folder containing the following subfolders:\n   - **sys:** Folder containing configuration settings in the following files:\n        - \'serv\'  ‚Äì Stores the C2 servers. \n        - \'arun\' ‚Äì Stores the autorun method. \n        - \'remo\' ‚Äì Stores the remote type. \n        - \'cont\' ‚Äì Stores the date of last contact with the C2 server. \n        - \'uuid\' ‚Äì Stores the compromised device\'s System UUID.\n        - \'tran\' ‚Äì Stores the transport type.\n       - \'intv\' ‚Äì Stores the transport interval.\n\n - **log:** Folder containing logs and debug information.\n - **plg:** Folder containing plugins used to extend Kazuar\'s functionality.\n - **tsk:** Folder tasks for Kazuar to run.\n - **res:** Folder containing results of processed tasks.\n\n**New Kazuar Variant**\n\nLikewise, the new variant of Kazuar writes files to disk during execution under the `%LocalAppData%` directory selecting paths from a hardcoded list beginning with "Microsoft"; however, that list is longer in the new version, as shown in Exhibit 6.\n\n![alt text](/rest/files/download/47/2f/cd/d9b75728ce7e443002d93d1e34bb40ae6b11dc7612f2a43f03f842a8ce/Exhibit6.PNG)   \n_Exhibit 6: Directory Location for Configuration Files, New Kazuar_\n\nExhibit 7 shows the filename-encoding function for the new variant of Kazuar. Rather than generating 8-digit hex strings, as done previously, the new version generates 15-digit alphanumeric strings for filenames and folders. Filenames are also appended with a 3-digit file extension. The System UUID is used as a seed and the process involves a series of XOR encodings and a [custom implementation of the FNV-1a hashing algorithm](https://securelist.com/sunburst-backdoor-kazuar/99981/).\n\n![alt text](/rest/files/download/04/30/8d/ba1b97d2f491900af81e852f9076ae8911770c73517a25003a2d30bf16/Exhibit7.PNG)   \n_Exhibit 7: Filename Encoding for New Kazuar_\n\nThe list below contains the file tree of folders and files the new variant creates along with the encoded and decoded filenames. There is still a base folder and folders to contain the log messages and tasks. Kazuar\'s configuration data is now stored under the "config" folder, similar to the "sys" folder in the previous variant. (See the *Configuration Comparison* section below for more details.) The "keys" file under the "logs" folder stores keystrokes captured when the new keylogger is enabled. \n\n```\n%LOCALAPPDATA%\\MICROSOFT\\OFFICE\\VISIO\\ROT3BMLH2ZGRF9X9 (base)\n|\n|_ i4px5nL5PqksWMb.wgw (logs)\n|\n|_ 2YpvIxMopuiQqHsmc   (task)\n|\n|_ i4px5nL5PqksWMb     (logs)\n|          |_ T9j8NFq6Bwtna1B0ej.rub   (keys)\n|       \n|_Tk7Zu3EKOMqtjTnw     (config)\n        |_ 8c9lq3nL3Vv0bGX.apa   (solve_threads)\n        |_ E8rHL1RRAujyu.cea     (keylog_enabled)\n        |_ MTDLUlXsgIf.yni       (transport)\n        |_ O1a1lIxAqUskBdQUf.ebd (amsi_bypass)\n        |_ OiF6UrrFDBhgcwa.qgg   (inject_mode)\n        |_ QQECzNniEHuKHih2f.oli (delegate_enabled)\n        |_ TqTHomCER6vz.zks      (agent_label)\n        |_ tLkhmS2L3cg5.flo      (remote)\n        \n```\n\n###### Execution Paths\n\n**Traditional Kazuar Variant**\n\nUpon launching, the traditional version of Kazuar can take one of four paths of execution, [as described by Palo Alto Networks](https://unit42.paloaltonetworks.com/unit42-kazuar-multiplatform-espionage-backdoor-api-access/):\n\n- If launched with the **install** command-line argument, uses .NET Framework‚Äôs InstallHelper method to install itself as a service.\n- If started in a non-user interactive environment (i.e., no user interface), installs itself as a service using the .NET ServiceBase Class.\n- If executed with the **single** command-line argument or if running in a Mac or UNIX environment, launches an infinite loop that reads tasks from the **tsk** folder and resolves them until none remain. \n- If no arguments are provided and if running in a Windows environment, saves a DLL and injects it into the explorer.exe process. The DLL executable loads the malware‚Äôs executable and runs it within memory of the explorer.exe process. The Kazuar binary code refers to the DLL as "the shellcode."\n\nAs shown in Exhibit 8, the process injection function of the traditional Kazuar variant proceeds as follows:\n- Makes a FindWindow API call to get a handle to the Shell\\_TrayWnd (Windows taskbar) process\n- Calls GetWindowThreadProcessID to get the thread ID of the Shell\\_TrayWnd window\n- Checks if the DLL loader exists in the base folder:\n    - If it does not exist, it writes it (encoded version hardcoded in Kazuar binary)\n- Once DLL loader exists, calls LoadLibrary to load the DLL\n- Calls GetProcAddress to find the address of the DLL loader-exported Install function \n- Calls SetWindowsHookEx to hook the Shell\\_TrayWnd window; the hook runs the "Install" function of the DLL loader when the Shell\\_TrayWnd window gets a message in the queue with WH\\_GETMESSAGE on the thread of the target window\n- Calls PostMessage  to post a message in the thread to trigger the hook instantly and load the DLL immediately\n- Sleeps for 0.1 seconds then calls UnhookWindowsHookEx to remove the hook and exit the program; execution is now passed to the injected DLL loader in explorer.exe\n\n ![alt text](/rest/files/download/66/f3/7a/9414dd315d65a3b16ba48441cfcee331075b5729c959991157bd27161c/Exhibit9.PNG)   \n _Exhibit 8: Process Injection of Traditional Kazuar Into explorer.exe Process_\n\n**New Kazuar Variant**\n\nThe new Kazuar variant has four execution paths that depend on the configured **inject_mode** parameter rather than passed as a command-line argument:\n\n- If **inject_mode** is **single**, Kazuar sets a mode variable to "solver" if started in user interactive mode or "system" if not. Kazuar checks if the current process is mshta.exe (Microsoft HTML application host). If so, Kazuar enumerates all top-level windows on the screen and then hooks and hides the windows. iDefense assesses this is to determine the results of the code run from mshta.exe. \n\n Kazuar then sets up the REMO (remote), KEYL (keylogger), or SOLV (task solving) threads. Also sets the MIND thread that monitors for processes with names containing:\n  - cmdvrt32.dll (Comodo Antivirus) \n  - sbiedll.dll (Sandboxie)\n  - sxin.dll (360 Total Security)\n  - process monitor\n   - wireshark\n   - fiddler\n\n- If **inject_mode** is **remote**, Kazuar repeats the same process as above but only starts the REMO thread to listen for tasks from other Kazuar instances.\n\n- If started in **non-interactive mode**, Kazuar sets up REMO and INJE (injection) threads and then sleeps.\n\n- If none of the above conditions matches, Kazuar checks if it is already running in explorer.exe. If not, it repeats the check to see if it is running the  process mshta.exe and performs the same subsequent activity. Kazuar then injects into explorer.exe using the same method as the traditional Kazuar, described above.\n\nThe new Kazuar variant has three other **inject_mode** values used to inject into transport processes (i.e., used to communicate with the C2 server): \n\n-  If **inject_mode** is **inject**, Kazuar reads the transport processes from the transport configuration file as targets for injection. If there is no transport process present, Kazuar uses the default browser process; if defined, it uses iexplore.exe. \n\n Kazuar checks for the mutex in the target transport process to see if Kazuar is already running. If not, Kazuar opens the transport process using the OpenProcess API call and checks whether it is running under WOW64 with IsWow64Process. \n\n Kazuar then creates a new memory section with RWX protection using NtCreateSection, maps a view of the previously created section to the local Kazuar process with RW protection, and maps the section to the transport process with RX permissions. Kazuar writes the shellcode to the mapped section in the local process and creates a remote thread in the transport process using CreateRemoteThread, pointing the thread to the mapped view to trigger the shellcode.\n\n- If **inject_mode** is **zombify**, Kazuar injects into the user\'s default browser; if this fails, it injects into svchost.exe. Kazuar uses the [early bird technique](https://www.ired.team/offensive-security/code-injection-process-injection/early-bird-apc-queue-code-injection) to inject itself into the selected process\n\n-  If **inject_mode** is **combined**, Kazuar first attempts to inject using the **inject** process; if this fails, it attempts the **zombify** process.\n\n\n###### AMSI Bypass \n\n**New Kazuar Variant**\n\nBefore selecting an execution path, the new Kazuar variant calls a function that bypasses the [Antimalware Scan Interface (AMSI)](https://docs.microsoft.com/en-us/windows/win32/amsi/antimalware-scan-interface-portal)‚Äîa way for any Windows application to integrate with the installed antimalware product. The AMSI bypass function is shown in Exhibit 9; it was not available in the traditional Kazuar variant.\n\n![alt text](/rest/files/download/e3/46/cb/9adb5488dfda273e37ca6462009bebae7cef14770849d088cc9afc26e1/amsi.PNG)  \n_Exhibit 9: New Kazuar Variant\'s AMSI Bypass Function_\n\n[ESET previously reported](https://www.welivesecurity.com/2019/05/29/turla-powershell-usage/) on BELUGASTURGEON using AMSI bypass functionality in its PowerShell loaders, and [iDefense has previously analyzed](#/node/intelligence_report/view/9bf2fc44-570d-40ad-b81a-744141ed443e) PowerShell scripts containing AMSI bypass functionality to load BELUGASTURGEON\'s [securlsa.chk](#/node/malware_family/view/e55ad229-6484-4be3-bf3e-568c96a05b82) backdoor.\n\nThe Kazuar function patches the beginning of [AmsiScanBuffer](https://docs.microsoft.com/en-us/windows/win32/api/amsi/nf-amsi-amsiscanbuffer) to always return 80070057, which [translates to](https://docs.microsoft.com/en-us/windows/win32/seccrypto/common-hresult-values) E\\_INVALIDARG (one or more arguments not valid). The previous PowerShell scripts always patched this buffer to return 1 (AMSI\\_RESULT\\_NOT\\_DETECTED). The new return value is the same value used by the open-source .NET exploitation library [SharpSploit](https://github.com/cobbr/SharpSploit/blob/1407108e638cde3e181c27cb269c8427723884b0/SharpSploit/Evasion/Amsi.cs) suggesting Kazuar developers adapted this functionality from open-source tooling.\n\n## Command Set Comparison\n\n**Traditional Kazuar Variant**\n\nThe following commands, [documented by Palo Alto Networks](https://unit42.paloaltonetworks.com/unit42-kazuar-multiplatform-espionage-backdoor-api-access/) and verified by iDefense, are available in the traditional Kazuar variant: \n\n- **log:** Logs a specified debug message.  \n- **get:** Uploads files from a specified directory. Palo Alto Networks indicated operators can upload files based on their modified, accessed, and created timestamps.  \n- **put:** Writes a payload to the specified file.  \n- **cmd:**  Executes the specified command, writes the output to a temporary file, and uploads the temporary file to the C2 server.    \n- **sleep:** Sleeps for the specified time.  \n- **upgrade:** Changes the current executable‚Äôs file extension to .old and writes the newly provided executable in its place.  \n- **scrshot:** Takes a screenshot of the visible screen and saves it to the specified filename or a filename using the format: [year]-[month]-[day]-[hour]-[minute]-[second]-[millisecond].jpg. Then uploads the file to the C2 server.  \n- **camshot:** Creates a Window called ‚ÄúWebCapt‚Äù to capture an image from an attached webcam, copies the image to the clipboard, and writes the image to a specified file or a filename using the format: [year]-[month]-[day]-[hour]-[minute]-[second]-[millisecond].jpg. Then uploads the file to the C2 server.  \n- **uuid:** Sets the unique agent identifier by providing a specific GUID.  \n- **interval:** Sets the transport intervals (minimum and maximum time intervals) between C2 communications.  \n- **server:** Sets the C2 servers by providing a list of URLs.  \n- **transport:** Sets the transport processes by providing a list of processes where Kazuar injected its code and executed within.  \n- **autorun:** Sets the autorun type‚ÄîDISABLED, WINLOGON, POLICIES, HKCURUN, RUNONCE, LOADKEY, or STARTUP‚Äîas discussed earlier. Kazuar accept the following strings for this command:  \n    - **remote:** Configures remote API settings by specifying URI prefix and port to listen on. While the port used varied between the analyzed samples, iDefense only observed the HTTP prefix used, which instructs Kazuar to act as an HTTP server. The threat actor can then interact with the compromised system using inbound HTTP requests.  \n    - **info:** Gathers system information referred to as: Agent information, System information, User information, Local groups and members, Installed software, Special folders, Environment variables, Network adapters, Active network connections, Logical drives, Running processes, and Opened windows.  \n- **copy:** Copies the specified file to a specified location. Also allows the C2 infrastructure to supply a flag to overwrite the destination file, if it already exists.  \n- **move:** Moves the specified file to a specified location. Also allows the C2 infrastructure to supply a flag to delete the destination file, if it exists.  \n- **remove:** Deletes a specified file. Allows the C2 infrastructure to supply a flag to securely delete a file by overwriting the file with random data before deleting the file.  \n- **finddir:** Finds a specified directory and lists its files including the created and modified timestamps, the size, and file path for each of the files in the directory.  \n- **kill:** Kills a process by name or by process identifier (PID).  \n- **tasklisk:** Lists running processes. Uses a WMI query of `select * from Win32_Process` for a Windows system but can also run `ps -eo comm,pid,ppid,user,start,tty,args` to obtain running processes from a UNIX system.  \n- **suicide:** Likely uninstalls Kazuar, but it is not implemented in the referenced samples.  \n- **plugin:** Installs plugin by loading a provided Assembly, saving it to a file whose name is the MD5 hash of the Assembly‚Äôs name, and calling the Start method.  \n- **plugout:** Removes a plugin based on the Assembly‚Äôs name.  \n- **pluglist:** Gets a list of plugins and determines whether they are ‚Äúworking‚Äù or ‚Äústopped.‚Äù  \n- **run:** Runs a specified executable with supplied arguments and saves its output to a temporary file. Then loads the temporary file to the C2 server.  \n\nIn this Kazuar variant, the C2 server sends the tasks as XML-formatted data containing an action identifier or integer; the numeric action ID is  then translated into the corresponding command from the above set.\n\n**New Kazuar Variant**\n\nThe new Kazuar variant replaces these numeric action IDs with strings for the command names. The following commands have similar functionality in the new variant as they did in the traditional variant:\n\n- **info**\n- **scrshot**\n- **run**\n- **move**\n- **get**\n- **log**\n- **put**\n- **sleep**\n- **kill**\n- **copy**\n\nDevelopers added the following commands to the new variant:\n\n- **steal:** Steal passwords, history, or proxy lists from the following services: FileZilla, Chromium, Mozilla, Outlook, WinSCP, Git, or from the system.  \n- **config:** Set and update Kazuar configuration values, as described in the *Configuration Comparison* section below.  \n- **delegate:** Forward command to remote Kazuar instance using a named pipe and store result in delegated .zip file, as described in the *Command-and-Control Communication* section below under named pipe communications.\n- **psh:**  Execute PowerShell command.\n- **regwrite:** Create Registry key.\n- **regdelete:** Delete Registry key.\n- **vbs:** Execute VBS script with cscript.exe.\n- **regquery:** Query Registry key.\n- **find:** Enumerate a directory; replaces **finddir** command in traditional Kazuar.\n- **forensic:** Enumerate Registry autorun keys, the Program Compatibility Assistant, and the Windows Explorer User Assist Registry keys to determine which program(s) has run on the compromised device.\n- **http:** Execute an HTTP request and save the response to file http<3digits>.rsp.\n- **jsc:** Execute a JavaScript file with cscript.exe.\n- **del:** Delete a file; replaces **remove** command in traditional Kazuar.\n- **unattend:** Enumerate the compromised device\'s [unattend.xml](https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/update-windows-settings-and-scripts-create-your-own-answer-file-sxs), sysprep.xml, and web.config files to obtain credentials.\n- **schlist:** Enumerate list of scheduled tasks using the [TaskService](https://docs.microsoft.com/en-us/windows/win32/taskschd/taskservice) object.\n- **wmiquery:** Execute a WMI query.\n- **wmicall:** Execute a WMI method.\n\nDevelopers removed several commands from the traditional Kazuar variant while incorporating the functionality into other commands or configuration settings:\n- The **upgrade** and **suicide** commands are replaced by the Registry editing commands (‚Äòregdelete‚Äô and ‚Äòregwrite‚Äô)  now that  Kazuar is stored in a Registry key. \n- The values previously configured by the **uuid**, **jnterval**, **server**, and **transport** commands are now configured using the **config** command. \n- The list of running processes previously obtained with **tasklist** is now returned by **info** along with much more system information. \n- The **autorun** command is not required to configure persistence mechanisms now the Kazuar binary is stored in the Registry. \n- The **plugin** command is no longer necessary since much of the prior information-stealing functionality is implemented within the newer Kazuar. \n- The **remote** command (i.e., HTTP API functionality) has been replaced with task delegation. \n\nThe only functionality apparently not replicated in the new variant is the **camshot** command to take web cam snapshots.\n\nThe commands **schlist**, **wmiquery**, and **wmicall** were present in Kazuar sample AGN-AB-13 but not AGN-AB-03, suggesting the command set of the new variant is under development.\n\n## Configuration Comparison\n\n**Traditional Kazuar Variant**\n\nThe values configured in the traditional Kazuar variant\'s configuration are:\n\n- **Agent identifier:** Unique agent identifier (GUID format).  \n- **Executable path:**  Path of Kazuar binary on disk.  \n- **Storage path:** Base directory containing Kazuar configuration files.\n- **Fake visible name:** Kazuar filename.\n- **Description label:**  Empty in samples analyzed.\n- **Machine seed:** Seed value derived from System Directory.\n- **Parallel tasks:** Number of tasks to run in parallel.\n- **Last contact:** Last contact from C2 server.\n- **Autorun type:**  Persistence method (LNK file or Registry keys, as described in *Installation and Persistence* section).\n- **Transport interval:** Interval between C2 communications.\n- **Command servers:** C2 servers.\n- **Transport processes:** Process to injected into for C2 communications.\n\n**New Kazuar Variant**\n\nThe updated configuration reflects the broader range of functionality implemented in the new Kazuar variant. The values configured in the new variant\'s configuration are:\n\n- **Agent label:** Unique Agent Label of format `AGN-AB-<2 digits>`, iterated as updates are made to Kazuar.\n- **Agent UUID:** Unique agent identifier (GUID format).  \n- **Local seed:** Seed value derived from System UUID.\n- **Last contact:** Last contact from C2 server.\n- **Transport type:**  Protocol used for C2 communications; set to "HTTP" in both analyzed samples.\n- **Transport main interval:**  Interval between C2 communications.\n- **Transport failed interval:** Interval between failed C2 connections before attempting a retry.\n- **Transport proxy:**  C2 communication proxy; specifies URL, port, and variable to specify when proxy is enabled. This value was empty for both samples iDefense analyzed.\n- **Max server fails:** Number of failed attempts before quitting.\n- **Main servers:**  Primary C2 servers.\n- **Reserved servers:** Backup C2 servers.\n- **Agent regkey:** Registry key where packed Kazuar binary is stored.\n- **Storage root:** Base directory containing Kazuar configuration files.\n- **Config path:** Path to Kazuar configuration directory.\n- **Logs path:**: Path to Kazuar logs file.\n- **Keylogger path:** Path to Kazuar keylogger output file.\n- **Logs size:**  Current size of logs file.\n- **Inject mode:** Inject mode to define execution path and injection method (described in *Installation and Persistence* section).\n- **Solving threads:** Number of threads to run in parallel to solve tasks.\n- **Solving tries:** Maximum number of attempts to solve a task.\n- **Sending tries:** Maximum number of attempts to send task result to C2 server.\n- **Keylogger enabled:** Whether keylogger functionality is enabled (boolean).\n- **Task delegation enabled:** Whether task delegation functionality is enabled (boolean).\n- **AMSI bypass enabled:** Whether AMSI bypass functionality is enabled (boolean).\n- **Delegate system pipe:**  Pipe used to delegate tasks in system mode; also see  *Command-and-Control Communication* section.\n- **Delegate solver pipe:** Pipe used to delegate tasks in solver mode.\n- **Delegate sender pipe:** Pipe used to delegate tasks in sender mode.\n\nIndicating the new Kazuar version is under development, the following values are present in the new Kazuar variant sample AGN-AB-13 but not AGN-AB-03:\n- **Agent regkey**\n- **Delegate system pipe** \n- **Delegate solver pipe** \n- **Delegate sender pipe**\n\n## Command-and-Control Communication\n\n**Traditional Kazuar Variant**\n\nThe traditional Kazuar variant uses its C2 channel to send tasks to the backdoor, receive the results, and exfiltrate data. The variant can use multiple protocols, such as HTTP, HTTPS, FTP, or FTPS, as determined by the prefixes of the hardcoded C2 URLs. [iDefense identified one sample](#/node/intelligence_alert/view/6cc805d7-cb77-443d-afea-d052916fa602) that uses the "file://" prefix to communicate across internal nodes in a compromised network, likely via SMB using another Kazuar sample as a transfer agent to forward tasks and results between the C2 server and the first Kazuar sample.\n\n**New Kazuar Variant**\n\nThe new Kazuar samples do not support FTP communications; instead, C2 communications are performed over HTTP(S). Exhibit 10 shows the function that defines the C2 servers:\n\n![alt text](/rest/files/download/e2/97/51/d4d171d120ec49db0128d5c6119399eeb12bf245227e82708290fcf6c3/c2.PNG)  \n_Exhibit 10: Defining C2 Servers in New Kazuar Variant_\n\nThe first two URLs in Exhibit 10 are the "Main servers" referred to in the sample\'s configuration; they act as the primary C2 servers. The third URL is the "Reserved server" that Kazuar uses as a backup, if it cannot reach the primary C2s. The fourth URL is the "Last Chance URL" that Kazuar uses if communication with the primary and backup C2 servers is lost. \n\nFor sample AGN-AB-03, shown in Exhibit 10, a dummy value ("www.google.com") is provided; in sample AGN-AB-13, no value is configured for the "Last Chance URL." However, Kazuar operators can set this to any value. iDefense assesses the operators may choose to use a legitimate web service, such as Pastebin, which allows them to maintain persistence if their own C2 infrastructure is unavailable. [BELUGASTURGEON has previously used a Pastebin project](#/node/intelligence_alert/view/92154a2c-f077-4f16-92d5-2349984ad03e) for C2 communications with its Carbon backdoor.\n\nThe C2 servers identified in the two analyzed samples are:\n\n**AGN-AB-13:**\n - Main servers:\n    - `https://www.rezak[.]com/wp-includes/pomo/pomo.php`\n    - `https://www.hetwittezwaantje[.]nl/wp-includes/rest-api/class-wp-rest-client.php`\n - Reserved server:\n    - `https://aetapet[.]com/wp-includes/IXR/class-IXR-response.php`\n\n**AGN-AB-03:**\n - Main servers:\n    - `https://www.actvoi[.]org/wordpress/wp-includes/fonts/icons/`\n    - `https://www.datalinkelv[.]com/wp-includes/js/pomo/`\n    - `https://www.actvoi.org/wordpress/wp-includes/fonts/`\n - Reserved server:\n    - `https://www.downmags[.]org/wp-includes/pomo/wp/`\n\nIn the new version of Kazuar, HTTP requests are authenticated using an .AspNet.Cookies header rather than an AuthToken cookie. Tasks are forwarded to remote Kazuar instances using the task delegation functionality instead of the remote HTTP API. The task delegation functionality uses named pipes to communicate between Kazuar samples. Exhibit 11 shows the function to generate the pipe name used for communications.\n\n![alt text](/rest/files/download/15/51/62/fe277b22a617898a35647dfe6e6b2d4943dfbeb7e4380c01058995d960/pipe.PNG)   \n_Exhibit 11: New Kazuar Variant Task Delegation Named Pipe_\n\nThe pipe names are GUID values derived from the string `pipename-[system/solver/sender]-AgentLabel` where the values for system, solver, or sender are set based on the **inject_mode**, as described in the *Installation and Persistence* section. \n- **sender** corresponds to the Kazuar instance sending the task.\n- **solver** is set for the Kazuar instance receiving tasks. \n- **system** corresponds to a Kazuar instance started in non-interactive mode. \n\nExhibit 12 shows the function used to send tasks to and receive task results from remote Kazuar instances.\n\n![alt text](/rest/files/download/ac/ec/11/ad97d520210ac43da1c7edd6d91fc4cb59f3e8dd459016a0d335bd0686/pipe2.PNG)  \n_Exhibit 12: New Kazuar Variant Task Delegation Functionality_\n\nTo generate a name for the named pipe, Kazuar uses the `pipename-mode AgentLabel`  format described above replacing "mode" with system, solver, or sender as described above and connecting the values for CreateNamedPipe with ConnectNamedPipe. Messages sent over the pipe are encrypted and must begin with PING, PONG, TASK, RESULT, or ERROR. The PING prefix acts as a handshake and expects a PONG response, the TASK prefix is used to send tasks, and the RESULT and ERROR prefixes respond with the results of tasks or any errors.\n\n## Outlook\nAlthough BELUGASTURGEON has made high-level updates to the Kazuar backdoor over the years, the samples from August 2019 and February 2020 represent the first significant update to the malware\'s codebase since its discovery three years ago. The developers removed the requirement for a plugin framework by incorporating functionality that allows for a wide range of espionage activity such as keylogging, credential stealing, and forensics. Storing the sample as a Registry key rather than on disk decreases the risk of detection in comparison to the older variant.\n\nAdding task delegation functionality makes Kazuar a peer of the group\'s more sophisticated Carbon and Uroborus backdoors. The group\'s relatively clumsy prior method of chaining together proxy commands from a C2 server to a Kazuar instance on an internal node without network connection meant task files were written to disk on the internal proxy node. The new functionality forwards tasks directly over named pipes, as done in the group\'s other backdoors.\n\nDifferences between the August 2019 and February 2020 samples‚Äîwith the addition of commands and updated configuration specifications‚Äîclearly indicate Kazuar is under active development and will continue to be used by BELUGASTURGEON in espionage campaigns.', 'sources_external': [{'datetime': '2017-05-02T23:00:00.000Z', 'description': 'Kazuar: Multiplatform Espionage Backdoor with API Access', 'name': 'Palo Alto Networks', 'reputation': 4, 'url': 'https://unit42.paloaltonetworks.com/unit42-kazuar-multiplatform-espionage-backdoor-api-access/'}], 'mitigation': 'Check logs for the following indicators of compromise:\n- `182d5b53a308f8f3904314463f6718fa2705b7438f751581513188d94a9832cd` (Kazuar packed)\n- `60f47db216a58d60ca04826c1075e05dd8e6e647f11c54db44c4cc2dd6ee73b9` (Kazuar packed)\n-  `41cc68bbe6b21a21040a904f3f573fb6e902ea6dc32766f0e7cce3c7318cf2cb` (Kazuar unpacked)\n- `1cd4d611dee777a2defb2429c456cb4338bcdd6f536c8d7301f631c59e0ab6b4` (Kazuar unpacked)\n- https://www[.]rezak[.]com/wp-includes/pomo/pomo[.]php\n- https://www[.]hetwittezwaantje[.]nl/wp-includes/rest-api/class-wp-rest-client[.]php\n- https://aetapet[.]com/wp-includes/IXR/class-IXR-response[.]php\n- https://www.actvoi[.]org/wordpress/wp-includes/fonts/icons/\n- https://www.datalinkelv[.]com/wp-includes/js/pomo/9https://www.actvoi.org/wordpress/wp-includes/fonts/\n- https://www.downmags[.]org/wp-includes/pomo/wp/\n\nKazuar developers configure the C2 URIs for each sample; instead monitor for the following more generic indicators:\n-\tRepeated connections to WordPress sites not commonly visited by users in the network, particularly when the URI contains `/wp-includes/pomo/`. \n-\tNamed pipes with names matching the format `///pipe//<GUID>` particularly when used by explorer.exe.\n\nThe following YARA rule matches the analyzed Kazuar samples and may be used for detection or hunting purposes only:\n\n```\nrule new_kazuar_unpacked {\n    meta:\n        desc = "Detects functions used by new Kazuar Variant."\n        author = "iDefense"\n        hash1 = "41cc68bbe6b21a21040a904f3f573fb6e902ea6dc32766f0e7cce3c7318cf2cb"\n        hash2 = "1cd4d611dee777a2defb2429c456cb4338bcdd6f536c8d7301f631c59e0ab6b4"\n\n    strings:\n\n    $a1 = "Agent.Original.exe" wide ascii\n    $a2 = "Musky.exe" wide ascii\n    $b_amsi = { 28 [4] 3A 01 00 00 00 2A 72 [4] 28 [4] 28 [4] 0A 06 7E [4] 28 [4] 39 [4] 2A 06 72 [4] 28 [4] 28 [4] 0B 07 7E [4] 28 [4] 39 [4] 2A 28 [4] 39 [4] 1C 8D [4] 25 D0 [4] 28 [4] 0C 38 [4] 1E 8D [4] 25 D0 [4] 28 [4] 0C 16 0D 08 8E 69 6A 28 }\n    $b_encoding1 = {}\n    $b_encoding2 = {73[4]0A160B38[4]02076F[4]28[4]0C0608D16f[4]260717580B07026F[4]3f[4]066F[4]2A}\n    $b_pipename = {03 28 [4] 39 07 00 00 00 28 [4] 10 01 02 6F [4] 0A 72 [4] 28 [4] 06 72 [4] 28 [4] 03 28 [4] 0B 28 [4] 07 6F [4] 0C 28 [4] 08 6F [4] 0D 1F 2A 13 04 1F 11 13 05 1F 15 13 06 16 13 08 38 [4] 11 04 11 05 5A 20 [4] 20 [4] 61 5F D2 13 04 11 04 11 06 58 20 [4] 20 [4] 61 5F D2 13 04 09 11 08 8F [4] 25 47 11 04 61 D2 52 11 08 17 58 13 08 11 08 09 8E 69 3F [4] 12 07 09 28 [4] 12 07 72 [4] 28 [4] 28 [4] 6F [4] 2A}\n\n    condition: uint16(0) == 0x5a4d and (1 of ($a*) and 3 of ($b_*)) or (4 of ($b_*)) and filesize < 350KB\n}\n```', 'severity': 4, 'abstract': "In February 2021, iDefense analyzed two samples of BELUGASTURGEON's Kazuar backdoor and identified significant codebase differences when compared to older Kazuar samples. Although BELUGASTURGEON has been making high-level changes to Kazuar and using the backdoor in espionage campaigns since at least 2017, the August 2020 and February 2021 samples contain the first significant updates to the malware's codebase since the malware family was identified.\n\nThe updated Kazuar variant introduces commands that support a range of espionage activity, including keylogging, credential stealing, and forensics, without requiring a plugin framework as in prior  Kazuar samples. Using task forwarding, BELUGASTURGEON operators can now communicate with Kazuar instances without using Internet connectivity; this enhanced peer-to-peer (P2P) functionality advances Kazuar to the level of some of BELUGASTURGEON's more sophisticated backdoors.\n\nWhen comparing the two August 2020 and February 2021 Kazuar samples, iDefense identified command set and configuration updates that indicate Kazuar is under active development for future use in BELUGASTURGEON espionage campaigns.", 'attachment_links': 'NA'}]
}