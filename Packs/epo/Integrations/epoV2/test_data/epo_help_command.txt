OK:
[ "ComputerMgmt.createAgentDeploymentUrlCmd deployPath groupId [edit] [ahId]\r\n[fallBackAhId] [urlName] [agentVersionNumber] [agentHotFix] - Create Agent\r\nDeployment URL Command", "ComputerMgmt.createCustomInstallPackageCmd deployPath [ahId] [fallBackAhId] -\r\nCreate Custom Install Package Command", "ComputerMgmt.createDefaultAgentDeploymentUrlCmd tenantId - Create Default\r\nNon-Editable Agent Deployment URL Command", "ComputerMgmt.createTagGroup parentTagGroupId newTagGroupName - Create a new\r\nsubgroup under an existing tag group.", "ComputerMgmt.deleteTag tagIds [forceDelete] - Delete one or more tags.", "ComputerMgmt.deleteTagGroup tagGroupIds [deleteTags] - Delete one or more Tag\r\nGroups.", "ComputerMgmt.listAllTagGroups - List All Tag Groups in Tag Group Tree", "ComputerMgmt.moveTagsToTagGroup tagIds tagGroupId - Move tags to an existing tag\r\ngroup.", "ComputerMgmt.renameTagGroup tagGroupId renameTagGroupName - Rename a tag group.", "DxlBrokerMgmt.listBrokerExtensionCmd [brokerGuid] - List broker extensions", "DxlBrokerMgmt.modifyBrokerExtensionCmd brokerGuid=\u003c\u003e enable=\u003c\u003e - Enable or\r\ndisable broker extensions for the specified broker.", "DxlBrokerMgmt.registerIpeDataCmd packageLocation - Remote command to register\r\nIPE data", "DxlBrokerMgmt.unregisterIpeDataCmd packageLocation - Remote command to\r\nunregister IPE data", "DxlClient.fabricHealthCommand [expectedBrokersAsString=\u003c\u003e] - Retrieve broker\r\nhealth information", "DxlClient.getStatusReport - Returns the DXL Client for ePO status report", "DxlClient.queryBrokerRegistry [timeout=\u003c\u003e] - Retrieve broker registry\r\ninformation", "DxlClient.queryRegisteredBroker [brokerGuid=\u003c\u003e] [timeout=\u003c\u003e] - Retrieve broker\r\nbridge information", "DxlClient.queryRegisteredClient clientGuid=\u003c\u003e [timeout=\u003c\u003e] - Checks if a\r\nparticular DXL Client is registered", "DxlClient.queryRegisteredServices [serviceGuid=\u003c\u003e] [serviceType=\u003c\u003e]\r\n[brokerGuid=\u003c\u003e] [timeout=\u003c\u003e] - Returns a list of DXL Registered Services", "ENDP_FW_META.propertyTranslator  - Translates client rule properties and\r\npopulates appropriate database tables with this data.", "agentmgmt.listAgentHandlers - List all Agent Handlers", "clienttask.export [productId] [fileName] - Exports client tasks", "clienttask.find [searchText] - Finds client tasks", "clienttask.importClientTask importFileName - Imports client tasks from an XML\r\nfile.", "clienttask.run names productId taskId [retryAttempts] [retryIntervalInSeconds]\r\n[abortAfterMinutes] [useAllAgentHandlers] [stopAfterMinutes]\r\n[randomizationInterval] - Runs the client task on a supplied list of systems", "clienttask.syncShared - Shares client tasks with participating registered\r\nservers", "commonevent.purgeEvents queryId [unit] [purgeType] - Deletes threat events based\r\non age or a queryId. The query must be table based.", "commonevent.purgeProductEvents queryId [unit] [purgeType] - Purge Client Events\r\nby Query ID or age.", "console.cert.updatecrl console.updateCRL crlFile - cert.update.crl.help.oneline", "core.addPermSetsForUser userName permSetName - Adds permission set(s) to\r\nspecified user", "core.addUser userName password [fullName=\u003c\u003e] [email=\u003c\u003e] [phoneNumber=\u003c\u003e]\r\n[notes=\u003c\u003e] [allowedIPs=\u003c\u003e] [disabled=\u003c\u003e] [admin=\u003c\u003e] [retryTolerant=\u003c\u003e] - Adds a\r\nuser to the system", "core.executeQuery queryId [database=\u003c\u003e] - Executes a SQUID query and returns the\r\nresults", "core.exportPermissionSets - Exports all permission sets.", "core.help [command] [prefix=\u003c\u003e] - Displays a list of all commands and help\r\nstrings.", "core.importPermissionSets file [overwrite] - Imports permission sets.", "core.listDatabases - Displays all registered databases that the user is\r\npermitted to see.", "core.listDatatypes [type] - Displays all registered datatypes and operations for\r\nthose types that the user is permitted to see.", "core.listPermSets [userName] - List permission sets in the system", "core.listQueries - Displays all queries that the user is permitted to see.", "core.listTables [table] - Displays all SQUID tables that the user is permitted\r\nto see.", "core.listUsers [permSetName] - List users in the system", "core.purgeAuditLog [age] [unit] - Purge the Audit Log by age", "core.removePermSetsForUser userName permSetName - Removes permission set(s) from\r\na specified user", "core.removeUser userName - Removes a user from the system", "core.updateUser userName [password=\u003c\u003e] [windowsUserName=\u003c\u003e] [windowsDomain=\u003c\u003e]\r\n[subjectDN=\u003c\u003e] [newUserName=\u003c\u003e] [fullName=\u003c\u003e] [email=\u003c\u003e] [phoneNumber=\u003c\u003e]\r\n[allowedIPs=\u003c\u003e] [notes=\u003c\u003e] [disabled=\u003c\u003e] [admin=\u003c\u003e] [tenantId=\u003c\u003e] - Updates an\r\nexisting user", "epo.getVersion - Gets the ePO version", "epo.purgeComplianceHistory queryId [unit] - Purges compliance events by query or\r\nage", "epo.syncDirectory [syncPointList] - Synchronizes Domains\u002fAD", "epogroup.findSystems groupId [searchSubgroups] - Find computers within a given\r\ngroup in the ePO tree", "issue.createIssue name=\u003c\u003e desc=\u003c\u003e [type=\u003c\u003e] [state=\u003c\u003e] [priority=\u003c\u003e]\r\n[severity=\u003c\u003e] [resolution=\u003c\u003e] [due=\u003c\u003e] [assigneeName=\u003c\u003e] [ticketServerName=\u003c\u003e]\r\n[ticketId=\u003c\u003e] [properties=\u003c\u003e] - Creates an issue", "issue.deleteIssue id=\u003c\u003e - Deletes issues", "issue.listIssues [id=\u003c\u003e] - Lists issues", "issue.updateIssue id=\u003c\u003e [name=\u003c\u003e] [desc=\u003c\u003e] [state=\u003c\u003e] [priority=\u003c\u003e]\r\n[severity=\u003c\u003e] [resolution=\u003c\u003e] [due=\u003c\u003e] [assigneeName=\u003c\u003e] [ticketServerName=\u003c\u003e]\r\n[ticketId=\u003c\u003e] [properties=\u003c\u003e] - Updates an issue", "ldap.populateCache [rsName] - Rediscovers and populates Registered Servers\r\nmappings with domains", "policy.assignToGroup groupId productId objectId [resetInheritance] - Assigns\r\npolicy to the specified group", "policy.assignToSystem names productId typeId objectId [resetInheritance] -\r\nAssigns the policy to a supplied list of systems", "policy.export productId [fileName] - Exports policies", "policy.find [searchText] - Finds all policies the user is permitted to see that\r\nmatch the given search text.", "policy.importPolicy file [force] - Imports policies", "policy.syncShared - Shares policies with participating registered servers", "repository.changeBranch productId packageType sourceBranch targetBranch [move] -\r\nChange the Branch for a Package", "repository.checkInPackage packageLocation branch [option] [force] - Checks\r\npackage into the master repository", "repository.deletePackage productId packageType branch - Deletes Package from the\r\nMaster Repository", "repository.export [fileName] - Exports repositories", "repository.find [searchText] - Finds all repositories the user is permitted to\r\nsee that match the given search text.", "repository.findPackages [searchText] - Finds Packages", "repository.importRepositories file repositoryType [overwrite] - Imports\r\nrepositories", "repository.pull sourceRepository targetBranch moveToPrevious productList - Pulls\r\npackages from the source repository and puts them into the Master Repository", "repository.replicate [repositoryList] [incremental] - Replicate", "scheduler.cancelServerTask taskLogId - Ends a currently running task", "scheduler.getServerTask taskName - Gets details about a specific server task", "scheduler.listAllServerTasks - Displays all server tasks", "scheduler.listRunningServerTasks - Get the list of all running server tasks.", "scheduler.runServerTask taskName - Runs a server task and returns the task log\r\nID.", "scheduler.updateServerTask taskName [status] - Enables or disables a server task\r\n(by default status=\u0027enabled\u0027)", "system.applyTag names tagName - Assigns the given tag to a supplied list of\r\nsystems", "system.clearTag names tagName [all] - Clears the tag from supplied systems", "system.delete names [uninstall] - Deletes systems from the System Tree by name\r\nor ID.", "system.deployAgent names username [password] [agentPackage] [skipIfInstalled]\r\n[suppressUI] [forceInstall] [installPath] [domain] [useAllHandlers]\r\n[primaryAgentHandler] [retryIntervalSeconds] [attempts] [abortAfterMinutes]\r\n[includeSubgroups] [useSsh] [inputSource] - Deploys an agent to the given list\r\nof systems", "system.excludeTag names tagName - Excludes the tag from supplied systems", "system.exportTag [fileName] - Export Tags", "system.find searchText - Finds systems in the System Tree", "system.findGroups [searchText] - Finds groups in the System Tree", "system.findTag [searchText] - Find Tags", "system.importSystem names branchNodeID [allowDuplicates] [uninstallRemoved]\r\n[pushAgent] [pushAgentForceInstall] [pushAgentSkipIfInstalled]\r\n[pushAgentSuppressUI] [pushAgentInstallPath] [pushAgentPackagePath]\r\n[pushAgentDomainName] [pushAgentUserName] [pushAgentPassword] [deleteIfRemoved]\r\n[flattenTreeStructure] - Imports systems", "system.importTag uploadFile [force] - Imports Tags", "system.move names parentGroupId [autoSort] - Moves systems to the specified\r\ndestination group.", "system.resort names - Resorts the systems in the System Tree", "system.runTagCriteria tagID [resetTaggedSystems] - The Run Tag Criteria action\r\nevaluates every managed system against the tag\u0027s criteria.", "system.setUserProperties names [description] [customField1] [customField2]\r\n[customField3] [customField4] - Sets user properties on the given system", "system.transfer names epoServer - Transfers systems to a different ePO server", "system.wakeupAgent names [fullProps] [superAgent] [randomMinutes]\r\n[forceFullPolicyUpdate] [useAllHandlers] [retryIntervalSeconds] [attempts]\r\n[abortAfterMinutes] [includeSubgroups] - Wakes up the agent on a supplied list\r\nof systems", "tasklog.listMessages taskLogId - Lists the messages for the specified task log\r\nentry", "tasklog.listSubtasks taskLogId - Lists subtasks of a specified task log entry", "tasklog.listTaskHistory [taskName] [taskSource] [maxRows] [age] [unit] - Lists\r\ntask log entries, optionally filtered by task name, task ID, or task source", "tasklog.listTaskSources - Lists the task sources", "tasklog.purge [age] [unit] - Purges the Server Task Log beyond a given age and\r\ntime unit", "telemetry.contentRuleEngine.collect [filePath-at-ePO]", "telemetry.uploadTask.runNow No Arguments", "tie.ioc.cmd.setIOCState names iocState - Set System Health Indicator", "tie.refreshGtiReputation [gtiFile] [gtiCert] - JSON string for GTI file or GTI\r\ncertificate with Base64-encoded hash values", "tie.removeAtdReputations [fileReps] - JSON string for file or certificate\r\nreputations with Base64 encoded hash values", "tie.removeExternalReputations [fileReps] - JSON string for file or certificate\r\nreputations with Base64 encoded hash values", "tie.setReputations [fileReps] [certReps] - JSON string for file or certificate\r\nreputations with Base64 encoded hash values" ]
