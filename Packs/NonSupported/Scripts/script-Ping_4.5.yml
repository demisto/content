args:
- default: true
  defaultValue: ''
  description: Address to ping
  isArray: false
  name: address
  predefined: []
  required: true
  secret: false
comment: Pings an IP or url address, to verify it's up
commonfields: {id: Ping, version: -1}
enabled: true
name: Ping
outputs:
- {contextPath: Ping.ret_code, description: Ping return code, type: number}
- {contextPath: Ping.destination, description: Ping destination address, type: string}
- {contextPath: Ping.max_rtt, description: Ping max round trip time, type: number}
- {contextPath: Ping.avg_rtt, description: Ping average round trip time, type: number}
- {contextPath: Ping.min_rtt, description: Ping minimum round trip time, type: number}
- {contextPath: Ping.destination_ip, description: Ping destination IP, type: string}
script: |-
  import subprocess
  import re
  try:
    dest = demisto.args()['address']
    ping_out = subprocess.check_output(['ping', '-c', '3', '-q', dest], stderr=subprocess.STDOUT)
    s = re.search(r"PING.*\((.+)\)", ping_out)
    res = {}
    if s:
        res['destination_ip'] = s.group(1)
    s = re.search(r"round-trip min/avg/max = (.+)/(.+)/(.+)\s+ms", ping_out)
    if not s:
        raise ValueError("Couldn't parse ping statistics:\n" + ping_out)
    res['ret_code'] = 0
    res['destination'] = dest
    res['min_rtt'] = s.group(1)
    res['avg_rtt'] = s.group(2)
    res['max_rtt'] = s.group(3)
    demisto.results({
        'Type': entryTypes['note'],
        'Contents': res,
        'ContentsFormat': formats['json'],
        'HumanReadable': tableToMarkdown("Ping Results", res),
        'ReadableContentsFormat' : formats['markdown'],
        'EntryContext': { "Ping": res }
    })
  except Exception as e:
    if isinstance(e, subprocess.CalledProcessError):
        msg = e.output
    else:
        msg = str(e)
    return_error(msg)
system: false
tags: [Utility]
timeout: '0'
type: python
subtype: python2
runonce: false
tests: [Ping Test Playbook]
toversion: 4.5.9
