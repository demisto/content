#!/usr/bin/python
import argparse
import json
import pprint
import requests
import os


url = os.getenv("QUTTERA_API_URL")
key = os.getenv("QUTTERA_API_KEY")

def _request(base_url: str, method: str):
    res = requests.request(method, base_url)
    return res.json()

def new_scan(domain: str):
    base_url = f"{url}/api/v3/{key}/url/scan/{domain}.json"
    return _request(base_url=base_url, method="POST")

def rescan(domain: str):
    base_url = f"{url}/api/v3/{key}/url/scan/{domain}.json"
    return _request(base_url=base_url, method="PUT")

def status_scan(domain: str):
    base_url = f"{url}/api/v3/{key}/url/status/{domain}.json"
    return _request(base_url=base_url, method="GET")

def report_malware(domain: str):
    base_url = f"{url}/api/v3/{key}/url/report/{domain}.json"
    return _request(base_url=base_url, method="GET")

def status_blacklist(domain: str):
    base_url = f"{url}/api/v3/{key}/blacklist/status/{domain}.json"
    return _request(base_url=base_url, method="GET")

def api_urls():
    urls = """
    new_scan         - POST /api/v3/xxx/url/scan/quttera.com.json
    rescan           - PUT  /api/v3/xxx/url/scan/quttera.com.json
    status_scan      - GET  /api/v3/xxx/url/status/quttera.com.json
    report_malware   - GET  /api/v3/xxx/url/report/quttera.com.json
    status_blacklist - GET  /api/v3/xxx/blacklist/status/quttera.com.json
    """
    print(f"    Base URL         - {url}")
    print(f"{urls}")

def arguments() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(description = "Quttera API helper")
    parser.add_argument("-d", "--domain", help = "Domain to scan (default: quttera.com)", default="quttera.com")
    parser.add_argument("-s", "--scan", help = "Scan given domain (POST)", action="store_true")
    parser.add_argument("-t", "--status", help = "Status of given domain (GET)", action="store_true")
    parser.add_argument("-b", "--blacklist", help = "Blacklisted domain (GET)", action="store_true")
    parser.add_argument("-m", "--malware", help = "Malware report (GET)", action="store_true")
    parser.add_argument("-r", "--rescan", help = "Rescan given domain (PUT)", action="store_true")
    parser.add_argument("-u", "--urls", help = "Show all api's", action="store_true")
    return parser.parse_args()

if '__main__' == __name__:
    args = arguments()
    domain = args.domain
    if args.scan:
        r = new_scan(domain)
    if args.status:
        r = status_scan(domain)
    if args.blacklist:
        r = rescan(domain)
    if args.malware:
        r = report_malware(domain)
    if args.rescan:
        r = rescan(domain)
    if args.urls:
        r = api_urls()
    pprint.pprint(r, indent=4)
