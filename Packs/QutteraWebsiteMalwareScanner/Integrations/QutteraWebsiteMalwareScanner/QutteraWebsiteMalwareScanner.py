"""QutteraWebsiteMalwareScanner Integration for Cortex XSOAR (aka Demisto)
"""
import demistomock as demisto
import urllib3
from CommonServerPython import *


# Disable insecure warnings
urllib3.disable_warnings()

''' CONSTANTS '''
DATE_FORMAT = "%Y-%m-%dT%H:%M:%SZ"


class Client(BaseClient):
    """Client class for basic interaction with Quttera API.
    """
    def __init__(self, params):
        self.apikey = params["apikey"]
        self.base_url = params["base_url"]
        super().__init__(base_url=self.base_url)

    def _api_request(self, domain: str, request_type: str, operation: str) -> Dict:
        """Start domain scanning

        :type domain: ``str``
        :param domain: Domain to scan

        :return: dict containing response from start scanning
        :rtype: ``Dict``
        """

        operations = {
            "scan": f"/api/v3/{self.apikey}/url/scan",
            "rescan": f"/api/v3/{self.apikey}/url/scan",
            "statscan": f"/api/v3/{self.apikey}/url/status",
            "malware": f"/api/v3/{self.apikey}/url/report",
            "blacklist": f"/api/v3/{self.apikey}/blacklist/status"
        }

        op = operations[operation]
        return self._http_request(
            method=request_type,
            url_suffix=f"{op}/{domain}",
        )

def scan_start(client: Client, args: dict) -> CommandResults:
    """
    quttera-scan-start command: initiates scan of the provided URL or domain.

    :type client: ``Client`e
    :param Client: Qutter API client

    :type args: ``Dict[str, Any]``
    :param args: all command arguments from ``demisto.args()``

    :return: ``CommandResults`` object contain the start scan response
    :rtype: ``CommandResults``
    """
    domain = args.get("domain")
    if not domain:
        raise ValueError('domain is missing')

    start = client._api_request(domain=domain, request_type="POST", operation="scan")
    demisto.debug(f"Start output {start}")
    readable_output = f'Started scan of {domain}'
    if start.get('errorstr') != 'success':
        readable_output = f'Failed to scan domain {domain}'

    return CommandResults(
        outputs_prefix="QutteraWebsiteMalwareScanning.Start",
        outputs_key_field="error",
        outputs=start
    )

def rescan_status(client: Client, args: dict) -> CommandResults:
    """
    Retrieves scan status for previously submitted domain
    name or URL.

    """
    domain = args.get("domain")
    if not domain:
        raise ValueError('domain is missing')

    rescan = client._api_request(domain=domain, request_type="PUT", operation="rescan")
    readable_output = f'Rescan of {domain}'

    return CommandResults(
        outputs_prefix="QutteraWebsiteMalwareScanning.Status",
        outputs_key_field="error",
        outputs=rescan
    )

def scan_report(client: Client, args: dict) -> CommandResults:
    """
    Retrieves scan report for previously submitted domain
    or URL in context or as a File (default)

    """
    domain = args.get("domain")
    if not domain:
        raise ValueError('domain is missing')

    report = client._api_request(domain=domain, request_type="GET", operation="statscan")

    return CommandResults(
        outputs_prefix="QutteraWebsiteMalwareScanning.report",
        outputs_key_field="error",
        outputs=report
    )

def report_malware(client: Client, args: dict) -> CommandResults:
    """
    Returns malware status for given domain

    """
    domain = args.get("domain")
    if not domain:
        raise ValueError('domain is missing')

    malware = client._api_request(domain=domain, request_type="GET", operation="malware")

    return CommandResults(
        outputs_prefix="QutteraWebsiteMalwareScanning.malware",
        outputs_key_field="error",
        outputs=malware
    )

def status_blacklist(client: Client, args: dict) -> CommandResults:
    """
    Returns url blacklisting information and reputation.

    """
    domain = args.get("domain")
    if not domain:
        raise ValueError('domain is missing')

    start = client._api_request(domain=domain, request_type="GET", operation="blacklist")
    readable_output = f"Blacklisted URI's of {domain}"
    if start.get('errorstr') != 'success':
        readable_output = f'Failed to get the report for domain {domain}'

    result = CommandResults(
        readable_output=readable_output,
        outputs_prefix="",
        outputs_key_field='QutteraWebsiteMalwareScanning.domain',
        outputs=start
    )
    return_results(result)


''' MAIN FUNCTION '''
def main(params: dict, args: dict, command: str):
    """main function, parses params and runs command functions
    """
    demisto.debug(f"Command called {command}")
    demisto.results(f"Args are {args}")
    demisto.results(f"params are {params}")
    client = Client(params)
    if command == 'quttera-scan-start':
        results = scan_start(client, args)
    elif command == 'quttera-rescan-status':
        results = rescan_status(client, args)
    elif command == 'quttera-scan-report':
        results = scan_report(client, args)
    elif command == 'quttera-report-malware':
        results = report_malware(client, args)
    elif command == 'quttera-status-blacklist':
        results = status_blacklist(client, args)
    else:
        raise NotImplementedError(f'Command {command} not implemented')
    return_results(results)

if  __name__ in ('__main__', '__builtin__', 'builtins'):
    try:
        main(demisto.params(), demisto.args(), demisto.command())
    except Exception as exception:
        return_error(exception)
