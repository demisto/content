import pytest
from AzureSecurityCenter_v2 import (MsClient, get_aps_command, get_atp_command, get_secure_scores_command, update_atp_command,
                                    get_alert_command, list_alerts_command)

# get atp command data
GET_ATP_COMMAND_RAW_RESPONSE = {
    "properties": {"isEnabled": False},
    "id": "/subscriptions/subscription_id/resourceGroups/resource_group"
          "/providers/Microsoft.Storage/storageAccounts/storage_account/providers"
          "/Microsoft.Security/advancedThreatProtectionSettings/current",
    "name": "current",
    "type": "Microsoft.Security/advancedThreatProtectionSettings",
}
EXPECTED_GET_ATP_COMMAND_CONTEXT = {
    "AzureSecurityCenter.AdvancedThreatProtection(val.ID && val.ID === obj.ID)": {
        "ID": "/subscriptions/subscription_id/resourceGroups/resource_group/providers/Microsoft.Storage"
              "/storageAccounts/storage_account/providers/Microsoft.Security/advancedThreatProtectionSettings/current",
        "Name": "current",
        "IsEnabled": None,
    }
}

# get aps command data
GET_APS_RAW_RESPONSE = {
    "id": "/subscriptions/subscription_id/providers/Microsoft.Security/autoProvisioningSettings/default",
    "name": "default",
    "type": "Microsoft.Security/autoProvisioningSettings",
    "properties": {"autoProvision": "Off"},
}

EXPECTED_GET_APS_CONTEXT = {
    "AzureSecurityCenter.AutoProvisioningSetting(val.ID && val.ID === obj.ID)": [
        {
            "Name": "default",
            "AutoProvision": "Off",
            "ID": "/subscriptions/subscription_id/providers/Microsoft.Security/autoProvisioningSettings/default",
        }
    ]
}

# Update atp command data
UPDATE_ATP_RAW = {
    "properties": {"isEnabled": True},
    "id": "/subscriptions/subscription_id/resourceGroups/cloud-shell-storage-eastus/providers/Microsoft"
          ".Storage/storageAccounts/storage_account/providers/Microsoft.Security"
          "/advancedThreatProtectionSettings/current",
    "name": "current",
    "type": "Microsoft.Security/advancedThreatProtectionSettings",
}

EXPECTED_UPDATE_ATP_CONTEXT = {
    "AzureSecurityCenter.AdvancedThreatProtection(val.ID && val.ID === obj.ID)": {
        "ID": "/subscriptions/subscription_id/resourceGroups/cloud-shell-storage-eastus/providers/Microsoft.Storage"
              "/storageAccounts/storage_account/providers/Microsoft.Security/advancedThreatProtectionSettings/current",
        "Name": "current",
        "IsEnabled": None,
    }
}

# Get secure score command data
GET_SECURE_SCORE_RAW_RESPONSE = {
    "id": "/subscriptions/0f907ea4-bc8b-4c11-9d7e-805c2fd144fb/providers/Microsoft.Security/secureScores/ascScore",
    "name": "ascScore",
    "type": "Microsoft.Security/secureScores",
    "properties": {"displayName": "ASC score", "score": {"max": 58, "current": 14.51, "percentage": 0.2502}, "weight": 199},
}

EXPECTED_GET_SECURE_SCORE_CONTEXT = {
    "Azure.Securescore(val.ID && val.ID === obj.ID)": {
        "displayName": "ASC score",
        "score": {"max": 58, "current": 14.51, "percentage": 0.2502},
        "weight": 199,
    }
}

GET_ALERT_RAW_RESPONSE = {
    "id": "/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Security/locations/westeurope/alerts/2518770965529163669_F144EE95-A3E5-42DA-A279-967D115809AA",
    "name": "2518298467986649999_4d25bfef-2d77-4a08-adc0-3e35715cc92a",
    "properties": {
        "alertDisplayName": "Azure Security Center test alert (not a threat)",
        "description": "This is a test alert generated by Azure Security Center. No further action is needed.",
        "severity": "High",
        "remediationSteps": ["No further action is needed."],
        "vendorName": "Microsoft",
        "status": "Active",
        "timeGeneratedUtc": "2020-02-23T13:47:58.0000000Z",
        "extendedProperties": {"Property1": "Property1 information"},
        "compromisedEntity": "vm1",
    }
}

EXPECTED_GET_ALERT_CONTEXT = {
    "AzureSecurityCenter.Alert(val.ID && val.ID === obj.ID)": [{
        "DisplayName": "Azure Security Center test alert (not a threat)",
        "CompromisedEntity": "vm1",
        "Description": "This is a test alert generated by Azure Security Center. No further action is needed.",
        "DetectedTime": "2020-02-23T13:47:58.0000000Z",
        "ReportedSeverity": "High",
        "State": "Active",
        "RemediationSteps": ["No further action is needed."],
        "VendorName": "Microsoft",
        "ID": "2518298467986649999_4d25bfef-2d77-4a08-adc0-3e35715cc92a",
        "ExtendedProperties": {"Property1": "Property1 information"},
        "Entities": None
    }]
}

LIST_ALERTS_RAW_RESPONSE = {
    "value": [
        {
            "id": "/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Security/locations/westeurope/alerts/2518770965529163669_F144EE95-A3E5-42DA-A279-967D115809AA",
            "name": "2518298467986649999_4d25bfef-2d77-4a08-adc0-3e35715cc92a",
            "properties": {
                "alertDisplayName": "Azure Security Center test alert (not a threat)",
                "description": "This is a test alert generated by Azure Security Center. No further action is needed.",
                "severity": "High",
                "remediationSteps": ["No further action is needed."],
                "vendorName": "Microsoft",
                "status": "Active",
                "timeGeneratedUtc": "2020-02-23T13:47:58.0000000Z",
                "extendedProperties": {"Property1": "Property1 information"},
                "compromisedEntity": "vm1",
            }
        },
        {
            "id": "/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Security/locations/westeurope/alerts/2518770965529163669_F144EE95-A3E5-42DA-A279-967D115809AA",
            "name": "2518298467986649999_4d25bfef-2d77-4a08-adc0-3e35715cc92a",
            "properties": {
                "alertDisplayName": "Azure Security Center test alert (not a threat)",
                "description": "This is a test alert generated by Azure Security Center. No further action is needed.",
                "severity": "High",
                "remediationSteps": ["No further action is needed."],
                "vendorName": "Microsoft",
                "status": "Active",
                "timeGeneratedUtc": "2020-02-23T13:47:58.0000000Z",
                "extendedProperties": {"Property1": "Property1 information"},
                "compromisedEntity": "vm1",
            }
        }
    ]
}

EXPECTED_LIST_ALERTS_CONTEXT = {
    "AzureSecurityCenter.Alert(val.ID && val.ID === obj.ID)": [
        {
            "DisplayName": "Azure Security Center test alert (not a threat)",
            "CompromisedEntity": "vm1",
            "Description": "This is a test alert generated by Azure Security Center. No further action is needed.",
            "ID": "2518298467986649999_4d25bfef-2d77-4a08-adc0-3e35715cc92a",
            "DetectedTime": "2020-02-23T13:47:58.0000000Z",
            "ReportedSeverity": "High",
            "State": "Active"
        },
        {
            "DisplayName": "Azure Security Center test alert (not a threat)",
            "CompromisedEntity": "vm1",
            "Description": "This is a test alert generated by Azure Security Center. No further action is needed.",
            "ID": "2518298467986649999_4d25bfef-2d77-4a08-adc0-3e35715cc92a",
            "DetectedTime": "2020-02-23T13:47:58.0000000Z",
            "ReportedSeverity": "High",
            "State": "Active"
        }
    ]
}

client = MsClient(
    server="url",
    tenant_id="tenant",
    auth_id="auth_id",
    enc_key="enc_key",
    app_name="APP_NAME",
    verify="verify",
    proxy="proxy",
    self_deployed="self_deployed",
    subscription_id="subscription_id",
    ok_codes=(1, 3),
    certificate_thumbprint=None,
    private_key=None,
)


def test_get_atp_command(mocker):
    mocker.patch.object(client, "get_atp", return_value=GET_ATP_COMMAND_RAW_RESPONSE)
    args = {"resource_group_name": "test", "setting_name": "test", "storage_account": "test"}
    _, ec, _ = get_atp_command(client, args)
    assert ec == EXPECTED_GET_ATP_COMMAND_CONTEXT


def test_update_atp_command(mocker):
    mocker.patch.object(client, "update_atp", return_value=UPDATE_ATP_RAW)
    args = {"resource_group_name": "test", "setting_name": "test", "is_enabled": "test", "storage_account": "test"}
    _, ec, _ = update_atp_command(client, args)
    assert ec == EXPECTED_UPDATE_ATP_CONTEXT


def test_get_aps_command(mocker):
    mocker.patch.object(client, "get_aps", return_value=GET_APS_RAW_RESPONSE)
    args = {"setting_name": "test"}
    _, ec, _ = get_aps_command(client, args)
    assert ec == EXPECTED_GET_APS_CONTEXT


def test_get_secure_score_command(mocker):
    mocker.patch.object(client, "get_secure_scores", return_value=GET_SECURE_SCORE_RAW_RESPONSE)
    args = {"secure_score_name": "ascScore"}
    _, ec, _ = get_secure_scores_command(client, args)
    assert ec == EXPECTED_GET_SECURE_SCORE_CONTEXT


@pytest.mark.parametrize(argnames="client_id", argvalues=["test_client_id", None])
def test_test_module_command_with_managed_identities(mocker, requests_mock, client_id):
    """
    Given:
        - Managed Identities client id for authentication.
    When:
        - Calling test_module.
    Then:
        - Ensure the output are as expected.
    """

    import re

    import demistomock as demisto
    from AzureSecurityCenter_v2 import MANAGED_IDENTITIES_TOKEN_URL, Resources, main

    mock_token = {"access_token": "test_token", "expires_in": "86400"}
    get_mock = requests_mock.get(MANAGED_IDENTITIES_TOKEN_URL, json=mock_token)
    requests_mock.get(re.compile(f"^{Resources.management_azure}.*"), json={"value": []})

    params = {
        "managed_identities_client_id": {"password": client_id},
        "use_managed_identities": "True",
        "resource_group": "test_resource_group",
        "server_url": Resources.management_azure,
        "credentials_auth_id": {"password": "example"},
    }
    mocker.patch.object(demisto, "params", return_value=params)
    mocker.patch.object(demisto, "command", return_value="test-module")
    mocker.patch.object(demisto, "results", return_value=params)
    mocker.patch("MicrosoftApiModule.get_integration_context", return_value={})

    main()

    assert "ok" in demisto.results.call_args[0][0]
    qs = get_mock.last_request.qs
    assert qs["resource"] == [Resources.management_azure]
    assert (client_id and qs["client_id"] == [client_id]) or "client_id" not in qs


def test_get_alert_command(mocker):
    mocker.patch.object(client, "get_alert", return_value=GET_ALERT_RAW_RESPONSE)
    args = {"asc_location": "loc", "alert_id": "123"}
    output = get_alert_command(client, args)
    ec = output[0]["EntryContext"]
    assert ec == EXPECTED_GET_ALERT_CONTEXT


def test_list_alerts_command(mocker):
    mocker.patch.object(client, "list_alerts", return_value=LIST_ALERTS_RAW_RESPONSE)
    args = {"asc_location": "loc"}
    _, ec, _ = list_alerts_command(client, args)
    assert ec == EXPECTED_LIST_ALERTS_CONTEXT
