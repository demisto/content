args:
- description: SoftwareVersion table of current images
  isArray: true
  name: installed_images
  required: true
- description: Complete list of available images for the given platform
  isArray: true
  name: available_images
  required: true
comment: Given a table containing installed ("current") PAN-OS Software images, compare
  with available to determine
commonfields:
  id: FilterAvailableSoftwareImages
  version: -1
contentitemexportablefields:
  contentitemfields:
    fromServerVersion: ""
dockerimage: demisto/python3:3.9.8.24399
name: FilterAvailableSoftwareImages
outputs:
- contextPath: FilteredSoftwareVersions.Result.hostid
  description: Host ID
  type: Unknown
- contextPath: FilteredSoftwareVersions.Result.version
  description: software version in Major.Minor.Maint format
  type: Unknown
- contextPath: FilteredSoftwareVersions.Result.filename
  description: Software version filename
  type: Unknown
- contextPath: FilteredSoftwareVersions.Result.size
  description: Size of software in MB
  type: Unknown
- contextPath: FilteredSoftwareVersions.Result.size_kb
  description: Size of software in KB
  type: Unknown
- contextPath: FilteredSoftwareVersions.Result.release_notes
  description: Link to version release notes on PAN knowledge base
  type: Unknown
- contextPath: FilteredSoftwareVersions.Result.downloaded
  description: True if the software version is present on the system
  type: Unknown
- contextPath: FilteredSoftwareVersions.Result.current
  description: True if this is the currently installed software on the system
  type: Unknown
- contextPath: FilteredSoftwareVersions.Result.latest
  description: True if this is the most recently released software for this platform
  type: Unknown
- contextPath: FilteredSoftwareVersions.Result.uploaded
  description: True if the software version has been uploaded to the system
  type: Unknown
runas: DBotWeakRole
runonce: false
script: |
  """
  Compares two sets of tabular data to find the differences in keys
  """
  from dataclasses import dataclass
  from typing import Union
  import pkg_resources

  # -- This is a way to get around trimming commonserverpython on import
  try:
      demisto.args()
  except:
      from CommonServerPython import *


  @dataclass
  class SoftwareVersion:
      """
      :param hostid: Host ID
      :param version: software version in Major.Minor.Maint format
      :param filename: Software version filename
      :param size: Size of software in MB
      :param size_kb: Size of software in KB
      :param release_notes: Link to version release notes on PAN knowledge base
      :param downloaded: True if the software version is present on the system
      :param current: True if this is the currently installed software on the system
      :param latest: True if this is the most recently released software for this platform
      :param uploaded: True if the software version has been uploaded to the system
      """
      hostid: str
      version: str
      filename: str
      size: int
      size_kb: int
      release_notes: str
      downloaded: bool
      current: bool
      latest: bool
      uploaded: bool


  @dataclass
  class ScriptResult:
      versions: list[SoftwareVersion]

      _output_prefix = "FilteredSoftwareVersions"
      _title = "Filtered Available Software Versions"

      _result_cls = SoftwareVersion


  def check_versions(left_image_version: str, right_image_version: str):
      """Checks if the right version is newer but not more than 1 minor release away from the previous"""

      if left_image_version == right_image_version:
          return

      left_major_version = int(left_image_version.split(".")[0])
      right_major_version = int(right_image_version.split(".")[0])

      left_minor_version = int(left_image_version.split(".")[1])
      right_minor_version = int(right_image_version.split(".")[1])

      # If the major release is the same
      if left_major_version == right_major_version:
          # Check the jump is not more than one minor release above
          if left_minor_version <= right_minor_version + 1:
              return left_image_version

      # If this is a major release jump
      elif left_major_version == right_major_version + 1:
          # Don't skip minor releases in a major jump - 9.2.0 to 10.0.0 OK, 9.2.0 to 10.1.0 NOT OK
          if left_minor_version == 0:
              return left_image_version


  def main(installed_images: Union[list, dict], available_images: Union[list, dict],
           **kwargs) -> ScriptResult:
      """
      Given a table containing installed ("current") PAN-OS Software images, compare with available to determine
      which can be upgraded to by looking for newer releases than are currently installed.
      :param installed_images: SoftwareVersion table of current images
      :param available_images: Complete list of available images for the given platform
      :param kwargs: Keyword args !no-auto-argument
      """
      versions = []
      if type(installed_images) is dict:
          installed_images = [installed_images]

      if type(available_images) is dict:
          available_images = [available_images]

      for image_dict in available_images:
          image: SoftwareVersion = SoftwareVersion(**image_dict)
          for installed_image_dict in installed_images:
              installed_image: SoftwareVersion = SoftwareVersion(**installed_image_dict)
              if check_versions(image.version, installed_image.version):
                  if image.version not in [x.version for x in versions]:
                      versions.append(image)

      print([x.version for x in versions])
      return ScriptResult(
          versions=versions
      )


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      result = main(**demisto.args())

      dict_result = [vars(x) for x in result.versions]
      readable_output = tableToMarkdown(result._title, dict_result)
      outputs = {
          "Result": dict_result
      }

      command_result = CommandResults(
          outputs_prefix=result._output_prefix,
          outputs=outputs,
          readable_output=readable_output
      )
      return_results(command_result)
scripttarget: 0
subtype: python3
tags: []
type: python
fromversion: 5.5.0
tests:
- No tests (auto formatted)
