args:
- description: Target firewall to create incident based off
  name: target
  required: true
commonfields:
  id: CreateOrUpdateDeviceIncident
  version: -1
contentitemexportablefields:
  contentitemfields:
    fromServerVersion: ""
dockerimage: demisto/python3:3.7.3.286
enabled: true
name: CreateOrUpdateDeviceIncident
outputs:
- contextPath: DeviceIncidents.device_incident_id
  description: 'The Incident ID of the created or existing incident. '
- contextPath: DeviceIncidents.device_incident_link
  description: A link to the associated device incident.
runas: DBotWeakRole
runonce: false
script: |+
  """Given a device host id, creates or updates an existing device incident."""
  # -- This is a way to get around trimming commonserverpython on import
  try:
      demisto.args()
  except:
      from CommonServerPython import *

  current_incident_id = demisto.incidents()[0].get("id")
  res = demisto.executeCommand("GetIncidentsByQuery", {
      "query": f"-status:closed -category:job type:\"PAN-OS Device\""
  })
  if is_error(res):
      return_error(get_error(res))

  new_target = demisto.args().get(panosnetworkoperationstarget)

  incidents = json.loads(res[0]['Contents'])
  device_incident_found = False

  outputs = {
      "device_incident_id": None,
      "device_incident_link": None
  }
  human_readable_result = ""

  for incident in incidents:
      target = incident.get('CustomFields', {}).get('target')
      if target == new_target:
          # If the incident already exists, simply update it by re-running the default playbook
          incident_id = incident.get("id")
          demisto.executeCommand("setPlaybook", {
              "incidentId": incident_id
          })
          human_readable_result = "updated incident " + incident_id
          device_incident_found = True
          outputs = {
              "device_incident_id": incident_id,
              "device_incident_link": f'<a href="/#/incidents/{incident_id}">{incident_id}</a>'
          }

  if not device_incident_found:
      res = demisto.executeCommand("createNewIncident", {
          "name": new_target,
          "type": "PAN-OS Device",
          panosnetworkoperationstarget: new_target,
          "panosnetworkoperationsparentincidentid": current_incident_id
      })
      created_incident = res[0]
      created_incident_id = created_incident.get("EntryContext", dict()).get("CreatedIncidentID")
      outputs = {
          "device_incident_id": created_incident_id,
          "device_incident_link": f'<a href="/#/incidents/{created_incident_id}">{created_incident_id}</a>'
      }
      human_readable_result = f"Created new incident {created_incident_id}"

  command_result = CommandResults(
      outputs_prefix="DeviceIncidents",
      outputs=outputs,
      readable_output=human_readable_result
  )
  return_results(command_result)

scripttarget: 0
subtype: python3
tags: []
type: python
fromversion: 5.5.0
tests:
- No tests (auto formatted)
