import pytest
from requests import HTTPError
import demistomock as demisto


def test_fetch_indicators_main(mocker):
    """
    Given
    - indicators response from malware bazzar feed

    When
    - Running main flow for fetching indicators command

    Then
    - Ensure that all indicators values exist and are not 'None'
    """
    from MalwareBazaarFeed import main
    from JSONFeedApiModule import Client

    mocker.patch.object(
        demisto, 'params', return_value={
            'feed': True, 'feedBypassExclusionList': False, 'feedExpirationInterval': '20160',
            'feedExpirationPolicy': 'suddenDeath', 'feedFetchInterval': 1,
            'feedReliability': 'A - Completely reliable', 'feedReputation': 'None', 'feedTags': None,
            'insecure': True, 'ip_ranges': 'All available Google IP ranges', 'proxy': False, 'tlp_color': None,
            'url': 'https://mb-api.abuse.ch'
        }
    )
    mocker.patch.object(demisto, 'command', return_value='fetch-indicators')
    create_indicators_mocker = mocker.patch.object(demisto, 'createIndicators')

    mocker.patch.object(
        Client, 'build_iterator', side_effect=[
            (
                [{'sha256_hash': '1234'}, {'sha256_hash': '12345'}, {'sha256_hash': '123456'}],
                True
            ),
            (
                [],
                True
            )
        ]
    )

    main()

    assert create_indicators_mocker.call_args.args[0] == [
        {
            'type': 'File', 'fields': {'tags': [], 'downloadurl': 'https://bazaar.abuse.ch/sample/1234/'},
            'value': '1234', 'rawJSON': {'sha256_hash': '1234'}
        },
        {
            'type': 'File', 'fields': {'tags': [], 'downloadurl': 'https://bazaar.abuse.ch/sample/12345/'},
            'value': '12345', 'rawJSON': {'sha256_hash': '12345'}
        },
        {
            'type': 'File', 'fields': {'tags': [], 'downloadurl': 'https://bazaar.abuse.ch/sample/123456/'},
            'value': '123456', 'rawJSON': {'sha256_hash': '123456'}
        }
    ]


def test_custom_build_relationships():
    """
    Given
    - no feed config

    When
    - Running custom_build_relationships function

    Then
    - Ensure the relationship list is empty
    """
    from MalwareBazaarFeed import custom_build_relationships

    assert custom_build_relationships(feed_config={}, _mapping={}, indicator_data={}) == []


def test_custom_mapping_function():
    """
    Given
    - mapping, attributes and indicators

    When
    - Running custom_mapping_function function

    Then
    - Ensure indicator dict is updated
    """
    from MalwareBazaarFeed import custom_mapping_function
    mapping = {'a': 'a.b', 'c': 'c', 'd': 'd'}
    attributes = {'a': 'a', 'b': 'b', 'c': 'c'}
    indicator = {'fields': {'a': [{'a': 'a'}], 'b': 'b'}}

    custom_mapping_function(mapping, indicator, attributes)

    assert indicator == {'fields': {'a': [{'a': 'a', 'b': 'a'}], 'b': 'b', 'c': 'c'}}


@pytest.mark.parametrize("err_msg", [
    ("502 Server Error: Bad Gateway for url: https://test/v1/"),
    ("Connection broken: IncompleteRead(3923 bytes read, 4269 more expected")
])
def test_exceptions_handle_known_exception(mocker, err_msg):
    """
    In the main function of the MalwareBazaar Feed we handle exceptions as follows:
        - Catch the exceptions occurred during the run of the 'feed_main' function.
        - Check if the exception is a known error.
        - If yes - wait 10 seconds and start  retry of the 'feed_main' function.
    This test tests this logic.

    Given
        - A mock response of the 'feed_main' function that raises a known exception.
        1. The exception is a known 502 server error.
        2. The exception is a known connection error.

    When
        - Running main flow for the fetching indicators command.

    Then
        - Verify that the exception is caught and the 'feed_main' function is called once again.
        - Verify that the error logs are as expected.
    """
    from MalwareBazaarFeed import main

    mocker.patch.object(demisto, 'params', return_value={})
    mocker.patch.object(demisto, 'command', return_value='fetch-indicators')
    error_log_mock = mocker.patch.object(demisto, 'error')

    def mock_feed_main():
        raise HTTPError(err_msg)

    feed_main_mock = mocker.patch('MalwareBazaarFeed.feed_main', side_effect=mock_feed_main)

    with pytest.raises(Exception):
        main()
        assert "An Error Occurred during the run of the 'fetch-indicators' command" in error_log_mock.call_args_list[0][0][0]
        assert err_msg in error_log_mock.call_args_list[0][0][0]
        assert "Retrying in 10 seconds..." in error_log_mock.call_args_list[1][0][0]
        assert feed_main_mock.call_count == 2


def test_exceptions_handle_unknown_exception(mocker):
    """
    In the main function of the MalwareBazaar Feed we handle exceptions as follows:
        - Catch the exceptions occurred during the run of the 'feed_main' function.
        - Check if the exception is a known error.
        - If yes - wait 10 seconds and start  retry of the 'feed_main' function.
    This test tests this logic.

    Given
        - A mock response of the 'feed_main' function that raises an un-known exception.

    When
        - Running main flow for the fetching indicators command.

    Then
        - Verify that the exception is caught but the 'feed_main' function called only once.
        - Verify that the original error is raised.
    """
    from MalwareBazaarFeed import main

    mocker.patch.object(demisto, 'params', return_value={})
    mocker.patch.object(demisto, 'command', return_value='fetch-indicators')
    error_log_mock = mocker.patch.object(demisto, 'error')

    def mock_feed_main():
        raise HTTPError("[429] Failed with error: [parent] Data too large, data for [<http_request>] "
                        "would be [1033445328/985.5mb], which is larger than the limit of [1020054732/972.7mb]")

    feed_main_mock = mocker.patch('MalwareBazaarFeed.feed_main', side_effect=mock_feed_main)

    with pytest.raises(Exception) as e:
        main()
        assert "[429] Failed with error: [parent] Data too large, data for [<http_request>]" in str(e)
        assert len(error_log_mock.call_args_list) == 0
        assert feed_main_mock.call_count == 1
