commonfields:
  id: 5aabc7ab-c39f-4316-8342-480ad8e169a2
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: 958aac7a-666b-4065-82a5-3cebc2c67363
    packName: cs command and scripting
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/python3:3.12.7.117934
enabled: true
engineinfo: {}
mainengineinfo: {}
name: cspresentgrandparentprocess
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  def convert_json_to_markdown_table(json_data):
        # Check if the input is valid JSON
        if not isinstance(json_data, dict):
            raise ValueError("Input data is not a valid JSON object")

        markdown = "| ***Grand Parent Process Information*** | ***Value*** |\n"
        markdown += "| --- | ----- |\n"

        # Loop through the JSON and format it into a table
        for key, value in json_data.items():
            # If value is a dictionary, we will format it as a JSON block
            if isinstance(value, dict):
                value = f"```json\n{json.dumps(value, indent=4)}\n```"
            # If it's a list, we join the list into a string for display
            elif isinstance(value, list):
                value = ', '.join(map(str, value))
            markdown += f"| {key} | {value} |\n"

        return markdown


  def main():
      # Fetch the dynamic context key input from the demisto args
      context_key = 'CrowdStrike'  # Get the context key from arguments
      try:
          context_value = demisto.context().get(context_key, None).get('Detection', None)
          results = []
          for idx, detection in enumerate(context_value):
              if isinstance(detection, dict) and 'grandparentprocess' in detection:
                  results.append(detection)

          if not results:
              return_results("### No policyactions data available.")


          results = results[0].get('grandparentprocess', None)
          # Set the markdown in the outputs
          # Convert the dictionary to markdown JSON format


          MD = (convert_json_to_markdown_table(results))
          return_results({
            'Type': entryTypes['note'],
            'Contents': MD,
            'ContentsFormat': formats['markdown']})
      except:
          print("No Policy Acttions were found on CrowdStrike.Detection key")

  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()
scripttarget: 0
subtype: python3
tags:
- dynamic-section
type: python
