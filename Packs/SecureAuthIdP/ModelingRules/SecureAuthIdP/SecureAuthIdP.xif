[MODEL: dataset="secureauth_idp_raw"]
alter // Extract the RFC 5424 Syslog Components 
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>"), 0)),
    syslog_headers = split(arrayindex(regextract(_raw_log, "\d{4}\-\d{2}\-\d{2}\S+\s+((?:\S+\s+){4})\["), 0), " "),
    syslog_structured_data = arrayindex(regextract(_raw_log, "\[([^\]]+)"), 0),    
    syslog_msg = arrayindex(regextract(_raw_log, "\]\s*(.+)"), 0)
| alter facility_code = floor(divide(syslog_priority, 8))
| alter syslog_severity = to_string(subtract(syslog_priority, multiply(facility_code, 8)))

| alter // Extract Syslog Header Fields 
    syslog_client = arrayindex(syslog_headers, 0), // Machine that originally sent the syslog message.
    syslog_app_name = arrayindex(syslog_headers, 1), // Device or application that originated the message. SecureAuth IdP uses the realm name here.
    syslog_process_id = arrayindex(syslog_headers, 2), // Indicates any discontinuity/disruption in syslog reporting when this value changes. Typically, the process name or ID of the syslog system is used.
    syslog_msg_id = arrayindex(syslog_headers, 3) // Identifies the type of message. SecureAuth IdP uses the Event ID here.

| alter // Extract Syslog Structured Data Fields
    appliance_id = arrayindex(regextract(syslog_structured_data, "ApplianceID=\"(\S[^\"]+)"), 0),
    appliance_machine_name = arrayindex(regextract(syslog_structured_data, "ApplianceMachineName=\"(\S[^\"]+)"), 0),
    appliance_name = arrayindex(regextract(syslog_structured_data, "Appliance=\"(\S[^\"]+)"), 0),
    api_response_http_status_code = arrayindex(regextract(syslog_structured_data, "ApiResponseHTTPStatusCode=\"(\S[^\"]+)"), 0),
    auth_reg_method = arrayindex(regextract(syslog_structured_data, "AuthRegMethod=\"(\S[^\"]+)"), 0),
    auth_reg_method_info = arrayindex(regextract(syslog_structured_data, "AuthRegMethodInfo=\"(\S[^\"]+)"), 0),
    browser_session_id = arrayindex(regextract(syslog_structured_data, "BrowserSession=\"(\S[^\"]+)"), 0),
    comment = arrayindex(regextract(syslog_structured_data, "Comment=\"(\S[^\"]+)"), 0),
    company_id = arrayindex(regextract(syslog_structured_data, "CompanyID=\"(\S[^\"]+)"), 0),
    company_name = arrayindex(regextract(syslog_structured_data, "Company=\"(\S[^\"]+)"), 0),
    destination_site_url = arrayindex(regextract(syslog_structured_data, "DestinationSiteUrl=\"(\S[^\"]+)"), 0),
    event_id = arrayindex(regextract(syslog_structured_data, "EventID=\"(\S[^\"]+)"), 0),
    hashed_user_id = arrayindex(regextract(syslog_structured_data, "HashedUserID=\"(\S[^\"]+)"), 0),
    hashed_unique_user_id = arrayindex(regextract(syslog_structured_data, "HashedUniqueUserID=\"(\S[^\"]+)"), 0),
    hostname = arrayindex(regextract(syslog_structured_data, "HostName=\"(\S[^\"]+)"), 0),
    // iana_pen = arrayindex(regextract(syslog_structured_data, "PEN=\"(\S[^\"]+)"), 0),
    product_type = arrayindex(regextract(syslog_structured_data, "ProductType=\"(\S[^\"]+)"), 0),
    realm = arrayindex(regextract(syslog_structured_data, "Realm=\"(\S[^\"]+)"), 0),
    request_duration = arrayindex(regextract(syslog_structured_data, "RequestDuration=\"(\S[^\"]+)"), 0),
    request_id = arrayindex(regextract(syslog_structured_data, "RequestID=\"(\S[^\"]+)"), 0),
    saml_consumer_site_url = arrayindex(regextract(syslog_structured_data, "SAMLConsumerSiteUrl=\"(\S[^\"]+)"), 0),
    saml_target_url = arrayindex(regextract(syslog_structured_data, "SAMLTargetUrl=\"(\S[^\"]+)"), 0),
    state_machine_id = arrayindex(regextract(syslog_structured_data, "StateMachineID=\"(\S[^\"]+)"), 0),
    is_successful = arrayindex(regextract(syslog_structured_data, "Succeed=\"(\S[^\"]+)"), 0),
    target_url = arrayindex(regextract(syslog_structured_data, "TargetUrl=\"(\S[^\"]+)"), 0),
    trx_result = arrayindex(regextract(syslog_structured_data, "TrxResult=\"(\S[^\"]+)"), 0),
    user_agent = arrayindex(regextract(syslog_structured_data, "UserAgent=\"(\S[^\"]+)"), 0),
    user_host_address = arrayindex(regextract(syslog_structured_data, "UserHostAddress=\"(\S[^\"]+)"), 0),
    user_id = arrayindex(regextract(syslog_structured_data, "UserID=\"(\S[^\"]+)"), 0),
    version = arrayindex(regextract(syslog_structured_data, "Version=\"(\S[^\"]+)"), 0),
    ws_trust_username = arrayindex(regextract(syslog_structured_data, "ws-trust-username=\"(\S[^\"]+)"), 0),
    x_ms_client_application = arrayindex(regextract(syslog_structured_data, "X-MS-Client-Application=\"(\S[^\"]+)"), 0)

| alter // Extract Syslog Message Fields  
    is_status_code_successful = arrayindex(regextract(syslog_msg, "IsSuccessStatusCode\s*\-\s*(true|false)"), 0), 
    checked_ip = arrayindex(regextract(syslog_msg, "Check if IP \'([^\']+)\'"), 0),
    reported_ip = arrayindex(regextract(syslog_msg, "Reported IP (\S+) to"), 0),
    response_time = arrayindex(regextract(syslog_msg, "ResponseTime=\'(\d+)"), 0),
    status_code = arrayindex(regextract(syslog_msg, "StatusCode:\s*(\w+)"), 0),
    xff_ip = arrayindex(regextract(syslog_msg, "X-Forwarded-For:\s*([\d\.\:a-fA-F]+)"), 0),
    xff_port = arrayindex(regextract(syslog_msg, "X-Forwarded-Port:\s*(\d+)"), 0),
    x_real_ip = arrayindex(regextract(syslog_msg, "X-Real-IP:\s*([\d\.\:a-fA-F]+)"), 0)

// Post-Extraction Processing 
| alter src_ip_addresses = arraydistinct(arraycreate(x_real_ip, xff_ip, reported_ip, checked_ip, user_host_address))
| alter 
    src_ipv4_addresses = arrayfilter(src_ip_addresses, "@element" ~= "(?:\d{1,3}\.){3}\d{1,3}"),
    src_ipv6_addresses = arrayfilter(src_ip_addresses, "@element" ~= "(?:[a-fA-F\d]{0,4}\:){7}[\wa-fA-F]{0,4}")
| alter 
    auth_reg_method = if(auth_reg_method != "NONE", auth_reg_method),
    duration_components = if(request_duration != null, split(request_duration, ".")),
    event_id = coalesce(event_id, ltrim(syslog_msg_id, "ID")),
    syslog_client_ipv4 = if(syslog_client ~= "(?:\d{1,3}\.){3}\d{1,3}", syslog_client),
    syslog_client_ipv6 = if(syslog_client ~= "(?:[a-fA-F\d]{0,4}\:){7}[\wa-fA-F]{0,4}", syslog_client),
    user_domain = arrayindex(regextract(user_id, "[\w\-]+\@(\S+)") , 0)

| alter // Duration Calculation (Foramt HH:MM:SS.sssssss)
    ms = if(request_duration != null,to_integer(arrayindex(regextract(arrayindex(duration_components, 1), "(\d{3})"), 0))), 
    hours_minutes_seconds = if(request_duration != null, split(arrayindex(duration_components, 0), ":"))
| alter 
    hour_part_seconds = if(request_duration != null, multiply(to_integer(arrayindex(hours_minutes_seconds, 0)), 3600)),
    minute_part_seconds = if(request_duration != null, multiply(to_integer(arrayindex(hours_minutes_seconds, 1)), 60)),
    seconds = if(request_duration != null, to_integer(arrayindex(hours_minutes_seconds, 2)))
| alter total_request_duration_ms = add(ms, multiply(1000, add(seconds, add(minute_part_seconds, hour_part_seconds))))

| alter // XDM Mapping
    xdm.alert.severity = syslog_severity,
    xdm.auth.auth_method = auth_reg_method,
    xdm.auth.mfa.client_details = auth_reg_method_info,
    xdm.auth.mfa.method = auth_reg_method,
    xdm.event.description = if(syslog_msg != null and comment != null, concat(syslog_msg, ". ", comment, coalesce(syslog_msg, comment))),
    xdm.event.duration = coalesce(to_integer(total_request_duration_ms), to_integer(response_time)),
    xdm.event.id = event_id,
    xdm.event.log_level = if(syslog_severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY, syslog_severity = "1", XDM_CONST.LOG_LEVEL_ALERT, syslog_severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, syslog_severity = "3", XDM_CONST.LOG_LEVEL_ERROR, syslog_severity = "4", XDM_CONST.LOG_LEVEL_WARNING, syslog_severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, syslog_severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, syslog_severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, syslog_severity),
    xdm.event.outcome = if(is_successful = "True" or trx_result ~= "success" or syslog_msg ~= "Success|validation passed" or is_status_code_successful = "true", XDM_CONST.OUTCOME_SUCCESS, is_successful = "False" or is_status_code_successful = "false", XDM_CONST.OUTCOME_FAILED),
    xdm.intermediate.agent.version = version,
    xdm.intermediate.host.hostname = hostname, 
    xdm.intermediate.host.device_id = appliance_id,
    xdm.intermediate.ipv4 = syslog_client_ipv4,
    xdm.intermediate.ipv6 = syslog_client_ipv6,
    xdm.intermediate.process.pid = to_integer(syslog_process_id),
    xdm.network.http.http_header.header = if(x_ms_client_application != null, "X-MS-Client-Application"),
    xdm.network.http.http_header.value = x_ms_client_application,
    xdm.network.http.response_code = coalesce(api_response_http_status_code, status_code),
    xdm.network.session_id = browser_session_id,
    xdm.observer.name = if(appliance_name != null and appliance_machine_name != null, concat(appliance_name, " (", appliance_machine_name, ")"), coalesce(appliance_name, appliance_machine_name)),
    xdm.observer.unique_identifier = appliance_id,
    xdm.observer.version = version,
    xdm.session_context_id = request_id,
    xdm.source.application.name = x_ms_client_application,
    xdm.source.ipv4 = arrayindex(src_ipv4_addresses, 0),
    xdm.source.ipv6 = arrayindex(src_ipv6_addresses, 0),
    xdm.source.host.ipv4_addresses = src_ipv4_addresses, 
    xdm.source.host.ipv6_addresses = src_ipv6_addresses, 
    xdm.source.user_agent = user_agent,
    xdm.source.user.domain = user_domain,
    xdm.source.user.identifier = coalesce(hashed_unique_user_id, hashed_user_id, user_id, ws_trust_username),
    xdm.source.user.username = coalesce(user_id, ws_trust_username),
    xdm.source.zone = if(company_id != null and company_name != null, concat(company_id, " (", company_name, ")"), coalesce(company_id, company_name)),
    xdm.target.domain = if(realm != null, realm, syslog_app_name != "-", syslog_app_name),
    xdm.target.port = to_integer(xff_port),
    xdm.target.resource.id = state_machine_id,
    xdm.target.resource.name = destination_site_url,
    xdm.target.resource.type = product_type,
    xdm.target.url = coalesce(target_url, saml_target_url, saml_consumer_site_url, destination_site_url);