commonfields:
  id: PWEventPcapDownload
  version: -1
name: PWEventPcapDownload
script: >
  from time import sleep

  res = []

  dArgs = demisto.args()

  burstSize = demisto.get(dArgs, 'burstsize')

  burstSize = int(burstSize) if burstSize else 10

  remaining = burstSize

  waitSeconds = demisto.get(dArgs, 'waitms')

  waitSeconds = float(waitSeconds) / 1000.0 if waitSeconds else 0.5

  dArgs["using-brand"] = "ProtectWise"

  eventIDs = argToList(demisto.get(dArgs, 'eventId'))

  for eid in eventIDs:
      dArgs['eventId'] = eid
      dArgs['filename'] = eid + '.pcap'
      if remaining:
          remaining -= 1
      else:
          sleep(waitSeconds)
          remaining = burstSize
      resCmd = demisto.executeCommand("event-pcap-download", dArgs)
      try:
         res += resCmd
      except Exception as ex:
          res.append({"Type": entryTypes["error"], "ContentsFormat": formats["text"],
                      "Contents": "Error occurred while parsing output from command. Exception info:\n" + str(ex) + "\n\nInvalid output:\n" + str(resCmd)})
  demisto.results(res)
type: python
subtype: python2
tags:
- protectwise
comment: Download PCAPs related to the requested events. Supports rate throttling.
system: true
args:
- name: eventId
  required: true
  default: true
  description: Event ID(s) separated by commas
- name: filename
  description: Optionally provide a filename for the download
- name: burstsize
  description: Download <burstsize> files every time, and wait <waitms> milliseconds each time. Defaults are 10 files and 500ms.
- name: waitms
  description: Download <burstsize> files every time, and wait <waitms> milliseconds each time. Defaults are 10 files and 500ms.
scripttarget: 0
dependson:
  must:
  - ProtectWise|||event-pcap-download
timeout: 0s
tests:
- Protectwise-Test
fromversion: 5.0.0
