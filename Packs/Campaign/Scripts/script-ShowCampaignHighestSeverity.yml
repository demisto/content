commonfields:
  id: ShowCampaignHighestSeverity
  version: -1
name: ShowCampaignHighestSeverity
script: |-
  INFORMATIONAL_SEVERITY_COLOR = "rgb(64,65,66)"  # Black
  LOW_SEVERITY_COLOR = "rgb(29,184,70)"  # Green
  MEDIUM_SEVERITY_COLOR = "rgb(209,125,0)"  # Orange
  HIGH_SEVERITY_COLOR = "rgb(209,60,60)"  # Red
  CRITICAL_SEVERITY_COLOR = "rgb(143,0,14)"  # Dark Red

  COLORS_AND_NAMES = {
      0: {'color': INFORMATIONAL_SEVERITY_COLOR, 'dsc': 'Unknown'},
      0.5: {'color': INFORMATIONAL_SEVERITY_COLOR, 'dsc': 'Informational'},
      1: {'color': LOW_SEVERITY_COLOR, 'dsc': 'Low'},
      2: {'color': MEDIUM_SEVERITY_COLOR, 'dsc': 'Medium'},
      3: {'color': HIGH_SEVERITY_COLOR, 'dsc': 'High'},
      4: {'color': CRITICAL_SEVERITY_COLOR, 'dsc': 'Critical'},
  }


  def get_incident_severity(incident_id):
      data = demisto.executeCommand("getIncidents", {'id': incident_id})
      try:
          for key_or_index in [0, 'Contents', 'data', 0, 'severity']:
              data = data[key_or_index]
      except:
          return 0
      return data


  def incidents_id():
      incident_id = demisto.incidents()[0]['id']
      context = demisto.executeCommand("getContext", {'id': incident_id})[0]
      incidents = dict_safe_get(context, ['Contents', 'context', 'EmailCampaign', 'incidents'], [])
      for incident in incidents:
          yield incident['id']


  def main():
      try:
          # Getting incident context:
          highest_severity = max(0, demisto.incidents()[0].get('severity', 0))
          for incident_id in incidents_id():
              highest_severity = max(highest_severity, get_incident_severity(incident_id))
          # Determine color:
          color = COLORS_AND_NAMES[highest_severity]['color']
          description = COLORS_AND_NAMES[highest_severity]['dsc']
          html = f"<div style='text-align:center; font-size:17px; padding: 15px;'> Highest Severity</br> <div style='font-size:32px; color:{color};'> {description} </div></div>"
      except Exception as ex:
          html = f"<div style='text-align:center; padding: 20px;'> <div> No severity </div>"

      # Return the data to the layout:
      demisto.results({
          'ContentsFormat': EntryFormat.HTML,
          'Type': EntryType.NOTE,
          'Contents': html
      })


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()
type: python
tags:
- dynamic-section
comment: Displays the highest severity among the incidents that make up the phishing campaign.
enabled: true
scripttarget: 0
subtype: python3
runonce: false
dockerimage: demisto/python3:3.9.7.24076
runas: DBotWeakRole
fromversion: 6.0.0
tests:
- No tests (auto formatted)
