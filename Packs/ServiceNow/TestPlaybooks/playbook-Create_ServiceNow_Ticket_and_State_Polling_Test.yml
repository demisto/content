id: Create ServiceNow Ticket and State Polling Test
version: -1
name: Create ServiceNow Ticket and State Polling Test
description: "Create ServiceNow Ticket allows you to open new tickets as a task from\
  \ a parent playbook.\nIt is an option to set sync with the ticket's state, which\
  \ will wait for the ticket to resolve or close with StatePolling. \nYou can alternatively\
  \ select to mirror the ServiceNow ticket and incident fields. Mirroring includes\
  \ its equivalent for StatePolling -  FieldPolling.\nTo apply either of these options,\
  \ set the SyncTicket value in the playbook inputs to one of the following options:\
  \ \n1. StatePolling\n2. Mirror\n3. Leave Blank to use none."
starttaskid: "0"
tasks:
  "0":
    id: "0"
    taskid: a0382e94-db15-42d5-8555-1b9da12dbe02
    type: start
    task:
      id: a0382e94-db15-42d5-8555-1b9da12dbe02
      version: -1
      name: ""
      iscommand: false
      brand: ""
      description: ''
    nexttasks:
      '#none#':
      - "3"
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 450,
          "y": 60
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "3":
    id: "3"
    taskid: ae4ddf63-1283-46ce-8c36-31173098968b
    type: regular
    task:
      id: ae4ddf63-1283-46ce-8c36-31173098968b
      version: -1
      name: Create ServiceNow ticket
      description: Creates new ServiceNow ticket.
      script: ServiceNow v2|||servicenow-create-ticket
      type: regular
      iscommand: true
      brand: ServiceNow v2
    nexttasks:
      '#none#':
      - "9"
    scriptarguments:
      active: {}
      activity_due: {}
      additional_assignee_list: {}
      additional_fields: {}
      approval: {}
      approval_history: {}
      approval_set: {}
      assigned_to: {}
      assignment_group:
        complex:
          root: inputs.AssignmentGroup
      business_duration: {}
      business_service: {}
      business_stc: {}
      calendar_duration: {}
      caller: {}
      caller_id:
        complex:
          root: ServiceNow.User
          accessor: ID
      category:
        complex:
          root: inputs.Category
      caused_by: {}
      change_type: {}
      close_code: {}
      close_notes: {}
      closed_at: {}
      closed_by: {}
      cmdb_ci: {}
      comments:
        complex:
          root: inputs.Comment
      comments_and_work_notes: {}
      company: {}
      contact_type: {}
      correlation_display: {}
      correlation_id: {}
      custom_fields: {}
      delivery_plan: {}
      description: {}
      display: {}
      due_date: {}
      escalation: {}
      expected_start: {}
      follow_up: {}
      group_list: {}
      impact:
        complex:
          root: inputs.Impact
      incident_state: {}
      input_display_value: {}
      knowledge: {}
      location: {}
      made_sla: {}
      notify: {}
      number: {}
      opened_at: {}
      order: {}
      parent: {}
      parent_incident: {}
      priority: {}
      problem_id: {}
      reassignment_count: {}
      reopen_count: {}
      resolved_at: {}
      resolved_by: {}
      rfc: {}
      severity:
        complex:
          root: 'inputs.Severity '
      short_description:
        complex:
          root: inputs.ShortDescription
      sla_due: {}
      state: {}
      subcategory: {}
      sys_updated_by: {}
      sys_updated_on: {}
      template: {}
      ticket_type: {}
      urgency:
        complex:
          root: inputs.Urgency
      user_input: {}
      using:
        complex:
          root: inputs.InstanceName
      watch_list: {}
      work_end: {}
      work_notes: {}
      work_notes_list: {}
      work_start: {}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 450,
          "y": 220
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "8":
    id: "8"
    taskid: a90ee65d-6502-423e-8527-feb58987e15d
    type: title
    task:
      id: a90ee65d-6502-423e-8527-feb58987e15d
      version: -1
      name: Done
      type: title
      iscommand: false
      brand: ""
      description: ''
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 450,
          "y": 960
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "9":
    id: "9"
    taskid: ccbdd637-fa6d-4c61-8c8f-5335843393b4
    type: condition
    task:
      id: ccbdd637-fa6d-4c61-8c8f-5335843393b4
      version: -1
      name: Mirror/GenericPolling
      type: condition
      iscommand: false
      brand: ""
    nexttasks:
      '#default#':
      - "8"
      Mirror:
      - "11"
      State Polling:
      - "13"
      - "12"
    separatecontext: false
    conditions:
    - label: Mirror
      condition:
      - - operator: isEqualString
          left:
            value:
              complex:
                root: inputs.SyncTicket
            iscontext: true
          right:
            value:
              simple: Mirror
    - label: State Polling
      condition:
      - - operator: isEqualString
          left:
            value:
              complex:
                root: inputs.SyncTicket
            iscontext: true
          right:
            value:
              simple: StatePolling
    view: |-
      {
        "position": {
          "x": 450,
          "y": 410
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "11":
    id: "11"
    taskid: e19b8ff2-09e8-4991-8b5b-fc0e9c3af1fd
    type: playbook
    task:
      id: e19b8ff2-09e8-4991-8b5b-fc0e9c3af1fd
      version: -1
      name: Mirror ServiceNow Ticket
      description: |-
        Mirror ServiceNow Ticket is designed to serve as a sub-playbook, which enables ticket mirroring with ServiceOne.
        It will allow you to manage ServiceNow tickets in Cortex xSOAR. While data is continuously synced between ServiceNow and Cortex xSOAR, including ServiceNow schema, fields, comments, work notes, and attachments.
        To enable OoB mirroring, use the ServiceNow Create ticket  - common mappers for incoming and outgoing mirroring.

        FieldPolling - It is optional to set the FieldPolling value to true if it is desirable to wait for the ticket to resolve or close. If FieldPolling is set to true, the FieldPolling Playbook will poll for the state(ServiceNow State field) of the ServiceNow ticket until it marks as resolved/closed.

        In Addition to the Playbook, It is recommended to use the included layout for ServiceNow Ticket, which helps visualize ServiceNow ticket information in Cortex xSAOAR.
        You can add the new layout as a tab to existing layouts at the edit layout screen.
      playbookName: Mirror ServiceNow Ticket
      type: playbook
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "8"
    scriptarguments:
      'FieldPolling ':
        complex:
          root: inputs.FieldPolling
      FieldPollingInterval:
        complex:
          root: inputs.PollingInterval
      FieldPollingTimeout:
        complex:
          root: inputs.PollingTimeout
      IncidentID:
        complex:
          root: ServiceNow.Ticket
          accessor: ID
      MirrorCommentTags:
        complex:
          root: inputs.MirrorCommentTags
      MirrorDirection:
        complex:
          root: inputs.MirrorDirection
      MirrorInstanceName:
        complex:
          root: inputs.InstanceName
    separatecontext: true
    loop:
      iscommand: false
      exitCondition: ""
      wait: 1
      max: 100
    view: |-
      {
        "position": {
          "x": 820,
          "y": 630
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "12":
    id: "12"
    taskid: 1d87781e-ad25-4ba4-8b68-d4d803e85cf6
    type: playbook
    task:
      id: 1d87781e-ad25-4ba4-8b68-d4d803e85cf6
      version: -1
      name: ServiceNow Ticket State Polling
      playbookName: ServiceNow Ticket State Polling
      type: playbook
      iscommand: false
      brand: ""
      description: ''
    nexttasks:
      '#none#':
      - "8"
    scriptarguments:
      AdditionalPollingCommandName:
        complex:
          root: inputs.AdditionalPollingCommandName
      InstanceName:
        complex:
          root: inputs.InstanceName
      Interval:
        complex:
          root: inputs.PollingInterval
      TicketNumber:
        complex:
          root: ServiceNow.Ticket
          accessor: Number
      Timeout:
        complex:
          root: inputs.PollingTimeout
    separatecontext: true
    loop:
      iscommand: false
      exitCondition: ""
      wait: 1
      max: 100
    view: |-
      {
        "position": {
          "x": 70,
          "y": 630
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "13":
    id: "13"
    taskid: 73a6dfdc-cac6-45bf-8c1d-e7ef670278c3
    type: regular
    task:
      id: 73a6dfdc-cac6-45bf-8c1d-e7ef670278c3
      version: -1
      name: Sleep 1 min
      description: Sleep for X seconds
      scriptName: Sleep
      type: regular
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "14"
    scriptarguments:
      seconds:
        simple: "60"
    separatecontext: false
    view: |-
      {
        "position": {
          "x": -380,
          "y": 630
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "14":
    id: "14"
    taskid: 6be21ede-9232-4eee-86b2-6a9a8569d63e
    type: regular
    task:
      id: 6be21ede-9232-4eee-86b2-6a9a8569d63e
      version: -1
      name: Close Ticket
      description: Updates the specified ticket.
      script: ServiceNow v2|||servicenow-update-ticket
      type: regular
      iscommand: true
      brand: ServiceNow v2
    nexttasks:
      '#none#':
      - "8"
    scriptarguments:
      active: {}
      activity_due: {}
      additional_assignee_list: {}
      additional_fields: {}
      approval: {}
      approval_history: {}
      approval_set: {}
      assigned_to: {}
      assignment_group: {}
      business_duration: {}
      business_service: {}
      business_stc: {}
      calendar_duration: {}
      caller: {}
      caller_id: {}
      category: {}
      caused_by: {}
      change_type: {}
      close_code:
        simple: Solved (Permanently)
      close_notes:
        simple: Solved
      closed_at: {}
      closed_by: {}
      cmdb_ci: {}
      comments: {}
      comments_and_work_notes: {}
      company: {}
      contact_type: {}
      correlation_display: {}
      correlation_id: {}
      custom_fields: {}
      delivery_plan: {}
      description: {}
      display: {}
      due_date: {}
      escalation: {}
      expected_start: {}
      follow_up: {}
      group_list: {}
      id:
        complex:
          root: ServiceNow.Ticket
          accessor: ID
      impact: {}
      incident_state: {}
      input_display_value: {}
      knowledge: {}
      location: {}
      made_sla: {}
      notify: {}
      number: {}
      order: {}
      parent: {}
      parent_incident: {}
      priority: {}
      problem_id: {}
      reassignment_count: {}
      reopen_count: {}
      resolved_at: {}
      resolved_by: {}
      rfc: {}
      severity: {}
      short_description: {}
      sla_due: {}
      state:
        simple: 7 - Closed
      subcategory: {}
      sys_updated_by: {}
      sys_updated_on: {}
      ticket_type: {}
      urgency: {}
      user_input: {}
      watch_list: {}
      work_end: {}
      work_notes: {}
      work_notes_list: {}
      work_start: {}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": -380,
          "y": 790
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
view: |-
  {
    "linkLabelsPosition": {
      "9_11_Mirror": 0.52,
      "9_12_State Polling": 0.46,
      "9_8_#default#": 0.61
    },
    "paper": {
      "dimensions": {
        "height": 965,
        "width": 1580,
        "x": -380,
        "y": 60
      }
    }
  }
inputs:
- key: Category
  value:
    simple: Hardware
  required: false
  description: Set the category of the ServiceNow Ticket.
  playbookInputQuery:
- key: AssignmentGroup
  value:
    simple: Hardware
  required: false
  description: 'The group to assign the new ticket to '
  playbookInputQuery:
- key: ShortDescription
  value:
    simple: short
  required: false
  description: Set A short description of the ticket.
  playbookInputQuery:
- key: Impact
  value:
    simple: "2"
  required: false
  description: Set Impact for the new ticket, leave empty for ServiceNow default impact.
  playbookInputQuery:
- key: Urgency
  value:
    simple: "2"
  required: false
  description: Set urgency to the new ticket, leave empty for ServiceNow default urgency.
  playbookInputQuery:
- key: 'Severity '
  value:
    simple: "2"
  required: false
  description: Set severity to the new ticket, leave empty for ServiceNow default
    severity.
  playbookInputQuery:
- key: Comment
  value:
    simple: Comment
  required: false
  description: Add a comment for the created ticket.
  playbookInputQuery:
- key: SyncTicket
  value:
    simple: StatePolling
  required: false
  description: "Set the value of the desired sync method with ServiceNow Ticket. you\
    \ can choose one of three options:\n1. StatePolling\n2. Mirror \n3. Blank for\
    \ none \n\nGenericPolling uses as cold sync, which polls for the state of the\
    \ ticket.\nGenericPoliing will run until the ticket state is either resolved or\
    \ closed. \n\nMirror - You can use the Mirror option to perform a full sync with\
    \ ServiceNow Ticket. The ticket data is synced automatically between ServiceNow\
    \ and Cortex xSOAR with the ServiceNow mirror feature.\nIf this option is selected,\
    \ FieldPolling is true by default. "
  playbookInputQuery:
- key: PollingInterval
  value:
    simple: "1"
  required: false
  description: |-
    Set interval time for the polling to run
    (In minutes)
  playbookInputQuery:
- key: PollingTimeout
  value:
    simple: "10"
  required: false
  description: |-
    Set the amount of time to poll the status of the ticket before declaring a timeout and resuming the playbook.
    (In minutes)
  playbookInputQuery:
- key: AdditionalPollingCommandName
  value:
    simple: Using
  required: false
  description: "In this use case, Additional polling commands are relevant when using\
    \ StatePolling, and there is more than one ServiceNow instance. It will specify\
    \ the polling command to use a specific instance to run on. \nIf so, please add\
    \ \"Using\" to the value. \nThe playbook will then take the instance name as the\
    \ instance to use. "
  playbookInputQuery:
- key: InstanceName
  value:
    complex:
      root: modules
      filters:
      - - operator: isEqualString
          left:
            value:
              simple: modules.state
            iscontext: true
          right:
            value:
              simple: active
      - - operator: isEqualString
          left:
            value:
              simple: modules.brand
            iscontext: true
          right:
            value:
              simple: ServiceNow v2
      accessor: name
  required: false
  description: |
    Set the ServiceNow Instance that will be used for mirroring/running polling commands.
  playbookInputQuery:
- key: MirrorDirection
  value:
    simple: Both
  required: false
  description: "Set the mirror direction, should be one of the following: \n1. Out\n\
    2. Both"
  playbookInputQuery:
- key: MirrorCommentTags
  value:
    simple: comments,work_notes,ForServiceNow
  required: false
  description: Set tags for mirror comments and files to ServiceNow.
  playbookInputQuery:
- key: FieldPolling
  value:
    simple: "true"
  required: false
  description: |-
    Set the value to true or false to determine if the paybook will execute the FieldPolling sub playbook.
    It is useful when it is needed to wait for the ServiceNow ticket to be resolved and continue the parent playbook.
    FieldPolling will run until the ticket state is either resolved or closed.
  playbookInputQuery:
outputs: []
fromversion: 6.0.0
