import demistomock as demisto
from CommonServerPython import *  # noqa # pylint: disable=unused-wildcard-import
from CommonServerUserPython import *  # noqa

import urllib3
from dateparser import parse
from datetime import datetime, timedelta
import time

# Disable insecure warnings
urllib3.disable_warnings()  # pylint: disable=no-member2

''' CONSTANTS '''

DATE_FORMAT = "%Y-%m-%dT%H:%M:%S.000"  # ISO8601 format with UTC, default in XSOAR
DEFAULT_LIMIT = 100


def test_module(client: BaseClient, params: Dict[str, Any]):

    api_key = params.get('apiKey')
    try:
        params = {
            # Test using everyone's favorite CVE!
            "cveId": "CVE-2021-44228"
        }
        if api_key:
            headers = {
                "apiKey": api_key
            }
        res = client._http_request('GET', full_url='https://services.nvd.nist.gov/rest/json/cves/2.0/', params=params,
                                   headers=headers)
        if "error" in res:
            return_error((res.get('error')))    # noqa: UP034
        elif "resultsPerPage" in res:
            return_results('ok')
    except Exception as err:
        raise DemistoException(err)


def fetch_indicators_command(client, params):
    command = demisto.command()
    api_key = params.get('apiKey')
    virtual_match_string = params.get('virtualMatchString')
    cvss_v2_metrics = params.get('cvssV2Metrics')
    cvss_v2_severity = params.get('cvssV2Severity')
    cvss_v3_metrics = params.get('cvssV3Metrics')
    cvss_v3_severity = params.get('cvssV3Severity')
    history = int(params.get('history'))
    exceeds_span = True
    url = "/rest/json/cves/2.0/"
    now = datetime.utcnow()
    startIndex = 0
    resultsPerPage = 2000
    data_items = []  # type: ignore
    last_run_data = demisto.getLastRun()

    # If there is no last run date, use the history specified in the params
    if "lastRun" not in last_run_data or command == 'nvd-get-indicators':
        last_run = (now - timedelta(days=history))
    else:
        last_run = parse(last_run_data.get('lastRun'))  # type: ignore

    lastModStartDate = last_run
    lastModEndDate = now

    # API calls can only span 120 days, so we should loop if the history
    # parameter is greater than this
    iteration = 0
    
    while exceeds_span and lastModEndDate and lastModStartDate:
        delta = (lastModEndDate - lastModStartDate).days
        if delta > 120:
            lastModEndDate = lastModStartDate + timedelta(days=120)
        else:
            exceeds_span = False
        params = {
            "lastModStartDate": lastModStartDate.strftime(DATE_FORMAT),
            "lastModEndDate": lastModEndDate.strftime(DATE_FORMAT),
            "startIndex": startIndex,
            "resultsPerPage": resultsPerPage
        }
        if api_key:
            headers = {
                "apiKey": api_key
            }
        if cvss_v2_metrics:
            params['cvssV2Metrics'] = cvss_v2_metrics
        if cvss_v2_severity:
            params['cvssV2Severity'] = cvss_v2_severity
        if cvss_v3_metrics:
            params['cvssV3Metrics'] = cvss_v3_metrics
        if cvss_v3_severity:
            params['cvssV3Severity'] = cvss_v3_severity
        if virtual_match_string:
            params['virtualMatchString'] = virtual_match_string

        total_results = 1
        collection_count = 0

        # Collect all the indicators together
        while collection_count < total_results:

            demisto.debug(print(f'Collection Count: {collection_count}'))  # noqa: T201
            demisto.debug(print(f'Total Results: {total_results}\nDataItems: ' + str(len(data_items))))  # noqa: T201
            demisto.debug(print('Iteration: ' + str(iteration)))  # noqa: T201

            try:
                res = client._http_request('GET', url, params=params, headers=headers, timeout=300)
                # Check to see if there are any errors
                if "error" in res:
                    return_error(res.get('error'))
                total_results = res.get('totalResults', 0)

                # resultsPerPage = res.get('resultsPerPage', 0)
                if total_results:
                    data_items += res.get('vulnerabilities')

                params['startIndex'] += resultsPerPage
                collection_count += resultsPerPage
                iteration += 1
            except Exception as e:
                print(e)  ## noqa: T201
            finally:
                # Prevent rate-limiting and adhere to NVD recommendations for query frequency
                time.sleep(.5)

        lastModStartDate = lastModEndDate
        lastModEndDate = now

    # If this is nvd-get-indicators command:
    if command == 'nvd-get-indicators':
        if data_items:
            outputs = [
                {
                    "id": x.get('cve').get('vulnerabilities').get('id'),
                    "description": x.get('vulnerabilities').get('cve').get('descriptions').get('value')
                }
                for x in data_items]

            command_results = CommandResults(
                outputs_prefix='CVE',
                outputs_key_field='id',
                outputs=data_items,
                readable_output=tableToMarkdown("National Vulnerability Database CVEs:", outputs)
            )
        return_results(command_results)

    # Else if this is fetch-indicators
    elif command == 'fetch-indicators':
        indicators = []

        if data_items:
            for item in data_items:
                if "** REJECT **" not in item.get('cve').get('descriptions')[0].get('value'):
                    indicator = {}
                    fields = {}
                    metrics = []
                    cpes = []
                    refs = []

                    indicator["value"] = item.get('cve').get('id')

                    # Set up indicator fields
                    fields["description"] = item.get('cve').get('descriptions')[0].get('value')
                    fields["cvemodified"] = item.get('cve').get('lastModified')
                    fields["published"] = item.get('cve').get('published')
                    fields["trafficlightprotocol"] = demisto.params().get('tlp_color')
                    fields["updateddate"] = item.get('cve').get('lastModified')
                    fields["vulnerabilities"] = item.get('cve').get('weaknesses')

                    # Process references
                    if (len(item.get('cve').get('references')) > 1):
                        for ref in item.get('cve').get('references'):
                            url = ref.get('url')
                            source = ref.get('source')
                            refs.append({'title': indicator['value'], 'source': source, 'link': url})
                    elif (len(item.get('cve').get('references')) == 1):
                        url = item.get('cve').get('references')[0].get('url')
                        source = item.get('cve').get('references')[0].get('source')
                        refs.append({'title': indicator['value'], 'source': source, 'link': url})
                    else:
                        pass

                    fields["publications"] = refs

                    # Process CPEs
                    if "configurations" in item.get('cve'):
                        for conf in item.get('cve').get('configurations'):
                            for node in conf['nodes']:
                                for cpe in node['cpeMatch']:
                                    cpes.append({"CPE": cpe['criteria']})
                        fields["vulnerableproducts"] = cpes

                    # Check for which CVSS Metric scoring data is available in the CVE response
                    if "cvssMetricV31" in item.get('cve').get('metrics'):
                        fields["cvssscore"] = item.get('cve').get('metrics').get('cvssMetricV31')[0].get('impactScore')
                        for key, value in item.get('cve').get('metrics').get('cvssMetricV31')[0].items():
                            if key == "cvssData":
                                cvss = item.get('cve').get('metrics').get('cvssMetricV31')[0]['cvssData']
                                for newItem in cvss:
                                    metrics.append({"metrics": "cvss-v31-" + str(newItem), "value": cvss[newItem]})
                            else:
                                metrics.append({"metrics": "cvss-v31-" + str(key), "value": value})
                    if "cvssMetricV30" in item.get('cve').get('metrics'):
                        fields["cvssscore"] = item.get('cve').get('metrics').get('cvssMetricV30')[0].get('impactScore')
                        for key, value in item.get('cve').get('metrics').get('cvssMetricV30')[0].items():
                            if key == "cvssData":
                                cvss = item.get('cve').get('metrics').get('cvssMetricV30')[0]['cvssData']
                                for newItem in cvss:
                                    metrics.append({"metrics": "cvss-v3-" + str(newItem), "value": cvss[newItem]})
                            else:
                                metrics.append({"metrics": "cvss-v3-" + str(key), "value": value})
                    if "cvssMetricV2" in item.get('cve').get('metrics'):
                        fields["cvssscore"] = item.get('cve').get('metrics').get('cvssMetricV2')[0].get('impactScore')
                        fields["cvssvector"] = item.get('cve').get('metrics').get('cvssMetricV2')[0].get('cvssData')\
                            .get('vectorString')
                        fields["sourceoriginalseverity"] = item.get('cve').get('metrics').get('cvssMetricV2')[0]\
                            .get('impactScore')
                        for key, value in item.get('cve').get('metrics').get('cvssMetricV2')[0].items():
                            if key == "cvssData":
                                cvss = item.get('cve').get('metrics').get('cvssMetricV2')[0]['cvssData']
                                for newItem in cvss:
                                    metrics.append({"metrics": "cvss-v2-" + str(newItem), "value": cvss[newItem]})
                            else:
                                metrics.append({"metrics": "cvss-v2-" + str(key), "value": value})

                    fields["cvsstable"] = metrics
                    indicator["type"] = FeedIndicatorType.CVE
                    indicator["rawJSON"] = item
                    indicator["fields"] = fields
                    indicator["score"] = 0

                    # Append newly formatted indicator to list
                    indicators.append(indicator)

        """demisto.debug(print("----- DATA_ITEMS[20] -----"))  # noqa: T201
        demisto.debug(print(data_items[20]))  # noqa: T201
        demisto.debug(print("----- INDICATORS[20] -----"))  # noqa: T201
        demisto.debug(print(indicators[20]))  # noqa: T201"""

        # Create the indicators in batch using the indicators list, 2000 at a time
        for b in batch(indicators, batch_size=2000):
            demisto.createIndicators(b)

    # Set new integration context
    demisto.setLastRun({"lastRun": now.isoformat()})


''' MAIN FUNCTION '''

# COMMAND CONSTANTS

commands = {
    'test-module': test_module,
    'fetch-indicators': fetch_indicators_command,
    'nvd-get-indicators': fetch_indicators_command
}


def main() -> None:
    params = demisto.params()
    base_url = "https://services.nvd.nist.gov"
    verify_cert = not params.get('insecure', False)
    proxy = params.get('proxy', False)
    command = demisto.command()
    demisto.debug(f'Command being called is {command}')
    try:
        client = BaseClient(
            base_url=base_url,
            verify=verify_cert,
            proxy=proxy,
        )
        commands[command](client, params)

    # Log exceptions and return errors
    except Exception as e:
        demisto.error(traceback.format_exc())  # print the traceback
        return_error(f'Failed to execute {command} command.\nError: {str(e)}')


''' ENTRY POINT '''

if __name__ in ('__main__', '__builtin__', 'builtins'):
    main()
