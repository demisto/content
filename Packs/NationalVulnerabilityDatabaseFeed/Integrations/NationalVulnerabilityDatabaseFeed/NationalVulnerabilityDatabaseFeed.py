import demistomock as demisto
from CommonServerPython import *  # noqa # pylint: disable=unused-wildcard-import
from CommonServerUserPython import *  # noqa

from typing import Dict, Any, Tuple
from datetime import datetime, timedelta

# Disable insecure warnings
requests.packages.urllib3.disable_warnings()  # pylint: disable=no-member

''' CONSTANTS '''

DATE_FORMAT = "%Y-%m-%dT%H:%M:%S:000 UTC-00:00"  # ISO8601 format with UTC, default in XSOAR
DEFAULT_LIMIT = 100


''' CLIENT CLASS '''


class Client(BaseClient):
    def get_nvd_data(self) -> list:
        res = self._http_request(method='GET', url_suffix='/xql/get_quota', json_data=data)
        return res


# =========================================== Helper Functions ===========================================#


# ========================================== Generic Query ===============================================#


def test_module(client: Client, params: Dict[str, Any]) -> str:

    try:
        client.get_xql_quota({'request_data': {}})
        return_results('ok')
    except Exception as err:
        if any(error in str(err) for error in ['Forbidden', 'Authorization', 'Unauthorized']):
            raise DemistoException('Authorization failed, make sure API Key is correctly set')
        elif 'Not Found' in str(err):
            raise DemistoException('Authorization failed, make sure the URL is correct')
        else:
            raise err


def fetch_indicators_command(client, params):
    command = demisto.command()
    get_type = params.get('type')
    now = datetime.utcnow()
    startIndex = 0
    resultsPerPage = 2000
    indicators = []

    integration_context = demisto.getIntegrationContext()
    if "lastRun" not in integration_context or command == 'nvd-get-indicators':
        last_run = (now - timedelta(days=int(params.get('history')))).strftime(DATE_FORMAT)
    else:
        last_run = integration_context.get('lastRun')

    pubStartDate = last_run
    pubEndDate = now.strftime(DATE_FORMAT)

    return_results(f"Running from {last_run}")
    params = {
        "pubStartDate": pubStartDate,
        "pubEndDate": pubEndDate,
        "startIndex": startIndex,
        "resultsPerPage": resultsPerPage
    }

    results = client._http_request('GET', f'/rest/json/{get_type.lower()}s/1.0/', params=params).get('result', {})

    # If this is a manual collection, print to the war room
    data = list()
    if command == 'nvd-get-indicators':
        if get_type == "CVE":
            for item in results.get('CVE_Items'):
                data.append(
                    {
                        "id": item.get('cve',{}).get('CVE_data_meta',{}).get('ID')
                    }
                )
        else:
            data = results.get('CPE_Items')
        command_results = CommandResults(
            outputs_prefix=f'{get_type}',
            outputs_key_field='id',
            outputs=data,
            #readable_output = tableToMarkdown(f"National Vulnerability Database {get_type}s:", data)
            )
        return_results(command_results)





    # Set new integration context
    demisto.setIntegrationContext(
        {
            "lastRun": now.strftime(DATE_FORMAT)
        }
        )



# =========================================== Built-In Queries ===========================================#


''' MAIN FUNCTION '''

# COMMAND CONSTANTS

commands = {
    'test-module': test_module,
    'fetch-indicators': fetch_indicators_command,
    'nvd-get-indicators': fetch_indicators_command
}


def main() -> None:
    args = demisto.args()
    params = demisto.params()
    base_url = "https://services.nvd.nist.gov"
    verify_cert = not params.get('insecure', False)
    proxy = params.get('proxy', False)
    command = demisto.command()
    demisto.debug(f'Command being called is {command}')
    #try:

    client = Client(
        base_url=base_url,
        verify=verify_cert,
        proxy=proxy,
    )
    commands[command](client, params)


    # Log exceptions and return errors
    #except Exception as e:
    #    demisto.error(traceback.format_exc())  # print the traceback
    #    return_error(f'Failed to execute {command} command.\nError: {str(e)}')


''' ENTRY POINT '''

if __name__ in ('__main__', '__builtin__', 'builtins'):
    main()
