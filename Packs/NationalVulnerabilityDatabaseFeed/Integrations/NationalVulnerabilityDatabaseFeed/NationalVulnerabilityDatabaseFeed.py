import demistomock as demisto
from CommonServerPython import *  # noqa # pylint: disable=unused-wildcard-import
from CommonServerUserPython import *  # noqa

import urllib3
from datetime import datetime, timedelta


# Disable insecure warnings
urllib3.disable_warnings()  # pylint: disable=no-member

''' CONSTANTS '''

DATE_FORMAT = "%Y-%m-%dT%H:%M:%S.000"  # ISO8601 format with UTC, default in XSOAR
DEFAULT_LIMIT = 100


# ========================================== Generic Query ===============================================#


def test_module(client: BaseClient, params: Dict[str, Any]):

    api_key = params.get('apiKey')
    try:
        params = {
            "cveId": "CVE-2020-22120"
        }
        if api_key:
            headers = {
                "apiKey": api_key
            }
        res = client._http_request('GET', full_url='https://services.nvd.nist.gov/rest/json/cves/2.0/', params=params,
                                   headers=headers)
        if "error" in res:
            return_error((res.get('error')))
        elif "resultsPerPage" in res:
            return_results('ok')
    except Exception as err:
        raise DemistoException(err)


def fetch_indicators_command(client, params):
    command = demisto.command()
    api_key = params.get('apiKey')
    virtual_match_string = params.get('virtualMatchString')
    cvss_v2_metrics = params.get('cvssV2Metrics')
    cvss_v2_severity = params.get('cvssV2Severity')
    cvss_v3_metrics = params.get('cvssV3Metrics')
    cvss_v3_severity = params.get('cvssV3Severity')
    history = int(params.get('history'))
    exceeds_span = True
    url = "/rest/json/cves/2.0/"
    now = datetime.utcnow()
    startIndex = 0
    resultsPerPage = 2000
    data_items = []
    last_run_data = demisto.getLastRun()

    # If there is no last run date, use the history specified in the params
    if "lastRun" not in last_run_data or command == 'nvd-get-indicators':
        last_run = (now - timedelta(days=history))
    else:
        last_run = dateparser.parse(last_run_data.get('lastRun'))  # type: ignore

    lastModStartDate = last_run
    lastModEndDate = now

    # API calls can only span 120 days, so we should loop if the history
    # parameter is greater than this
    while exceeds_span and lastModEndDate and lastModStartDate:
        delta = (lastModEndDate - lastModStartDate).days
        if delta > 120:
            lastModEndDate = lastModStartDate + timedelta(days=120)
        else:
            exceeds_span = False
        params = {
            "lastModStartDate": lastModStartDate.strftime(DATE_FORMAT),
            "lastModEndDate": lastModEndDate.strftime(DATE_FORMAT),
            "startIndex": startIndex,
            "resultsPerPage": resultsPerPage
        }
        if api_key:
            headers = {
                "apiKey": api_key
            }
        if cvss_v2_metrics:
            params['cvssV2Metrics'] = cvss_v2_metrics
        if cvss_v2_severity:
            params['cvssV2Severity'] = cvss_v2_severity
        if cvss_v3_metrics:
            params['cvssV3Metrics'] = cvss_v3_metrics
        if cvss_v3_severity:
            params['cvssV3Severity'] = cvss_v3_severity
        if virtual_match_string:
            params['virtualMatchString'] = virtual_match_string

        total_results = 1
        collection_count = 0

        # Collect all the indicators together
        while collection_count < total_results:

            demisto.debug(print(f'Collection Count: {collection_count}'))
            demisto.debug(print(f'Total Results: {total_results}\nDataItems: ' + str(len(data_items))))

            res = client._http_request('GET', url, params=params, headers=headers, timeout=300)

            # Check to see if there are any errors
            if "error" in res:
                return_error(res.get('error'))
            total_results = res.get('totalResults', 0)

            # resultsPerPage = res.get('resultsPerPage', 0)
            if total_results:
                data_items += res.get('vulnerabilities')

            params['startIndex'] += resultsPerPage
            collection_count += resultsPerPage

        lastModStartDate = lastModEndDate
        lastModEndDate = now

    # If this is nvd-get-indicators command:
    if command == 'nvd-get-indicators':
        if data_items:
            outputs = [
                {
                    "id": x.get('cve').get('vulnerabilities').get('id'),
                    "description": x.get('vulnerabilities').get('cve').get('descriptions').get('value')
                }
                for x in data_items]

            command_results = CommandResults(
                outputs_prefix='CVE',
                outputs_key_field='id',
                outputs=data_items,
                readable_output=tableToMarkdown("National Vulnerability Database CVEs:", outputs)
            )
        return_results(command_results)

    # Else if this is fetch-indicators
    elif command == 'fetch-indicators':
        indicators = []
        indicator = {}
        temp_dict = {}

        if data_items:
            for item in data_items:
                if "** REJECT **" not in item.get('cve').get('descriptions')[0].get('value'):
                    metrics = []

                    # Set up indicator fields

                    indicator["cvedescription"]: item.get('cve').get('descriptions')[0].get('value')
                    indicator["cvedescription"] = item.get('cve').get('descriptions')[0].get('value')
                    indicator["description"] = item.get('cve').get('descriptions')[0].get('value')
                    indicator["cvemodified"] = item.get('cve').get('lastModified')
                    indicator["published"] = item.get('cve').get('published')
                    indicator["trafficlightprotocol"] = demisto.params().get('tlp_color')
                    indicator["updateddate"] = item.get('cve').get('lastModified')
                    indicator["vulnerabilities"] = item.get('cve').get('weaknesses')

                    # Process references
                    if (len(item.get('cve').get('references')) > 1):
                        refs = []
                        for ref in item.get('cve').get('references'):
                            refs.append(ref.get('url'))
                    elif (len(item.get('cve').get('references')) == 1):
                        refs = item.get('cve').get('references')[0].get('url')
                    else:
                        pass

                    indicator["references"] = refs

                    # Check for which CVSS Metric scoring data is available in the CVE response
                    if "cvssMetricV31" in item.get('cve').get('metrics'):
                        indicator["cvss31score"] = item.get('cve').get('metrics').get('cvssMetricV31')[0].get('impactScore')
                        for key, value in item.get('cve').get('metrics').get('cvssMetricV31')[0].items():
                            if not isinstance(key, dict):
                                temp_dict["cvss-v31-" + str(key)] = value
                            if key == "cvssData":
                                cvss = {}
                                cvss = item.get('cve').get('metrics').get('cvssMetricV31')[0]
                                print(cvss['cvssData'])
                                for cvssKey, cvssValue in cvss['cvssData']:
                                    temp_dict["cvss-v31-cvssData-" + str(cvssKey)] = cvssValue
                            metrics.append(temp_dict)
                            temp_dict = {}    
                    if "cvssMetricV30" in item.get('cve').get('metrics'):
                        indicator["cvss30score"] = item.get('cve').get('metrics').get('cvssMetricV30')[0].get('impactScore')
                        for key, value in item.get('cve').get('metrics').get('cvssMetricV30')[0].items():
                            temp_dict["cvss-v30-" + str(key)] = value
                            metrics.append(temp_dict)
                            temp_dict = {}
                    if "cvssMetricV2" in item.get('cve').get('metrics'):
                        indicator["cvssscore"] = item.get('cve').get('metrics').get('cvssMetricV2')[0].get('impactScore')
                        indicator["cvssvector"] = item.get('cve').get('metrics').get('cvssMetricV2')[0].get('cvssData')\
                            .get('vectorString')
                        indicator["sourceoriginalseverity"] = item.get('cve').get('metrics').get('cvssMetricV2')[0]\
                            .get('impactScore')
                        for key, value in item.get('cve').get('metrics').get('cvssMetricV2')[0].items():
                            temp_dict["cvss-v2-" + str(key)] = value
                            metrics.append(temp_dict)
                            temp_dict = {}

                    indicator["cvsstable"] = metrics
                    indicator["value"] = item.get('cve').get('id')
                    indicator["type"] = FeedIndicatorType.CVE
                    indicator["rawJSON"] = item
                    indicator["rawJSON"]["value"] = item.get('cve').get('id')
                    indicator["rawJSON"]["type"] = FeedIndicatorType.CVE

                    indicators.append(indicator)

                    indicator = {}
                    metrics = []

    print("Done.")

    # Set new integration context
    demisto.setLastRun({"lastRun": now.isoformat()})


# =========================================== Built-In Queries ===========================================#


''' MAIN FUNCTION '''

# COMMAND CONSTANTS

commands = {
    'test-module': test_module,
    'fetch-indicators': fetch_indicators_command,
    'nvd-get-indicators': fetch_indicators_command
}


def main() -> None:
    params = demisto.params()
    base_url = "https://services.nvd.nist.gov"
    verify_cert = not params.get('insecure', False)
    proxy = params.get('proxy', False)
    command = demisto.command()
    demisto.debug(f'Command being called is {command}')
    try:
        client = BaseClient(
            base_url=base_url,
            verify=verify_cert,
            proxy=proxy,
        )
        commands[command](client, params)

    # Log exceptions and return errors
    except Exception as e:
        demisto.error(traceback.format_exc())  # print the traceback
        return_error(f'Failed to execute {command} command.\nError: {str(e)}')


''' ENTRY POINT '''

if __name__ in ('__main__', '__builtin__', 'builtins'):
    main()
