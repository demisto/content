id: PAN-OS - Job - Remove Malicious Domains From Sinkhole
version: -1
name: PAN-OS - Job - Remove Malicious Domains From Sinkhole
description: |-
  This playbook should be run as a job. It is used to periodically remove the specified tag from domain indicators. It should be used in conjunction with the "PAN-OS - Job - Add Malicious Domains To Sinkhole" playbook, to stop domains from being sinkholed after a certain amount of time.
  The idea is that traffic to malicious domains will not be redirected to a sinkhole address forever, as malicious domains tend to lose their malicious properties (become inactive, get taken down, or the malware using them is no longer used or maintained).
tags:
- TIM
- Sinkhole
- PAN-OS
starttaskid: "0"
tasks:
  "0":
    id: "0"
    taskid: 59964f1b-d04b-4ede-8fbe-3c5d81afe4b1
    type: start
    task:
      id: 59964f1b-d04b-4ede-8fbe-3c5d81afe4b1
      version: -1
      name: ""
      iscommand: false
      brand: ""
      description: ''
    nexttasks:
      '#none#':
      - "1"
      - "3"
      - "6"
    separatecontext: false
    continueonerrortype: ""
    view: |-
      {
        "position": {
          "x": 450,
          "y": 50
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
    isoversize: false
    isautoswitchedtoquietmode: false
  "1":
    id: "1"
    taskid: 2bc6fde6-29d1-40dc-82ed-e11d5dfe55ef
    type: regular
    task:
      id: 2bc6fde6-29d1-40dc-82ed-e11d5dfe55ef
      version: -1
      name: Get domains with sinkhole tag
      description: Gets all the domains that have the sinkhole tag.
      script: Builtin|||findIndicators
      type: regular
      iscommand: true
      brand: Builtin
    nexttasks:
      '#none#':
      - "13"
    scriptarguments:
      extend-context:
        simple: indicators=
      query:
        complex:
          root: inputs.SinkholeTag
          transformers:
          - operator: concat
            args:
              prefix:
                value:
                  simple: tags:"
              suffix:
                value:
                  simple: '" and type:Domain'
    separatecontext: false
    continueonerrortype: ""
    view: |-
      {
        "position": {
          "x": 450,
          "y": 200
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
    isoversize: false
    isautoswitchedtoquietmode: false
  "3":
    id: "3"
    taskid: 7c1c7038-aaa1-4b07-8677-4921ab9077f5
    type: regular
    task:
      id: 7c1c7038-aaa1-4b07-8677-4921ab9077f5
      version: -1
      name: Get the oldest decay date
      description: Gets the oldest date and time according to the decay period configured in the playbook input. Domains that have not been tagged since the decay time will be untagged.
      scriptName: GetTime
      type: regular
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "13"
    scriptarguments:
      contextKey:
        simple: MinimumTime
      dateFormat:
        simple: ISO
      daysAgo:
        complex:
          root: inputs.DaysTaggedBeforeRemoval
    separatecontext: false
    continueonerrortype: ""
    view: |-
      {
        "position": {
          "x": -10,
          "y": 200
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
    isoversize: false
    isautoswitchedtoquietmode: false
  "4":
    id: "4"
    taskid: 1f109241-f295-4231-8a78-ae89b78d98e1
    type: regular
    task:
      id: 1f109241-f295-4231-8a78-ae89b78d98e1
      version: -1
      name: Remove tags from the decayed domains
      description: Removes the sinkhole tag from the domains that reached the decay period according to the playbook input.
      script: Builtin|||removeIndicatorField
      type: regular
      iscommand: true
      brand: Builtin
    nexttasks:
      '#none#':
      - "5"
    scriptarguments:
      field:
        simple: tags
      fieldValue:
        complex:
          root: inputs.SinkholeTag
      indicatorsValues:
        complex:
          root: indicators.value
          filters:
          - - operator: notIn
              left:
                value:
                  simple: indicators.value
                iscontext: true
              right:
                value:
                  simple: DomainsRecentlyTagged
                iscontext: true
              ignorecase: true
          transformers:
          - operator: uniq
    separatecontext: false
    continueonerrortype: ""
    view: |-
      {
        "position": {
          "x": 680,
          "y": 1090
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
    isoversize: false
    isautoswitchedtoquietmode: false
  "5":
    id: "5"
    taskid: e35a4a0b-aca0-4f03-8572-d70614c500e5
    type: title
    task:
      id: e35a4a0b-aca0-4f03-8572-d70614c500e5
      version: -1
      name: Done
      type: title
      iscommand: false
      brand: ""
      description: ''
    separatecontext: false
    continueonerrortype: ""
    view: |-
      {
        "position": {
          "x": 450,
          "y": 1330
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
    isoversize: false
    isautoswitchedtoquietmode: false
  "6":
    id: "6"
    taskid: 70f7905f-7f25-44de-8f4c-d4adc31a80ff
    type: regular
    task:
      id: 70f7905f-7f25-44de-8f4c-d4adc31a80ff
      version: -1
      name: Save the name of the tagging event to search in history
      description: Saves the name of the event that appears in the indicator timeline section, so that it can be used when filtering past tag events and deciding whether to remove the tag from the indicator.
      scriptName: Set
      type: regular
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "13"
    scriptarguments:
      key:
        simple: TagEventName
      value:
        complex:
          root: inputs.SinkholeTag
          transformers:
          - operator: concat
            args:
              prefix:
                value:
                  simple: 'The value '
              suffix:
                value:
                  simple: ' was added to field Tags'
    separatecontext: false
    continueonerrortype: ""
    view: |-
      {
        "position": {
          "x": 970,
          "y": 200
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
    isoversize: false
    isautoswitchedtoquietmode: false
  "13":
    id: "13"
    taskid: 91bb4e5f-5008-4f03-8449-b3238c8025e3
    type: title
    task:
      id: 91bb4e5f-5008-4f03-8449-b3238c8025e3
      version: -1
      name: Filter Domains
      type: title
      iscommand: false
      brand: ""
      description: ''
    nexttasks:
      '#none#':
      - "17"
    separatecontext: false
    continueonerrortype: ""
    view: |-
      {
        "position": {
          "x": 450,
          "y": 385
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
    isoversize: false
    isautoswitchedtoquietmode: false
  "17":
    id: "17"
    taskid: b12a2bae-cb41-4c91-833c-9151d0c41f96
    type: condition
    task:
      id: b12a2bae-cb41-4c91-833c-9151d0c41f96
      version: -1
      name: Has any of the tagged domains been recently tagged?
      description: |-
        Checks whether any of the checked domains was tagged *after* the oldest decay date and time. If they were, they will not be considered in the decay time period, and will not be untagged.
        They will be untagged when the playbook re-runs and the time window changes in a way that their tagging activity is not present in the decay time window.
      type: condition
      iscommand: false
      brand: ""
    nexttasks:
      '#default#':
      - "19"
      "yes":
      - "18"
    separatecontext: false
    conditions:
    - label: "yes"
      condition:
      - - operator: isNotEmpty
          left:
            value:
              complex:
                root: indicators
                filters:
                - - operator: isEqualString
                    left:
                      value:
                        simple: indicators.comments.content
                      iscontext: true
                    right:
                      value:
                        simple: TagEventName
                      iscontext: true
                - - operator: isAfter
                    left:
                      value:
                        simple: indicators.comments.created
                      iscontext: true
                    right:
                      value:
                        simple: MinimumTimeTimeNow
                      iscontext: true
                accessor: value
            iscontext: true
          right:
            value: {}
    continueonerrortype: ""
    view: |-
      {
        "position": {
          "x": 450,
          "y": 530
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
    isoversize: false
    isautoswitchedtoquietmode: false
  "18":
    id: "18"
    taskid: 4ea6f022-63b6-4742-83d8-b92a67862e9e
    type: regular
    task:
      id: 4ea6f022-63b6-4742-83d8-b92a67862e9e
      version: -1
      name: Save newly tagged domains
      description: Saves the domains that were tagged since the decay period.
      scriptName: Set
      type: regular
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "19"
    scriptarguments:
      key:
        simple: DomainsRecentlyTagged
      value:
        complex:
          root: indicators
          filters:
          - - operator: isEqualString
              left:
                value:
                  simple: indicators.comments.content
                iscontext: true
              right:
                value:
                  simple: TagEventName
                iscontext: true
          - - operator: isAfter
              left:
                value:
                  simple: indicators.comments.created
                iscontext: true
              right:
                value:
                  simple: MinimumTimeTimeNow
                iscontext: true
          accessor: value
          transformers:
          - operator: uniq
    separatecontext: false
    continueonerrortype: ""
    view: |-
      {
        "position": {
          "x": 160,
          "y": 720
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
    isoversize: false
    isautoswitchedtoquietmode: false
  "19":
    id: "19"
    taskid: ed078f6d-529e-4243-8d35-a03182bdd5ad
    type: condition
    task:
      id: ed078f6d-529e-4243-8d35-a03182bdd5ad
      version: -1
      name: Any domains have NOT been tagged recently?
      description: Checks whether any of the checked domains was not tagged within the decay period. If domains have been recently tagged (e.g., after the date derived from the decay period input), they will not be untagged.
      type: condition
      iscommand: false
      brand: ""
    nexttasks:
      '#default#':
      - "5"
      "yes":
      - "4"
    separatecontext: false
    conditions:
    - label: "yes"
      condition:
      - - operator: isNotEmpty
          left:
            value:
              complex:
                root: indicators
                filters:
                - - operator: notIn
                    left:
                      value:
                        simple: indicators.value
                      iscontext: true
                    right:
                      value:
                        simple: DomainsRecentlyTagged
                      iscontext: true
                accessor: value
            iscontext: true
          right:
            value: {}
    continueonerrortype: ""
    view: |-
      {
        "position": {
          "x": 450,
          "y": 900
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
    isoversize: false
    isautoswitchedtoquietmode: false
view: |-
  {
    "linkLabelsPosition": {},
    "paper": {
      "dimensions": {
        "height": 1345,
        "width": 1360,
        "x": -10,
        "y": 50
      }
    }
  }
inputs:
- key: SinkholeTag
  value:
    simple: to_sinkhole
  required: true
  description: |-
    The tag that will be removed from the tagged domain indicators.
    This should be the tag that was used to export the domains to the EDL using the Generic Export Indicators Service integration, which is used by the firewall's sinkhole configuration.
  playbookInputQuery:
- key: DaysTaggedBeforeRemoval
  value:
    simple: "14"
  required: true
  description: |-
    The "decay period" - how many days should pass since the domains were tagged, before removing the sinkhole tag from those domains.
    The value should be a number of days. For example: 14.

    Technical details: When specifying the decay period, the playbook will take into account multiple tagging/untagging activities in the domain indicator in Cortex XSOAR. This means that if you specified a value of "14" and a domain was tagged 15 days ago, but also untagged and then tagged again 10 days ago - it will not be untagged by the playbook, as tagging activity happened 10 days ago. It will, however, be untagged when the playbook runs 5 days afterwards, since at that time the domain will have reached the decay period again.
  playbookInputQuery:
outputs: []
quiet: true
tests:
- No tests (auto formatted)
fromversion: 6.9.0
