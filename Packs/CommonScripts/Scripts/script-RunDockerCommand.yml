commonfields:
  id: RunDockerCommand
  version: -1
name: RunDockerCommand
script: >-
  import subprocess

  ret = []

  sysargs = None;


  cmdarg = demisto.args()['cmd']

  if demisto.args().has_key('sysargs'):
      sysargs = demisto.args()['sysargs']

  if sysargs == None:
      output = None
      try:
          output = subprocess.check_output(cmdarg, shell=True)
      except subprocess.CalledProcessError as e:
          output = e.output
      ret.append(output)
  else:
      ret.append(subprocess.check_output([cmdarg, sysargs]))

  ec = {'Command': cmdarg, 'Results': ret[0]}


  demisto.results({
    'Type': entryTypes['note'],
    'ContentsFormat': formats['json'],
    'Contents': ret,
    'HumanReadable': ret[0],
    'EntryContext': {'CommandResults': ec}
  })

  sys.exit(0)
type: python
subtype: python2
tags:
- Utilities
comment: "This command will allow you to run commands against a local Docker Container. You can run commands like wc for instance with word count, or other types of commands that you want on the docker container. \n\nWe recommend for tools that you want to use that are not part of the default Docker container, to cope this Automation script and then create a customer docker container with /docker_image_create with a custom docker container to add any command level tool to Demisto and output the results directly to the context."
enabled: true
args:
- name: cmd
  default: true
  description: Enter Command
- name: sysargs
  description: enter sysargs
outputs:
- contextPath: CommandResults.Command
  description: This will contain the command line tool name and arguments that were ran.
- contextPath: CommandResults.Results
  description: This will have the full results as a single string of the results. You will need to parse the results of the command into the format you want. Try looking at commands like ExtractRegex or create your own follow on automation script that will parse the results into the format you would like.
scripttarget: 0
fromversion: 5.0.0
