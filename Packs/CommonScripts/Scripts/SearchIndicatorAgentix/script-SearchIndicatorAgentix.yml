args:
- description: A single value or comma separated list of values to search.
  name: value
  required: false
- description: The expiration status of the indicator.
  name: expirationStatus
  required: false
  predefined:
  - expired
  - active
- description: The type of the indicator to search can be a single value or a comma separated list of values.
  name: type
  required: false
- description: The investigation that is linked to the indicator can be a single value or a comma separated list of values.
  name: investigationIDs
  required: false
- defaultValue: '25'
  description: The number of indicators to return, defaults to a max of 25.
  name: size
comment: "Searches Cortex XSOAR Indicators.\n\nSearch for XSOAR Indicators and returns the id, indicator_type, value, expiration status, lastSeen timestamp, related investigations and score/verdict.\n\nYou can add additional fields from the indicators using the add_field_to_context argument."
commonfields:
  id: SearchIndicatorAgentix
  version: -1
contentitemexportablefields:
  contentitemfields:
    fromServerVersion: ''
dockerimage: demisto/python3:3.12.8.3296088
enabled: true
name: SearchIndicatorAgentix
outputs:
- contextPath: foundIndicators.id
  description: The id of the indicator in the XSOAR database.
- contextPath: foundIndicators.indicator_type
  description: The type of Indicator (i.e. IP, Domain, URL, etc)
- contextPath: foundIndicators.value
  description: The value of the Indicator
- contextPath: foundIndicators.score
  description: The numeric score of the indicator (0 = Unknown, 1 = Good, 2 = Suspicious, 3 = Malicious)
- contextPath: foundIndicators.verdict
  description: The human readable score/verdict of the Indicator.
- contextPath: foundIndicators.investigationIDs
  description: The investigations related to the indicator.
- contextPath: foundIndicators.expiration
  description: The expiration status of the indicator.
- contextPath: foundIndicators.lastSeen
  description: The timestamp of the last time the indicator was sensitive.
runas: DBotWeakRole
script: >
  register_module_line('SearchIndicatorAgentix', 'start', __line__())

  CONSTANT_PACK_VERSION = '1.19.88'

  demisto.debug('pack id = CommonScripts, pack version = 1.19.88')




  KEYS_TO_EXCLUDE_FROM_QUERY = ['size', 'add_fields_to_context']

  def prepare_query(args: dict) -> str:
      """
      Prepares a query for list-based searches with safe handling

      Args:
          key (str): Field/attribute to search
          value (str/list): Value or list of values to match

      Returns:
          str: Formatted query string
      """
      query_sections = []
      for key, values in args.items():
          query = ""
          if key in KEYS_TO_EXCLUDE_FROM_QUERY:
              continue

          if not values:
              continue
          
          values_as_list = argToList(values)
          if len(values_as_list) > 1:
              query = " OR ".join(f"{key}:{str(v).strip()}" for v in values_as_list)
          else:
              query = f"{key}:{str(values_as_list[0]).strip()}"

          query_sections.append(query)

      return " AND ".join(f"({qs})" for qs in query_sections) if query_sections else ""


  # def prepare_query(args: dict):



  def search_indicators(args):
      # search for indicators
      query = prepare_query(args)
      indicators = demisto.executeCommand("findIndicators", {"query": query, "size": args.get("size")})[0]["Contents"]

      # return specific information for found indicators
      filtered_indicators = []
      fields = ["id", "indicator_type", "value", "score", "expirationStatus", "investigationIDs", "expiration", "lastSeen"]
      for indicator in indicators:
          style_indicator = {}
          for field in fields:
              style_indicator[field] = indicator.get(field, indicator.get("CustomFields", {}).get(field, "n/a"))
          style_indicator["verdict"] = scoreToReputation(style_indicator["score"])
          filtered_indicators.append(style_indicator)

      headers = fields + ["verdict"]
      markdown = tableToMarkdown(f"Indicators Found {query}", filtered_indicators, headers)
      return markdown, filtered_indicators


  def main():
      args = demisto.args()
      try:
          readable_output, outputs = search_indicators(args)
          results = CommandResults(
              outputs_prefix="foundIndicators",
              outputs_key_field="id",
              readable_output=readable_output,
              outputs=outputs,
              ignore_auto_extract=True,
          )
          return_results(results)
      except DemistoException as error:
          return_error(str(error), error)


  if __name__ in ("__main__", "__builtin__", "builtins"):
      main()

  register_module_line('SearchIndicatorAgentix', 'end', __line__())
scripttarget: 0
subtype: python3
tags:
- Utility
type: python
fromversion: 6.5.0
tests:
- No tests (auto formatted)
nativeimage:
- '8.8'
- '8.6'
