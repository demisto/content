commonfields:
  id: AssignAnalystToIncident
  version: -1
name: AssignAnalystToIncident
script: >
  if (args.email && args.username) {
      throw 'Please provide either username or email';
  }


  var emailToAssign = args.email;

  var userToAssign = args.username;


  if (emailToAssign) {
      userToAssign = '';
      var res = executeCommand('getUsers',{});
      if (res && res[0] && res[0].Contents) {
          res[0].Contents.forEach(function(user) {
              if (user.email === args.email) {
                  userToAssign = user.id;
              }
          });
      }
      if (!userToAssign) {
          throw 'Cannot find user with email ' + args.email;
      }
  }


  assignBy = args.assignBy || 'random';

  var onCallArg = true ? args.onCall === 'true' : false;


  function pickRandomUser(usersRes) {
      var usersList = usersRes[0].Contents.map(function (u) { return u.username });
      userToAssign = usersList[Math.floor(Math.random() * usersList.length)];
  }


  if (!userToAssign) {
      switch(assignBy) {
          case 'online':
              var usersRes = executeCommand('getUsers', { roles: args.roles, online: true, onCall: onCallArg });
              if (isError(usersRes[0])) {
                  return usersRes[0];
              }
              pickRandomUser(usersRes);
              break;
          case 'current':
              var usersRes = executeCommand('getUsers', { current: true, onCall: onCallArg });
              if (isError(usersRes[0])) {
                  return usersRes[0];
              }
              pickRandomUser(usersRes);
              break;
          case 'random':
              var usersRes = executeCommand('getUsers', { roles: args.roles, onCall: onCallArg });
              if (isError(usersRes[0])) {
                  return usersRes[0];
              }
              pickRandomUser(usersRes);
              break;
          default:
              res = executeCommand("getOwnerSuggestion", { roles: args.roles, shiftOnly: onCallArg })[0].Contents;

              switch (assignBy) {
                  case 'machine-learning':
                      userToAssign = res.ownerByMl;
                      break;
                  case 'top-user':
                      userToAssign = res.topOwner;
                      break;
                  case 'less-busy-user':
                      userToAssign = res.userLeastLoad;
                      break;
              }

              if (!userToAssign) {
                  var usersRes = executeCommand('getUsers', { roles: args.roles, onCall: onCallArg });
                  if (isError(usersRes[0])) {
                      return usersRes[0];
                  }
                  pickRandomUser(usersRes);
              }
      }
  }


  if (userToAssign) {
      var res = executeCommand("setOwner", { owner: userToAssign });
      if (!isError(res[0])) {
          return 'User \'' + userToAssign + '\' assigned to be the incident owner.';
      } else {
          return {
            ContentsFormat: formats.text,
            Type: entryTypes.error,
            Contents: 'Failed to assign user: \'' + userToAssign + '\', error: ' + res[0].Contents
          };
      }
  } else {
      return {
        ContentsFormat: formats.text,
        Type: entryTypes.error,
        Contents: 'No user found.'
      };
  }
type: javascript
tags:
- Utility
comment: |-
  Assign analyst to incident.
  By default,  the analyst is picked randomly from the available users, according to the provided roles (if no roles provided, will fetch all users).
  Otherwise, the analyst will be picked according to the 'assignBy' arguments.
  machine-learning: DBot will calculated and decide who is the best analyst for the job.
  top-user: The user that is most commonly owns this type of incident
  less-busy-user: The less busy analyst will be picked to be the incident owner.
  online: The analyst is picked randomly from all online analysts, according to the provided roles (if no roles provided, will fetch all users).
  current: The user that executed the command
enabled: true
args:
- name: roles
  default: true
  description: The optional list of roles we want to assign users from. Can accept arrays or comma separated list. Leave empty to fetch all users.
- name: assignBy
  auto: PREDEFINED
  predefined:
  - random
  - machine-learning
  - top-user
  - less-busy-user
  - online
  - current
  description: '(default: random) You can pick how to assign the owner - by random, online, current, machine-learning, top-user or less-busy-user.'
- name: username
  description: When specified, the provided user will be assigned as the incident owner (optional).
- name: email
  description: When specified, the user of provided email will be assigned as the incident owner (optional)
- name: onCall
  auto: PREDEFINED
  predefined:
  - "true"
  - "false"
  description: Set to true to assign only user that is currently on shift. Requires Cortex XSOAR v5.5 or later.
  defaultValue: "false"
scripttarget: 0
runonce: false
fromversion: 5.0.0
