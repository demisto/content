commonfields:
  id: FailedInstances
  version: -1
name: FailedInstances
script: |
  var INTERNAL_MODULES_BRANDS = ['Scripts', 'Builtin'];

  var failedInstances = [];
  var all = getModules();
  var countFailed = 0;
  var countSuccess = 0;
  var instances = [];

  Object.keys(all).forEach(function(m) {
      if (all[m].state === 'active' && all[m].defaultIgnored !== 'true' && INTERNAL_MODULES_BRANDS.indexOf(all[m].brand) === -1) {
          var cmd = m.replace(/\s/g,'_') + '-test-module';
          var firstRest = executeCommand("addEntries", {"entries": JSON.stringify([{
              Type: entryTypes.note,
              Contents: 'testing **' + m + '**',
              HumanReadable: 'testing **' + m + '**',
              ContentsFormat: formats.markdown
          }])});

          var res =  executeCommand(cmd, {});
          executeCommand("addEntries", {"entries": JSON.stringify([{
              Type: entryTypes.note,
              Contents: 'done testing **' + m + '**:\n' + res[0].Contents,
              HumanReadable: 'done testing **' + m + '**:\n' + res[0].Contents,
              ContentsFormat: formats.markdown
          }])});
          if (res[0].Type === entryTypes.error) {
              countFailed++;
          }
          else {
              countSuccess++;
          }

          if (res[0].Type === entryTypes.error) {
              failedInstances.push({instance: m, brand: all[m].brand, category: all[m].category, information: res[0].Contents, status: 'failure' });
          }
          else {
              instances.push({instance: m, brand: all[m].brand, category: all[m].category, information: 'succeed', status: 'success' });
          }

      }
  });

  var allInstances = failedInstances.concat(instances);
  var hr;
  var success = countSuccess.toString();
  var failed = countFailed.toString();
  var total = (countSuccess + countFailed).toString();

  if (failedInstances.length === 0) {
      hr = '### All active instances are available! ✅';
  } else {
      hr = 'Total Enabled Instances: ' + total +'\n';
      hr += 'Successful Instances: ' + success +'\n';
      hr += 'Failure Instances: ' + failed +'\n';
      hr += tableToMarkdown('Failed Instances:', failedInstances, ['instance', 'brand', 'category', 'information']);
  }

  return {
      Type: entryTypes.note,
      Contents: failedInstances,
      ContentsFormat: formats.markdown,
      HumanReadable: hr,
      EntryContext: {
          'FailedInstances': allInstances,
          'FailedInstances.failureCount': failed,
          'FailedInstances.totalCount': total,
          'FailedInstances.successCount': success
        }
  };
type: javascript
tags: []
comment: Executes test for all integration instances available and returns a detailed
  table about failed integration instances
enabled: true
outputs:
- contextPath: FailedInstances.instance
  description: Name of failed integration instance
  type: string
- contextPath: FailedInstances.brand
  description: Brand of failed integration instance
  type: string
- contextPath: FailedInstances.category
  description: Category of failed integration instance
  type: string
- contextPath: FailedInstances.information
  description: Error information about failed integration instance
  type: string
- contextPath: FailedInstances.status
  description: Status of the instance.
  type: string
- contextPath: FailedInstances.failureCount
  description: The number of failed instnaces.
  type: string
- contextPath: FailedInstances.successCount
  description: The number of working instances.
  type: string
- contextPath: FailedInstances.totalCount
  description: The number of total enabled instances.
  type: string
scripttarget: 0
timeout: 10.8µs
runonce: false
runas: DBotWeakRole
fromversion: 4.0.0
tests:
- FailedInstances - Test
