category: Database
commonfields:
  id: MongoDB
  version: -1
configuration:
- display: Username
  name: credentials
  required: true
  type: 9
- additionalinfo: A comma-separated list of URLs and ports.
  display: Server URLs with port (host1.com:27017,host2.com:27017)
  name: urls
  required: true
  type: 0
- display: Database Name
  name: database
  required: true
  type: 0
- defaultvalue: 'false'
  display: Use SSL/TLS secured connection
  name: use_ssl
  type: 8
  required: false
- display: Trust any certificate (not secure)
  name: insecure
  type: 8
  required: false
description: Use the MongoDB integration to search and query entries in your MongoDB.
display: MongoDB
name: MongoDB
script:
  commands:
  - arguments:
    - description: Name of the collection from which to get entries.
      name: collection
      required: true
    - description: A comma-separated list of ObjectIds to get. Can be retrieved from the `mongodb-query` command.
      isArray: true
      name: object_id
      required: true
    description: Gets an entry from the database by the object ID.
    name: mongodb-get-entry-by-id
    outputs:
    - contextPath: MongoDB.Entry._id
      description: ID of the entry.
      type: String
    - contextPath: MongoDB.Entry.collection
      description: The collection of which the entry belongs to.
      type: String
  - arguments:
    - description: Name of the collection to query.
      name: collection
      required: true
    - description: 'A JSON query to search for in the collection, in the format: `{"key": "value"}`. e.g {"_id": "mongodbid"}. Search by regex is supported, for more details refer to the Integration documentation.'
      name: query
      required: true
    - defaultValue: '50'
      description: Limits the result returned from MongoDB
      name: limit
    - description: Sorting order for the query results. Use the format "field1:asc,field2:desc".
      name: sort
    - description: A comma-seperated list of fields to return. If not specified, will return all fields to context.
      isArray: true
      name: fields
    description: Searches for items by using the specified JSON query. Search by regex is supported.
    name: mongodb-query
    outputs:
    - contextPath: MongoDB.Entry._id
      description: The ID of entry from the query.
      type: String
    - contextPath: MongoDB.Entry.collection
      description: The collection of which the entry belongs to.
      type: String
  - arguments:
    - description: Name of the collection in which to insert the entry.
      name: collection
      required: true
    - description: 'The entry to insert, in JSON format. Can include the `_id` argument or not, for example: `{"key": "value"}`'
      name: entry
      required: true
    description: Inserts an entry to the database.
    name: mongodb-insert
    outputs:
    - contextPath: MongoDB.Entry._id
      description: The ID of the entry from query.
      type: String
    - contextPath: MongoDB.Entry.collection
      description: The collection of which the entry belongs to.
      type: String
  - arguments:
    - description: The name of the collection in which to update an entry.
      name: collection
      required: true
    - description: 'A query that matches the document to update, in the format: `{"key": "value"}`.'
      name: filter
      required: true
    - description: 'The content with which to update the entry, in the format: {"$set": {"key": "value"}}. You can use Update Operators or Aggregation Pipeline. For more information, see the integration documentation.'
      name: update
      required: true
    - auto: PREDEFINED
      defaultValue: 'true'
      description: Whether to update a single entry. If true, will set only the first found entry. If false, will set all found entries. Default is true.
      name: update_one
      predefined:
      - 'true'
      - 'false'
    - auto: PREDEFINED
      defaultValue: 'false'
      description: Will create a new entry if no entires match the provided query. Default is false.
      name: upsert
      predefined:
      - 'true'
      - 'false'
    description: Updates an entry in a collection.
    name: mongodb-update
  - arguments:
    - description: The name of the collection from which to delete an entry.
      name: collection
      required: true
    - description: 'A query that matches the document to delete, for example: `{"key": "value"}`.'
      name: filter
      required: true
    - auto: PREDEFINED
      defaultValue: 'true'
      description: Whether to delete a single entry from the database. If false, will set all found entries.
      name: delete_one
      predefined:
      - 'true'
      - 'false'
    description: Deletes an entry from the database.
    name: mongodb-delete
  - description: Lists all collections in the database.
    name: mongodb-list-collections
    outputs:
    - contextPath: MongoDB.Collection.Name
      description: The name of the collection.
      type: String
  - arguments:
    - default: true
      description: The name of the collection to create.
      name: collection
      required: true
    description: Creates a collection
    name: mongodb-create-collection
  - arguments:
    - default: true
      description: The name of the collection to drop from the database.
      name: collection
      required: true
    description: Drops a collection from the database.
    execution: true
    name: mongodb-drop-collection
  - arguments:
    - description: Name of the collection to query.
      name: collection
      required: true
    - description: 'A JSON pipeline query to search by in the collection. Pipeline query should by list of dictionaries. For example: [{"key1": "value1"}, {"key2": "value2"}]'
      name: pipeline
      required: true
    - defaultValue: '50'
      description: Limits the number of results returned from MongoDB.
      name: limit
    - defaultValue: '0'
      description: Offset to the first result returned from MongoDB.
      name: offset
    description: Searches for items by the specified JSON pipleline query.
    name: mongodb-pipeline-query
    outputs:
    - contextPath: MongoDB.Entry._id
      description: The ID of entry from the query.
      type: String
    - contextPath: MongoDB.Entry.collection
      description: The collection of which the entry belongs to.
      type: String
  - arguments:
    - description: The name of the collection in which to update entries.
      name: collection
      required: true
    - description: 'A comma-separated list of queries that match the entries to update, in the format: `[{"key1": "value1"},{"key2": "value2"}]`. This list must match the comma-separated list of the update argument by order and size.'
      isArray: true
      name: filter
      required: true
    - description: 'A comma-separated list of operations to update entries, in the format: `[{"$set": {"key1": "value1"}},{"$set": {"key2": "value2"}}]`. You can use "Update Operators" or "Aggregation Pipeline". This list must match the comma-separated list of the filter argument by order and size.'
      isArray: true
      name: update
      required: true
    - auto: PREDEFINED
      defaultValue: 'false'
      description: Will create a new entry if no entires match the provided queries (per query). This argument will effect all the provided queries. Default is false.
      name: upsert
      predefined:
      - 'true'
      - 'false'
    - auto: PREDEFINED
      defaultValue: 'true'
      description: Whether to update a single entry per query. If true, will set only the first found entry, If false, will set all found entries. This argument will effect all the provided queries. Default is true.
      name: update_one
      predefined:
      - 'true'
      - 'false'
    description: Bulk updates entries in a collection.
    name: mongodb-bulk-update
  dockerimage: demisto/py3-tools:1.0.0.49703
  runonce: false
  script: '-'
  subtype: python3
  type: python
tests:
- MongoDB - Test
fromversion: 5.0.0
