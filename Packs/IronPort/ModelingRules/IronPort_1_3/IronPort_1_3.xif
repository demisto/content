config timeframe = 1y | dataset = cisco_esa_raw_raw
| fields _raw_log
| alter level = arrayindex(regextract(_raw_log ,"\d+\:\d+\:\d+\s[\w\_]+\:\s([A-Za-z]+)\:"),0),
    message = arrayindex(regextract(_raw_log ,"\d+\:\d+\:\d+\s[\w\_]+\:\s[A-Za-z]+\:(.*)"),0),
    mid = arrayindex(regextract(_raw_log ,"\sMID\s(\d+)"),0),
    icid = arrayindex(regextract(_raw_log , "\sICID\s(\d+)"),0),
    //rid = arrayindex(regextract(_raw_log ,"RID\s\[([^\]]+)\]"),0), //router id - not have field
    src_ip = arrayindex(regextract(_raw_log ,"address\s(\d+\.\d+\.\d+\.\d+)\s"),0),
    dns_host1 = arrayindex(regextract(_raw_log ,"dns\shost\s([\w\.0-9\-\_\@]+)\s"),0),
    dns_host2 = arrayindex(regextract(_raw_log ,"DNS\shost\:\s([^\,]+)\,"),0),
    dns_host3 = arrayindex(regextract(_raw_log ,"to\sIP\s\d+\.\d+\.\d+\.\d+\slooking\sup\s(\S+)"),0),
    //response = arrayindex(regextract(_raw_log ,"Response\s\'([^\']+)\'"),0),
    //internal_id = arrayindex(regextract(_raw_log ,"InternalId\=(\d+)"),0),
    send_bytes = arrayindex(regextract(_raw_log ,"(\d+)\sbytes\sin"),0),
    duration = arrayindex(regextract(_raw_log ,"\d+\sbytes\sin\s(\d+\.*\d*)"),0), // need check more values and add calculation
    src_user = arrayindex(regextract(_raw_log ,"from\'\,\s\'([A-Za-z\s]+)\s\<"),0),// need check more values
    dst_user1 = arrayindex(regextract(_raw_log ,"to\'\,\s\'([^\<]+)\"*\s"),0),// need check more values
    dst_user2 = arrayindex(regextract(_raw_log ,"To\:\s\<([^\>]+)\>"),0),
    src_user_upn1 = arrayindex(regextract(_raw_log ,"from[^\<]+\<([^\>]+)\>"),0), // upn and use will be both to source.username nand user.upn
    src_user_upn2 = arrayindex(regextract(_raw_log ,"mailfrom\sidentity\s(\S+)\s"),0),// upn and use will be both to source.username nand user.upn
    dst_user_upn = arrayindex(regextract(_raw_log ,"to[^\<]+\<([^\>]+)\>"),0),
    file_name = arrayindex(regextract(_raw_log ,"attachment\s\'([^\']+)\'"),0),
    dc_id = arrayindex(regextract(_raw_log ,"DCID\s(\d+)\s"),0),
    target_interface1 = arrayindex(regextract(_raw_log ,"interface\s(\d+\.\d+\.\d+\.\d+)\s"),0),
    target_interface2 = arrayindex(regextract(_raw_log ,"interface\sData\s\d+\s\((\d+\.\d+\.\d+\.\d+)\)"),0),
    dst_ip1 = arrayindex(regextract(_raw_log ,"address\s(\d+\.\d+\.\d+\.\d+)\s"),0),
    dst_ip2 = arrayindex(regextract(_raw_log , "recipient\slogging\s\((\d+\.\d+\.\d+\.\d+)\)"),0),
    dst_ip3 = arrayindex(regextract(_raw_log , "to\sIP\s(\d+\.\d+\.\d+\.\d+)\s"),0),
    dst_port = arrayindex(regextract(_raw_log ,"port\s(\d+)"),0),
    threat_category = arrayindex(regextract(_raw_log ,"Threat Category\:\s([^\,]+)\,"),0),
    suspected_domain = arrayindex(regextract(_raw_log ,"Suspected\sDomain\(s\)\s\:\s(\S+)"),0),
    target_domain = arrayindex(regextract(_raw_log ,"domain\:\s(\S+)"),0),
    dst_url = arrayindex(regextract(_raw_log ,"URL\s(http\S+)\s"),0), // need to check the values
    matched_condition = arrayindex(regextract(_raw_log ,"matched\sCondition\:\s([A-Za-z\s]+)"),0), //need to check the values, maybe its alert category or threat category
    reply_to = arrayindex(regextract(_raw_log , "reply\-to[^\<]+\<([^\>]+)\>"),0), // reply to and dsst users will added to list and to xdm.email.recipients field
    operation = arrayindex(regextract(_raw_log , "\:\s[A-Z]+\s\d+\s([a-z\s]+)$"),0), // this field isnt right 100% need to check the values
    protocol = arrayindex(regextract(_raw_log ,"protocol\s(\S+)\s"),0), // need to check the values
    cipher = arrayindex(regextract(_raw_log ,"cipher\s([A-Za-z0-9\-]+)"),0),// xdm.network.tls.cipher
    country = arrayindex(regextract(_raw_log ,"country\s(\w+)\s*$"),0),
    subject = arrayindex(regextract(_raw_log ,"Subject\s\"([^\"]+)\""),0),//xdm.email.subject
    dns_response_code = arrayindex(regextract(_raw_log ,"rcode\=([\w]+)"),0)
| alter xdm.email.message_id = mid, // Message ID
    xdm.network.session_id = icid, // Injection Connection ID
    xdm.source.ipv4 = src_ip,
    xdm.target.host.hostname = coalesce(dns_host1,dns_host2,dns_host3),
    xdm.source.sent_bytes = to_integer(send_bytes),
    xdm.event.duration = multiply(to_float(duration),1000)