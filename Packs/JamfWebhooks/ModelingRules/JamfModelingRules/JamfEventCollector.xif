[MODEL: dataset=jamf_pro_raw, model=Audit]
alter XDM.Audit.audited_resource.name = coalesce(json_extract_scalar(Event, "$.deviceName"), json_extract_scalar(Event, "$.computer.deviceName"), json_extract_scalar(Event, "$.name"), arraystring(arraymap (json_extract_array ("groupAddedDevices","$."), json_extract_scalar ("@element", "$.deviceName")), ","), json_extract_scalar(Event, "$.targetDevice.deviceName"),arraystring(arraymap (json_extract_array ("groupRemovedDevices","$."), json_extract_scalar ("@element", "$.deviceName")), ",")),
      XDM.Audit.TriggeredBy.ipv4 = coalesce(json_extract_scalar(Event, "$.ipAddress"), json_extract_scalar(Event, "$.computer.ipAddress"), arraystring(arraymap (json_extract_array ("groupAddedDevices","$."), json_extract_scalar ("@element", "$.ipAddress")), ","), arraystring(arraymap (json_extract_array ("groupRemovedDevices","$."), json_extract_scalar ("@element", "$.ipAddress")), ",")),
      XDM.Audit.audited_resource.id = coalesce(json_extract_scalar(Event, "$.jssID"), json_extract_scalar(Event, "$.computer.jssID"), arraystring(arraymap (json_extract_array ("groupAddedDevices","$."), json_extract_scalar ("@element", "$.jssID")), ","), arraystring(arraymap (json_extract_array ("groupRemovedDevices","$."), json_extract_scalar ("@element", "$.jssID")), ",")),
      XDM.Audit.audited_resource.type = coalesce(json_extract_scalar(Event, "$.model"), json_extract_scalar(Event, "$.computer.model"), json_extract_scalar(Event, "$.targetDevice.model"), arraystring(arraymap (json_extract_array ("groupAddedDevices","$."), json_extract_scalar ("@element", "$.model")), ","), arraystring(arraymap (json_extract_array ("groupRemovedDevices","$."), json_extract_scalar ("@element", "$.model")), ",")),
      XDM.Audit.audited_resource.sub_type = coalesce(json_extract_scalar(Event, "$.osVersion"), json_extract_scalar(Event, "$.computer.osVersion"), json_extract_scalar(Event, "$.targetDevice.osVersion"), arraystring(arraymap (json_extract_array ("groupAddedDevices","$."), json_extract_scalar ("@element", "$.osVersion")), ","), arraystring(arraymap (json_extract_array ("groupRemovedDevices","$."), json_extract_scalar ("@element", "$.osVersion")), ",")),
      XDM.Audit.TriggeredBy.identity.name = coalesce(json_extract_scalar(Event, "$.username"), json_extract_scalar(Event, "$.patchPolicyName"), json_extract_scalar(Event, "$.authorizedUsername"), json_extract_scalar(Event, "$.targetUser.username"), arraystring(arraymap (json_extract_array ("groupAddedDevices","$."), json_extract_scalar ("@element", "$.username")), ","), arraystring(arraymap (json_extract_array ("groupRemovedDevices","$."), json_extract_scalar ("@element", "$.username")), ",")),
      XDM.Audit.event_timestamp = parse_timestamp("%Y-%m-%dT%H:%M:%E*SZ", json_extract_scalar(Webhook, "$.eventTimestamp")),
      XDM.Audit.original_event_id = json_extract_scalar(Webhook, "$.id"),
      XDM.Audit.original_event_description = json_extract_scalar(Webhook, "$.name"),
      XDM.Audit.original_event_type = json_extract_scalar(Webhook, "$.webhookEvent"),
      XDM.Audit.TriggeredBy.identity.type = json_extract_scalar(Event, "$.trigger"),
      XDM.Audit.TriggeredBy.identity.uuid = json_extract_scalar(Event, "$.patchPolicyId"),
      XDM.Audit.outcome = coalesce(json_extract_scalar(Event, "$.successful"), json_extract_scalar(Event, "$.operationSuccessful")),
      XDM.Audit.operation_type = json_extract_scalar(Event, "$.restAPIOperationType");


[MODEL: dataset=jamf_pro_raw, model=Asset]
alter XDM.Asset.host.mac_addresses = coalesce(json_extract_scalar(Event, "$.wifiMacAddress"), json_extract_scalar(Event, "$.macAddress"), json_extract_scalar(Event, "$.computer.macAddress"), json_extract_scalar(Event, "$.targetDevice.wifiMacAddress")),
      XDM.Asset.host.device_id = coalesce(json_extract_scalar(Event, "$.serialNumber"), json_extract_scalar(Event, "$.computer.serialNumber"), json_extract_scalar(Event, "$.targetDevice.serialNumber"), arraystring(arraymap (json_extract_array ("groupAddedDevices","$."), json_extract_scalar ("@element", "$.serialNumber")), ","), arraystring(arraymap (json_extract_array ("groupRemovedDevices","$."), json_extract_scalar ("@element", "$.serialNumber")), ",")),
      XDM.Asset.host.hardware_uuid = coalesce(json_extract_scalar(Event, "$.udid"), json_extract_scalar(Event, "$.computer.udid"), arraystring(arraymap (json_extract_array ("groupAddedDevices","$."), json_extract_scalar ("@element", "$.udid")), ","), arraystring(arraymap (json_extract_array ("groupRemovedDevices","$."), json_extract_scalar ("@element", "$.udid")), ","), json_extract_scalar(Event, "$.targetDevice.udid"));






/* -------------------------------------
   ---------- System mappings ----------
   ------------------------------------- */

/* ------ PACKAGE: None ------ */

[MODEL: model=Auth, dataset=xdr_data]
filter event_type=15
| alter
    is_kerberos = if(agent_os_type=1 and action_evtlog_event_id in (4769, 4770, 4768, 4771), True, False),
    is_ntlm = if(agent_os_type=1 and action_evtlog_event_id in (4776, 4822, 4823), True, False),
    is_login_windows = if(agent_os_type=1 and action_evtlog_event_id in (4624, 4625, 4634, 4647, 4648, 4672, 4778, 4779, 4800, 4801, 4802, 4803, 4825), True, False),
    is_login_mac_linux = if(agent_os_type in (2, 4) and action_evtlog_event_id in (0, 1, 2, 3, 4, 1003, 1033), True, False)
| filter is_kerberos=True or is_ntlm=True or is_login_windows=True or is_login_mac_linux=True
| alter
    process_name = if(agent_os_type=1, if(action_evtlog_data_fields->ProcessName != "-", action_evtlog_data_fields->ProcessName), agent_os_type in (2, 4), action_evtlog_data_fields->comm),
    kerberos_encryption_type = to_integer(action_evtlog_data_fields->TicketEncryptionType),
    status = to_integer(action_evtlog_data_fields->Status),
    logon_type = to_integer(action_evtlog_data_fields->LogonType),
    logon_impersonation_level = action_evtlog_data_fields->ImpersonationLevel,
    logon_assigned_rights = if(agent_os_type = 1, if(action_evtlog_data_fields->PrivilegeList contains """\r\n\t\t\t""", split(action_evtlog_data_fields->PrivilegeList, """\r\n\t\t\t"""), split(action_evtlog_data_fields->PrivilegeList, """\n\t\t\t""")), agent_os_type = 2 and actor_process_image_name in ("sudo", "su"), arraycreate("root")),
    action_local_ip_with_loopback = if(agent_os_type = 1 and action_evtlog_data_fields->IpAddress != "-", action_evtlog_data_fields->IpAddress, agent_os_type = 2, action_evtlog_data_fields->action_local_ip, agent_os_type = 4, action_evtlog_data_fields->ip)
| alter
    XDM.Auth.event_timestamp = to_timestamp(event_timestamp, "MILLIS"),
    XDM.Auth.original_event_id = event_id,
    XDM.Auth.original_event_type = to_string(event_type),
    XDM.Auth.original_event_sub_type = to_string(event_sub_type),
    XDM.Auth.session_context_id = action_network_connection_id,
    XDM.Auth.auth_method = action_evtlog_data_fields->method,
    XDM.Auth.outcome = if(is_kerberos = True, if(action_evtlog_data_fields->Status = "0x0" or action_evtlog_event_id = 4770, XDM_CONST.OUTCOME_SUCCESS, XDM_CONST.OUTCOME_FAILED), is_ntlm = True, if(action_evtlog_data_fields->Status = "0x0", XDM_CONST.OUTCOME_SUCCESS, XDM_CONST.OUTCOME_FAILED), is_login_windows = True, if(action_evtlog_event_id in (4625, 4825), XDM_CONST.OUTCOME_FAILED, XDM_CONST.OUTCOME_SUCCESS), is_login_mac_linux = True, if(action_evtlog_event_id in (2, 3, 1003, 1033), XDM_CONST.OUTCOME_FAILED, XDM_CONST.OUTCOME_SUCCESS)),
    XDM.Auth.reason = if(is_kerberos = True, if(action_evtlog_event_id != 4770, action_evtlog_data_fields->Status), is_ntlm = True, action_evtlog_data_fields->Status, is_login_windows = True, coalesce(action_evtlog_data_fields->SubStatus, action_evtlog_data_fields->Status, action_evtlog_data_fields->FailureReason), is_login_mac_linux = True, action_evtlog_data_fields->outcome_reason),
    XDM.Auth.kerberos.msg_type = if(action_evtlog_event_id in (4769, 4770), XDM_CONST.KERBEROS_MSG_TYPE_TGS_REQ, action_evtlog_event_id in (4768, 4771), XDM_CONST.KERBEROS_MSG_TYPE_AS_REQ),
    XDM.Auth.kerberos.encryption_type = if(kerberos_encryption_type = 1,XDM_CONST.KERBEROS_ENCRYPTION_TYPE_DES_CBC_CRC,kerberos_encryption_type = 2,XDM_CONST.KERBEROS_ENCRYPTION_TYPE_DES_CBC_MD4,kerberos_encryption_type = 3,XDM_CONST.KERBEROS_ENCRYPTION_TYPE_DES_CBC_MD5,kerberos_encryption_type = 4,XDM_CONST.KERBEROS_ENCRYPTION_TYPE_DES_CBC_RAW,kerberos_encryption_type = 5,XDM_CONST.KERBEROS_ENCRYPTION_TYPE_DES3_CBC_MD5,kerberos_encryption_type = 6,XDM_CONST.KERBEROS_ENCRYPTION_TYPE_DES3_CBC_RAW,kerberos_encryption_type = 7,XDM_CONST.KERBEROS_ENCRYPTION_TYPE_DES3_CBC_SHA1,kerberos_encryption_type = 8,XDM_CONST.KERBEROS_ENCRYPTION_TYPE_DES_HMAC_SHA1,kerberos_encryption_type = 9,XDM_CONST.KERBEROS_ENCRYPTION_TYPE_DSAWITHSHA1_CMSOID,kerberos_encryption_type = 10,XDM_CONST.KERBEROS_ENCRYPTION_TYPE_MD5WITHRSAENCRYPTION_CMSOID,kerberos_encryption_type = 11,XDM_CONST.KERBEROS_ENCRYPTION_TYPE_SHA1WITHRSAENCRYPTION_CMSOID,kerberos_encryption_type = 12,XDM_CONST.KERBEROS_ENCRYPTION_TYPE_RC2CBC_ENVOID,kerberos_encryption_type = 13,XDM_CONST.KERBEROS_ENCRYPTION_TYPE_RSAENCRYPTION_ENVOID,kerberos_encryption_type = 14,XDM_CONST.KERBEROS_ENCRYPTION_TYPE_RSAES_OAEP_ENV_OID,kerberos_encryption_type = 15,XDM_CONST.KERBEROS_ENCRYPTION_TYPE_DES_EDE3_CBC_ENV_OID,kerberos_encryption_type = 16,XDM_CONST.KERBEROS_ENCRYPTION_TYPE_DES3_CBC_SHA1_KD,kerberos_encryption_type = 17,XDM_CONST.KERBEROS_ENCRYPTION_TYPE_AES128_CTS_HMAC_SHA1_96,kerberos_encryption_type = 18,XDM_CONST.KERBEROS_ENCRYPTION_TYPE_AES256_CTS_HMAC_SHA1_96,kerberos_encryption_type = 19,XDM_CONST.KERBEROS_ENCRYPTION_TYPE_AES128_CTS_HMAC_SHA256_128,kerberos_encryption_type = 20,XDM_CONST.KERBEROS_ENCRYPTION_TYPE_AES256_CTS_HMAC_SHA384_192,kerberos_encryption_type = 23,XDM_CONST.KERBEROS_ENCRYPTION_TYPE_RC4_HMAC,kerberos_encryption_type = 24,XDM_CONST.KERBEROS_ENCRYPTION_TYPE_RC4_HMAC_EXP,kerberos_encryption_type = 25,XDM_CONST.KERBEROS_ENCRYPTION_TYPE_CAMELLIA128_CTS_CMAC,kerberos_encryption_type = 26,XDM_CONST.KERBEROS_ENCRYPTION_TYPE_CAMELLIA256_CTS_CMAC,kerberos_encryption_type = 65,XDM_CONST.KERBEROS_ENCRYPTION_TYPE_SUBKEY_KEYMATERIAL, to_string(kerberos_encryption_type)),
    XDM.Auth.kerberos.error_code = if(status = 0,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_NONE,status = 1,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_NAME_EXP,status = 2,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_SERVICE_EXP,status = 3,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_BAD_PVNO,status = 4,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_C_OLD_MAST_KVNO,status = 5,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_S_OLD_MAST_KVNO,status = 6,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_C_PRINCIPAL_UNKNOWN,status = 7,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_S_PRINCIPAL_UNKNOWN,status = 8,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_PRINCIPAL_NOT_UNIQUE,status = 9,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_NULL_KEY,status = 10,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_CANNOT_POSTDATE,status = 11,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_NEVER_VALID,status = 12,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_POLICY,status = 13,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_BADOPTION,status = 14,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_ETYPE_NOSUPP,status = 15,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_SUMTYPE_NOSUPP,status = 16,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_PADATA_TYPE_NOSUPP,status = 17,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_TRTYPE_NOSUPP,status = 18,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_CLIENT_REVOKED,status = 19,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_SERVICE_REVOKED,status = 20,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_TGT_REVOKED,status = 21,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_CLIENT_NOTYET,status = 22,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_SERVICE_NOTYET,status = 23,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_KEY_EXPIRED,status = 24,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_PREAUTH_FAILED,status = 25,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_PREAUTH_REQUIRED,status = 26,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_SERVER_NOMATCH,status = 27,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_MUST_USE_USER2USER,status = 28,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_PATH_NOT_ACCEPTED,status = 29,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_SVC_UNAVAILABLE,status = 31,XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_BAD_INTEGRITY,status = 32,XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_TKT_EXPIRED,status = 33,XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_TKT_NYV,status = 34,XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_REPEAT,status = 35,XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_NOT_US,status = 36,XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_BADMATCH,status = 37,XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_SKEW,status = 38,XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_BADADDR,status = 39,XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_BADVERSION,status = 40,XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_MSG_TYPE,status = 41,XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_MODIFIED,status = 42,XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_BADORDER,status = 44,XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_BADKEYVER,status = 45,XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_NOKEY,status = 46,XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_MUT_FAIL,status = 47,XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_BADDIRECTION,status = 48,XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_METHOD,status = 49,XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_BADSEQ,status = 50,XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_INAPP_CKSUM,status = 51,XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_PATH_NOT_ACCEPTED,status = 52,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_RESPONSE_TOO_BIG,status = 60,XDM_CONST.KERBEROS_ERROR_CODE_ERR_GENERIC,status = 61,XDM_CONST.KERBEROS_ERROR_CODE_ERR_FIELD_TOOLONG,status = 62,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC__CLIENT_NOT_TRUSTED,status = 63,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC__KDC_NOT_TRUSTED,status = 64,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC__INVALID_SIG,status = 65,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_KEY_TOO_WEAK,status = 66,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_CERTIFICATE_MISMATCH,status = 67,XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_NO_TGT,status = 68,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_WRONG_REALM,status = 69,XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_USER_TO_USER_REQUIRED,status = 70,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_CANT_VERIFY_CERTIFICATE,status = 71,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_INVALID_CERTIFICATE,status = 72,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_REVOKED_CERTIFICATE,status = 73,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_REVOCATION_STATUS_UNKNOWN,status = 74,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_REVOCATION_STATUS_UNAVAILABLE,status = 75,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_CLIENT_NAME_MISMATCH,status = 76,XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_KDC_NAME_MISMATCH, to_string(status)),
    XDM.Auth.ntlm.user_name = if(is_ntlm=True, if(action_evtlog_data_fields->TargetUserName contains """\\""", arrayindex(split(action_evtlog_data_fields->TargetUserName, """\\"""), 0), action_evtlog_data_fields->TargetUserName)),
    XDM.Auth.ntlm.domain = if(is_ntlm=True, if(action_evtlog_data_fields->TargetUserName contains """\\""", arrayindex(split(action_evtlog_data_fields->TargetUserName, """\\"""), 0))),
    XDM.Auth.ntlm.hostname = if(is_ntlm=True, action_evtlog_data_fields->Workstation),
    XDM.Auth.logon.type = if(logon_type = 2,XDM_CONST.LOGON_TYPE_INTERACTIVE,logon_type = 3,XDM_CONST.LOGON_TYPE_NETWORK,logon_type = 4,XDM_CONST.LOGON_TYPE_BATCH,logon_type = 5,XDM_CONST.LOGON_TYPE_SERVICE,logon_type = 6,XDM_CONST.LOGON_TYPE_PROXY,logon_type = 7,XDM_CONST.LOGON_TYPE_UNLOCK,logon_type = 8,XDM_CONST.LOGON_TYPE_NETWORK_CLEARTEXT,logon_type = 9,XDM_CONST.LOGON_TYPE_NEW_CREDENTIALS,logon_type = 10,XDM_CONST.LOGON_TYPE_REMOTE_INTERACTIVE,logon_type = 11,XDM_CONST.LOGON_TYPE_CACHED_INTERACTIVE,logon_type = 12,XDM_CONST.LOGON_TYPE_CACHED_REMOTE_INTERACTIVE,logon_type = 13,XDM_CONST.LOGON_TYPE_CACHED_UNLOCK, to_string(logon_type)),
    XDM.Auth.logon.assigned_rights = arraymap(logon_assigned_rights, if("@element" = "SeTrustedCredManAccessPrivilege",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_TRUSTED_CRED_MAN_ACCESS_PRIVILEGE,"@element" = "SeNetworkLogonRight",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_NETWORK_LOGON_RIGHT,"@element" = "SeTcbPrivilege",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_TCB_PRIVILEGE,"@element" = "SeMachineAccountPrivilege",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_MACHINE_ACCOUNT_PRIVILEGE,"@element" = "SeIncreaseQuotaPrivilege",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_INCREASE_QUOTA_PRIVILEGE,"@element" = "SeInteractiveLogonRight",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_INTERACTIVE_LOGON_RIGHT,"@element" = "SeRemoteInteractiveLogonRight",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_REMOTE_INTERACTIVE_LOGON_RIGHT,"@element" = "SeBackupPrivilege",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_BACKUP_PRIVILEGE,"@element" = "SeChangeNotifyPrivilege",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_CHANGE_NOTIFY_PRIVILEGE,"@element" = "SeSystemtimePrivilege",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_SYSTEMTIME_PRIVILEGE,"@element" = "SeTimeZonePrivilege",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_TIME_ZONE_PRIVILEGE,"@element" = "SeCreatePagefilePrivilege",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_CREATE_PAGEFILE_PRIVILEGE,"@element" = "SeCreateTokenPrivilege",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_CREATE_TOKEN_PRIVILEGE,"@element" = "SeCreateGlobalPrivilege",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_CREATE_GLOBAL_PRIVILEGE,"@element" = "SeCreatePermanentPrivilege",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_CREATE_PERMANENT_PRIVILEGE,"@element" = "SeCreateSymbolicLinkPrivilege",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_CREATE_SYMBOLIC_LINK_PRIVILEGE,"@element" = "SeDebugPrivilege",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_DEBUG_PRIVILEGE,"@element" = "SeDenyNetworkLogonRight",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_DENY_NETWORK_LOGON_RIGHT,"@element" = "SeDenyBatchLogonRight",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_DENY_BATCH_LOGON_RIGHT,"@element" = "SeDenyServiceLogonRight",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_DENY_SERVICE_LOGON_RIGHT,"@element" = "SeDenyInteractiveLogonRight",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_DENY_INTERACTIVE_LOGON_RIGHT,"@element" = "SeDenyRemoteInteractiveLogonRight",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_DENY_REMOTE_INTERACTIVE_LOGON_RIGHT,"@element" = "SeEnableDelegationPrivilege",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_ENABLE_DELEGATION_PRIVILEGE,"@element" = "SeRemoteShutdownPrivilege",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_REMOTE_SHUTDOWN_PRIVILEGE,"@element" = "SeAuditPrivilege",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_AUDIT_PRIVILEGE,"@element" = "SeImpersonatePrivilege",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_IMPERSONATE_PRIVILEGE,"@element" = "SeIncreaseWorkingSetPrivilege",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_INCREASE_WORKING_SET_PRIVILEGE,"@element" = "SeIncreaseBasePriorityPrivilege",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_INCREASE_BASE_PRIORITY_PRIVILEGE,"@element" = "SeLoadDriverPrivilege",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_LOAD_DRIVER_PRIVILEGE,"@element" = "SeLockMemoryPrivilege",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_LOCK_MEMORY_PRIVILEGE,"@element" = "SeBatchLogonRight",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_BATCH_LOGON_RIGHT,"@element" = "SeServiceLogonRight",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_SERVICE_LOGON_RIGHT,"@element" = "SeSecurityPrivilege",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_SECURITY_PRIVILEGE,"@element" = "SeRelabelPrivilege",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_RELABEL_PRIVILEGE,"@element" = "SeSystemEnvironmentPrivilege",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_SYSTEM_ENVIRONMENT_PRIVILEGE,"@element" = "SeDelegateSessionUserImpersonatePrivilege",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_DELEGATE_SESSION_USER_IMPERSONATE_PRIVILEGE,"@element" = "SeManageVolumePrivilege",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_MANAGE_VOLUME_PRIVILEGE,"@element" = "SeProfileSingleProcessPrivilege",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_PROFILE_SINGLE_PROCESS_PRIVILEGE,"@element" = "SeSystemProfilePrivilege",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_SYSTEM_PROFILE_PRIVILEGE,"@element" = "SeUndockPrivilege",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_UNDOCK_PRIVILEGE,"@element" = "SeAssignPrimaryTokenPrivilege",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_ASSIGN_PRIMARY_TOKEN_PRIVILEGE,"@element" = "SeRestorePrivilege",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_RESTORE_PRIVILEGE,"@element" = "SeShutdownPrivilege",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_SHUTDOWN_PRIVILEGE,"@element" = "SeSyncAgentPrivilege",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_SYNC_AGENT_PRIVILEGE,"@element" = "SeTakeOwnershipPrivilege",XDM_CONST.LOGON_ASSIGNED_RIGHT_SE_TAKE_OWNERSHIP_PRIVILEGE, "@element")),
    XDM.Auth.logon.logon_guid = action_evtlog_data_fields->LogonGuid,
    XDM.Auth.logon.is_elevated = if(action_evtlog_data_fields->ElevatedToken = null, False, True),
    XDM.Auth.logon.is_virtual_account = if(action_evtlog_data_fields->VirtualAccount = null, False, True),
    XDM.Auth.logon.is_restricted_admin_mode = if(action_evtlog_data_fields->RestrictedAdminMode = null or action_evtlog_data_fields->RestrictedAdminMode = "-", False, True),
    XDM.Auth.logon.impersonation_level = if(logon_impersonation_level = "%%1831", XDM_CONST.LOGON_IMPERSONATION_LEVEL_ANONYMOUS, logon_impersonation_level = "%%1832", XDM_CONST.LOGON_IMPERSONATION_LEVEL_IDENTIFICATION, logon_impersonation_level = "%%1833", XDM_CONST.LOGON_IMPERSONATION_LEVEL_IMPERSONATION, logon_impersonation_level = "%%1840", XDM_CONST.LOGON_IMPERSONATION_LEVEL_DELEGATION, logon_impersonation_level != "-", logon_impersonation_level),
    XDM.Auth.logon.package_name = if(action_evtlog_data_fields->AuthenticationPackageName != "-", action_evtlog_data_fields->AuthenticationPackageName),
    XDM.Auth.logon.fingerprint = action_evtlog_data_fields->fingerprint,
    XDM.Auth.Observer.vendor = "PANW",
    XDM.Auth.Observer.product = "Cortex Agent",
    XDM.Auth.Observer.type = if(agent_install_type=0, "REGULAR_AGENT", agent_install_type=1, "AGENT_VDI", agent_install_type=2, "AGENT_GOLDEN_IMAGE", agent_install_type=3, "AGENT_TEMPORARY_SESSION", agent_install_type=5, "AGENT_LIGHT"),
    XDM.Auth.Observer.version = agent_version,
    XDM.Auth.Observer.content_version = agent_content_version,
    XDM.Auth.Observer.unique_identifier = agent_id,
    XDM.Auth.Client.ipv4 = if(action_local_ip_with_loopback = "::1", "127.0.0.1", ltrim(action_local_ip_with_loopback, "::ffff:")),
    XDM.Auth.Client.user.identifier = action_evtlog_data_fields->SubjectUserSid,
    XDM.Auth.Client.user.username = if(agent_os_type = 1, if(action_evtlog_data_fields->SubjectUserName != "-", action_evtlog_data_fields->SubjectUserName), agent_os_type = 4, if(actor_process_image_name in ("sudo", "su"), action_evtlog_data_fields->username)),
    XDM.Auth.Client.user.domain = if(action_evtlog_data_fields->SubjectDomainName != "-", action_evtlog_data_fields->SubjectDomainName),
    XDM.Auth.Server.process.name = arrayindex(split(process_name, "\"), -1),
    XDM.Auth.Server.process.pid = if(agent_os_type=1, to_integer(action_evtlog_data_fields->ProcessId), is_login_mac_linux=True, action_evtlog_pid),
    XDM.Auth.Server.process.command_line = actor_process_command_line,
    XDM.Auth.Server.process.causality_id = actor_process_causality_id,
    XDM.Auth.Server.process.integrity_level = actor_process_integrity_level,
    XDM.Auth.Server.process.executable.filename = action_process_image_name,
    XDM.Auth.Server.process.executable.path = process_name,
    XDM.Auth.Server.process.executable.directory = arrayindex(split(process_name, "\"), -2),
    XDM.Auth.Server.process.executable.extension = arrayindex(split(process_name, "."), -1),
    XDM.Auth.Server.process.executable.md5 = actor_process_image_md5,
    XDM.Auth.Server.process.executable.sha256 = actor_process_image_sha256,
    XDM.Auth.Server.process.executable.is_signed = if(actor_process_signature_status in (1, 2, 5, 7), True, False),
    XDM.Auth.Server.process.executable.signer = actor_process_signature_vendor,
    XDM.Auth.Server.process.executable.signature_status = if(actor_process_signature_status = 1, XDM_CONST.SIGNATURE_STATUS_SIGNED_VERIFIED, actor_process_signature_status in (2, 5, 7), XDM_CONST.SIGNATURE_STATUS_SIGNED_INVALID, actor_process_signature_status = 3, XDM_CONST.SIGNATURE_STATUS_UNSIGNED, XDM_CONST.SIGNATURE_STATUS_STATUS_UNKNOWN),
    XDM.Auth.Server.process.thread_id = actor_thread_thread_id,
    XDM.Auth.Server.process.is_injected = actor_is_injected_thread,
    XDM.Auth.Server.process.container_id = to_json_string(actor_container_info)->id,
    XDM.Auth.Target.host.os_family = if(agent_os_type=1, XDM_CONST.OS_FAMILY_WINDOWS, agent_os_type=2, XDM_CONST.OS_FAMILY_MACOS, agent_os_type=4, XDM_CONST.OS_FAMILY_LINUX),
    XDM.Auth.Target.host.os = agent_os_sub_type,
    XDM.Auth.Target.host.hostname = coalesce(action_evtlog_data_fields->TargetServerName, agent_hostname),
    XDM.Auth.Target.host.device_id = agent_id,
    XDM.Auth.Target.host.ipv4_addresses = arraymap(to_json_string(dst_agent_interface_map) -> [], to_json_string("@element" -> ipv4[])),
    XDM.Auth.Target.host.ipv6_addresses = arraymap(to_json_string(dst_agent_interface_map) -> [], to_json_string("@element" -> ipv6[])),
    XDM.Auth.Target.host.mac_addresses = arraymap(to_json_string(dst_agent_interface_map) -> [], to_json_string("@element" -> mac)),
    XDM.Auth.Target.domain = if(is_kerberos=True, action_evtlog_data_fields->TargetDomainName, is_ntlm=True, action_evtlog_data_fields->TargetUserName),
    XDM.Auth.Target.user.identifier = coalesce(action_evtlog_data_fields->TargetUserSid, actor_primary_user_sid),
    XDM.Auth.Target.user.username = if(is_kerberos=True or is_ntlm=True, action_evtlog_data_fields->TargetUserName, is_login_windows=True, if(action_evtlog_data_fields->TargetUserName != "-", action_evtlog_data_fields->TargetUserName), agent_os_type=2, if(actor_process_image_name="su", action_evtlog_data_fields->target_username, action_evtlog_data_fields->username), agent_os_type=4, action_evtlog_data_fields->username),
    XDM.Auth.Target.user.domain = if(is_kerberos=True or is_login_windows=True, action_evtlog_data_fields->TargetDomainName);

/* ------ PACKAGE: None ------ */

[MODEL: model=Network, dataset=xdr_data]
filter event_type=2
| alter
        app_ids = other->action_network_app_ids[],
        agent_interface_map = to_json_string(agent_interface_map)->[]
| alter
        XDM.Network.outcome = if(event_sub_type in (1, 4, 7, 10), XDM_CONST.OUTCOME_SUCCESS, event_sub_type in (5, 11) and action_network_stats_is_last = True, XDM_CONST.OUTCOME_SUCCESS, event_sub_type in (5, 11) and action_network_stats_is_last = False, XDM_CONST.OUTCOME_PARTIAL, event_sub_type = 6, XDM_CONST.OUTCOME_FAILED, event_sub_type = 18 AND action_network_icmp_data->type = "0" AND action_network_icmp_data->code = "0", XDM_CONST.OUTCOME_SUCCESS, event_sub_type = 18 and action_network_icmp_data->type = "3", XDM_CONST.OUTCOME_FAILED, XDM_CONST.OUTCOME_UNKNOWN),
        XDM.Network.session_id = action_network_connection_id,
        XDM.Network.ip_protocol = if(event_sub_type in (1, 2, 3, 4, 5, 6), XDM_CONST.IP_PROTOCOL_TCP, event_sub_type in (7, 8, 9, 10, 11), XDM_CONST.IP_PROTOCOL_UDP, event_type = 2 and event_sub_type = 18, XDM_CONST.IP_PROTOCOL_ICMP),
        XDM.Network.application_protocol = arrayindex(app_ids, -1),
        XDM.Network.protocol_layers = arrayconcat(arraycreate(if(action_network_is_ipv6 = True, "ipv6", "ip"), if(event_sub_type in (1, 2, 3, 4, 5, 6), "tcp", event_sub_type in (7, 8, 9, 10, 11), "udp", event_sub_type = 18, "icmp")), app_ids),
        XDM.Network.duration = to_integer(subtract(event_timestamp, action_network_creation_time)),
        XDM.Network.is_completed = if(event_sub_type in (4, 10) or (event_sub_type in (5, 11) and action_network_stats_is_last = True) or (event_type = 18 and action_network_icmp_data->type in ("0", "3", "14", "16", "18")), True, event_sub_type in (2, 3, 8, 9) or (event_sub_type in (5, 11) and action_network_stats_is_last = False) or (event_type = 18 and action_network_icmp_data->type in ("8", "13", "15", "17")), False),
        XDM.Network.icmp.type = to_integer(action_network_icmp_data->type),
        XDM.Network.icmp.code = to_integer(action_network_icmp_data->code),
        XDM.Network.dcerpc.interface_uuid = actor_rpc_interface_uuid,
        XDM.Network.dcerpc.opnum = actor_rpc_func_opnum,
        XDM.Network.original_event_id = event_id,
        XDM.Network.original_event_sub_type = to_string(event_sub_type),
        XDM.Network.event_timestamp = to_timestamp(event_timestamp, "MILLIS"),
        XDM.Network.original_event_type = to_string(event_type),
        XDM.Network.session_context_id = action_network_connection_id,
        XDM.Network.Observer.vendor = "PANW",
        XDM.Network.Observer.product = "Cortex Agent",
        XDM.Network.Observer.type = if(agent_install_type=0, XDM_CONST.AGENT_TYPE_REGULAR, agent_install_type in (1, 2), XDM_CONST.AGENT_TYPE_VDI, agent_install_type in (4, 5), XDM_CONST.AGENT_TYPE_COLLECTOR, to_string(agent_install_type)),
        XDM.Network.Observer.version = agent_version,
        XDM.Network.Observer.content_version = agent_content_version,
        XDM.Network.Observer.unique_identifier = agent_id,
        XDM.Network.Observer.name = agent_hostname,
        XDM.Network.Source.host.os_family = if(action_network_is_server = False, if(agent_os_type=1, XDM_CONST.OS_FAMILY_WINDOWS, agent_os_type=2, XDM_CONST.OS_FAMILY_MACOS,  agent_os_type=4, XDM_CONST.OS_FAMILY_LINUX)),
        XDM.Network.Source.host.os = if(action_network_is_server = False, agent_os_sub_type),
        XDM.Network.Source.host.hostname = if(action_network_is_server = False, agent_hostname),
        XDM.Network.Source.host.fqdn = if(action_network_is_server = True, action_external_hostname),
        XDM.Network.Source.host.device_id = if(action_network_is_server = False, agent_id),
        XDM.Network.Source.host.ipv4_addresses = if(action_network_is_server = False, arraymerge(arraymap(agent_interface_map, json_extract_scalar("@element", "$.ipv4")))),
        XDM.Network.Source.host.ipv6_addresses = if(action_network_is_server = False, arraymerge(arraymap(agent_interface_map, json_extract_scalar("@element", "$.ipv6")))),
        XDM.Network.Source.host.mac_addresses = if(action_network_is_server = False, arraymap(agent_interface_map, json_extract_scalar("@element", "$.mac"))),
        XDM.Network.Source.agent.identifier = if(action_network_is_server = False, agent_id),
        XDM.Network.Source.agent.type = if(action_network_is_server = False, if(agent_install_type=0, XDM_CONST.AGENT_TYPE_REGULAR, agent_install_type in (1, 2), XDM_CONST.AGENT_TYPE_VDI, agent_install_type in (4, 5), XDM_CONST.AGENT_TYPE_COLLECTOR, to_string(agent_install_type))),
        XDM.Network.Source.agent.version = if(action_network_is_server = False, agent_version),
        XDM.Network.Source.agent.content_version = if(action_network_is_server = False, agent_content_version),
        XDM.Network.Source.user.identifier = if(action_network_is_server = False, actor_primary_user_sid),
        XDM.Network.Source.user.username = if(action_network_is_server = False, actor_primary_username),
        XDM.Network.Source.process.name = if(action_network_is_server = False, actor_process_image_name),
        XDM.Network.Source.process.pid = if(action_network_is_server = False, actor_process_os_pid),
        XDM.Network.Source.process.identifier = if(action_network_is_server = False, actor_process_instance_id),
        XDM.Network.Source.process.command_line = if(action_network_is_server = False, actor_process_command_line),
        XDM.Network.Source.process.causality_id = if(action_network_is_server = False, actor_process_causality_id),
        XDM.Network.Source.process.integrity_level = if(action_network_is_server = False, actor_process_integrity_level),
        XDM.Network.Source.process.executable.filename = if(action_network_is_server = False, actor_process_image_name),
        XDM.Network.Source.process.executable.path = if(action_network_is_server = False, actor_process_image_path),
        XDM.Network.Source.process.executable.directory = if(action_network_is_server = False, if(actor_process_image_path contains "/", arrayindex(split(actor_process_image_path, "/"), -2), actor_process_image_path contains """\\""", arrayindex(split(actor_process_image_path, """\\"""), -2))),
        XDM.Network.Source.process.executable.extension = if(action_network_is_server = False, actor_process_image_extension),
        XDM.Network.Source.process.executable.md5 = if(action_network_is_server = False, actor_process_image_md5),
        XDM.Network.Source.process.executable.sha256 = if(action_network_is_server = False, actor_process_image_sha256),
        XDM.Network.Source.process.executable.is_signed = if(action_network_is_server = False, if(actor_process_signature_status in (1, 2, 5, 7), True, False)),
        XDM.Network.Source.process.executable.signer = if(action_network_is_server = False, actor_process_signature_vendor),
        XDM.Network.Source.process.executable.signature_status = if(action_network_is_server=False, if(actor_process_signature_status = 1, XDM_CONST.SIGNATURE_STATUS_SIGNED_VERIFIED, actor_process_signature_status in (2, 5, 7), XDM_CONST.SIGNATURE_STATUS_SIGNED_INVALID, actor_process_signature_status = 3, XDM_CONST.SIGNATURE_STATUS_UNSIGNED, XDM_CONST.SIGNATURE_STATUS_STATUS_UNKNOWN)),
        XDM.Network.Source.process.thread_id = if(action_network_is_server = False, actor_thread_thread_id),
        XDM.Network.Source.process.is_injected = if(action_network_is_server = False, actor_is_injected_thread),
        XDM.Network.Source.process.container_id = if(action_network_is_server = False, actor_process_container_id),
        XDM.Network.Source.ipv4 = if(action_network_is_ipv6 = False, if(action_network_is_server = False, action_local_ip, action_remote_ip)),
        XDM.Network.Source.ipv6 = if(action_network_is_ipv6 = True, if(action_network_is_server = False, action_local_ip, action_remote_ip)),
        XDM.Network.Source.port = if(action_network_is_server = False, action_local_port, action_remote_port),
        XDM.Network.Source.bytes = if(action_network_is_server = False, action_total_upload, action_total_download),
        XDM.Network.Destination.host.os_family = if(action_network_is_server = True, if(agent_os_type=1, XDM_CONST.OS_FAMILY_WINDOWS, agent_os_type=2, XDM_CONST.OS_FAMILY_MACOS,  agent_os_type=4, XDM_CONST.OS_FAMILY_LINUX)),
        XDM.Network.Destination.host.os = if(action_network_is_server = True, agent_os_sub_type),
        XDM.Network.Destination.host.hostname = if(action_network_is_server = True, agent_hostname),
        XDM.Network.Destination.host.fqdn = if(action_network_is_server = False, action_external_hostname),
        XDM.Network.Destination.host.device_id = if(action_network_is_server = True, agent_id),
        XDM.Network.Destination.host.ipv4_addresses = if(action_network_is_server = True, arraymerge(arraymap(agent_interface_map, json_extract_scalar("@element", "$.ipv4")))),
        XDM.Network.Destination.host.ipv6_addresses = if(action_network_is_server = True, arraymerge(arraymap(agent_interface_map, json_extract_scalar("@element", "$.ipv6")))),
        XDM.Network.Destination.host.mac_addresses = if(action_network_is_server = True, arraymap(agent_interface_map, json_extract_scalar("@element", "$.mac"))),
        XDM.Network.Destination.agent.identifier = if(action_network_is_server = True, agent_id),
        XDM.Network.Destination.agent.type = if(action_network_is_server=True, if(agent_install_type=0, XDM_CONST.AGENT_TYPE_REGULAR, agent_install_type in (1, 2), XDM_CONST.AGENT_TYPE_VDI, agent_install_type in (4, 5), XDM_CONST.AGENT_TYPE_COLLECTOR, to_string(agent_install_type))),
        XDM.Network.Destination.agent.version = if(action_network_is_server = True, agent_version),
        XDM.Network.Destination.agent.content_version = if(action_network_is_server = True, agent_content_version),
        XDM.Network.Destination.user.identifier = if(action_network_is_server = True, actor_primary_user_sid),
        XDM.Network.Destination.user.username = if(action_network_is_server = True, actor_primary_username),
        XDM.Network.Destination.process.name = if(action_network_is_server = True, actor_process_image_name),
        XDM.Network.Destination.process.pid = if(action_network_is_server = True, actor_process_os_pid),
        XDM.Network.Destination.process.identifier = if(action_network_is_server = True, actor_process_instance_id),
        XDM.Network.Destination.process.command_line = if(action_network_is_server = True, actor_process_command_line),
        XDM.Network.Destination.process.causality_id = if(action_network_is_server = True, actor_process_causality_id),
        XDM.Network.Destination.process.integrity_level = if(action_network_is_server = True, actor_process_integrity_level),
        XDM.Network.Destination.process.executable.filename = if(action_network_is_server = True, actor_process_image_name),
        XDM.Network.Destination.process.executable.path = if(action_network_is_server = True, actor_process_image_path),
        XDM.Network.Destination.process.executable.directory = if(action_network_is_server = True, if(actor_process_image_path contains "/", arrayindex(split(actor_process_image_path, "/"), -2), actor_process_image_path contains """\\""", arrayindex(split(actor_process_image_path, """\\"""), -2))),
        XDM.Network.Destination.process.executable.extension = if(action_network_is_server = True, actor_process_image_extension),
        XDM.Network.Destination.process.executable.md5 = if(action_network_is_server = True, actor_process_image_md5),
        XDM.Network.Destination.process.executable.sha256 = if(action_network_is_server = True, actor_process_image_sha256),
        XDM.Network.Destination.process.executable.signer = if(action_network_is_server = True, actor_process_signature_vendor),
        XDM.Network.Destination.process.executable.signature_status = if(action_network_is_server=True, if(actor_process_signature_status = 1, XDM_CONST.SIGNATURE_STATUS_SIGNED_VERIFIED, actor_process_signature_status in (2, 5, 7), XDM_CONST.SIGNATURE_STATUS_SIGNED_INVALID, actor_process_signature_status = 3, XDM_CONST.SIGNATURE_STATUS_UNSIGNED, XDM_CONST.SIGNATURE_STATUS_STATUS_UNKNOWN)),
        XDM.Network.Destination.process.thread_id = if(action_network_is_server = True, actor_thread_thread_id),
        XDM.Network.Destination.process.is_injected = if(action_network_is_server = True, actor_is_injected_thread),
        XDM.Network.Destination.process.container_id = if(action_network_is_server = True, actor_process_container_id),
        XDM.Network.Destination.ipv4 = if(action_network_is_ipv6 = False, if(action_network_is_server = False, action_remote_ip, action_local_ip)),
        XDM.Network.Destination.ipv6 = if(action_network_is_ipv6 = True, if(action_network_is_server = False, action_remote_ip, action_local_ip)),
        XDM.Network.Destination.port = if(action_network_is_server = False, action_remote_port, action_local_port),
        XDM.Network.Destination.bytes = if(action_network_is_server = False, action_total_download, action_total_upload);
/* -------------------------------------
   ------- Marketplace mappings --------
   ------------------------------------- */

/* ------ PACKAGE: GitHub ------ */

[MODEL: dataset=github_github_audit_raw, model=Auth, content_id="GitHub"]
filter action in("oauth_application*","org_credential_authorization*")
| alter XDM.Auth.Client.user.username = actor,
        XDM.Auth.Client.location.country = json_extract_scalar(actor_location, "$.country_code"),
        XDM.Auth.event_timestamp = timestamp_seconds(to_integer(divide(created_at, 1000))),
        XDM.Auth.original_event_type = action;

[MODEL: dataset=github_github_audit_raw, model=Audit, content_id="GitHub"]
filter action in("org*","role*","account*","advisory_credit*","billing*","business*","codespaces*","dependabot_alerts*","dependabot_alerts_new_repos*","dependabot_security_updates*","dependabot_security_updates_new_repos*","dependency_graph*","dependency_graph_new_repos*","discussion_post*","discussion_post_reply*","enterprise*","environment*","git*","hook*","integration_installation_request*","ip_allow_list*","ip_allow_list_entry*","issue*","marketplace_agreement_signature*","marketplace_listing*","members_can_create_pages*","org_secret_scanning_custom_pattern*","organization_label*","packages*","payment_method*","profile_picture*","project*","protected_branch*","pull_request*","pull_request_review*","pull_request_review_comment*","repo*","repository_advisory*","repository_content_analysis*","repository_dependency_graph*","repository_secret_scanning*","repository_secret_scanning_custom_pattern*","repository_secret_scanning_push_protection*","repository_vulnerability_alert*","repository_vulnerability_alerts*","secret_scanning*","secret_scanning_new_repos*","sponsors*","team*","team_discussions*","workflows*")
| alter XDM.Audit.TriggeredBy.location.country = json_extract_scalar(actor_location, "$.country_code"),
        XDM.Audit.identity.name = org,
        XDM.Audit.project = repo,
        XDM.Audit.TriggeredBy.identity.name = actor,
        XDM.Audit.event_timestamp = timestamp_seconds(to_integer(divide(created_at, 1000))),
        XDM.Audit.original_event_type = action;
/* ------ PACKAGE: MySQLEnterprise ------ */

[MODEL: dataset=filestream_filestream_raw, model=Audit, content_id="MySQLEnterprise"]
filter json_extract_scalar(_raw_log, "$.class") = "audit"
| alter XDM.Audit.operation_type = json_extract_scalar(_raw_log, "$.class"),
XDM.Audit.event_timestamp = parse_timestamp("%Y-%m-%d %H:%M:%S", json_extract_scalar(_raw_log, "$.timestamp")),
XDM.Audit.operation_sub_type =  json_extract_scalar(_raw_log, "$.event"),
XDM.Audit.audited_resource.id =  json_extract_scalar(_raw_log, "$.startup_data.server_id"),
XDM.Audit.audited_resource.type =  json_extract_scalar(_raw_log, "$.startup_data.os_version"),
XDM.Audit.audited_resource.sub_type =  json_extract_scalar(_raw_log, "$.startup_data.mysql_version");

[MODEL: dataset=filestream_filestream_raw, model=Auth, content_id="MySQLEnterprise"]
filter json_extract_scalar(_raw_log, "$.class") = "connection"
| alter XDM.Auth.original_event_type = json_extract_scalar(_raw_log, "$.class"),
XDM.Auth.event_timestamp = parse_timestamp("%Y-%m-%d %H:%M:%S", json_extract_scalar(_raw_log, "$.timestamp")),
XDM.Auth.Client.user.username = json_extract_scalar(_raw_log, "$.account.user"),
XDM.Auth.Client.host.hostname = json_extract_scalar(_raw_log, "$.account.host"),
XDM.Auth.Target.user.identifier = json_extract_scalar(_raw_log, "$.login.user"),
XDM.Auth.Target.host.os = json_extract_scalar(_raw_log, "$.login.os"),
XDM.Auth.Target.ipv4 = json_extract_scalar(_raw_log, "$.login.ip");

[MODEL: dataset=filestream_filestream_raw, model=Database, content_id="MySQLEnterprise"]
filter json_extract_scalar(_raw_log, "$.class") = "table_access"
| alter XDM.Database.original_event_type = json_extract_scalar(_raw_log, "$.class"),
XDM.Database.event_timestamp = parse_timestamp("%Y-%m-%d %H:%M:%S", json_extract_scalar(_raw_log, "$.timestamp")),
XDM.Database.name = json_extract_scalar(_raw_log, "$.table_access_data.db"),
XDM.Database.tables = split(json_extract_scalar(_raw_log, "$.table_access_data.table")),
XDM.Database.statement = json_extract_scalar(_raw_log, "$.table_access_data.query"),
XDM.Database.operation = json_extract_scalar(_raw_log, "$.table_access_data.sql_command"),
XDM.Database.connection_id = json_extract_scalar(_raw_log, "$.connection_id");

/* ------ PACKAGE: RedHat ------ */

[MODEL: dataset="filestream_filestream_raw", model="Auth", content_id="RedHat"]
filter _log_source_file_name ~= "secure"

| alter timestamp = arrayindex(regextract(_raw_log , "\w+\s\d{1,2}\s\d{2}(?::\d{2}){2}"), 0)
| alter hostname =  arrayindex(regextract(_raw_log , "^\w+\s{1,2}\d{1,2}\s\d{2}\S\d{2}\S\d{2}\s+(\w+)\s"), 0)
| alter process_name =  arrayindex(regextract(_raw_log , "^\w+\s{1,2}\d{1,2}\s\d{2}\S\d{2}\S\d{2}\s+\w+\s([\w|\-\/]+)\[*"), 0)
| alter pid = to_integer(arrayindex(regextract(_raw_log , "^\w+\s{1,2}\d{1,2}\s\d{2}\S\d{2}\S\d{2}\s+\w+\s\w+\S*?(\d*)\]") ,0))
| alter event_description = arrayindex(regextract(_raw_log , "^\w+\s{1,2}\d{1,2}\s\d{2}\S\d{2}\S\d{2}\s+\w+\s\S+\:(.+$)") ,0)
| alter src_ip = arrayindex(regextract(_raw_log ,"\s(\d{1,3}(?:\.\d{1,3}){3})") ,0)

| alter XDM.Auth.event_timestamp = parse_timestamp("%Y-%m-%d %H:%M:%S", timestamp)
| alter XDM.Auth.Client.host.hostname = hostname
| alter XDM.Auth.Client.process.name = process_name
| alter XDM.Auth.Client.process.pid = pid
| alter XDM.Auth.original_event_description = event_description
| alter XDM.Auth.Client.ipv4 = src_ip;


[MODEL: dataset="filestream_filestream_raw", model="Endpoint", content_id="RedHat"]
filter _log_source_file_name ~= "messages"

| alter timestamp = arrayindex(regextract(_raw_log , "\w+\s\d{1,2}\s\d{2}(?::\d{2}){2}"), 0)
| alter hostname =  arrayindex(regextract(_raw_log , "^\w+\s{1,2}\d{1,2}\s\d{2}\S\d{2}\S\d{2}\s+(\w+)\s"), 0)
| alter process_name =  arrayindex(regextract(_raw_log , "^\w+\s{1,2}\d{1,2}\s\d{2}\S\d{2}\S\d{2}\s+\w+\s([\w|\-\/]+)\[*"), 0)
| alter pid = to_integer(arrayindex(regextract(_raw_log , "^\w+\s{1,2}\d{1,2}\s\d{2}\S\d{2}\S\d{2}\s+\w+\s\w+\S*?(\d*)\]") ,0))
| alter event_description = arrayindex(regextract(_raw_log , "^\w+\s{1,2}\d{1,2}\s\d{2}\S\d{2}\S\d{2}\s+\w+\s\S+\:(.+$)") ,0)
| alter src_ip = arrayindex(regextract(_raw_log ,"\s(\d{1,3}(?:\.\d{1,3}){3})") ,0)

| alter XDM.Endpoint.event_timestamp = parse_timestamp("%Y-%m-%d %H:%M:%S", timestamp)
| alter XDM_endpoint_hostname = hostname
| alter XDM.Endpoint.Actor.process.name = process_name
| alter XDM.Endpoint.Actor.process.pid = pid
| alter XDM.Endpoint.original_event_description = event_description;






[MODEL: dataset=msft_azure_raw, model=Endpoint]
filter category in (
        "AdvancedHunting-DeviceEvents", "AdvancedHunting-DeviceRegistryEvents",
        "AdvancedHunting-DeviceProcessEvents", "AdvancedHunting-DeviceImageLoadEvents")
|alter
        //XDM.Endpoint.Actor.host.user.domain = json_extract_scalar(properties, "$.AccountDomain"),
        //XDM.Endpoint.Actor.host.user.identifier = json_extract_scalar(properties, "$.AccountSid"),
        //XDM.Endpoint.Actor.host.user.username = json_extract_scalar(properties, "$.AccountName"),
        XDM.Endpoint.event_timestamp = parse_timestamp("%Y-%m-%dT%H:%M:%E*SZ", json_extract_scalar(properties, "$.Timestamp")),
        XDM.Endpoint.Actor.host.hostname = json_extract_scalar(properties, "$.RemoteDeviceName"),
        XDM.Endpoint.Actor.host.ipv4_addresses = if(json_extract_scalar(properties, "$.LocalIP") != null, arraycreate(json_extract_scalar(properties, "$.LocalIP")), null),
        XDM.Endpoint.Actor.process.command_line = coalesce(json_extract_scalar(properties, "$.InitiatingProcessCommandLine"), json_extract_scalar(properties, "$.ProcessCommandLine")),
        XDM.Endpoint.Actor.process.executable.directory = json_extract_scalar(properties, "$.InitiatingProcessFolderPath"),
        XDM.Endpoint.Actor.process.executable.filename = json_extract_scalar(properties, "$.InitiatingProcessFileName"),
        XDM.Endpoint.Actor.process.executable.md5 = json_extract_scalar(properties, "$.InitiatingProcessMD5"),
        XDM.Endpoint.Actor.process.executable.sha256 = json_extract_scalar(properties, "$.InitiatingProcessSHA256"),
        XDM.Endpoint.Actor.process.executable.signer = json_extract_scalar(properties, "$.InitiatingProcessVersionInfoCompanyName"),
        XDM.Endpoint.Actor.process.integrity_level = to_integer(json_extract_scalar(properties, "$.InitiatingProcessIntegrityLevel")),
        XDM.Endpoint.Actor.process.parent_id = json_extract_scalar(properties, "$.InitiatingProcessParentId"),
        XDM.Endpoint.Actor.process.pid = to_integer(json_extract_scalar(properties, "$.InitiatingProcessId")),
        XDM.Endpoint.Actor.user.domain = coalesce(json_extract_scalar(properties, "$.InitiatingProcessAccountDomain"), json_extract_scalar(properties, "$.InitiatingProcessCreationTime")),
        XDM.Endpoint.Actor.user.identifier = coalesce(json_extract_scalar(properties, "$.InitiatingProcessAccountName"), json_extract_scalar(properties, "$.InitiatingProcessAccountSid")),
        XDM.Endpoint.Actor.user.username = coalesce(json_extract_scalar(properties, "$.InitiatingProcessAccountDomain"), json_extract_scalar(properties, "$.InitiatingProcessAccountName")),
        XDM.Endpoint.operation = json_extract_scalar(properties, "$.ActionType"),
        XDM.Endpoint.original_event_id = json_extract_scalar(properties, "$.ReportId"),
        XDM.Endpoint.original_event_sub_type = json_extract_scalar(properties, "$.ActionType"),
        XDM.Endpoint.Target.file.directory = json_extract_scalar(properties, "$.FolderPath"),
        XDM.Endpoint.Target.file.filename = json_extract_scalar(properties, "$.FileName"),
        XDM.Endpoint.Target.file.md5 = json_extract_scalar(properties, "$.MD5"),
        XDM.Endpoint.Target.file.path = json_extract_scalar(properties, "$.FolderPath"),
        XDM.Endpoint.Target.file.sha256 = json_extract_scalar(properties, "$.SHA256"),
        XDM.Endpoint.Target.file.signer = json_extract_scalar(properties, "$.ProcessVersionInfoCompanyName"),
        XDM.Endpoint.Target.host.device_id = json_extract_scalar(properties, "$.DeviceId"),
        XDM.Endpoint.Target.host.fqdn = json_extract_scalar(properties, "$.DeviceName"),
        XDM.Endpoint.Target.host.ipv4_addresses = if(json_extract_scalar(properties, "$.RemoteIP") != null, arraycreate(json_extract_scalar(properties, "$.RemoteIP")), null),
        XDM.Endpoint.Target.process.integrity_level = to_integer(json_extract_scalar(properties, "$.ProcessIntegrityLevel")),
        XDM.Endpoint.Target.process.pid = to_integer(json_extract_scalar(properties, "$.ProcessId")),
        XDM.Endpoint.Target.registry.data = json_extract_scalar(properties, "$.RegistryValueData"),
        XDM.Endpoint.Target.registry.key = json_extract_scalar(properties, "$.RegistryKey"),
        XDM.Endpoint.Target.registry.value = coalesce(json_extract_scalar(properties, "$.RegistryValueData"), json_extract_scalar(properties, "$.RegistryValueName")),
        XDM.Endpoint.Target.registry.value_type = json_extract_scalar(properties, "$.RegistryValueType"),
        XDM.Endpoint.Target.registry_before.data = json_extract_scalar(properties, "$.PreviousRegistryValueData"),
        XDM.Endpoint.Target.registry_before.key = json_extract_scalar(properties, "$.PreviousRegistryKey"),
        XDM.Endpoint.Target.registry_before.value = json_extract_scalar(properties, "$.PreviousRegistryValueName");


[MODEL: dataset=msft_azure_raw, model=Network]
filter category in (
        "AdvancedHunting-DeviceEvents", "AdvancedHunting-DeviceLogonEvents",
        "AdvancedHunting-DeviceNetworkEvents", "AdvancedHunting-EmailUrlInfo")
|alter
    XDM.Network.event_timestamp = parse_timestamp("%Y-%m-%dT%H:%M:%E*SZ", json_extract_scalar(properties, "$.Timestamp")),
    XDM.Network.Destination.ipv4 = json_extract_scalar(properties, "$.RemoteIP"),
    XDM.Network.Destination.port = to_integer(coalesce(json_extract_scalar(properties, "$.RemoteIPType"), json_extract_scalar(properties, "$.RemotePort"))),
    XDM.Network.http.domain = json_extract_scalar(properties, "$.UrlDomain"),
    XDM.Network.http.url = coalesce(json_extract_scalar(properties, "$.RemoteUrl"), json_extract_scalar(properties, "$.Url")),
    XDM.Network.ip_protocol = json_extract_scalar(properties, "$.Protocol"),
    XDM.Network.original_event_id = json_extract_scalar(properties, "$.ReportId"),
    XDM.Network.original_event_sub_type = json_extract_scalar(properties, "$.ActionType"),
    XDM.Network.session_context_id = json_extract_scalar(properties, "$.NetworkMessageId"),
    XDM.Network.Source.host.device_id = json_extract_scalar(properties, "$.DeviceId"),
    XDM.Network.Source.host.fqdn = json_extract_scalar(properties, "$.DeviceName"),
    XDM.Network.Source.host.ipv4_addresses = if(json_extract_scalar(properties, "$.FileOriginIP") != null, arraycreate(json_extract_scalar(properties, "$.FileOriginIP")), null),
    XDM.Network.Source.ipv4 = json_extract_scalar(properties, "$.LocalIP"),
    XDM.Network.Source.port = to_integer(json_extract_scalar(properties, "$.LocalPort")),
    XDM.Network.Source.process.command_line = json_extract_scalar(properties, "$.InitiatingProcessCommandLine"),
    XDM.Network.Source.process.executable.directory = json_extract_scalar(properties, "$.InitiatingProcessFolderPath"),
    XDM.Network.Source.process.executable.filename = json_extract_scalar(properties, "$.InitiatingProcessFileName"),
    XDM.Network.Source.process.executable.md5 = json_extract_scalar(properties, "$.InitiatingProcessMD5"),
    XDM.Network.Source.process.executable.sha256 = json_extract_scalar(properties, "$.InitiatingProcessSHA256"),
    XDM.Network.Source.process.executable.signer = json_extract_scalar(properties, "$.InitiatingProcessVersionInfoCompanyName"),
    XDM.Network.Source.process.integrity_level = to_integer(json_extract_scalar(properties, "$.InitiatingProcessIntegrityLevel")),
    XDM.Network.Source.process.parent_id = json_extract_scalar(properties, "$.InitiatingProcessParentId"),
    XDM.Network.Source.process.pid = to_integer(json_extract_scalar(properties, "$.InitiatingProcessId")),
    XDM.Network.Source.user.domain = json_extract_scalar(properties, "$.InitiatingProcessAccountDomain"),
    XDM.Network.Source.user.identifier = json_extract_scalar(properties, "$.InitiatingProcessAccountSid");


[MODEL: dataset=msft_azure_raw, model=Auth]
filter category in (
                "AdvancedHunting-DeviceLogonEvents"
                ,"AdvancedHunting-DeviceProcessEvents"
                ,"AdvancedHunting-IdentityLogonEvents")
| alter
        XDM.Auth.event_timestamp = parse_timestamp("%Y-%m-%dT%H:%M:%E*SZ", json_extract_scalar(properties, "$.Timestamp")),
        XDM.Auth.application_protocol = json_extract_scalar(properties, "$.Protocol"),
        XDM.Auth.Client.application.name = json_extract_scalar(properties, "$.Application"),
        XDM.Auth.Client.host.device_category = json_extract_scalar(properties, "$.DeviceType"),
        XDM.Auth.Client.host.hostname = coalesce(json_extract_scalar(properties, "$.RemoteDeviceName"), json_extract_scalar(properties, "$.DeviceName")),
        XDM.Auth.Client.host.os = json_extract_scalar(properties, "$.OSPlatform"),
        XDM.Auth.Client.ipv4 = json_extract_scalar(properties, "$.IPAddress"),
        XDM.Auth.Client.location.country = json_extract_scalar(properties, "$.Location"),
        XDM.Auth.Client.port = to_integer(json_extract_scalar(properties, "$.Port")),
        XDM.Auth.Client.process.command_line = json_extract_scalar(properties, "$.InitiatingProcessCommandLine"),
        XDM.Auth.Client.process.executable.directory = json_extract_scalar(properties, "$.InitiatingProcessFolderPath"),
        XDM.Auth.Client.process.executable.filename = json_extract_scalar(properties, "$.InitiatingProcessFileName"),
        XDM.Auth.Client.process.executable.md5 = json_extract_scalar(properties, "$.InitiatingProcessMD5"),
        XDM.Auth.Client.process.executable.sha256 = json_extract_scalar(properties, "$.InitiatingProcessSHA256"),
        XDM.Auth.Client.process.executable.signer = json_extract_scalar(properties, "$.InitiatingProcessVersionInfoCompanyName"),
        XDM.Auth.Client.process.integrity_level = to_integer(json_extract_scalar(properties, "$.InitiatingProcessIntegrityLevel")),
        XDM.Auth.Client.process.parent_id = json_extract_scalar(properties, "$.InitiatingProcessParentId"),
        XDM.Auth.Client.process.pid = to_integer(json_extract_scalar(properties, "$.InitiatingProcessId")),
        XDM.Auth.Client.user.domain = coalesce(json_extract_scalar(properties, "$.InitiatingProcessAccountDomain"), json_extract_scalar(properties, "$.AccountDomain")),
        XDM.Auth.Client.user.identifier = coalesce(json_extract_scalar(properties, "$.AccountSid"), json_extract_scalar(properties, "$.InitiatingProcessAccountSid")),
        XDM.Auth.Client.user.username = coalesce(json_extract_scalar(properties, "$.InitiatingProcessAccountName"), json_extract_scalar(properties, "$.AccountName")),
        XDM.Auth.logon.is_elevated = to_boolean(json_extract_scalar(properties, "$.IsLocalAdmin")),
        XDM.Auth.logon.type = json_extract_scalar(properties, "$.LogonType"),
        XDM.Auth.original_event_id = json_extract_scalar(properties, "$.ReportId"),
        XDM.Auth.original_event_sub_type = json_extract_scalar(properties, "$.ActionType"),
        XDM.Auth.reason = json_extract_scalar(properties, "$.FailureReason"),
        XDM.Auth.Target.host.device_id = json_extract_scalar(properties, "$.DeviceId"),
        XDM.Auth.Target.host.fqdn = coalesce(json_extract_scalar(properties, "$.TargetDeviceName"), json_extract_scalar(properties, "$.DeviceName")),
        XDM.Auth.Target.host.hostname = json_extract_scalar(properties, "$.DestinationDeviceName"),
        XDM.Auth.Target.host.ipv4_addresses = if(json_extract_scalar(properties, "$.RemoteIP") != null, arraycreate(json_extract_scalar(properties, "$.RemoteIP")), null),
        XDM.Auth.Target.ipv4 = json_extract_scalar(properties, "$.DestinationIPAddress"),
        XDM.Auth.Target.port = to_integer(json_extract_scalar(properties, "$.DestinationPort")),
        XDM.Auth.Target.user.domain = json_extract_scalar(properties, "$.AccountDomain"),
        XDM.Auth.Target.user.identifier = json_extract_scalar(properties, "$.AccountSid"),
        XDM.Auth.Target.user.username = coalesce(json_extract_scalar(properties, "$.AccountName"), json_extract_scalar(properties, "$.TargetAccountDisplayName"));


[MODEL: dataset=msft_azure_raw, model=Email]
filter category = "AdvancedHunting-EmailEvents"
|alter
        XDM.Email.event_timestamp = parse_timestamp("%Y-%m-%dT%H:%M:%E*SZ", json_extract_scalar(properties, "$.Timestamp")),
        XDM.Email.message_id = json_extract_scalar(properties, "$.InternetMessageId"),
        XDM.Email.recipients = if(json_extract_scalar(properties, "$.RecipientEmailAddress") != null, arraycreate(json_extract_scalar(properties, "$.RecipientEmailAddress")), null),
        XDM.Email.return_path = json_extract_scalar(properties, "$.SenderMailFromAddress"),
        XDM.Email.sender = json_extract_scalar(properties, "$.SenderFromAddress"),
        XDM.Email.Server.host.fqdn = json_extract_scalar(properties, "$.SenderMailFromDomain"),
        XDM.Email.Server.host.ipv4_addresses = if(json_extract_scalar(properties, "$.SenderIPv4") != null, arraycreate(json_extract_scalar(properties, "$.SenderIPv4")), null),
        XDM.Email.Server.host.ipv6_addresses = if(json_extract_scalar(properties, "$.SenderIPv6") != null, arraycreate(json_extract_scalar(properties, "$.SenderIPv6")), null),
        XDM.Email.session_context_id = json_extract_scalar(properties, "$.NetworkMessageId"),
        XDM.Email.subject = json_extract_scalar(properties, "$.Subject"),
        XDM.Email.threat.category = json_extract_scalar(properties, "$.ThreatTypes"),
        XDM.Email.threat.name = json_extract_scalar(properties, "$.ThreatNames");


[MODEL: dataset=msft_azure_raw, model=Audit]
filter category = "AdvancedHunting-CloudAppEvents"
|alter
        XDM.Audit.event_timestamp = parse_timestamp("%Y-%m-%dT%H:%M:%E*SZ", json_extract_scalar(properties, "$.Timestamp")),
        XDM.Audit.identity.name = json_extract_scalar(properties, "$.ObjectId"),
        XDM.Audit.operation = json_extract_scalar(properties, "$.ActionType"),
        XDM.Audit.operation_type = json_extract_scalar(properties, "$.ActivityType"),
        XDM.Audit.original_event_id = json_extract_scalar(properties, "$.ReportId"),
        XDM.Audit.outcome = json_extract_scalar(properties, "$.RawEventData.ResultStatus"),
        XDM.Audit.TriggeredBy.agent.identifier = json_extract_scalar(properties, "$.UserAgent"),
        XDM.Audit.TriggeredBy.identity.name = json_extract_scalar(properties, "$.RawEventData.UserId"),
        XDM.Audit.TriggeredBy.ipv4 = json_extract_scalar(properties, "$.IPAddress"),
        XDM.Audit.TriggeredBy.location.city = json_extract_scalar(properties, "$.City"),
        XDM.Audit.TriggeredBy.location.country = json_extract_scalar(properties, "$.CountryCode");



