[MODEL: dataset=workday_sign_on_raw]
alter 
    // define util constants
    empty_string = "",
    boolean_true = to_boolean("TRUE"),
    boolean_false = to_boolean("FALSE"),
    // add labels for enriching event description according to the boolean flags
    sigon_successful_label = if(Successful = 1, "Signon was successful.", Successful = 0, "Signon was unsuccessful.", empty_string), 
    account_disabled_or_expired_label = if(Account_Disabled_or_Expired = 1, "Account is disabled or expired.", empty_string),
    device_trusted_label = if(Device_is_Trusted = 1, "Sign on is from a trusted device.", empty_string),
    failed_signon_label = if(Failed_Signon = 1, "An invalid password was supplied for the Signon attempt.", empty_string),
    invalid_credentials_label = if(Invalid_Credentials = 1, "User provided invalid credentials.", empty_string),
    invalid_auth_channel_label = if(Invalid_for_Authentication_Channel = 1, "Invalid for authentication channel.", empty_string),
    invalid_auth_policy_label = if(Invalid_for_Authentication_Policy = 1, "Invalid for authentication policy.", empty_string),
    mfa_required_label = if(Requires_MFA = 1, "MFA is required.", empty_string),
    mfa_has_grace_label = if(Has_Grace_Period_for_MFA = 1, "MFA has a grace period.", empty_string),
    mfa_auth_exempt_label = if(MFA_Authentication_Exempt = 1, "MFA authentication is exempted.", empty_string),
    mfa_enrollment_label = if(MFA_Enrollment = 1, "User is enrolled in MFA.", empty_string),
    password_change_required_label = if(Required_Password_Change = 1, "Password change required.", empty_string),
    password_reset_label = if(Forgotten_Password_Reset_Request = 1, "A request was made to reset the password in the Signon attempt.", empty_string),
    password_changed_label = if(Password_Changed = 1, "The password was changed after the signon.", empty_string),
    read_only_label = if(Tenant_Access_Read_Only = 1, "Read only Access is enabled for a signon.", empty_string)
| alter
    // init useful flags & extract nested json properties 
    device_type_reference_id = Device_Type_Reference -> ID, 
    is_account_disabled = if(Account_Disabled_or_Expired = 1, boolean_true, Account_Disabled_or_Expired = 0, boolean_false),
    is_mfa_needed = if(Requires_MFA = 1, boolean_true, Requires_MFA = 0, boolean_false),
    is_password_change_required = if(Required_Password_Change = 1, boolean_true, Required_Password_Change = 0, boolean_false), 
    is_sign_on_successful = if(Successful = 1, boolean_true, Successful = 0, boolean_false),
    mfa_authentication_type_id = Multi_Factor_Authentication_Type_Reference -> ID,
    os = lowercase(Operating_System),
    saml_identity_provider_id = SAML_Identity_Provider_Reference -> ID, 
    src_ipv4 = if(Signon_IP_Address ~= "\.", Signon_IP_Address),
    src_ipv6 = if(Signon_IP_Address ~= ":", Signon_IP_Address), 
    event_labels = arraycreate(sigon_successful_label, account_disabled_or_expired_label, device_trusted_label, failed_signon_label, invalid_credentials_label, invalid_auth_channel_label, invalid_auth_policy_label, mfa_required_label, mfa_has_grace_label, mfa_auth_exempt_label, mfa_enrollment_label, password_change_required_label, password_reset_label, password_changed_label, read_only_label)
| alter
    // map fields
    xdm.auth.auth_method = Authentication_Type,
    xdm.auth.is_mfa_needed = is_mfa_needed,
    xdm.auth.mfa.method = mfa_authentication_type_id, 
    xdm.auth.mfa.provider = if(MFA_Enrollment = 1, saml_identity_provider_id), 
    xdm.event_type = if(is_sign_on_successful, "Successful Signon", is_sign_on_successful = false, "Signon Failure", "Signon"),
    xdm.event_description = arraystring(event_labels, " ")
    xdm.event.outcome = if(is_sign_on_successful, XDM_CONST.OUTCOME_SUCCESS, is_sign_on_successful = boolean_false, XDM_CONST.OUTCOME_FAILED, XDM_CONST.OUTCOME_UNKNOWN),
    xdm.event.outcome_reason = Authentication_Failure_Message, 
    xdm.event.duration = timestamp_diff(Signoff_DateTime, Signon_DateTime, "MILLISECOND"), 
    xdm.logon.type = Authentication_Channel, 
    xdm.network.session_id = Short_Session_ID,
    xdm.network.tls.protocol_version = TLS_Version, 
    xdm.observer.unique_identifier = API_Client_ID,
    xdm.source.application.name = Authentication_Channel,
    xdm.source.host.device_id = device_type_reference_id, 
    xdm.source.host.os = Operating_System, 
    xdm.source.host.os_family = if(os contains "windows", XDM_CONST.OS_FAMILY_WINDOWS, os contains "mac", XDM_CONST.OS_FAMILY_MACOS, os contains "linux", XDM_CONST.OS_FAMILY_LINUX, os contains "android", XDM_CONST.OS_FAMILY_ANDROID, os contains "ios", XDM_CONST.OS_FAMILY_IOS, os contains "ubuntu", XDM_CONST.OS_FAMILY_UBUNTU, os contains "debian", XDM_CONST.OS_FAMILY_DEBIAN, os contains "fedora", XDM_CONST.OS_FAMILY_FEDORA, os contains "centos", XDM_CONST.OS_FAMILY_CENTOS, os contains "chrome", XDM_CONST.OS_FAMILY_CHROMEOS, os contains "solaris", XDM_CONST.OS_FAMILY_SOLARIS, os contains "scada", XDM_CONST.OS_FAMILY_SCADA, Operating_System),
    xdm.source.ipv4 = src_ipv4,
    xdm.source.ipv6 = src_ipv6, 
    xdm.source.user_agent = Browser_Type,
    xdm.source.user.is_disabled = is_account_disabled,
    xdm.source.user.is_password_expired = is_password_change_required,
    xdm.source.user.username = User_Name,
    xdm.source.zone = Location;