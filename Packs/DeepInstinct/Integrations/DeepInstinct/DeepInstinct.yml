commonfields:
  id: Deep Instinct
  version: -1
name: Deep Instinct
display: Deep Instinct
category: Network Security
description: Deep Instinct
configuration:
- display: base server url
  name: base_url
  defaultvalue: ""
  type: 0
  required: true
- display: api key
  name: apikey
  defaultvalue: ""
  type: 4
  required: true
- display: Fetch incidents
  name: isFetch
  type: 8
  required: false
- display: Incident type
  name: incidentType
  type: 13
  required: false
- display: first event id to fetch from
  name: first_fetch_id
  defaultvalue: "0"
  type: 0
  required: false
script:
  script: |-
    import requests
    import json
    from datetime import datetime
    requests.packages.urllib3.disable_warnings()

    BASE_URL = demisto.params().get('base_url')
    API_KEY = demisto.params().get('apikey')
    API_SUFFIX = "/api/v1"

    '''HELPER FUNCTIONS'''
    def http_request(method, url_suffix, params=None, json=None):
        headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'Authorization': str(API_KEY)
        }
        r = requests.request(
            method,
            BASE_URL + API_SUFFIX + url_suffix,
            json=json,
            headers=headers,
            params=params,
            verify=False
        )

        if r.status_code not in (200, 204):
            s = 'Error in API call [%d] - %s ' % (r.status_code, r.reason)
            return_error(message=s)
        try:
            return r.json()
        except ValueError:
            return None


    def get_specific_device():
        """
        Get specific device by id
        """
        device_id = demisto.args().get('device_id')
        result = http_request('GET', "/devices/%s" % str(device_id))
        ec = {'DeepInstinct.Devices(val.id && val.id == obj.id)': result}

        return_outputs(
            readable_output=tableToMarkdown('Device', result),
            outputs=ec,
            raw_response=result
        )


    def add_hash_to_bl():
        """
        Add hash to blacklist
        """
        policy_id = demisto.args().get('policy_id')
        file_hash = demisto.args().get('file_hash')
        http_request('POST', '/policies/%s/blacklist/hashes/%s' % (str(policy_id), file_hash), json={"comment": ""})
        demisto.results('ok')


    def add_hash_to_wl():
        """
        Add hash to whitelist
        """
        policy_id = demisto.args().get('policy_id')
        file_hash = demisto.args().get('file_hash')
        http_request('POST', '/policies/%s/whitelist/hashes/%s' % (str(policy_id), file_hash), json={"comment": ""})
        demisto.results('ok')


    def add_devices_to_group():
        """
        Add devices to specific group
        """
        group_id = demisto.args().get('group_id')
        device_ids_input = demisto.args().get('device_ids')
        device_ids = [int(num) for num in device_ids_input.split(",")]
        http_request('POST', '/groups/%s/add-devices' % str(group_id), json={"devices": device_ids})
        demisto.results('ok')


    def remove_devices_from_group():
        """
        Remove devices from group
        """
        group_id = demisto.args().get('group_id')
        device_ids_input = demisto.args().get('device_ids')
        device_ids = [int(num) for num in device_ids_input.split(",")]

        http_request('POST', '/groups/%s/remove-devices' % str(group_id), json={"devices": device_ids})
        demisto.results('ok')


    def delete_files_remotely():
        """
        Delete given file ids remotely
        """
        event_ids_input = demisto.args().get('event_ids')
        event_ids = [int(num) for num in event_ids_input.split(",")]
        http_request('POST', '/devices/actions/delete-remote-files', json={"ids": event_ids})
        demisto.results('ok')


    def terminate_remote_processes():
        """
        Terminate remove processes by given event ids
        """
        event_ids_input  = demisto.args().get('event_ids')
        event_ids = [int(num) for num in event_ids_input.split(",")]
        http_request('POST', '/devices/actions/terminate-remote-process', json={"ids": event_ids})
        demisto.results('ok')


    def close_events():
        """
        Close events by event ids
        """
        event_ids_input = demisto.args().get('event_ids')
        event_ids = [int(num) for num in event_ids_input.split(",")]
        http_request('POST', '/events/actions/close', json={"ids": event_ids})
        demisto.results('ok')


    def fetch_incidents():
        incidents = []
        last_id = demisto.params().get('first_fetch_id')

        last_run = demisto.getLastRun()
        if last_run:
            if last_run.has_key('last_id'):
                last_id = last_run.get('last_id')

        params = {"after_id": last_id}
        events = http_request('GET', '/events', params)
        while events and events['events']:
            for event in events['events']:
                incident = {
                    'name': str(event['id']),        # name is required field, must be set
                    'occurred': event['insertion_timestamp'],
                    'rawJSON': json.dumps(event)
                }
                incidents.append(incident)

            demisto.setLastRun({'start_time': str(datetime.now().time()), 'last_id':events['last_id']})
            params = {"after_id": events['last_id']}
            events = http_request('GET', '/events', params)

        demisto.incidents(incidents)


    def test_module():
        http_request('GET', "/health_check")
        demisto.results("ok")


    # Commands
    if demisto.command() == 'test-module':
        """
         test module
        """
        test_module()

    if demisto.command() == 'di-get-device':
        """
        Get device by id
        """
        get_specific_device()

    if demisto.command() == 'di-hash-to-bl':
        """
        Add hash to blacklist
        """
        add_hash_to_bl()

    if demisto.command() == 'di-hash-to-wl':
        """
        Add hash to whitelist
        """
        add_hash_to_wl()

    if demisto.command() == 'di-add-devices-to-group':
        """
        Add devices to groups
        """
        add_devices_to_group()

    if demisto.command() == 'di-remove-devices-from-group':
        """
        Remove devices from group
        """
        remove_devices_from_group()

    if demisto.command() == 'di-delete-files-remotely':
        """
        Delete files remotely by event ids
        """
        delete_files_remotely()

    if demisto.command() == 'di-terminate-processes':
        """
        Terminate processes by event ids
        """
        terminate_remote_processes()

    if demisto.command() == 'di-close-events':
        """
        Close events by event ids
        """
        close_events()

    if demisto.command() == 'fetch-incidents':
        """
        fetch events
        """
        fetch_incidents()
  type: python
  commands:
  - name: di-get-device
    arguments:
    - name: device_id
      required: true
      description: The device id
    outputs:
    - contextPath: DeepInstinct.id
      description: Device id
      type: number
    - contextPath: DeepInstinct.os
      description: Device OS
      type: string
    - contextPath: DeepInstinct.osv
      description: Device OS version
      type: string
    - contextPath: DeepInstinct.ip_address
      description: Device IP address
      type: string
    - contextPath: DeepInstinct.mac_address
      description: Device mac address
      type: string
    - contextPath: DeepInstinct.hostname
      description: Device hostname
      type: string
    - contextPath: DeepInstinct.domain
      description: Device domain
      type: string
    - contextPath: DeepInstinct.scanned_files
      description: Num of device scanned files
      type: number
    - contextPath: DeepInstinct.tag
      description: Device tag
      type: string
    - contextPath: DeepInstinct.connectivity_status
      description: Device connectivity status
      type: string
    - contextPath: DeepInstinct.deployment_status
      description: Device deployment status
      type: string
    - contextPath: DeepInstinct.last_registration
      description: Device last registration datetime
      type: string
    - contextPath: DeepInstinct.last_contact
      description: Device last contact datetime
      type: string
    - contextPath: DeepInstinct.distinguished_name
      description: Device distinguished name
      type: string
    - contextPath: DeepInstinct.group_name
      description: Device group name
      type: string
    - contextPath: DeepInstinct.group_id
      description: Device group id
      type: number
    - contextPath: DeepInstinct.policy_name
      description: Device policy name
      type: string
    - contextPath: DeepInstinct.policy_id
      description: Device policy id
      type: number
    - contextPath: DeepInstinct.log_status
      description: Device log status
      type: string
    - contextPath: DeepInstinct.agent_version
      description: Device agent version
      type: string
    - contextPath: DeepInstinct.brain_version
      description: Device brain version
      type: string
    - contextPath: DeepInstinct.msp_name
      description: Device msp name
      type: string
    - contextPath: DeepInstinct.msp_id
      description: Device msp id
      type: number
    - contextPath: DeepInstinct.tenant_name
      description: Device tenant name
      type: string
    - contextPath: DeepInstinct.tenant_id
      description: Device tenant id
      type: number
    description: get specific device by id
  - name: di-hash-to-bl
    arguments:
    - name: policy_id
      required: true
      description: policy id
    - name: file_hash
      required: true
      description: file hash
    description: add file hash to blacklist
  - name: di-hash-to-wl
    arguments:
    - name: policy_id
      required: true
      description: policy id
    - name: file_hash
      required: true
      description: file hash
    description: add file hash to whitelist
  - name: di-add-devices-to-group
    arguments:
    - name: group_id
      required: true
      description: group id
    - name: device_ids
      required: true
      description: comma separeted devices ids
    description: add multiple devices to group
  - name: di-remove-devices-from-group
    arguments:
    - name: group_id
      required: true
      description: group id to remove from
    - name: device_ids
      required: true
      description: comma separeted list of device ids to remove
      isArray: true
    description: remove list of devices from group
  - name: di-delete-files-remotely
    arguments:
    - name: event_ids
      required: true
      description: comma separeted list of event ids
      isArray: true
    description: delete multiple files remotely
  - name: di-terminate-processes
    arguments:
    - name: event_ids
      required: true
      description: comma separeted list of event ids
      isArray: true
    description: terminate list of processes
  - name: di-close-events
    arguments:
    - name: event_ids
      required: true
      description: comma separeted list of event ids
      isArray: true
    description: close list of events
  dockerimage: demisto/python3:3.7.4.2245
  isfetch: true
  runonce: false
  subtype: python2
