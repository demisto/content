{
    "allRead": true,
    "allReadWrite": true,
    "data": "# URL Alerts Use Case\n\nDo you want to build a use case?  Of course you do, or you wouldn't be here. \n\nThis pack contains everything you need to build a use case to respond to a detection for  **User that has accessed a potentially malicious URL.**\n\n\n# Configure Integrations\n\nConfigure the following integrations to support your use case:\n\n| Integration | Instructions |\n| --- | --- | \n| XSOAR Engineer Training | Configure this integration and set it not to fetch while we do our Development | \n| Random Threat Intel | Configure this integration to provide randomized threat intel verdicts for our indicators | \n| Generic Export Indicators Service | Configure this integration to server an EDL for URLs with the tag \"block\".  Bonus points if you can serve this over the HTTPS port of the XSOAR server (rtfm) |\n\n[XSOAR Engineer Training Series - Part 1](https://youtu.be/BhpkZA9t1HA)\n\n\n# Incident Types and Fields\n\nNext we need to add an Incident Type for these alerts, and create a custom field to capture some of the data from the alert.\n\n| Item | Instructions | \n| --- | --- | \n| Incident Type | Create a new Incident Type for these alerts, name if what you want.|\n| Fields | Add a custom field, of type Short Text, to capture the URL that the user accessed.  Associate this field with your custom Incident Type. |\n\n[XSOAR Engineer Training Series - Part 2 - Incident Types \u0026 Fields](https://youtu.be/o92rG4FPc-k)\n\n# Classification \u0026 Mapping\n\nCreate an Incident Classifier, that will route all the Incidents to the new Incident Type you created.  If you get stuck, reference the **XSOAR Engineer Training Classifier**. \n\nNext we need to map data from the alerts to the fields within XSOAR.  Your challenge, if you've read this far, is to map the data as follows, or modify if it suits you.\n\n| Alert Field | XSOAR Field | \n| --- | --- | \n| occured | occurred | \n| sourceuser | source username | \n| sourceip | source ip | \n| url | ???? Where would you put this? | \n| eventid | event id | \n| type | event type | \n| urlcategory | alert category - Bonus points if you can transform this to lower case! No need to YELL about the category. | \n\nIf you get stuck, reference the **XSOAR Engineer Training Mapper**. \n\n[XSOAR Engineer Training Series - Part 3 - Classification \u0026 Mapping](https://youtu.be/TW-q2wmchZk)\n\n# Indicator Extraction\n\nNow that we've mapped the data, we can setup Indicator extraction rules for our Incident Type to target the specific Indicators that we want.  \n\nSetup the following Indicator Extraction Rules on your Incident Type, **extract Indicators Inline on creation and field change**.\n\n| Field | Indicators | \n| --- | --- | \n| source ip | IP |\n| custom url field | URL, Domain | \n\n[XSOAR Engineer Training Series - Part 11 - The Magic and Mysteries World of Indicator Extraction](https://youtu.be/DVGWeYJMDQQ)\n\n\n# Preprocessing\n\nWe don't care about the Alerts that were blocked OR the alerts where the url category is spam.  Create a preprocessing rule to **DROP** alerts that match this criteria.\n\n[XSOAR Engineer Training Series - Part 4 - Preprocessing](https://youtu.be/XC4M9oxN5AE)\n\n\n# Layout\n\nCreate a custom Layout for your Incident Type, displaying the information that was obtained from Mapping the alert data to XSOAR fields.  Make it look pretty.  \n\nFor this, we recommend duplicating from a template, such as the layout from the [Case Management Pack](https://cortex.marketplace.pan.dev/marketplace/details/CaseManagementGeneric/) in the XSOAR Marketplace.\n\n[XSOAR Engineer Training Series - Part 5 - Layouts](https://youtu.be/Ze_SI6axXj0)\n\n\n# Alert Ingestion\n\nWith the above in place, you're ready to bring in some sample Incidents which you can use to develop the playbook. Let's configure our integration to fetch the alerts, and check our work.\n\nTo fetch from the XSOAR Engineer Training Integration:\n1. Configure the Integration to fetch Incidents.\n2. Set the Classifier and Mapper to the ones you created.\n3. Save the integration and wait for it to fetch.\n\n\n# Checking our work\n\nNow we can check our work, assuming you did it right, you'll find the following:\n- Incidents are created with the correct Type. \n- Incidents where the URL was blocked or the category was spam are not created.\n- The data from mapping is correctly displayed for the created Incidents on the layout of the created Incidents.\n\n\n# The Playbook\n\nNow we need a playbook to respond to these Incidents when they are created within XSOAR.  Our goal is to assess if the IOCS are malicous, and if so reset the users password, and block the Indicator by adding it our EDL.  \n\nEverything you need is in the integrations you configured, familarize yourself with what they do.\n\n| Step | Instructions | Hint | \n| --- | --- | --- | \n| 1 | Lookup the source user in Active Directory | ad-get-user |\n| 2 | Is the user a member of the Agents group? If yes, proceed to step 3, else step 4 | Conditional | \n| 3 | Set the Severity of the Incident to High | setIncident |\n| 4 | Set the Severity of the Incident to Medium | setIncident |\n| 5 | Is there any Malicious or Suspicious Indicators found? Yes-\u003e Step 7, No-\u003eStep 6 | IsMaliousIndicatorFound |\n| 6 | Analyst Review - True Positive or False Positive? Proceed to step 7 if True Positive, close the Incident as a false positive if not. | Manual Conditional |\n| 7 | Block the URL by tagging it with 'block' | appendIndicatorField | \n| 8 | Generate a new password for the user | GeneratePassword | \n| 9 | Reset the users password | ad-set-new-password | \n| 10 | Expire the users password | ad-expire-password | \n| 11 | Instruct the Analyst to provide the User their new password | Manual |\n\nAt this point you can test this playbook using the sample alerts that you fetched and the playbook debugger, how does it work?\n\n[XSOAR Engineer Training Series - Part 6 - Playbook Essentials](https://youtu.be/CI0yG4MGfaw)\n\n[XSOAR Engineer Training Series - Part 7 - Building the Playbook](https://youtu.be/P5OqIrhQ5zk)\n\n\n# The Sub-Playbook\n\nThe process of reseting the users password, and expiring it seems like something we may want to do in other playbooks.  Let's create a sub-playbook to perform these tasks and use it in our primary playbook.\n\nCreate a sub-playbook that performs the following tasks:\n- Generate a new password\n- Reset the Users password\n- Expire the Users password\n\nThe playbook should accept the following inputs and return the following outputs:\n\n| Input | Description | \n| --- | --- | \n| samAccountName | The samAccountname of the user to reset the password for | \n\n| Output | Description | \n| --- | --- | \n| Password | The password that was used for the password reset |\n\nReplace the tasks in your primary playbook with your new sub-playbook, and re-test using the playbook debugger.\n\n[XSOAR Engineer Training Series - Part 8 - Sub-Playbooks](https://youtu.be/sPp5PXgFg1A)\n\n\n# I LOVE IT WHEN A USE CASE COMES TOGETHER\n\nAssuming your playbook is working, your next step is to set it as the default for your Incident Type, and have it run automatically for all new Incidents created.  Where might you do this?\n\nIf we did our job properly, we should see the following:\n- Incidents are created with the correct Type. \n- Incidents where the URL was blocked or the category was spam are not created.\n- The data from mapping is correctly displayed for the created Incidents on the layout of the created Incidents.\n- The playbook executes when new Incidents are created, and automagically blocks the URL and resets the user password if malicious indicators are found.\n\nIf you get stuck... reference the completed example playbook in this pack: XSOAR Engineer Training - URL Clicked Playbook (Completed)\n\n[XSOAR Engineer Training Series - When a plan comes together!](https://www.youtube.com/watch?v=dQw4w9WgXcQ)\n\n# Fin.",
    "id": "XETBuildingAUseCase",
    "itemVersion": "",
    "locked": false,
    "name": "XETBuildingAUseCase",
    "nameLocked": false,
    "packID": "",
    "previousAllRead": true,
    "system": false,
    "truncated": false,
    "type": "markdown",
    "version": -1,
    "fromVersion": "6.8.0"
}