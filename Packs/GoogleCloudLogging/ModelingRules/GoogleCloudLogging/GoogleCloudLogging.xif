[MODEL: dataset = google_dns_raw]
filter logName ~= "dns_queries$"
| call GCP_MAP_DNS_QUERIES;

[MODEL: dataset = google_cloud_logging_raw]
filter logName ~= "dns_queries$" 
| call GCP_MAP_DNS_QUERIES;


/**************** */
// Audit: system, data access, activity. 
/**************** */
alter payload_type = protoPayload -> ["@type"]
| filter logName contains "cloudaudit.googleapis.com" or payload_type = "type.googleapis.com/google.cloud.audit.AuditLog"

| alter // audit log extractions 
    authorization_info = protoPayload -> authorizationInfo[], // Authorization information. If there are multiple resources or permissions involved, then there is one AuthorizationInfo element for each {resource, permission} tuple.
    service_name = protoPayload -> serviceName, // The name of the API service performing the operation
    method_name = protoPayload -> methodName, // The name of the service method or operation. For API calls, this should be the name of the API method.
    resource_name = protoPayload -> resourceName, // The resource or collection that is the target of the operation. 
    resource_current_locations = protoPayload -> resourceLocation.currentLocations[], // The locations of a resource after the execution of the operation.
    resource_original_locations = protoPayload -> resourceLocation.originalLocations[], // The locations of a resource prior to the execution of the operation.

    // authentication info 
    principal_email = protoPayload -> authenticationInfo.principalEmail,
    principal_subject = protoPayload -> authenticationInfo.principalSubject,
    service_account_delegations = protoPayload -> authenticationInfo.serviceAccountDelegationInfo[],

    // policy violation 
    policy_constraint_name = arraystring(arraymap(protoPayload -> policyViolationInfo.orgPolicyViolationInfo.violationInfo[], "@element" -> constraint), ","), // Constraint name

    // request metadata
    request_caller_ip = protoPayload -> requestMetadata.callerIp, // The IP address of the caller. 
    request_user_agent = protoPayload -> requestMetadata.callerSuppliedUserAgent, // The user agent of the caller.
    request_destination_ip = protoPayload -> requestMetadata.destinationAttributes.ip, // The IP address of the peer.
    request_destination_port = protoPayload -> requestMetadata.destinationAttributes.port, // The network port of the peer.
    request_destination_principal = protoPayload -> requestMetadata.destinationAttributes.principal, // The identity of this peer.
    request_destination_region_code = protoPayload -> requestMetadata.destinationAttributes.regionCode, // The CLDR country/region code associated with the above IP address. 
    request_attr_host = protoPayload -> requestMetadata.requestAttributes.host, // The HTTP request Host header value.
    request_attr_method = protoPayload -> requestMetadata.requestAttributes.method, // The HTTP request method, such as GET, POST.
    request_attr_path = protoPayload -> requestMetadata.requestAttributes.path, // The HTTP URL path, excluding the query parameters
    request_attr_protocol = protoPayload -> requestMetadata.requestAttributes.protocol, // The network protocol used with the request
    request_attr_query = protoPayload -> requestMetadata.requestAttributes.query, // The HTTP URL query in the format of name1=value1&name2=value2, as it appears in the first line of the HTTP request. No decoding is performed
    request_attr_scheme = protoPayload -> requestMetadata.requestAttributes.scheme, // The HTTP URL scheme, such as http and https.

    // status 
    status_code = to_integer(protoPayload -> status.code),
    status_message = protoPayload -> status.message // A developer-facing error message

| alter 
    // authorization
    resource_granted_permissions = arraymap(arrayfilter(authorization_info, "@element" -> granted = "True"), "@element" -> permission), // filter to granted permissions only
    resource_uid = arraystring(arraymap(authorization_info, "@element" -> resourceAttributes.uid), ","), // The unique identifier of the resource
    resource_location = arraystring(arraymap(authorization_info, "@element" -> resourceAttributes.location), ","), // The location of the resource.

    // additional processing 
    event_type = arrayindex(regextract(logName, "logs\/cloudaudit\.googleapis\.com(?:%2F|\/)(.+?)$"), 0),
    user_domain = arrayindex(split(principal_email, "@"), 1),
    delegated_principal_subjects = arraystring(arraymap(service_account_delegations, coalesce("@element" -> principalSubject, "@element" -> firstPartyPrincipal.principalEmail)), ","),
    request_caller_ipv4 = if(request_caller_ip ~= "(?:\d{1,3}\.){3}\d{1,3}", request_caller_ip), 
    request_caller_ipv6 = if(request_caller_ip ~= "(?:[a-fA-F\d]{0,4}\:){1,7}[a-fA-F\d]{0,4}", request_caller_ip), 
    request_destination_ipv4 = if(request_destination_ip ~= "(?:\d{1,3}\.){3}\d{1,3}", request_destination_ip), 
    request_destination_ipv6 = if(request_destination_ip ~= "(?:[a-fA-F\d]{0,4}\:){1,7}[a-fA-F\d]{0,4}", request_destination_ip) 

| alter 
    xdm.alert.severity = severity,
    xdm.event.id = insertId,
    xdm.event.log_level = if(severity = "DEBUG", XDM_CONST.LOG_LEVEL_DEBUG, severity = "INFO", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "NOTICE", XDM_CONST.LOG_LEVEL_NOTICE, severity = "WARNING", XDM_CONST.LOG_LEVEL_WARNING, severity = "ERROR", XDM_CONST.LOG_LEVEL_ERROR, severity = "CRITICAL", XDM_CONST.LOG_LEVEL_CRITICAL, severity = "ALERT", XDM_CONST.LOG_LEVEL_ALERT, severity = "EMERGENCY", XDM_CONST.LOG_LEVEL_EMERGENCY),
    xdm.event.operation_sub_type = method_name,
    xdm.event.outcome = if(status_code = 0, XDM_CONST.OUTCOME_SUCCESS, status_code > 0, XDM_CONST.OUTCOME_FAILED),
    xdm.event.outcome_reason = status_message,
    xdm.event.type = event_type,
    xdm.intermediate.user.username = delegated_principal_subjects,
    xdm.network.application_protocol = request_attr_protocol,
    xdm.network.http.method = request_attr_method,
    xdm.network.http.url = concat(request_attr_scheme, request_attr_host, request_attr_path, request_attr_query),
    xdm.network.rule = policy_constraint_name,
    xdm.session_context_id = coalesce(operation -> id, split -> uid),
    xdm.source.application.name = service_name,
    xdm.source.cloud.project_id = resource -> labels.project_id,
    xdm.source.cloud.region = resource -> labels.location,
    xdm.source.ipv4 = request_caller_ipv4,
    xdm.source.ipv6 = request_caller_ipv6,
    xdm.source.user_agent = request_user_agent,
    xdm.source.user.domain = user_domain,
    xdm.source.user.groups = resource_granted_permissions,
    xdm.source.user.user_type = if(principal_subject ~= "^user:\S+", XDM_CONST.USER_TYPE_REGULAR, principal_subject ~= "^serviceAccount:\S+", XDM_CONST.USER_TYPE_SERVICE_ACCOUNT),
    xdm.source.user.username = arraystring(arraycreate(principal_email, principal_subject), ","),
    xdm.target.cloud.region = request_destination_region_code, 
    xdm.target.cloud.zone = coalesce(resource_location, arraystring(resource_current_locations, ","),  arraystring(resource_original_locations, ",")), 
    xdm.target.host.fqdn = request_attr_host,
    xdm.target.host.hostname = request_destination_principal,
    xdm.target.ipv4 = request_destination_ipv4,
    xdm.target.ipv6 = request_destination_ipv6,
    xdm.target.port = to_integer(request_destination_port),
    xdm.target.resource.id = resource_uid,
    xdm.target.resource.name = resource_name,
    xdm.target.resource.type = resource -> type,
    xdm.target.url = concat(request_attr_scheme, request_attr_host, request_attr_path, request_attr_query);

[RULE: GCP_MAP_DNS_QUERIES]
alter  // https://cloud.google.com/dns/docs/monitoring#dns-log-record-format
    ip_protocol = jsonPayload -> protocol, 
    dns_authoritative_answer = jsonPayload -> authAnswer,
    dns_query_name = jsonPayload -> queryName,
    dns_query_type = jsonPayload -> queryType,
    dns_rdata = jsonPayload -> rdata, // DNS answer in presentation format, RFC 1035 5.1, truncated to 260 bytes
    dns_rcode = jsonPayload -> responseCode,
    resource_project_id = resource -> labels.project_id, 
    resource_region = resource -> label.location,
    resource_type = resource -> type,
    source_ip = jsonPayload -> sourceIP,
    source_network = jsonPayload -> sourceNetwork,
    vm_instance_id = to_string(jsonPayload -> vmInstanceId),
    vm_instance_id_string = jsonPayload -> vmInstanceIdString,
    vm_instance_name = jsonPayload -> vmInstanceName,
    vm_project_id = jsonPayload -> vmProjectId,
    vm_zone_name = jsonPayload -> vmZoneName
| alter 
    dns_class = arrayindex(regextract(dns_rdata, "\s+\d+\s+(IN|CS|CH|HS)\s+"), 0),
    dns_record_type = if(dns_query_type = "A", XDM_CONST.DNS_RECORD_TYPE_A, dns_query_type = "AAAA", XDM_CONST.DNS_RECORD_TYPE_AAAA, dns_query_type = "AFSDB", XDM_CONST.DNS_RECORD_TYPE_AFSDB, dns_query_type = "APL", XDM_CONST.DNS_RECORD_TYPE_APL, dns_query_type = "CAA", XDM_CONST.DNS_RECORD_TYPE_CAA, dns_query_type = "CDNSKEY", XDM_CONST.DNS_RECORD_TYPE_CDNSKEY, dns_query_type = "CDS", XDM_CONST.DNS_RECORD_TYPE_CDS, dns_query_type = "CERT", XDM_CONST.DNS_RECORD_TYPE_CERT, dns_query_type = "CNAME", XDM_CONST.DNS_RECORD_TYPE_CNAME, dns_query_type = "CSYNC", XDM_CONST.DNS_RECORD_TYPE_CSYNC, dns_query_type = "DHCID", XDM_CONST.DNS_RECORD_TYPE_DHCID, dns_query_type = "DLV", XDM_CONST.DNS_RECORD_TYPE_DLV, dns_query_type = "DNAME", XDM_CONST.DNS_RECORD_TYPE_DNAME, dns_query_type = "DNSKEY", XDM_CONST.DNS_RECORD_TYPE_DNSKEY, dns_query_type = "DS", XDM_CONST.DNS_RECORD_TYPE_DS, dns_query_type = "EUI48", XDM_CONST.DNS_RECORD_TYPE_EUI48, dns_query_type = "EUI64", XDM_CONST.DNS_RECORD_TYPE_EUI64, dns_query_type = "HINFO", XDM_CONST.DNS_RECORD_TYPE_HINFO, dns_query_type = "HIP", XDM_CONST.DNS_RECORD_TYPE_HIP, dns_query_type = "HTTPS", XDM_CONST.DNS_RECORD_TYPE_HTTPS, dns_query_type = "IPSECKEY", XDM_CONST.DNS_RECORD_TYPE_IPSECKEY, dns_query_type = "KEY", XDM_CONST.DNS_RECORD_TYPE_KEY, dns_query_type = "KX", XDM_CONST.DNS_RECORD_TYPE_KX, dns_query_type = "LOC", XDM_CONST.DNS_RECORD_TYPE_LOC, dns_query_type = "MX", XDM_CONST.DNS_RECORD_TYPE_MX, dns_query_type = "NAPTR", XDM_CONST.DNS_RECORD_TYPE_NAPTR, dns_query_type = "NS", XDM_CONST.DNS_RECORD_TYPE_NS, dns_query_type = "NSEC", XDM_CONST.DNS_RECORD_TYPE_NSEC, dns_query_type = "NSEC3", XDM_CONST.DNS_RECORD_TYPE_NSEC3, dns_query_type = "NSEC3PARAM", XDM_CONST.DNS_RECORD_TYPE_NSEC3PARAM, dns_query_type = "OPENPGPKEY", XDM_CONST.DNS_RECORD_TYPE_OPENPGPKEY, dns_query_type = "PTR", XDM_CONST.DNS_RECORD_TYPE_PTR, dns_query_type = "RRSIG", XDM_CONST.DNS_RECORD_TYPE_RRSIG, dns_query_type = "RP", XDM_CONST.DNS_RECORD_TYPE_RP, dns_query_type = "SIG", XDM_CONST.DNS_RECORD_TYPE_SIG, dns_query_type = "SMIMEA", XDM_CONST.DNS_RECORD_TYPE_SMIMEA, dns_query_type = "SOA", XDM_CONST.DNS_RECORD_TYPE_SOA, dns_query_type = "SRV", XDM_CONST.DNS_RECORD_TYPE_SRV, dns_query_type = "SSHFP", XDM_CONST.DNS_RECORD_TYPE_SSHFP, dns_query_type = "SVCB", XDM_CONST.DNS_RECORD_TYPE_SVCB, dns_query_type = "TA", XDM_CONST.DNS_RECORD_TYPE_TA, dns_query_type = "TKEY", XDM_CONST.DNS_RECORD_TYPE_TKEY, dns_query_type = "TLSA", XDM_CONST.DNS_RECORD_TYPE_TLSA, dns_query_type = "TSIG", XDM_CONST.DNS_RECORD_TYPE_TSIG, dns_query_type = "TXT", XDM_CONST.DNS_RECORD_TYPE_TXT, dns_query_type = "URI", XDM_CONST.DNS_RECORD_TYPE_URI, dns_query_type = "ZONEMD", XDM_CONST.DNS_RECORD_TYPE_ZONEMD, dns_query_type)
| alter 
    source_ipv4 = if(source_ip ~= "(?:\d{1,3}\.){3}\d{1,3}", source_ip),
    source_ipv6 = if(source_ip ~= "(?:[a-fA-F\d]{0,4}\:){1,7}[a-fA-F\d]{0,4}", source_ip),
    dns_class_number = if(dns_class = "IN", 1, dns_class = "CS", 2, dns_class = "CH", 3, dns_class = "HS", 4), // see https://datatracker.ietf.org/doc/html/rfc1035#section-3.2.4
    dns_records = if(
        dns_query_type = "A", arraystring(regextract(dns_rdata, "((?:\d{1,3}\.)\{3}\d{1,3})"), ","), // ipv4 records
        dns_query_type = "AAAA", arraystring(regextract(dns_rdata, "((?:[a-fA-F\d]{0,4}\:){1,7}[a-fA-F\d]{0,4})"), "."), // ipv6 records
        dns_query_type in ("CNAME", "PTR", "NS"), arraystring(regextract(dns_rdata, "(?i)\s+(?:CNAME|PTR|NS)\s+(\S+)\.?"), ","), // domains 
        dns_rdata) // default fallback
| alter
    xdm.alert.severity = severity,
    xdm.event.id = insertId,
    xdm.event.log_level = if(severity = "DEBUG", XDM_CONST.LOG_LEVEL_DEBUG, severity = "INFO", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "NOTICE", XDM_CONST.LOG_LEVEL_NOTICE, severity = "WARNING", XDM_CONST.LOG_LEVEL_WARNING, severity = "ERROR", XDM_CONST.LOG_LEVEL_ERROR, severity = "CRITICAL", XDM_CONST.LOG_LEVEL_CRITICAL, severity = "ALERT", XDM_CONST.LOG_LEVEL_ALERT, severity = "EMERGENCY", XDM_CONST.LOG_LEVEL_EMERGENCY),
    xdm.network.dns.authoritative = to_boolean(uppercase(dns_authoritative_answer)),
    xdm.network.dns.dns_question.class = dns_class_number,
    xdm.network.dns.dns_question.name = dns_query_name,
    xdm.network.dns.dns_question.type = dns_record_type,
    xdm.network.dns.dns_resource_record.class = dns_class_number,
    xdm.network.dns.dns_resource_record.name = dns_query_name,
    xdm.network.dns.dns_resource_record.type = if(dns_rdata != null, dns_record_type),
    xdm.network.dns.dns_resource_record.value = dns_records,
    xdm.network.dns.is_response = if(dns_rcode != null, true, dns_rcode = null and dns_rdata = null, false),
    xdm.network.dns.response_code = if(dns_rcode = "NOERROR", XDM_CONST.DNS_RESPONSE_CODE_NO_ERROR, dns_rcode = "FORMERR", XDM_CONST.DNS_RESPONSE_CODE_FORMAT_ERROR, dns_rcode = "SERVFAIL", XDM_CONST.DNS_RESPONSE_CODE_SERVER_FAILURE, dns_rcode = "NXDOMAIN", XDM_CONST.DNS_RESPONSE_CODE_NON_EXISTENT_DOMAIN, dns_rcode = "NOTIMP", XDM_CONST.DNS_RESPONSE_CODE_NOT_IMPLEMENTED, dns_rcode = "REFUSED", XDM_CONST.DNS_RESPONSE_CODE_QUERY_REFUSED, dns_rcode = "YXDOMAIN", XDM_CONST.DNS_RESPONSE_CODE_NAME_EXISTS_WHEN_IT_SHOULD_NOT, dns_rcode = "YXRRSET", XDM_CONST.DNS_RESPONSE_CODE_RR_SET_EXISTS_WHEN_IT_SHOULD_NOT, dns_rcode = "NXRRSET", XDM_CONST.DNS_RESPONSE_CODE_RR_SET_THAT_SHOULD_EXIST_DOES_NOT, dns_rcode = "NOTAUTH", XDM_CONST.DNS_RESPONSE_CODE_SERVER_NOT_AUTHORITATIVE_FOR_ZONE, dns_rcode = "NOTZONE", XDM_CONST.DNS_RESPONSE_CODE_NAME_NOT_CONTAINED_IN_ZONE, dns_rcode = "BADVERS", XDM_CONST.DNS_RESPONSE_CODE_BAD_OPT_VERSION, dns_rcode = "BADSIG", XDM_CONST.DNS_RESPONSE_CODE_TSIG_SIGNATURE_FAILURE, dns_rcode = "BADKEY", XDM_CONST.DNS_RESPONSE_CODE_KEY_NOT_RECOGNIZED, dns_rcode = "BADTIME", XDM_CONST.DNS_RESPONSE_CODE_SIGNATURE_OUT_OF_TIME_WINDOW, dns_rcode = "BADMODE", XDM_CONST.DNS_RESPONSE_CODE_BAD_TKEY_MODE, dns_rcode = "BADNAME", XDM_CONST.DNS_RESPONSE_CODE_DUPLICATE_KEY_NAME, dns_rcode = "BADALG", XDM_CONST.DNS_RESPONSE_CODE_ALGORITHM_NOT_SUPPORTED, dns_rcode = "BADTRUNC", XDM_CONST.DNS_RESPONSE_CODE_BAD_TRUNCATION, dns_rcode),
    xdm.network.ip_protocol = if(ip_protocol = "UDP", XDM_CONST.IP_PROTOCOL_UDP, ip_protocol = "TCP", XDM_CONST.IP_PROTOCOL_TCP, ip_protocol),
    xdm.session_context_id = coalesce(operation -> id, split -> uid),
    xdm.source.cloud.project_id = coalesce(vm_project_id, resource_project_id),
    xdm.source.cloud.region = resource_region,
    xdm.source.cloud.zone = vm_zone_name,
    xdm.source.host.device_id = coalesce(vm_instance_id, vm_instance_id_string),
    xdm.source.host.hostname = vm_instance_name,
    xdm.source.ipv4 = source_ipv4,
    xdm.source.ipv6 = source_ipv6,
    xdm.source.zone = source_network,
    xdm.target.resource.type = resource_type;
