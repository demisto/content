[MODEL: dataset = microsoft_windows_raw]
// supported channels/providers 
filter channel in ("System", "Application") or provider_name in("Microsoft-Windows-PowerShell", "Microsoft-Windows-TaskScheduler", "Microsoft-Windows-Windows Firewall With Advanced Security", "Microsoft-Windows-Windows Defender") or provider_name contains "Microsoft-Windows-Security-"
| alter event_id_num = to_integer(event_id) // used for filtering by event id ranges 
| alter // Extract fields 
        action = arrayindex(regextract(message, "Action:\s*(\S+)"), 0), 
        action_status = arrayindex(regextract(message, "Action Status:\s*(.+?)\s+(?:\w+\s+)?\w+:"), 0),
        Command_Name = arrayindex(regextract(message, "Command Name = (.*?)\s{2, }"), 0),
        Command_Path = arrayindex(regextract(message, "Command Path = (.*?)\s{2, }"), 0),
        dc_name = event_data -> DCName,
        detection_type = arrayindex(regextract(message, "Detection Type:\s*(.+?)\s+Detection"), 0), // microsoft defender 
        defender_signature_version = arrayindex(regextract(message, "Signature Version:\s*(.+?)\s+Engine"), 0), // microsoft defender 
        defender_security_intelligence_version = coalesce(event_data -> ["Current security intelligence Version"], event_data -> ["AV security intelligence version"]), // microsoft defender 
        defender_engine_version = coalesce(event_data -> ["Current Engine Version"], arrayindex(regextract(message, "Engine Version:\s*([\d\.]+)\s"), 0), arrayindex(regextract(message, "Engine Version:\s*(.+?)$"), 0)), // microsoft defender 
        defender_security_intelligence_type = event_data -> ["Security intelligence Type"],
        error_code = coalesce(event_data -> error, arrayindex(regextract(message, "Error Code:\s*(\S+)"), 0)),
        error_message = coalesce(event_data -> ErrorMessage, arrayindex(regextract(message, "Error Description:\s*([^\.]+\.)"), 0)),
        event_data_param1 = event_data -> param1,
        event_data_param2 = event_data -> param2,
        event_name = arrayindex(regextract(message, "([^\.]+)\."), 0),
        IpPort = event_data -> IpPort,
        IpAddress = event_data -> IpAddress,
        LogLevel = lowercase(log_level),
        logonType = event_data -> LogonType,
        message_action = arrayindex(regextract(message, "action \"([^\"]+)\""), 0),
        message_instance = arrayindex(regextract(message, "instance \"([^\"]+)\""), 0),
        message_processID = arrayindex(regextract(message, "process ID \"([^\"]+)\""), 0),
        message_task = arrayindex(regextract(message , "task \"([^\"]+)\""), 0),
        new_value =  event_data -> ["New Value"],
        old_value = event_data -> ["Old Value"], 
        file_path = arrayindex(regextract(message , "Path:\s*(.+?\\\w+);?\s+\w+\s+\w+"), 0),
        process_name_format = coalesce(event_data -> ProcessName, arrayindex(regextract(message, "Process Name:\s*(\S+)"), 0)), 
        product_name = event_data -> ["Product Name"], // microsoft defender event ids 1000 - 1005 
        product_version = event_data -> ["Product Version"], // microsoft defender event ids 1000 - 1005 
        rule_name1 = arraystring(regextract(message, "Rule\s+Name\:\s+(.*)\b\s+Modifying\s*User:"), ""),
        rule_name2 = arraystring(regextract(message, "Rule\s*Name\:\s+(.*[^\w\s])\s+Modifying\s*User"), ""),
        scan_id = event_data -> ["Scan ID"], // windows defender event ids 1000 - 1005 
        scan_type = event_data -> ["Scan Type"], // windows defender event ids 1000 - 1005 
        scan_params = event_data -> ["Scan Parameters"], // windows defender event ids 1000 - 1005 
        scan_duration = multiply(add(add(multiply(to_integer(event_data -> ["Scan Time Hours"]), 3600), multiply(to_integer(event_data -> ["Scan Time Minutes"]), 60)), to_integer(event_data -> ["Scan Time Seconds"])), 1000), // windows defender event ids 1000 - 1005 
        severity = arrayindex(regextract(message, "Severity:\s*(\w+)"), 0),
        Script_Name = arrayindex(regextract(arrayindex(regextract(message, "Script Name = (.*?)\s{2, }"), 0), "\\([^\\]+)$"), 0),
        Script_Path = arrayindex(regextract(message, "Script Name = (.*?)\s{2, }"), 0),
        target_username = event_data -> TargetUserName, 
        target_user_sid = event_data -> TargetUserSid,
        target_domain_name = event_data -> TargetDomainName,
        threat_id = if(provider_name = "Microsoft-Windows-Windows Defender" and ((event_id_num >= 1006 and event_id_num <= 1012) or event_id_num = 1015 or (event_id_num >= 1116 and event_id_num <= 1119)), arrayindex(regextract(message, "ID:\s*(\w+)\s+\w+:"), 0)),
        threat_category = if(provider_name = "Microsoft-Windows-Windows Defender" and ((event_id_num >= 1006 and event_id_num <= 1012) or event_id_num = 1015 or (event_id_num >= 1116 and event_id_num <= 1119)), arrayindex(regextract(message, "Category:\s*(.+?)\s+\w+:"), 0)),
        threat_name = if(provider_name = "Microsoft-Windows-Windows Defender" and ((event_id_num >= 1006 and event_id_num <= 1012) or event_id_num = 1015 or (event_id_num >= 1116 and event_id_num <= 1119)), arrayindex(regextract(message, "Name:\s*(.+?)\s+ID:"), 0)),
        user_domain = coalesce(user -> domain, event_data -> Domain, event_data -> SubjectDomainName, user_data -> SubjectDomainName, arrayindex(regextract(message, "User:\s*([^\\]+)"), 0)),
        user_name = coalesce(user -> name, event_data -> User, event_data -> SubjectUserName, user_data -> SubjectUserName, arrayindex(regextract(message, "User:\s*(?:[^\\]+\\)*(\S+)"), 0), arrayindex(regextract(message, "User \"([^\"]+)\""), 0), if(channel="Application" and event_data -> param3 contains "*\\*", event_data -> param3)), 
        user_sid = coalesce(event_data -> SID, event_data -> SubjectUserSid, user -> identifier, user -> SubjectUserSid, event_data -> UserSid, if(provider_name = "Microsoft-Windows-Windows Firewall With Advanced Security", arrayindex(regextract(message, "Modifying\s*User\:\s+(.*)\b\s+Modifying\s+Application:"), 0))),
        user_type = user -> type
| alter // post-extraction processing & validations
        check_rule_name1 = if(rule_name1 ~= "\S", rule_name1, null),
    	check_rule_name2 = if(rule_name2 ~= "\S", rule_name2, null),
        check_Command_Path = if(Command_Path ~= "\S", Command_Path, null),
        check_Command_Name = if(Command_Name ~= "\S", Command_Name, null),
        check_Script_Name = if(Script_Name ~= "\S", Script_Name, null),
        check_Script_Path = if(Script_Path ~= "\S", Script_Path, null),
        check_message_task = if(message_task ~= "\S", message_task, null),
        check_message_processID = if(message_processID ~= "\S", message_processID, null),
        check_message_action = if(message_action ~= "\S", message_action, null),
        check_fw_description = if(provider_name = "Microsoft-Windows-Windows Firewall With Advanced Security", arraystring(regextract(message, "^[^\.]+\."), ""), null),
        check_fw_process_name = if(provider_name = "Microsoft-Windows-Windows Firewall With Advanced Security", arraystring(regextract(message, "Modifying\s*Application:\s+\S+\\([^\.]+\.exe)"), ""), null),
        get_message_instance_exe_path = if(message_instance ~= "exe", message_instance, null),
        get_message_instance_exe_process = if(message_instance ~= "exe", arrayindex(regextract(message_instance, "\\([a-zA-Z0-9]+\.exe)$"), 0), null)
| alter event_type = coalesce(event_action, task, check_message_task, event_name) // set event type
| alter // XDM mappings 
        xdm.alert.category = threat_category,
        xdm.alert.description = if(channel="System", error_code, check_fw_description != null, check_fw_description, error_message),
        xdm.alert.original_threat_name = threat_name,
        xdm.alert.original_threat_id = threat_id,
        xdm.alert.original_alert_id = activity_id,
        xdm.alert.severity = severity,
        xdm.event.description = coalesce(message, if(channel="System", event_data -> updateTitle), if(channel="Application", event_data -> param3)),
        xdm.event.duration = to_integer(scan_duration),
        xdm.event.id = to_string(event_id),
        xdm.event.log_level = if(LogLevel="information", XDM_CONST.LOG_LEVEL_INFORMATIONAL, LogLevel="error", XDM_CONST.LOG_LEVEL_ERROR, LogLevel="warning", XDM_CONST.LOG_LEVEL_WARNING, LogLevel="critical", XDM_CONST.LOG_LEVEL_CRITICAL, to_string(coalesce(opcode, log_level))),
        xdm.event.operation_sub_type = coalesce(check_message_action, arrayindex(regextract(message, "(^.*?)\."), 0), if(channel="System", event_data_param2)),
        xdm.event.original_event_type = event_type,
        xdm.event.outcome_reason = coalesce(if(channel="Application" and task="TM", event_data_param2), action_status, error_message),
        xdm.event.outcome = if(event_result = "success", XDM_CONST.OUTCOME_SUCCESS, event_result="failure", XDM_CONST.OUTCOME_FAILED, coalesce(event_result, action, error_code)),
        xdm.event.type = channel,
        xdm.logon.type = if(logonType="2", XDM_CONST.LOGON_TYPE_INTERACTIVE, logonType="3", XDM_CONST.LOGON_TYPE_NETWORK, logonType="4", XDM_CONST.LOGON_TYPE_BATCH , logonType="5", XDM_CONST.LOGON_TYPE_SERVICE , logonType ="6", XDM_CONST.LOGON_TYPE_PROXY , logonType="7", XDM_CONST.LOGON_TYPE_NEW_CREDENTIALS , logonType="8", XDM_CONST.LOGON_TYPE_NETWORK_CLEARTEXT, logonType="9", XDM_CONST.LOGON_TYPE_NEW_CREDENTIALS , logonType="10", XDM_CONST.LOGON_TYPE_REMOTE_INTERACTIVE , logonType="11", XDM_CONST.LOGON_TYPE_CACHED_INTERACTIVE, logonType="12", XDM_CONST.LOGON_TYPE_CACHED_REMOTE_INTERACTIVE , logonType="13", XDM_CONST.LOGON_TYPE_CACHED_UNLOCK, logonType),
        xdm.network.rule = coalesce(check_rule_name1, check_rule_name2, threat_id),
        xdm.observer.action = action,
        xdm.observer.type = provider_name,
        xdm.observer.unique_identifier = provider_guid,
        xdm.observer.version = product_version,
        xdm.session_context_id = to_string(record_id),
        xdm.source.agent.type = coalesce(defender_security_intelligence_type, detection_type), 
        xdm.source.agent.version = defender_engine_version,
        xdm.source.agent.content_version = coalesce(defender_signature_version, defender_security_intelligence_version),
        xdm.source.application.name = coalesce(if(channel="System", event_data_param1), arrayindex(regextract(message, "HostApplication=([\S]+)"), 0), product_name),
        xdm.source.application.version = product_version,
        xdm.source.host.fqdn = event_data -> WorkstationName,
        xdm.source.host.hostname = coalesce(host_name, computer_name, if(user_name contains "*$", user_name), if(channel="System", event_data -> HostName), if(channel="Application" and task="Devices", event_data_param1)),
        xdm.source.host.os = os_subtype,
        xdm.source.host.os_family = XDM_CONST.OS_FAMILY_WINDOWS,
        xdm.source.ipv4 = if(IpAddress ~= "(?:\d{1,3}\.){3}\d{1,3}", arrayindex(regextract(IpAddress, "((?:\d{1,3}\.){3}\d{1,3})"), 0)),
        xdm.source.ipv6 = if(IpAddress ~= "(?:[a-fA-F\d]{0,4}\:){7}[\wa-fA-F]{0,4}", arrayindex(regextract(IpAddress, "((?:[a-fA-F\d]{0,4}\:){7}[\wa-fA-F]{0,4})"), 0)), 
        xdm.source.port = if(IpPort~="\d+", to_integer(IpPort), null),
        xdm.source.process.command_line = coalesce(if(check_Command_Name != null and check_Command_Name != "", check_Command_Name), process_cmd),
        xdm.source.process.executable.directory = arraystring(regextract(message, "Modifying\s*Application:\s+(\S+)"), ""),
        xdm.source.process.executable.filename = if(check_Script_Name != null and check_Script_Name != "", check_Script_Name, null),
        xdm.source.process.executable.md5 = process_md5,
        xdm.source.process.executable.path = coalesce(get_message_instance_exe_path, process_name_format, if(channel="Application", event_data -> Module), if(check_Script_Path != null and check_Script_Path != "", check_Script_Path), if(check_Command_Path != null and check_Command_Path != "", check_Command_Path), process_path, file_path),
        xdm.source.process.executable.sha256 = process_sha256,
        xdm.source.process.name = coalesce(check_fw_process_name, get_message_instance_exe_process, arrayindex(regextract(process_name_format, "\\([^\\]+)$"), 0), if(channel="System", process_name_format), process_name),
        xdm.source.process.pid = to_integer(coalesce(check_message_processID, to_string(process_pid), if(channel="System", event_data -> ProcessID))),
        xdm.source.process.thread_id = to_integer(process_thread_id),
        xdm.source.user.domain = user_domain,
        xdm.source.user.identifier = user_sid,
        xdm.source.user.user_type = if(user_type contains "User", XDM_CONST.USER_TYPE_REGULAR, user_type contains "Service", XDM_CONST.USER_TYPE_SERVICE_ACCOUNT , user_type contains "Computer", XDM_CONST.USER_TYPE_MACHINE_ACCOUNT , user_type),
        xdm.source.user.username = user_name,
        xdm.target.ipv4 = "",
        xdm.target.file.path = file_path,
        xdm.target.port = to_integer(0),
        xdm.target.resource.id = scan_id, 
        xdm.target.resource.type = scan_type, 
        xdm.target.resource_before.value = old_value,
        xdm.target.resource.value = coalesce(new_value, scan_params),
        xdm.target.user.domain = coalesce(target_domain_name, if(channel="System", dc_name)),
        xdm.target.user.groups = if(target_username not contains "*$" AND event_type = "Security Group Management", arraycreate(target_username)),
        xdm.target.user.identifier = target_user_sid,
        xdm.target.user.username = if(target_username not contains "*$" AND event_type != "Security Group Management", target_username);