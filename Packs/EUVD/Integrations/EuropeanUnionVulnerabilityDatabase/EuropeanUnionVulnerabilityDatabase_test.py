import pytest
from CommonServerPython import *
from EuropeanUnionVulnerabilityDatabase import (
    Client,
    query_vulnerabilities_command,
    get_vulnerability_by_id_command,
    get_latest_vulnerabilities_command,
    get_latest_exploited_vulnerabilities_command,
    get_latest_critical_vulnerabilities_command,
    get_vulnerability_by_enisa_id_command,
    get_advisory_by_id_command,
)

SERVER_URL = "https://test_url.com"


def util_load_json(path):
    with open(path, encoding="utf-8") as f:
        return json.loads(f.read())


@pytest.fixture()
def client():
    return Client(server_url=SERVER_URL, verify=None, proxy=None, headers=None)


def test_get_advisory_by_id_command(client, mocker, requests_mock):
    """
    When:
    Given:
    Then:
    """
    args = {"advisory_id": "cisco-sa-ata19x-multi-RDTEqRsy"}
    mock_results = util_load_json("./test_data/euvd-get-advisory-by-id.json")

    mocker.patch.object(client, "get_advisory_by_id_request", return_value=mock_results)

    results = get_advisory_by_id_command(client=client, args=args)
    assert results.outputs_prefix == "EUVD.Advisory"
    assert results.outputs_key_field == "id"
    assert results.raw_response == mock_results


def test_get_vulnerability_by_enisa_id_command(client, mocker, requests_mock):
    """
    When:
    Given:
    Then:
    """
    args = {"enisa_id": "EUVD-2024-45012"}
    mock_results = util_load_json("./test_data/euvd-get-vulnerability-by-enisa-id.json")

    mocker.patch.object(client, "get_by_enisa_id_request", return_value=mock_results)

    results = get_vulnerability_by_enisa_id_command(client=client, args=args)
    assert results.outputs_prefix == "EUVD.Vulnerability"
    assert results.outputs_key_field == "id"
    assert results.raw_response == mock_results


def test_get_latest_critical_vulnerabilities_command(client, mocker, requests_mock):
    """
    When:
    Given:
    Then:
    """
    args = {}
    mock_results = util_load_json("./test_data/euvd-get-latest-critical-vulnerabilities.json")

    mocker.patch.object(client, "get_latest_critical_vulnerabilities_request", return_value=mock_results)

    results = get_latest_critical_vulnerabilities_command(client=client, args=args)
    assert results.outputs_prefix == "EUVD.Vulnerability"
    assert results.outputs_key_field == "id"
    assert results.raw_response == mock_results


def test_get_latest_exploited_vulnerabilities_command(client, mocker, requests_mock):
    """
    When:
    Given:
    Then:
    """
    args = {}
    mock_results = util_load_json("./test_data/euvd-get-latest-exploited-vulnerabilities.json")

    mocker.patch.object(client, "get_latest_exploited_vulnerabilities_request", return_value=mock_results)

    results = get_latest_exploited_vulnerabilities_command(client=client, args=args)
    assert results.outputs_prefix == "EUVD.Vulnerability"
    assert results.outputs_key_field == "id"
    assert results.raw_response == mock_results


def test_get_latest_vulnerabilities_command(client, mocker, requests_mock):
    """
    When:
    Given:
    Then:
    """
    args = {}
    mock_results = util_load_json("./test_data/euvd-get-latest-vulnerabilities.json")

    mocker.patch.object(client, "get_latest_vulnerabilities_request", return_value=mock_results)

    results = get_latest_vulnerabilities_command(client=client, args=args)
    assert results.outputs_prefix == "EUVD.Vulnerability"
    assert results.outputs_key_field == "id"
    assert results.raw_response == mock_results


def test_get_vulnerability_by_id_command(client, mocker, requests_mock):
    """
    When:
    Given:
    Then:
    """
    args = {"vulnerability_id": "CVE-2024-0864"}
    mock_results = util_load_json("./test_data/euvd-get-vulnerability-by-id.json")

    mocker.patch.object(client, "get_vulnerability_by_id_request", return_value=mock_results)

    results = get_vulnerability_by_id_command(client=client, args=args)
    assert results.outputs_prefix == "EUVD.Vulnerability"
    assert results.outputs_key_field == "id"
    assert results.raw_response == mock_results


def test_query_vulnerabilities_command(client, mocker, requests_mock):
    """
    When:
        The command is called with valid arguments.
    Given:
        A mock response for the query_vulnerabilities_request.
    Then:
        The command returns the expected results.
        The outputs prefix and key field are set correctly.
        The raw response is set correctly.
    """
    args = {"from_score": "0", "to_score": "10"}
    mock_results = util_load_json("./test_data/euvd-query-vulnerabilities.json")

    mocker.patch.object(client, "query_vulnerabilities_request", return_value=mock_results)

    results = query_vulnerabilities_command(client=client, args=args)
    assert results.outputs_prefix == "EUVD.Vulnerability"
    assert results.outputs_key_field == "id"
    assert results.raw_response == mock_results
