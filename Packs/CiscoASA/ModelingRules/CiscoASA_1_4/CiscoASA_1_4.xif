[MODEL: dataset=cisco_asa_raw]
//from <source_ip>/<source_port> to <dest_ip>/<dest_port>
filter latest_1  ~= "from\s\d+\.\d+\.\d+\.\d+\/\d+\s*to\s*\d+\.\d+\.\d+\.\d+\/\d+"
| alter
    event_id = to_integer(arrayindex(regextract(latest_1 , "ASA\-[session]*\-*\d\-(\d+)\:"),0)),
    severity = arrayindex(regextract(latest_1, "ASA\-[session]*\-*(\d+)\-\d+\:"),0),
    message = arrayindex(regextract(latest_1, "\%ASA\-[session]*\-*\d\-\d+[\:|\s\-]+\s(.*)"),0),
    source_ip = arrayindex(regextract(latest_1,"from\s(\d+\.\d+\.\d+\.\d+)\/\d+\s*to\s*\d+\.\d+\.\d+\.\d+\/\d+"),0),
    source_port = arrayindex(regextract(latest_1,"from\s\d+\.\d+\.\d+\.\d+\/(\d+)\s*to\s*\d+\.\d+\.\d+\.\d+\/\d+"),0),
    dst_ip = arrayindex(regextract(latest_1,"from\s\d+\.\d+\.\d+\.\d+\/\d+\s*to\s*(\d+\.\d+\.\d+\.\d+)\/\d+"),0),
    dst_port = arrayindex(regextract(latest_1,"from\s\d+\.\d+\.\d+\.\d+\/\d+\s*to\s*\d+\.\d+\.\d+\.\d+\/(\d+)"),0),
    action = arrayindex(regextract(latest_1,"\%ASA\-[session]*\-*\d\-\d+[\:|\s\-]+\s(.*)from\s\d+\."),0),
    protocol1 = arrayindex(regextract(latest_1,"\%ASA\-[session]*\-*\d\-\d+\:\s\w+\s([A-Z]+)"),0),
    protocol2 = arrayindex(regextract(latest_1,"\%ASA\-[session]*\-*\d\-\d+\:+\s\w+\s\w+\s+([A-Z]{1,4})\s"),0),
    protocol3 = uppercase(arrayindex(regextract(latest_1,"\sprotocol\=([^\,]+)\s*\,"),0)),
    protocol4 = arrayindex(regextract(latest_1,"\%ASA\-[session]*\-*\d\-\d+\:\s([A-Z]{3,4})\s"),0),
    protocol5 = arrayindex(regextract(latest_1,"on\sinterface\s\S+\susing\s([A-Z]+)"),0),
    protocol6 = arrayindex(regextract(latest_1,"Interactive\schallenge\sprocessing\sis\snot\ssupported\sfor\s([A-Z]+)\sconnections"),0),
    protocol7 = arrayindex(regextract(latest_1 ,"\,\sdropped\s([A-Z]+)\sfragment\sfrom"),0),
    dst_interface = arrayindex(regextract(latest_1,"on\sinterface\s(\S+)"),0),
    dst_username1 = arrayindex(regextract(latest_1,"for\suser\s\'*(\S+)\'*\sfrom"),0),
    dst_username2 = arrayindex(regextract(latest_1,"for\sNetwork\suser\s\'*(\S+)\'*\sfrom"),0),
    outcome1 = arrayindex(regextract(latest_1 ,"\%ASA\-[session]*\-*\d\-\d+\:\sAuthentication\s(\w+)\sfor\suser"),0),
    outcome2 = arrayindex(regextract(latest_1 ,"\%ASA\-[session]*\-*\d\-\d+\:\sAuthentication\s(\w+)\sfor\snetwork\suser"),0),
    outcome3 = arrayindex(regextract(latest_1 ,"Auth\sfrom\s\d+\.\d+\.\d+\.\d+\/\d+\sto\s\d+\.\d+\.\d+\.\d+\/\d+\s(\w+)\s"),0),
    host_ip = arrayindex(regextract(latest_1 ,"\d{2}\:\d{2}\:\d{2}Z*\s(\d+\.\d+\.\d+\.\d+)\s"),0)
| alter protocol = coalesce(protocol1 , protocol2 , protocol3 , protocol4 ,protocol5, protocol6, protocol7),
    dst_username = coalesce(dst_username1, dst_username2 ),
    outcome = coalesce(outcome1, outcome2, outcome3) //ENUM: succeeded failed permitted denied
| alter xdm.network.ip_protocol = if(protocol="HOPOPT",XDM_CONST.IP_PROTOCOL_HOPOPT, protocol="ICMP",XDM_CONST.IP_PROTOCOL_ICMP, protocol="IGMP",XDM_CONST.IP_PROTOCOL_IGMP, protocol="GGP",XDM_CONST.IP_PROTOCOL_GGP, protocol="IP",XDM_CONST.IP_PROTOCOL_IP, protocol="ST",XDM_CONST.IP_PROTOCOL_ST, protocol="TCP",XDM_CONST.IP_PROTOCOL_TCP, protocol="CBT",XDM_CONST.IP_PROTOCOL_CBT, protocol="EGP",XDM_CONST.IP_PROTOCOL_EGP, protocol="IGP",XDM_CONST.IP_PROTOCOL_IGP, protocol="BBN_RCC_MON",XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, protocol="NVP_II",XDM_CONST.IP_PROTOCOL_NVP_II, protocol="PUP",XDM_CONST.IP_PROTOCOL_PUP, protocol="ARGUS",XDM_CONST.IP_PROTOCOL_ARGUS, protocol="EMCON",XDM_CONST.IP_PROTOCOL_EMCON, protocol="XNET",XDM_CONST.IP_PROTOCOL_XNET, protocol="CHAOS",XDM_CONST.IP_PROTOCOL_CHAOS, protocol="UDP",XDM_CONST.IP_PROTOCOL_UDP, protocol="MUX",XDM_CONST.IP_PROTOCOL_MUX, protocol="DCN_MEAS",XDM_CONST.IP_PROTOCOL_DCN_MEAS, protocol="HMP",XDM_CONST.IP_PROTOCOL_HMP, protocol="PRM",XDM_CONST.IP_PROTOCOL_PRM, protocol="XNS_IDP",XDM_CONST.IP_PROTOCOL_XNS_IDP, protocol="TRUNK_1",XDM_CONST.IP_PROTOCOL_TRUNK_1, protocol="TRUNK_2",XDM_CONST.IP_PROTOCOL_TRUNK_2, protocol="LEAF_1",XDM_CONST.IP_PROTOCOL_LEAF_1, protocol="LEAF_2",XDM_CONST.IP_PROTOCOL_LEAF_2, protocol="RDP",XDM_CONST.IP_PROTOCOL_RDP, protocol="IRTP",XDM_CONST.IP_PROTOCOL_IRTP, protocol="ISO_TP4",XDM_CONST.IP_PROTOCOL_ISO_TP4, protocol="NETBLT",XDM_CONST.IP_PROTOCOL_NETBLT, protocol="MFE_NSP",XDM_CONST.IP_PROTOCOL_MFE_NSP, protocol="MERIT_INP",XDM_CONST.IP_PROTOCOL_MERIT_INP, protocol="DCCP",XDM_CONST.IP_PROTOCOL_DCCP, protocol="3PC",XDM_CONST.IP_PROTOCOL_3PC, protocol="IDPR",XDM_CONST.IP_PROTOCOL_IDPR, protocol="XTP",XDM_CONST.IP_PROTOCOL_XTP, protocol="DDP",XDM_CONST.IP_PROTOCOL_DDP, protocol="IDPR_CMTP",XDM_CONST.IP_PROTOCOL_IDPR_CMTP, protocol="TP",XDM_CONST.IP_PROTOCOL_TP, protocol="IL",XDM_CONST.IP_PROTOCOL_IL, protocol="IPV6",XDM_CONST.IP_PROTOCOL_IPV6, protocol="SDRP",XDM_CONST.IP_PROTOCOL_SDRP, protocol="IPV6_ROUTE",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, protocol="IPV6_FRAG",XDM_CONST.IP_PROTOCOL_IPV6_FRAG, protocol="IDRP",XDM_CONST.IP_PROTOCOL_IDRP, protocol="RSVP",XDM_CONST.IP_PROTOCOL_RSVP, protocol="GRE",XDM_CONST.IP_PROTOCOL_GRE, protocol="DSR",XDM_CONST.IP_PROTOCOL_DSR, protocol="BNA",XDM_CONST.IP_PROTOCOL_BNA, protocol="ESP",XDM_CONST.IP_PROTOCOL_ESP, protocol="AH",XDM_CONST.IP_PROTOCOL_AH, protocol="I_NLSP",XDM_CONST.IP_PROTOCOL_I_NLSP, protocol="SWIPE",XDM_CONST.IP_PROTOCOL_SWIPE, protocol="NARP",XDM_CONST.IP_PROTOCOL_NARP, protocol="MOBILE",XDM_CONST.IP_PROTOCOL_MOBILE, protocol="TLSP",XDM_CONST.IP_PROTOCOL_TLSP, protocol="SKIP",XDM_CONST.IP_PROTOCOL_SKIP, protocol="IPV6_ICMP",XDM_CONST.IP_PROTOCOL_IPV6_ICMP, protocol="IPV6_NONXT",XDM_CONST.IP_PROTOCOL_IPV6_NONXT, protocol="IPV6_OPTS",XDM_CONST.IP_PROTOCOL_IPV6_OPTS, protocol="CFTP",XDM_CONST.IP_PROTOCOL_CFTP, protocol="SAT_EXPAK",XDM_CONST.IP_PROTOCOL_SAT_EXPAK, protocol="KRYPTOLAN",XDM_CONST.IP_PROTOCOL_KRYPTOLAN, protocol="RVD",XDM_CONST.IP_PROTOCOL_RVD, protocol="IPPC",XDM_CONST.IP_PROTOCOL_IPPC, protocol="SAT_MON",XDM_CONST.IP_PROTOCOL_SAT_MON, protocol="VISA",XDM_CONST.IP_PROTOCOL_VISA, protocol="IPCV",XDM_CONST.IP_PROTOCOL_IPCV, protocol="CPNX",XDM_CONST.IP_PROTOCOL_CPNX, protocol="CPHB",XDM_CONST.IP_PROTOCOL_CPHB, protocol="WSN",XDM_CONST.IP_PROTOCOL_WSN, protocol="PVP",XDM_CONST.IP_PROTOCOL_PVP, protocol="BR_SAT_MON",XDM_CONST.IP_PROTOCOL_BR_SAT_MON, protocol="SUN_ND",XDM_CONST.IP_PROTOCOL_SUN_ND, protocol="WB_MON",XDM_CONST.IP_PROTOCOL_WB_MON, protocol="WB_EXPAK",XDM_CONST.IP_PROTOCOL_WB_EXPAK, protocol="ISO_IP",XDM_CONST.IP_PROTOCOL_ISO_IP, protocol="VMTP",XDM_CONST.IP_PROTOCOL_VMTP, protocol="SECURE_VMTP",XDM_CONST.IP_PROTOCOL_SECURE_VMTP, protocol="VINES",XDM_CONST.IP_PROTOCOL_VINES, protocol="TTP",XDM_CONST.IP_PROTOCOL_TTP, protocol="NSFNET_IGP",XDM_CONST.IP_PROTOCOL_NSFNET_IGP, protocol="DGP",XDM_CONST.IP_PROTOCOL_DGP, protocol="TCF",XDM_CONST.IP_PROTOCOL_TCF, protocol="EIGRP",XDM_CONST.IP_PROTOCOL_EIGRP, protocol="OSPFIGP",XDM_CONST.IP_PROTOCOL_OSPFIGP, protocol="SPRITE_RPC",XDM_CONST.IP_PROTOCOL_SPRITE_RPC, protocol="LARP",XDM_CONST.IP_PROTOCOL_LARP, protocol="MTP",XDM_CONST.IP_PROTOCOL_MTP, protocol="AX25",XDM_CONST.IP_PROTOCOL_AX25, protocol="IPIP",XDM_CONST.IP_PROTOCOL_IPIP, protocol="MICP",XDM_CONST.IP_PROTOCOL_MICP, protocol="SCC_SP",XDM_CONST.IP_PROTOCOL_SCC_SP, protocol="ETHERIP",XDM_CONST.IP_PROTOCOL_ETHERIP, protocol="ENCAP",XDM_CONST.IP_PROTOCOL_ENCAP, protocol="GMTP",XDM_CONST.IP_PROTOCOL_GMTP, protocol="IFMP",XDM_CONST.IP_PROTOCOL_IFMP, protocol="PNNI",XDM_CONST.IP_PROTOCOL_PNNI, protocol="PIM",XDM_CONST.IP_PROTOCOL_PIM, protocol="ARIS",XDM_CONST.IP_PROTOCOL_ARIS, protocol="SCPS",XDM_CONST.IP_PROTOCOL_SCPS, protocol="QNX",XDM_CONST.IP_PROTOCOL_QNX, protocol="AN",XDM_CONST.IP_PROTOCOL_AN, protocol="IPCOMP",XDM_CONST.IP_PROTOCOL_IPCOMP, protocol="COMPAQ_PEER",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, protocol="IPX_IN_IP",XDM_CONST.IP_PROTOCOL_IPX_IN_IP, protocol="VRRP",XDM_CONST.IP_PROTOCOL_VRRP, protocol="PGM",XDM_CONST.IP_PROTOCOL_PGM, protocol="L2TP",XDM_CONST.IP_PROTOCOL_L2TP, protocol="DDX",XDM_CONST.IP_PROTOCOL_DDX, protocol="IATP",XDM_CONST.IP_PROTOCOL_IATP, protocol="STP",XDM_CONST.IP_PROTOCOL_STP, protocol="SRP",XDM_CONST.IP_PROTOCOL_SRP, protocol="UTI",XDM_CONST.IP_PROTOCOL_UTI, protocol="SMP",XDM_CONST.IP_PROTOCOL_SMP, protocol="SM",XDM_CONST.IP_PROTOCOL_SM, protocol="PTP",XDM_CONST.IP_PROTOCOL_PTP, protocol="ISIS",XDM_CONST.IP_PROTOCOL_ISIS, protocol="FIRE",XDM_CONST.IP_PROTOCOL_FIRE, protocol="CRTP",XDM_CONST.IP_PROTOCOL_CRTP, protocol="CRUDP",XDM_CONST.IP_PROTOCOL_CRUDP, protocol="SSCOPMCE",XDM_CONST.IP_PROTOCOL_SSCOPMCE, protocol="IPLT",XDM_CONST.IP_PROTOCOL_IPLT, protocol="SPS",XDM_CONST.IP_PROTOCOL_SPS, protocol="PIPE",XDM_CONST.IP_PROTOCOL_PIPE, protocol="SCTP",XDM_CONST.IP_PROTOCOL_SCTP, protocol="FC",XDM_CONST.IP_PROTOCOL_FC, protocol="RSVP_E2E_IGNORE",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, protocol="MOBILITY",XDM_CONST.IP_PROTOCOL_MOBILITY, protocol="UDPLITE",XDM_CONST.IP_PROTOCOL_UDPLITE, protocol="MPLS_IN_IP",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP,to_string(protocol)),
    xdm.event.outcome = if(outcome in("succeeded","permitted") , XDM_CONST.OUTCOME_SUCCESS , outcome in ("failed","denied"),to_string(outcome)),
    xdm.event.original_event_type = to_string(event_id),
    xdm.event.description = message,
    xdm.alert.severity = severity,
    xdm.source.ipv4 = source_ip,
    xdm.source.port = to_number(source_port),
    xdm.target.ipv4 = dst_ip,
    xdm.target.port = to_number(dst_port),
    xdm.target.zone = dst_interface,
    xdm.target.user.username = dst_username,
    xdm.event.outcome_reason = action,
    xdm.observer.name = host_ip,
    xdm.source.host.ipv4_addresses = arraycreate(host_ip),
    xdm.event.is_completed = if(action contains "Teardown",true, false);


//<source_interface>:<source_ip>/<source_port> to <dest_interface>:<dest_ip>:<dest_port>
| filter latest_1 ~= "\w+\s[a-zA-Z0-9-_]+\:\d+\.\d+\.\d+\.\d+\/\d+\sto\s[a-zA-Z0-9-_]+\:\d+\.\d+\.\d+\.\d+\/\d+" or
    //<source_interface>:<source_ip>/<source_port>(<source_username>) to <dest_interface>:<dest_ip>:<dest_port>
    latest_1 ~= "\w+\s[a-zA-Z0-9-_]+\:\d+\.\d+\.\d+\.\d+\/\d+\([^\)]+\)\sto\s[a-zA-Z0-9-_]+\:\d+\.\d+\.\d+\.\d+\/\d+" or
    //<source_interface>:<source_ip>/<source_port> (<mapped_source_ip>/<mapped_source_port>) to <dest_interface>:<dest_ip>:<dest_port> (<mapped_dst_ip>/<mapped_dst_port>)
    latest_1 ~= "\w+\s[a-zA-Z0-9-_]+\:\d+\.\d+\.\d+\.\d+\/\d+\s\(\d+\.\d+\.\d+\.\d+\/\d+\)\sto\s[a-zA-Z0-9-_]+\:\d+\.\d+\.\d+\.\d+\/\d+\s\(\d+\.\d+\.\d+\.\d+\/\d+\)" or
    //<source_interface>:<source_ip>/<source_port> (<mapped_source_ip>/<mapped_source_port>)(<source_username>) to <dest_interface>:<dest_ip>:<dest_port> (<mapped_dst_ip>/<mapped_dst_port>) (<dst_username>)
    latest_1 ~= "\w+\s[a-zA-Z0-9-_]+\:\d+\.\d+\.\d+\.\d+\/\d+\s\(\d+\.\d+\.\d+\.\d+\/\d+\)\([^\)]+\)\sto\s[a-zA-Z0-9-_]+\:\d+\.\d+\.\d+\.\d+\/\d+\s\(\d+\.\d+\.\d+\.\d+\/\d+\)"
| alter action = arrayindex(regextract(latest_1,"\%ASA\-[session]*\-*\d\-\d+\:\s([A-Za-z\s]+)\s"),0)
| alter
    event_id = to_integer(arrayindex(regextract(latest_1 , "ASA\-[session]*\-*\d\-(\d+)\:"),0)),
    severity = arrayindex(regextract(latest_1, "ASA\-[session]*\-*(\d+)\-\d+\:"),0),
    message = arrayindex(regextract(latest_1, "\%ASA\-[session]*\-*\d\-\d+[\:|\s\-]+\s(.*)"),0),
    host_ip = arrayindex(regextract(latest_1 ,"\d{2}\:\d{2}\:\d{2}Z*\s(\d+\.\d+\.\d+\.\d+)\s"),0),
    src_ip = if(action contains "Built inbound",arrayindex(regextract(latest_1 ,"[for|to]{2,3}\s[o|O]utside\:(\d+\.\d+\.\d+\.\d+)\/\d+\s*"),0),
    action contains "Built outbound",arrayindex(regextract(latest_1 ,"[for|to]{2,3}\sinside\:(\d+\.\d+\.\d+\.\d+)\/\d+"),0),
    arrayindex(regextract(latest_1 ,"[for|from]{3,4}\s[\w\-\_]+\:(\d+\.\d+\.\d+\.\d+)\/\d+"),0)),
    source_port = if(action contains "Built inbound",arrayindex(regextract(latest_1 ,"[for|to]{2,3}\s[o|O]utside\:\s*\d+\.\d+\.\d+\.\d+\/(\d+)"),0),
    action contains "Built outbound",arrayindex(regextract(latest_1 ,"[for|to]{2,3}\sinside\:\s*\d+\.\d+\.\d+\.\d+\/(\d+)"),0),arrayindex(regextract(latest_1 ,"[for|from]{3,4}\s[\w\-\_]+\:\d+\.\d+\.\d+\.\d+\/(\d+)"),0)),
    dest_ip = if(action contains "Built inbound",arrayindex(regextract(latest_1 ,"[for|to]{2,3}\s[i|I]nside\:(\d+\.\d+\.\d+\.\d+)\/\d+"),0),action contains "Built outbound",arrayindex(regextract(latest_1 ,"[for|to]{2,3}\soutside\:(\d+\.\d+\.\d+\.\d+)\/\d+"),0),
    arrayindex(regextract(latest_1 ,"to\s[\w\-\_]+\:(\d+\.\d+\.\d+\.\d+)\/\d+"),0)),
    dest_port = if(action contains "Built inbound",arrayindex(regextract(latest_1 ,"[for|to]{2,3}\s[i|I]nside\:\d+\.\d+\.\d+\.\d+\/(\d+)"),0),
    action contains "Built outbound",arrayindex(regextract(latest_1 ,"[for|to]{2,3}\soutside\:\d+\.\d+\.\d+\.\d+\/(\d+)"),0),
    arrayindex(regextract(latest_1 ,"to\s[\w\-\_]+\:\d+\.\d+\.\d+\.\d+\/(\d+)"),0)),
    source_interface = if(action contains "Built inbound",arrayindex(regextract(latest_1 ,"[for|to]{2,3}\s([o|O]utside)\:\d+\.\d+\.\d+\.\d+\/\d+"),0), action contains "Built outbound",arrayindex(regextract(latest_1 ,"[for|to]{2,3}\s([i|I]nside)\:\d+\.\d+\.\d+\.\d+\/\d+"),0),arrayindex(regextract(latest_1 ,"[for|from]{3,4}\s([\w\-\_]+)\:\d+\.\d+\.\d+\.\d+\/\d+"),0)),
    dest_interface = if(action contains "Built inbound",arrayindex(regextract(latest_1 ,"[for|to]{2,3}\s([i|I]nside)\:\d+\.\d+\.\d+\.\d+\/\d+"),0), action contains "Built outbound",arrayindex(regextract(latest_1 ,"[for|to]{2,3}\s([o|O]utside)\:\d+\.\d+\.\d+\.\d+\/\d+"),0),arrayindex(regextract(latest_1 ,"to\s([\w\-\_]+)\:\d+\.\d+\.\d+\.\d+\/\d+"),0)),
    source_username = if(action contains "Built inbound",arrayindex(regextract(latest_1 ,"[for|to]{2,3}\s[o|O]utside\:\d+\.\d+\.\d+\.\d+\/\d+\s*\([^\)]+\)\(([^\)]+)\)"),0), action contains "Built outbound",arrayindex(regextract(latest_1 ,"[for|to]{2,3}\s[i|I]nside\:\d+\.\d+\.\d+\.\d+\/\d+\s*\([^\)]+\)\s\(([^\)]+)\)"),0),arrayindex(regextract(latest_1 ,"[for|from]{3,4}\s[\w+\_\-]+\:\d+\.\d+\.\d+\.\d+\/\d+\(*[^\)]*\)*\s*\(([^\)]+)\)"),0)),
    dst_username1 = if(action contains "Built inbound",arrayindex(regextract(latest_1 ,"[for|to]{2,3}\s[i|I]nside\:\d+\.\d+\.\d+\.\d+\/\d+\s*\([^\)]+\)\s\(([^\)]+)\)"),0), action contains "Built outbound",arrayindex(regextract(latest_1 ,"[for|to]{2,3}\s[o|O]utside\:\d+\.\d+\.\d+\.\d+\/\d+\s*\([^\)]+\)\(([^\)]+)\)"),0),arrayindex(regextract(latest_1 ,"to\s[\w+\_\-]+\:\d+\.\d+\.\d+\.\d+\/\d+\s*\([^\)]+\)\s\(([^\)]+)\)"),0)),
    dst_username2 = arrayindex(regextract(latest_1 ,",\suser\s([\w\_\-]+)\s"),0),
    bytes1 = arrayindex(regextract(latest_1  ,"\d{2}\:\d{2}\sbytes\s(\d+)"),0),
    bytes2 = arrayindex(regextract(latest_1  ,"label\slength\s(\d+)\sbytes\sexceeds"),0),
    protocol1 = arrayindex(regextract(latest_1 ,"\d+\-\d+\:\s*[A-Za-z]*\s+[A-Z]*[a-z]+\s+([A-Z]+)\s+"),0),
    protocol2 = arrayindex(regextract(latest_1 ,"\d+\-\d+\:\s([A-Z]{3,})\s"),0),
    protocol3 = uppercase(arrayindex(regextract(latest_1 ,"\d+-\d+:\s([a-z]+)\sflow\sfrom"),0)),
    protocol4 = arrayindex(regextract(latest_1 ,"for\s([A-Z]{3,})\sfrom"),0),
    //
    icmp_code1 = arrayindex(regextract(latest_1 ,"for\sfaddr\s\d+\.\d+\.\d+\.\d+\/(\d+)\("),0),
    icmp_code2 = arrayindex(regextract(latest_1 ,"ICMP\scode\s(\d+)\,"),0),
    icmp_type = arrayindex(regextract(latest_1 ,"ICMP\stype\s(\d+)"),0),
    connection_id = arrayindex(regextract(latest_1 ,"connection\s(\d+)\sfor"),0),
    filename = arrayindex(regextract(latest_1,",\suser\s\S+\s\S+\sfile\s(\S+)"),0)
| alter source_username = if(source_username ~= "\d+\.\d+\.\d+\.\d+",null,source_username ),
    dst_username1 = if(dst_username1 ~= "\d+\.\d+\.\d+\.\d+",null,dst_username1 )
// duration
| alter duration_string = arrayindex(regextract(latest_1 ,"[D|d]uration\:*\s+([a-z0-9\:]+)[\s|\,]"),0)
| alter duration_split = split(duration_string ,":")
// duration parts
| alter duration_part_0 = arrayindex(duration_split,0),
    duration_part_1 = arrayindex(duration_split,1),
    duration_part_2 = arrayindex(duration_split,2)
| alter duration_part_0_millis = if(duration_part_0 contains "h", multiply( to_number(arrayindex(regextract(duration_part_0 ,"\d+"),0)),3600000),duration_part_0 contains "m", multiply( to_number(arrayindex(regextract(duration_part_0 ,"\d+"),0)),60000) ,duration_part_0 contains "s", multiply( to_number(arrayindex(regextract(duration_part_0 ,"\d+"),0)),1000),duration_part_0 ~= "\d+" and duration_part_0 != "0", multiply(to_number(duration_part_0),3600000) ,0),
    duration_part_1_millis = if(duration_part_1 contains "h", multiply( to_number(arrayindex(regextract(duration_part_1 ,"\d+"),0)),3600000),duration_part_1 contains "m", multiply( to_number(arrayindex(regextract(duration_part_1 ,"\d+"),0)),60000) ,duration_part_1 contains "s", multiply( to_number(arrayindex(regextract(duration_part_1 ,"\d+"),0)),1000) ,duration_part_1 ~= "\d+" and duration_part_1 != "0", multiply(to_number(duration_part_1),60000),0),
    duration_part_2_millis = if(duration_part_2 contains "h", multiply( to_number(arrayindex(regextract(duration_part_2 ,"\d+"),0)),3600000),duration_part_2 contains "m", multiply( to_number(arrayindex(regextract(duration_part_2 ,"\d+"),0)),60000) ,duration_part_2 contains "s", multiply( to_number(arrayindex(regextract(duration_part_2 ,"\d+"),0)),1000) ,duration_part_2 ~= "\d+" and duration_part_2 != "0", multiply(to_number(duration_part_2),1000),0)
| alter duration = add(add(duration_part_0_millis , duration_part_1_millis ),duration_part_2_millis)
| alter bytes = coalesce(bytes1 , bytes2 ),
    icmp_code = coalesce(icmp_code1, icmp_code2),
    protocol = coalesce(protocol1, protocol2, protocol3, protocol4),
    dst_username = coalesce(dst_username1, dst_username2)
//
| alter
    xdm.event.original_event_type = to_string(event_id),
    xdm.event.description = message,
    xdm.alert.severity = severity,
    xdm.source.ipv4 = src_ip,
    xdm.source.port = to_number(source_port),
    xdm.source.zone = source_interface,
    xdm.source.sent_bytes = to_number(bytes ),
    xdm.target.ipv4 = dest_ip,
    xdm.target.port = to_number(dest_port),
    xdm.target.zone = dest_interface,
    xdm.target.user.username = dst_username ,
    xdm.network.icmp.code = to_number(icmp_code),
    xdm.network.icmp.type = to_number(icmp_type),
    xdm.event.outcome_reason = action,
    xdm.event.duration = to_number(duration),
    xdm.observer.name = host_ip,
    xdm.source.host.ipv4_addresses = arraycreate(host_ip),
    xdm.event.is_completed = if(action contains "Teardown",true, false);