args:
- description: The complete XSOAR query to add to the device incident query, ex.  "devicemodel:Panorama"
  name: query
comment: 'Searches the active PAN-OS devices in the topology - the device incidents
  - by the given incident query. '
commonfields:
  id: 8a6a0a64-8969-429a-8ff1-d81094f439ae
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: a3acf260-148d-4af7-81ab-49744965d264
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/python3:3.9.8.24399
enabled: true
engineinfo: {}
mainengineinfo: {}
name: GetDevicesByQuery
outputs:
- contextPath: GetDevicesByQuery.hostname
  description: The device hostname.
- contextPath: GetDevicesByQuery.hostid
  description: The hostid of the device.
- contextPath: GetDevicesByQuery.incident_id
  description: ID of the incident representing this device.
- contextPath: GetDevicesByQuery.admin_domain
  description: Administrative domain or domains the device belongs to.
pswd: ""
runas: DBotWeakRole
runonce: false
script: |2-



  """
  Searches the Device Incidents for matching devices and returns them. This allows for more granular filtering within use case playbooks.
  """
  query = demisto.args().get("query")

  res = demisto.executeCommand("GetIncidentsByQuery", {
      "query": f"-status:closed -category:job type:\"PAN-OS Network Operations - Device\" panosnetworkoperationshostname:* {query}"
  })
  if is_error(res):
      return_error(get_error(res))

  incidents = json.loads(res[0]['Contents'])

  outputs = []

  for device_incident in incidents:
      incident_id = device_incident.get("id")
      custom_fields = device_incident.get("CustomFields")
      device_host_id = custom_fields.get("panosnetworkoperationstarget")
      device_hostname = custom_fields.get("panosnetworkoperationshostname")
      admin_domain = custom_fields.get("panosnetworkoperationsdeviceadministrativedomain")

      outputs.append({
          "hostname": device_hostname,
          "hostid": device_host_id,
          "incident_id": incident_id,
          "admin_domain": admin_domain
      })

  return_results(
      CommandResults(
          outputs_prefix="GetDevicesByQuery",
          outputs=outputs,
          readable_output=tableToMarkdown("Query Result", outputs)
      ))
scripttarget: 0
subtype: python3
tags: []
type: python
