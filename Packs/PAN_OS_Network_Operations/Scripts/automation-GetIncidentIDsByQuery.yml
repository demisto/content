args:
- description: The complete XSOAR query to add to the device incident query, ex.  "devicemodel:Panorama"
  name: query
comment: 'Searches the active PAN-OS devices in the topology - the device incidents
  - by the given incident query. '
commonfields:
  id: 06c95e74-90bd-4a26-8a2c-e86016b83dd0
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: a3acf260-148d-4af7-81ab-49744965d264
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/python3:3.9.8.24399
enabled: true
engineinfo: {}
mainengineinfo: {}
name: GetIncidentIDsByQuery
outputs:
- contextPath: GetIncidentIDsByQuery.incident_id
  description: ID of the incident representing this device.
- contextPath: GetIncidentIDsByQuery.incident_name
  description: The name of the matched incident
pswd: ""
runas: DBotWeakRole
runonce: false
script: |2-



  """
  Searches for all incidents and returns the matching based on the query
  """
  query = demisto.args().get("query")

  res = demisto.executeCommand("GetIncidentsByQuery", {
      "query": query
  })
  if is_error(res):
      return_error(get_error(res))

  incidents = json.loads(res[0]['Contents'])

  outputs = []

  for matched_incident in incidents:
      incident_id = matched_incident.get("id")
      incident_name = matched_incident.get("name")

      outputs.append({
          "incident_id": incident_id,
          "incident_name": incident_name
      })

  return_results(
      CommandResults(
          outputs_prefix="GetIncidentIDsByQuery",
          outputs=outputs,
          readable_output=tableToMarkdown("Query Result", outputs)
      ))
scripttarget: 0
subtype: python3
tags: []
type: python
