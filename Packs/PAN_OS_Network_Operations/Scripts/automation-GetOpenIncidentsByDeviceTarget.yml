args:
- description: The target device (hostid)
  name: target
comment: Returns the incident data for any open use cases for the given target.
commonfields:
  id: 2fcda98c-61ff-4074-89ad-ff4c067262a4
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: a3acf260-148d-4af7-81ab-49744965d264
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/python3:3.9.8.24399
enabled: true
engineinfo: {}
mainengineinfo: {}
name: GetOpenIncidentsByDeviceTarget
outputs:
- contextPath: GetOpenIncidentsByDeviceTarget.incident_id
  description: ID of the incident with the given device as the target.
- contextPath: GetOpenIncidentsByDeviceTarget.incident_name
  description: Name of the incident with the device as the target.
pswd: ""
runas: DBotWeakRole
runonce: false
script: |2-



  """
  Searches the Device Incidents for matching devices and returns them. This allows for more granular filtering within use case playbooks.
  """
  target = demisto.args().get("target")

  res = demisto.executeCommand("GetIncidentsByQuery", {
      "query": f"-status:closed -category:job type:\"PAN-OS Network Operations - Device\" panosnetworkoperationshostname:* {target}"
  })
  if is_error(res):
      return_error(get_error(res))

  incidents = json.loads(res[0]['Contents'])

  outputs = []

  for device_incident in incidents:
      incident_id = device_incident.get("id")
      incident_name = device_incident.get("name")

      outputs.append({
          "incident_id": incident_id,
          "incident_name": incident_name,
      })

  return_results(
      CommandResults(
          outputs_prefix="GetDevicesByQuery",
          outputs=outputs,
          readable_output=tableToMarkdown("Query Result", outputs)
      ))
scripttarget: 0
subtype: python3
tags: []
type: python
