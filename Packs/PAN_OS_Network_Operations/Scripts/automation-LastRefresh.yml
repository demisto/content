comment: Duration widget tracking the last time this incident was refreshed using
  the occurred time.
commonfields:
  id: LastRefresh
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: a3acf260-148d-4af7-81ab-49744965d264
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/python3:3.10.1.25933
enabled: true
engineinfo: {}
mainengineinfo: {}
name: LastRefresh
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('LastRefresh', 'start', __line__())



  """Reports the duration since the occurred time, representing the last time this incident was refreshed."""
  # -- This is a way to get around trimming commonserverpython on import
  import datetime

  try:
      demisto.args()
      pass
  except:

      pass


  incident = demisto.incidents()[0]

  occurred_time = datetime.datetime.strptime(incident.get("occurred").split(".")[0], "%Y-%m-%dT%H:%M:%S")
  current_time = datetime.datetime.now()
  time_delta = current_time - occurred_time

  data = {
      "Type": 17,
      "ContentsFormat": "duration",
      "Contents": {
          "stats": time_delta.total_seconds(),
          "params": {
              "layout": "horizontal",
              "name": "Last run visibility incident",
              "sign": "@",
              "colors": {
                  "items": {
                      "#00CD33": {
                          "value": 10
                      },
                      "#FAC100": {
                          "value": 20
                      },
                      "green": {
                          "value": 40
                      }
                  }
              },
              "type": "above"
          }
      }
  }

  demisto.results(data)

  register_module_line('LastRefresh', 'end', __line__())
scripttarget: 0
subtype: python3
tags:
- dynamic-section
type: python
