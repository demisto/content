id: Prisma Cloud Remediation - AWS EC2 Security Group Misconfiguration
version: -1
fromversion: 5.0.0
name: Prisma Cloud Remediation - AWS EC2 Security Group Misconfiguration
description: |-
  This playbook remediates the Prisma Cloud AWS EC2 alerts generated by the following policies:
   - AWS Default Security Group Does Not Restrict All Traffic
   - AWS Security Groups Allow Internet Traffic
   - AWS Security Groups With Inbound Rule Overly Permissive To All Traffic
starttaskid: "0"
tasks:
  "0":
    id: "0"
    taskid: 92a448cc-b058-4323-8821-bd598d893d29
    type: start
    task:
      id: 92a448cc-b058-4323-8821-bd598d893d29
      version: -1
      name: ""
      description: ""
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "28"
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 1440,
          "y": -280
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "2":
    id: "2"
    taskid: d0b6286b-9877-4b2b-84c7-90c6e2a0c1e8
    type: regular
    task:
      id: d0b6286b-9877-4b2b-84c7-90c6e2a0c1e8
      version: -1
      name: Get security group details
      description: Describes one or more of the security groups.
      script: '|||aws-ec2-describe-security-groups'
      type: regular
      iscommand: true
      brand: ""
    nexttasks:
      '#none#':
      - "15"
    scriptarguments:
      filters: {}
      groupIds:
        complex:
          root: incident
          accessor: labels.resource
          transformers:
          - operator: ParseJSON
          - operator: getField
            args:
              field:
                value:
                  simple: data
          - operator: getField
            args:
              field:
                value:
                  simple: groupId
      groupNames: {}
      region:
        complex:
          root: incident
          accessor: labels.resource
          transformers:
          - operator: ParseJSON
          - operator: getField
            args:
              field:
                value:
                  simple: regionId
      roleArn: {}
      roleSessionDuration: {}
      roleSessionName: {}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 450,
          "y": 50
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "3":
    id: "3"
    taskid: 5a0fe336-4d38-4c7d-8250-b7165f183d8e
    type: regular
    task:
      id: 5a0fe336-4d38-4c7d-8250-b7165f183d8e
      version: -1
      name: Revoke all security group ingress rules
      description: "Removes ingress rules from a security group. To remove a rule, the
        values that you specify (for example, ports) must match the existing rules'
        values exactly."
      script: '|||aws-ec2-revoke-security-group-ingress-rule'
      type: regular
      iscommand: true
      brand: ""
    nexttasks:
      '#none#':
      - "12"
    scriptarguments:
      cidrIp:
        complex:
          root: AWS
          accessor: EC2.SecurityGroups.IpPermissions.IpRanges.CidrIp
      fromPort:
        complex:
          root: AWS
          accessor: EC2.SecurityGroups.IpPermissions.FromPort
      groupId:
        complex:
          root: AWS
          accessor: EC2.SecurityGroups.GroupId
      ipProtocol:
        complex:
          root: AWS
          accessor: EC2.SecurityGroups.IpPermissions.IpProtocol
      region:
        complex:
          root: incident
          accessor: labels.resource
          transformers:
          - operator: ParseJSON
          - operator: getField
            args:
              field:
                value:
                  simple: regionId
      roleArn: {}
      roleSessionDuration: {}
      roleSessionName: {}
      sourceSecurityGroupName:
        complex:
          root: AWS
          accessor: EC2.SecurityGroups.IpPermissions.UserIdGroupPairs.GroupName
      toPort:
        complex:
          root: AWS
          accessor: EC2.SecurityGroups.IpPermissions.ToPort
    continueonerror: true
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 1140,
          "y": 710
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "9":
    id: "9"
    taskid: 1cf94ac2-9dfe-48c6-8fef-8deabb65238a
    type: title
    task:
      id: 1cf94ac2-9dfe-48c6-8fef-8deabb65238a
      version: -1
      name: Done
      description: ""
      type: title
      iscommand: false
      brand: ""
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 1450,
          "y": 1490
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "12":
    id: "12"
    taskid: bb7658d0-6f23-46c1-8b3d-ad0cbbee43ef
    type: condition
    task:
      id: bb7658d0-6f23-46c1-8b3d-ad0cbbee43ef
      version: -1
      name: Did we encounter an error?
      description: Checks whether given entries returned an error. Use ${lastCompletedTaskEntries}
        to check the previous task entries. If an array is provided, a value of yes indicates that one of the entries returned an error.
      scriptName: isError
      type: condition
      iscommand: false
      brand: ""
    nexttasks:
      "no":
      - "9"
      "yes":
      - "20"
    scriptarguments:
      entryId:
        simple: ${lastCompletedTaskEntries}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 1140,
          "y": 910
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "14":
    id: "14"
    taskid: 8576666e-db4d-465f-825e-4b105d48068d
    type: condition
    task:
      id: 8576666e-db4d-465f-825e-4b105d48068d
      version: -1
      name: Is there a default security group?
      description: Check whether the VPC security group is the default.  If not, manually define a default security group.
      type: condition
      iscommand: false
      brand: ""
    nexttasks:
      '#default#':
      - "20"
      "yes":
      - "3"
    separatecontext: false
    conditions:
    - label: "yes"
      condition:
      - - operator: isEqualString
          left:
            value:
              complex:
                root: AWS
                accessor: EC2.SecurityGroups.GroupName
            iscontext: true
          right:
            value:
              simple: default
    view: |-
      {
        "position": {
          "x": 950,
          "y": 540
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "15":
    id: "15"
    taskid: 0fc57cf4-69bc-480c-8282-4d8b570717a1
    type: condition
    task:
      id: 0fc57cf4-69bc-480c-8282-4d8b570717a1
      version: -1
      name: Execute remediation
      description: Remediate the appropriate Prisma Cloud policy based on the policy
        Id.
      type: condition
      iscommand: false
      brand: ""
    nexttasks:
      defaultSG:
      - "27"
      permissive:
      - "25"
      pubTraffic:
      - "26"
    separatecontext: false
    conditions:
    - label: defaultSG
      condition:
      - - operator: isEqualString
          left:
            value:
              complex:
                root: inputs.policyId
            iscontext: true
          right:
            value:
              simple: 2378dbf4-b104-4bda-9b05-7417affbba3f
    - label: pubTraffic
      condition:
      - - operator: isEqualString
          left:
            value:
              complex:
                root: inputs.policyId
            iscontext: true
          right:
            value:
              simple: 2dbda57f-33d4-459a-97ae-dec7e81f9ec4
    - label: permissive
      condition:
      - - operator: isEqualString
          left:
            value:
              complex:
                root: inputs.policyId
            iscontext: true
          right:
            value:
              simple: 566686e8-0581-4df5-ae22-5a901ed37b58
    view: |-
      {
        "position": {
          "x": 450,
          "y": 220
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "16":
    id: "16"
    taskid: 2cd3d451-40c9-4633-87f2-b4e28aef4600
    type: regular
    task:
      id: 2cd3d451-40c9-4633-87f2-b4e28aef4600
      version: -1
      name: Revoke a public security group ingress rule
      description: Removes an ingress rule from a security group. To remove a rule, the
        values that you specify (for example, ports) must match the existing rule's
        values exactly.
      script: '|||aws-ec2-revoke-security-group-ingress-rule'
      type: regular
      iscommand: true
      brand: ""
    nexttasks:
      '#none#':
      - "24"
    scriptarguments:
      cidrIp:
        simple: 0.0.0.0/0
      fromPort:
        complex:
          root: AWS
          accessor: EC2.SecurityGroups.IpPermissions.FromPort
      groupId:
        complex:
          root: AWS
          accessor: EC2.SecurityGroups.GroupId
      ipProtocol:
        complex:
          root: AWS
          accessor: EC2.SecurityGroups.IpPermissions.IpProtocol
      region:
        complex:
          root: incident
          accessor: labels.resource
          transformers:
          - operator: ParseJSON
          - operator: getField
            args:
              field:
                value:
                  simple: regionId
      roleArn: {}
      roleSessionDuration: {}
      roleSessionName: {}
      sourceSecurityGroupName: {}
      toPort:
        complex:
          root: AWS
          accessor: EC2.SecurityGroups.IpPermissions.ToPort
    continueonerror: true
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 450,
          "y": 635
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "18":
    id: "18"
    taskid: afabcf10-69da-4cb9-8e1c-973c24359d73
    type: regular
    task:
      id: afabcf10-69da-4cb9-8e1c-973c24359d73
      version: -1
      name: Get the latest security group details
      description: Describes one or more of your security groups.
      script: '|||aws-ec2-describe-security-groups'
      type: regular
      iscommand: true
      brand: ""
    nexttasks:
      '#none#':
      - "23"
    scriptarguments:
      filters: {}
      groupIds:
        complex:
          root: incident
          accessor: labels.resource
          transformers:
          - operator: ParseJSON
          - operator: getField
            args:
              field:
                value:
                  simple: data
          - operator: getField
            args:
              field:
                value:
                  simple: groupId
      groupNames: {}
      region:
        complex:
          root: incident
          accessor: labels.resource
          transformers:
          - operator: ParseJSON
          - operator: getField
            args:
              field:
                value:
                  simple: regionId
      roleArn: {}
      roleSessionDuration: {}
      roleSessionName: {}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 190,
          "y": 975
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "20":
    id: "20"
    taskid: 3681e8ec-3ee0-4a3d-8258-4c221cea314a
    type: regular
    task:
      id: 3681e8ec-3ee0-4a3d-8258-4c221cea314a
      version: -1
      name: Manually update security group
      description: |-
        1. Sign into the AWS console.
        2. Select the specific region from the region drop down on the top right corner.
        3. Navigate to the VPC Dashboard.
        4. Click on Security Groups in the left window pane.
        5. Click on the security group in question.
        6. Make the appropriate changes..
        7. Click Save rules.
      type: regular
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "9"
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 540,
          "y": 1320
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "21":
    id: "21"
    taskid: b12b6a9d-088a-4dcb-81a2-69f299f063a4
    type: regular
    task:
      id: b12b6a9d-088a-4dcb-81a2-69f299f063a4
      version: -1
      name: Revoke a security group ingress rule permitting all traffic
      description: Removes an egress rule from a security group. To remove a rule, the
        values that you specify (for example, ports) must match the existing rule's
        values exactly.
      script: '|||aws-ec2-revoke-security-group-ingress-rule'
      type: regular
      iscommand: true
      brand: ""
    nexttasks:
      '#none#':
      - "24"
    scriptarguments:
      cidrIp:
        simple: 0.0.0.0/0
      fromPort:
        complex:
          root: AWS
          accessor: EC2.SecurityGroups.IpPermissions.FromPort
      groupId:
        complex:
          root: AWS
          accessor: EC2.SecurityGroups.GroupId
      ipProtocol:
        simple: "-1"
      region:
        complex:
          root: incident
          accessor: labels.resource
          transformers:
          - operator: ParseJSON
          - operator: getField
            args:
              field:
                value:
                  simple: regionId
      roleArn: {}
      roleSessionDuration: {}
      roleSessionName: {}
      sourceSecurityGroupName: {}
      toPort:
        complex:
          root: AWS
          accessor: EC2.SecurityGroups.IpPermissions.ToPort
    continueonerror: true
    separatecontext: false
    view: |-
      {
        "position": {
          "x": -90,
          "y": 540
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "23":
    id: "23"
    taskid: af4dfaed-daff-4ba5-8596-9cf065c06494
    type: condition
    task:
      id: af4dfaed-daff-4ba5-8596-9cf065c06494
      version: -1
      name: Any public rules?
      description: 'Check for any remaining public security group ingress rules.  If
        one or more rules still exist, you must manually remove them. '
      type: condition
      iscommand: false
      brand: ""
    nexttasks:
      '#default#':
      - "9"
      "yes":
      - "20"
    separatecontext: false
    conditions:
    - label: "yes"
      condition:
      - - operator: isEqualString
          left:
            value:
              complex:
                root: AWS
                accessor: EC2.SecurityGroups.IpPermissions.IpRanges.CidrIp
            iscontext: true
          right:
            value:
              simple: 0.0.0.0/0
        - operator: isEqualString
          left:
            value:
              complex:
                root: AWS
                accessor: EC2.SecurityGroups.IpPermissions.Ipv6Ranges.CidrIpv6
            iscontext: true
          right:
            value:
              simple: ::/0
    view: |-
      {
        "position": {
          "x": 190,
          "y": 1145
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "24":
    id: "24"
    taskid: c7f75cf1-ccc9-4097-8a86-53ae3b735b7b
    type: regular
    task:
      id: c7f75cf1-ccc9-4097-8a86-53ae3b735b7b
      version: -1
      name: Pause 5 seconds
      description: Pause for 5 seconds to allow AWS updates.
      scriptName: Sleep
      type: regular
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "18"
    scriptarguments:
      seconds:
        simple: "5"
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 190,
          "y": 805
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "25":
    id: "25"
    taskid: c2c2f153-2285-4101-869c-9547c5cc9e67
    type: title
    task:
      id: c2c2f153-2285-4101-869c-9547c5cc9e67
      version: -1
      name: SG Overly Permissive To All Traffic
      description: ""
      type: title
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "21"
    separatecontext: false
    view: |-
      {
        "position": {
          "x": -90,
          "y": 390
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "26":
    id: "26"
    taskid: 2b391825-99a6-41ed-8264-edd946845cc3
    type: title
    task:
      id: 2b391825-99a6-41ed-8264-edd946845cc3
      version: -1
      name: SG Allows Internet Traffic
      description: ""
      type: title
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "16"
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 450,
          "y": 455
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
  "27":
    id: "27"
    taskid: 20a0adc7-86c1-42c0-839a-3148bbafca74
    type: title
    task:
      id: 20a0adc7-86c1-42c0-839a-3148bbafca74
      version: -1
      name: Default SG Does Not Restrict All Traffic
      description: ""
      type: title
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "14"
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 950,
          "y": 390
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "28":
    id: "28"
    taskid: bf81822b-44d6-4a0d-8798-1308b75a90be
    type: condition
    task:
      id: bf81822b-44d6-4a0d-8798-1308b75a90be
      version: -1
      name: Is AWS - EC2 integration enabled?
      description: Is AWS - EC2 integration enabled?
      type: condition
      iscommand: false
      brand: ""
    nexttasks:
      '#default#':
      - "9"
      "yes":
      - "2"
    separatecontext: false
    conditions:
    - label: "yes"
      condition:
      - - operator: isExists
          left:
            value:
              complex:
                root: modules
                filters:
                - - operator: isEqualString
                    left:
                      value:
                        simple: modules.brand
                      iscontext: true
                    right:
                      value:
                        simple: AWS - EC2
                - - operator: isEqualString
                    left:
                      value:
                        simple: modules.state
                      iscontext: true
                    right:
                      value:
                        simple: active
                accessor: brand
            iscontext: true
    view: |-
      {
        "position": {
          "x": 1440,
          "y": -120
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
view: |-
  {
    "linkLabelsPosition": {
      "12_20_yes": 0.65,
      "12_9_no": 0.63,
      "14_20_#default#": 0.18,
      "14_3_yes": 0.52,
      "15_25_permissive": 0.55,
      "15_26_pubTraffic": 0.6,
      "15_27_defaultSG": 0.56,
      "23_20_yes": 0.33,
      "23_9_#default#": 0.2
    },
    "paper": {
      "dimensions": {
        "height": 1835,
        "width": 1920,
        "x": -90,
        "y": -280
      }
    }
  }
inputs:
- key: policyId
  value: {}
  required: true
  description: Provides the Prisma Cloud policy Id.
outputs: []
tests:
- No Test
