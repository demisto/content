[MODEL:dataset="forcepoint_dlp_raw"]
filter  _collector_type = "API" // API based logs modeling rules
alter   xdm.observer.action=action,
        xdm.event.outcome = if(action in ("AUTHORIZED", "RELEASED", "AUDITED", "ENDPOINT_CONFIRM_CONTINUE"), XDM_CONST.OUTCOME_SUCCESS, action in ("QUARANTINED", "BLOCKED", "ENDPOINT_CONFIRM_ABORT"), XDM_CONST.OUTCOME_FAILED),
        xdm.observer.name=analyzed_by,
        xdm.event.type=channel,
        xdm.target.host.device_category = if(channel ~= "PRINT", "PRINTER", null),
        xdm.email.recipients=if(channel = "EMAIL", split(destination, ";"), null),
        xdm.target.host.hostname = if(channel = "ENDPOINT_PRINTING", destination),
        xdm.target.url = if(channel ~= "HTTP|FTP", destination),
        xdm.target.application.name = if(channel ~= "ENDPOINT_APPLICATION", destination),
        xdm.target.ipv4 = arrayindex(regextract(destination, "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}"), 0),
        xdm.target.port = arrayindex(regextract(destination, "\w+:(\d{1,5})"), 0),
        xdm.email.subject = if(channel = "EMAIL", details),
        xdm.event.description=details,
        observer_type = arrayindex(regextract(detected_by, "(.+?)\s+on"), 0),
| alter xdm.observer.type = coalesce(observer_type, detected_by),
        xdm.source.host.device_category=endpoint_type,
        xdm.event.id=event_id,
        file_name_array = arraymap(regextract(file_name, "(.+?)\s+\-\s+\d+[\.\d]*\s+[KMGTP]*B;?"), trim("@element")),
| alter file_type_array = arraymap(file_name_array, if("@element" ~= "\.[\w]+$", arrayindex(regextract("@element", ".+?\.(\w+)$"), 0), "")),
| alter xdm.target.file.filename = arraystring(file_name_array, ";"),
        xdm.target.file.file_type = arraystring(file_type_array, ";"),
        xdm.email.attachment.filename = if(channel ~= "EMAIL", file_name_array),
        xdm.email.attachment.file_type =  if(channel ~= "EMAIL", file_type_array),
        xdm.target.file.path = if(channel = "ENDPOINT_LAN", destination),
        xdm.alert.original_alert_id=id,
        xdm.network.rule=policies,
        xdm.alert.severity=severity,
        xdm.source.user.groups = split(json_extract_scalar(source, "$.business_unit"), ","),
        xdm.source.user.ou=json_extract_scalar(source, "$.department"),
        xdm.email.sender=json_extract_scalar(source, "$.email_address"),
        xdm.source.host.hostname=json_extract_scalar(source, "$.host_name"),
        ip_address = json_extract_scalar(source,  "$.ip_address"),
| alter xdm.source.ipv6 = if(ip_address ~= "\:[a-fA-F\d]{1,4}|[a-fA-F\d]{1,4}\:", ip_address, null),
        xdm.source.ipv4 = if(ip_address ~= "^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$", ip_address, null),
        username = json_extract_scalar(source,  "$.login_name"),
        nt_domain = json_extract_scalar(source,  "$.nt_domain"),
        email_address = json_extract_scalar(source,  "$.email_address"),
| alter xdm.source.user.username=coalesce(username, email_address),
        user_domain = arrayindex(regextract(username, "([^\\]+)\\"), 0),
| alter xdm.source.user.domain = coalesce(nt_domain, user_domain),
        xdm.event.is_completed = if(uppercase(status) ~= "CLOSE|FALSE.POSITIVE", true, false),
        xdm.event.tags = arraycreate(`tag`),
        xdm.target.file.size=to_integer(transaction_size),
        xdm.source.sent_packets=to_integer(violation_triggers);
