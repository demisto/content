[MODEL: dataset=armis_security_raw]
alter
	xdm.event.type = type,
	xdm.alert.description = description,
	xdm.alert.name = title,
	xdm.alert.original_alert_id = to_string(alertId),
	xdm.alert.severity = severity,
	xdm.event.outcome = status,
	xdm.event.id = arraystring(arraymap(activityUUIDs -> [], trim("@element", "\"")), ";"),
	xdm.source.host.device_id = arraystring(json_extract_array(deviceIds, "$."), ";"),
	xdm.network.session_id = arraystring(arraymap(connectionIds -> [], trim("@element", "\"")), ";");

[MODEL: dataset=armis_security_activities_raw] 
alter // extract the device name from the activity title, according to the activity type 
	device_name = arrayindex(if(
		type = "Address Association Failure", regextract(title, "device\s+([^\:]+):"), 
		type = "Application Usage", regextract(title, "(.+?)\s+used\s+"),
		type = "Credentials", regextract(title, "\s+from\s+(.+?)\s+in"),
		type = "DNS Query", regextract(title, "(.+?)\s+performed"),
		type = "DNS Response Too Slow", regextract(title, "DNS\s+request\s+from (.+?)\s+to"),
		type = "Device Name Associated", regextract(title, "detected\s+for\s+(.+)"),
		type = "Device Utilization", regextract(title, "(.+?)\s+has"),
		type in ("HTTP Request", "Port Scan Detected"), regextract(title, "(.+?)\s+performed"),
		type in ("QUIC Connection", "SSL Connection"), regextract(title, "(.+?)\s+connected"),
		type = "Risk Factor Updated", regextract(title, "(.+?)\s+Risk"),	 
		type = "Restricted Connection", regextract(title, "device\s+(.+?)\s+connected"),	 
		type = "Suspicious Host", regextract(title, "(.+?)\s+communicated"),
		type = "Suspicious SMB Connection", regextract(title, "(.+?)\s+created"),
		type = "Threat Detected", regextract(title, "\sfrom\s+(.+?)\s+to"),
		type = "User Agent Found", regextract(title, "found\s+for\s+(.+)")), 0)
| alter 
	application_name = if(type = "Application Usage", arrayindex(regextract(title, "\sused\s+\'([^\']+)"), 0)),
	application_version = if(type = "Application Usage", arrayindex(regextract(title, "\version\s+(\S+)"), 0)),
	http_method = if(type = "HTTP Request", arrayindex(regextract(title, "performed\s+\'([^\']+)"), 0)),
	msec_duration = if(type = "DNS Response Too Slow", arrayindex(regextract(title, "\s(\d+)\s+msec"), 0)),
	protocol_name = if(type = "Address Association Failure" and title ~= "DHCP", "DHCP", 
					type ~= "DNS", "DNS", 
					type = "QUIC Connection", "QUIC",
					type = "Suspicious SMB Connection", "SMB",
					type = "Credentials", arrayindex(regextract(title, "protocol\s+(\S+)"), 0), null),
	scanned_ip_addresses = arraymap(split(if(type = "Port Scan Detected", arrayindex(regextract(content, "IPs:(.+)"), 0)), ","), trim("@element")),
	source_ip = if(type in ("QUIC Connection", "SSL Connection"), arrayindex(regextract(title, "with\s(\S+)\s"), 0)),
	target_device_name = arrayindex(if(type = "Threat Detected", regextract(title, "\sto\s+(.+?)"),
							type = "Device Name Associated", regextract(title, "Device\s+name\s+\'([^\']+)"),
							type = "Suspicious SMB Connection", regextract(title, "device\s+(.+)")), 0),
	target_ip = if(type = "Credentials", arrayindex(regextract(title, "to\s+target\s+(\S+)"), 0),
				   type = "Restricted Connection", arrayindex(regextract(title, "address\s+\-\s+\S+\s+\(([^\)]+)"), 0)),
	target_port = if(type in ("HTTP Request", "Threat Detected", "Suspicious Host"), arrayindex(regextract(content, "Port:\s*(\d{1,5})"), 0),
					 type = "Port Scan Detected", arrayindex(regextract(content, "port[s]*:\s*(\d{1,5})"), 0)),
	target_host = if(type = "DNS Query", arrayindex(regextract(title, "to\s+domain\s+\'([^\']+)"), 0),
					   type = "DNS Response Too Slow", arrayindex(regextract(title, "to\s+\S+\s+for\s+([^\:]+)\:"), 0),
					   type in("HTTP Request", "QUIC Connection", "SSL Connection"), arrayindex(regextract(title, "to\s+\'([^\'\:]+)"), 0),
					   type = "Restricted Connection", arrayindex(regextract(title, "address\s+\-\s+(\S+)"), 0),
					   type = "Suspicious Host", arrayindex(regextract(title, "suspicious host\s+\'([^\']+)"), 0)),
	tls_cipher = if(type = "SSL Connection", arrayindex(regextract(content, "Cipher\s+Suite:\s*([^,]+)"), 0)),	
	tls_version = if(type = "SSL Connection", arrayindex(regextract(content, "Version:\s*([^,]+)"), 0)),		
	target_username = arrayindex(regextract(title, "for\s+user\s+(\S+)"), 0)
| alter 
	target_host_ipv4 = arrayindex(regextract(target_host, "((?:\d{1,3}\.){3}\d{1,3})"), 0),
	target_host_ipv6 = arrayindex(regextract(target_host, "((?:[a-fA-F\d]{0,4}\:){7}[\wa-fA-F]{0,4})"), 0)
| alter target_ip_addresses = arrayconcat(arraycreate(target_ip, target_host_ipv4, target_host_ipv6), scanned_ip_addresses)
| alter 
	source_ipv4 = if(source_ip ~= "(?:\d{1,3}\.){3}\d{1,3}", source_ip),
    source_ipv6 = if(source_ip ~= "(?:[a-fA-F\d]{0,4}\:){7}[\wa-fA-F]{0,4}", source_ip),
	target_ipv4_addresses = arrayfilter(target_ip_addresses, "@element" ~= "(?:\d{1,3}\.){3}\d{1,3}"),
	target_ipv6_addresses = arrayfilter(target_ip_addresses, "@element" ~= "(?:[a-fA-F\d]{0,4}\:){7}[\wa-fA-F]{0,4}")
| alter
	xdm.network.ip_protocol = coalesce(protocol_name, protocol),
	xdm.alert.original_threat_name = content, // extract protocol from content 
	xdm.event.type = type,
	xdm.event.description = title,
	xdm.event.id = activityUUID,
	xdm.event.duration = to_integer(msec_duration),
	xdm.network.http.method = http_method,
	xdm.network.session_id = arraystring(arraymap(connectionIds -> [], trim("@element", "\"")), ";"),
	xdm.network.tls.cipher = tls_cipher,
	xdm.network.tls.protocol_version = tls_version,
	xdm.observer.name = sensor -> name, 
	xdm.observer.type = sensor -> type, 
	xdm.source.application.name = application_name,
	xdm.source.application.version = application_version,
	xdm.source.host.device_id = arraystring(deviceIds -> [], ";"),
	xdm.source.host.hostname = device_name,
	xdm.source.ipv4 = source_ipv4,
	xdm.source.ipv6 = source_ipv6,
	xdm.source.zone = concat(site -> name, " (", site -> location, ")"), 
	xdm.target.host.ipv4_addresses = target_ipv4_addresses,
	xdm.target.host.ipv6_addresses = target_ipv6_addresses,
	xdm.target.ipv4 = arrayindex(target_ipv4_addresses, 0),
	xdm.target.ipv6 = arrayindex(target_ipv6_addresses, 0),
	xdm.target.port = to_integer(target_port),
	xdm.target.host.hostname = coalesce(target_device_name, target_host),
	xdm.target.user.username = target_username;


[MODEL: dataset=armis_security_devices_raw] 
alter os = uppercase(operatingSystem)
| alter
	xdm.alert.severity = to_string(risklevel), 
	xdm.event.tags = tags -> [],
	xdm.observer.name = sensor -> name, 
	xdm.observer.type = sensor -> type, 
	xdm.source.host.hostname = coalesce(name, arrayindex(split(names, ","), 0)),
	xdm.source.host.device_category = type, 
	xdm.source.host.device_model = model, 
	xdm.source.host.device_id = to_string(id), 
	xdm.source.host.manufacturer = manufacturer, 
	xdm.source.host.mac_addresses = arraycreate(macaddress), 
	xdm.source.zone = concat(site -> name, " (", site -> location, ")"),
	xdm.source.ipv4 = ipaddress, 
	xdm.source.ipv6 = ipv6, 
	xdm.source.user.identifier = arraystring(userIds -> [], ";"),
	xdm.source.host.os = concat(operatingSystem, " ", operatingSystemVersion),
    xdm.source.host.os_family = if(os contains "WINDOWS", XDM_CONST.OS_FAMILY_WINDOWS, os contains "MAC", XDM_CONST.OS_FAMILY_MACOS, os contains "LINUX", XDM_CONST.OS_FAMILY_LINUX, os contains "ANDROID", XDM_CONST.OS_FAMILY_ANDROID, os contains "IOS", XDM_CONST.OS_FAMILY_IOS, os contains "UBUNTU", XDM_CONST.OS_FAMILY_UBUNTU, os contains "DEBIAN", XDM_CONST.OS_FAMILY_DEBIAN, os contains "FEDORA", XDM_CONST.OS_FAMILY_FEDORA, os contains "CENTOS", XDM_CONST.OS_FAMILY_CENTOS, os contains "CHROME", XDM_CONST.OS_FAMILY_CHROMEOS, os contains "SOLARIS", XDM_CONST.OS_FAMILY_SOLARIS, os contains "SCADA", XDM_CONST.OS_FAMILY_SCADA, os);
