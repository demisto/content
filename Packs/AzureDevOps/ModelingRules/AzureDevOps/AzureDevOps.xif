[RULE: generic_devops_rule]
alter
    IpAddressv4 = arrayindex(regextract(IpAddress, "((?:\d{1,3}\.){3}\d{1,3})"), 0),
    IpAddressv6 = arrayindex(regextract(IpAddress, "((?:[a-fA-F\d]{0,4}\:){2,7}[a-fA-F\d]{0,4})"), 0),
    IsUser = if(ActorCUID = "00000000-0000-0000-0000-000000000000", to_boolean("False"), to_boolean("True"))
| alter
    xdm.source.user.upn = if(ActorUPN = "", null, ActorUPN),
    xdm.source.user.identifier = if(IsUser = False, null, ActorCUID),
    xdm.source.user.identity_type = if(IsUser = True, XDM_CONST.IDENTITY_TYPE_USER, XDM_CONST.IDENTITY_TYPE_MACHINE),
    xdm.auth.auth_method = if(AuthenticationMechanism = "", null, AuthenticationMechanism),
    xdm.session_context_id = CorrelationId,
    xdm.event.description = Details,
    xdm.source.user.scope = XDM_CONST.SCOPE_TYPE_AZURE,
    xdm.event.operation_sub_type = Category,
    xdm.source.cloud.project_id = if(ProjectId = "00000000-0000-0000-0000-000000000000", null, ProjectId),
    xdm.source.cloud.project = if(ProjectName = "",null, ProjectName),
    xdm.source.user_agent = if(UserAgent = "", null, UserAgent),
    xdm.source.ipv4 = IpAddressv4,
    xdm.source.ipv6 = IpAddressv6,
    xdm.event.type = OperationName,
    xdm.source.cloud.provider = XDM_CONST.CLOUD_PROVIDER_AZURE,
    xdm.event.original_event_type = Type,
    xdm.event.tags = arraycreate(XDM_CONST.EVENT_TAG_SAAS);

[MODEL: dataset = msft_azure_devops_raw]
// Licensing events
filter Area = "Licensing"
| call generic_devops_rule
| alter
    DetailsUsernameOrGroupName = arrayindex(regextract(Details,"\"(.+)\""),0)
| alter
    xdm.target.user.identifier = Data -> UserIdentifier,
    xdm.target.user.username = if(Data -> UserIdentifier != null AND Data -> UserIdentifier != "", DetailsUsernameOrGroupName),
    xdm.target.user.groups = if(Data -> GroupIdentifier != null AND Data -> GroupIdentifier != "", arraycreate(DetailsUsernameOrGroupName)),
    xdm.event.outcome_reason = Data -> Reason,
    xdm.event.outcome = XDM_CONST.OUTCOME_SUCCESS;

//Extension events
filter Area = "Extension"
| call generic_devops_rule
| alter
    xdm.target.application.publisher = Data -> PublisherName,
    xdm.target.application.name = Data -> ExtensionName,
    xdm.target.application.version = Data -> Version,
    xdm.event.outcome = XDM_CONST.OUTCOME_SUCCESS;

//Git events
filter Area = "Git"
| call generic_devops_rule
| alter //xdm mapping
    xdm.target.resource.type = "Git Repository",
    xdm.target.resource.id = Data -> RepoId,
    xdm.target.resource.name = Data -> RepoName,
    xdm.event.outcome = XDM_CONST.OUTCOME_SUCCESS;

//Group events
filter Area = "Group"
| call generic_devops_rule
| alter
    xdm.source.process.name = Data -> CallerProcedure,
    xdm.target.user.groups = arraycreate(concat("Id: ",Data -> GroupId), concat("Name: ", Data -> GroupName)),
    xdm.target.user.identifier = Data -> MemberId,
    xdm.target.user.username = Data -> MemberDisplayName,
    xdm.event.outcome = XDM_CONST.OUTCOME_SUCCESS;

//Library events
filter Area = "Library"
| call generic_devops_rule
| alter
    AgentPoolId = if(Data -> AgentPoolId = "", null, Data -> AgentPoolId),
    AgentPoolName = if(Data -> AgentPoolName = "", null, Data -> AgentPoolName),
    ConnectionId = if(Data -> ConnectionId = "", null, Data -> ConnectionId),
    ConnectionName = if(Data -> ConnectionName = "", null, Data -> ConnectionName),
    VariableGroupId = if(Data -> VariableGroupId = "", null, Data -> VariableGroupId),
    VariableGroupName = if(Data -> VariableGroupName = "", null, Data -> VariableGroupName)
| alter
    ResourceType = if(AgentPoolId != null, to_string("Agent Pool"), ConnectionId != null, to_string("Service Connection"), VariableGroupId != null, to_string("Variable Group"))
| alter
    xdm.target.agent.identifier = Data -> AgentName,
    xdm.network.session_id = Data -> ConnectionId,
    xdm.target.resource.id = coalesce(AgentPoolId, ConnectionId, VariableGroupId),
    xdm.target.resource.name = coalesce(AgentPoolName, ConnectionName, VariableGroupName),
    xdm.target.resource.type = ResourceType,
    xdm.target.resource.sub_type = coalesce(Data -> ConnectionType, Data -> VariableGroupType, Data -> Type),
    xdm.source.process.name = Data -> CallerProcedure,
    xdm.target.agent.type = if(Data -> AgentId != null OR Data -> AgentId != "", XDM_CONST.AGENT_TYPE_CLOUD),
    xdm.event.outcome = XDM_CONST.OUTCOME_SUCCESS;

//Token events
filter Area = "Token"
| call generic_devops_rule
| alter
    OwnerName = arrayindex(regextract(Data -> OwnerName, "user\s\"(.+)\""),0),
    TokenType = if(OperationName CONTAINS "Ssh", "SSH Key", "Personal Access Token")
| alter //xdm mapping
    xdm.target.resource.type = TokenType,
    xdm.target.resource.sub_type = Data -> TokenType,
    xdm.target.resource.name = Data -> DisplayName,
    xdm.target.user.identifier = Data -> TargetUser,
    xdm.event.outcome = XDM_CONST.OUTCOME_SUCCESS;

//Policy events
filter Area = "Policy"
| call generic_devops_rule
| alter //xdm mapping
    xdm.target.resource.id = Data -> PolicyTypeId,
    xdm.target.resource.name = Data -> PolicyTypeDisplayName,
    xdm.target.resource.type = to_string("Policy"),
    xdm.event.outcome = XDM_CONST.OUTCOME_SUCCESS;

//Project events
filter Area = "Project"
| call generic_devops_rule
| alter
    ResourceType = if(OperationName IN ("*Area*"), to_string("Area Path"), OperationName IN ("*IterationPath*"), to_string("Iteration Path"))
| alter //xdm mapping
    xdm.target.process.name = Data -> ProcessName,
    xdm.target.resource.name = Data -> Path,
    xdm.target.resource.type = ResourceType,
    xdm.event.outcome = if(OperationName IN ("*Failed"),XDM_CONST.OUTCOME_FAILED, OperationName IN("*Queued"), XDM_CONST.OUTCOME_PARTIAL, XDM_CONST.OUTCOME_SUCCESS);

//Release events
filter Area = "Release"
| call generic_devops_rule
| alter
    ResourceType = if(OperationName IN ("*Pipeline*"), to_string("Release Pipeline"), to_string("Release")),
    ReleaseId = Data -> ReleaseId
| alter //xdm mapping
    xdm.source.process.name = Data -> CallerProcedure,
    xdm.target.resource.id = if(ResourceType = "Release Pipeline", Data -> PipelineId, ReleaseId != null AND ReleaseId != "", ReleaseId, Data -> ReleaseEnvironmentSteps[0].ReleaseId),
    xdm.target.resource.name = if(ResourceType = "Release Pipeline", Data -> PipeLineName, Data -> ReleaseName),
    xdm.target.resource.type = ResourceType,
    xdm.event.outcome_reason = coalesce(Data -> ApprovalType, Data -> Reason),
    xdm.event.outcome = XDM_CONST.OUTCOME_SUCCESS;

//Security events
filter Area = "Permissions"
| call generic_devops_rule
| alter //xdm mapping
    xdm.target.resource.name = Data -> NamespaceName,
    xdm.target.resource.id = Data -> NamespaceId,
    xdm.target.resource.type = if(Data -> NamespaceId != null AND Data -> NamespaceId != "", to_string("Namespace")),
    xdm.target.agent.identifier = Data -> Tokens,
    xdm.event.outcome = XDM_CONST.OUTCOME_SUCCESS;

//Pipelines events
filter Area = "Pipelines"
| call generic_devops_rule
| alter
    isResource = if(Data -> ResourceId != null AND Data -> ResourceId != "", to_boolean("True"), to_boolean("False"))
| alter //xdm mapping
    xdm.target.zone = Data -> EnvironmentName,
    xdm.target.resource.type = if(isResource = True, Data -> ResourceType, to_string("Pipeline")),
    xdm.target.resource.id = if(isResource = True, Data -> ResourceId, Data -> PipelineId),
    xdm.source.process.name = Data -> CallerProcedure,
    xdm.event.outcome = XDM_CONST.OUTCOME_SUCCESS;

//Fallback to whats not in the event types we are mapping
filter Area NOT IN ("Licensing", "Extension", "Git", "Group", "Library", "Token", "Policy", "Project", "Release", "Permissions", "Pipelines")
| call generic_devops_rule;