[INGEST:vendor="Google", product="Workspace Chrome", target_dataset="google_workspace_chrome_raw", no_hit=keep]
call GOOGLE_WORKSPACE_CHROME_PARSING_RULE;
[INGEST:vendor="Google", product="Workspace_Chrome", target_dataset="google_workspace_chrome_raw", no_hit=keep]
call GOOGLE_WORKSPACE_CHROME_PARSING_RULE;


[RULE: GOOGLE_WORKSPACE_CHROME_PARSING_RULE]
alter
// Getting the JSON from either event OR events.
    tmp_get_field = if(events = null, null, arrayindex(events -> [], 0) -> parameters[])
| alter
// Get all of the keys and values.
    // Get all of the object names to a regex format.
    tmp_get_keys = rtrim(arraystring(arraymap(tmp_get_field, concat("(?P<", lowercase("@element" -> name), ">[^|]+)?\|")), ""), "\|"),
    // Get all of the object values to a String format.
    tmp_get_values = arraystring(arraymap(tmp_get_field, if("@element" ~= "intValue", "@element" -> intValue, "@element" ~= "value", "@element" -> value, "")), "|")
| alter 
    // Only work in Parsing Rules, use the regexcapture function to display the data in an organized JSON format.
    parameters = if(event =null, to_string(regexcapture(tmp_get_values, tmp_get_keys)), event)

// -------------- TIME --------------
| alter tmp_time_stamp_string = replace(coalesce(parameters -> timestamp, parameters -> time), ".", "")
| alter tmp_time_stamp_integer = to_integer(tmp_time_stamp_string)
| alter tmp_len = len(tmp_time_stamp_string)
// convert epoch representation to a datetime type timestamp
// in_case of nanoseconds, we convert them to microseconds since to_timestamp does not support nanoseconds
| alter _time = if( 
    tmp_len = 10, to_timestamp(tmp_time_stamp_integer, "SECONDS"), 
    tmp_len = 13, to_timestamp(tmp_time_stamp_integer, "MILLIS"),  
    tmp_len = 16, to_timestamp(tmp_time_stamp_integer, "MICROS"),  
    tmp_len = 19, to_timestamp(to_integer(divide(tmp_time_stamp_integer, 1000)), "MICROS")) 
| fields -tmp*;