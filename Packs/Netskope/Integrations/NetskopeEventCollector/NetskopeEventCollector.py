import demistomock as demisto
from CommonServerPython import *  # noqa # pylint: disable=unused-wildcard-import
from CommonServerUserPython import *  # noqa

import urllib3
from typing import Dict, Any, Tuple

# Disable insecure warnings
urllib3.disable_warnings()  # pylint: disable=no-member


''' CONSTANTS '''

ALL_SUPPORTED_EVENT_TYPES = ['page', 'audit', 'network', 'alert', 'application']
MAX_EVENTS_PAGE_SIZE = 10000
MAX_SKIP = 50000

''' CLIENT CLASS '''


class Client(BaseClient):
    """
    Client for Netskope RESTful API.

    Args:
        base_url (str): The base URL of Netskope.
        token (str): The token to authenticate against Netskope API.
        validate_certificate (bool): Specifies whether to verify the SSL certificate or not.
        proxy (bool): Specifies if to use XSOAR proxy settings.
    """

    def __init__(self, base_url: str, token: str, api_version: str, validate_certificate: bool, proxy: bool):
        super().__init__(base_url, verify=validate_certificate, proxy=proxy)
        if api_version == 'v1':
            self._session.params['token'] = token  # type: ignore
        else:
            self.headers = {'Netskope-Api-Token': token}

    def get_events_request_v1(self, event_type: str, last_run: dict, skip: int = None,
                              limit: int = None, is_command: bool = False) -> Dict:
        body = {
            'starttime': last_run.get(event_type),
            'endtime': int(datetime.now().timestamp()),
            'limit': limit if is_command else MAX_EVENTS_PAGE_SIZE,
            'type': event_type,
            'skip': skip
        }
        demisto.debug(f'Get event request body - {body}')
        response = self._http_request(method='GET', url_suffix='events', json_data=body, retries=3)
        return response

    def get_alerts_request_v1(self, last_run: dict, skip: int = None, limit: int = None,
                              is_command: bool = False) -> list[Any] | Any:  # pragma: no cover
        """
        Get alerts generated by Netskope, including policy, DLP, and watch list alerts.

        Args:
            last_run (dict): Get alerts from certain time period.
            skip (int): Skip over some events (useful for pagination in combination with limit).
            limit (int): Limit the number of events to return.
            is_command (bool): Are we running a get command or test_module or not.

        Returns:
            List[str, Any]: Netskope alerts.
        """

        url_suffix = 'alerts'
        body = {
            'starttime': last_run.get('alert'),
            'endtime': int(datetime.now().timestamp()),
            'limit': limit if is_command else MAX_EVENTS_PAGE_SIZE,
            'skip': skip
        }
        response = self._http_request(method='GET', url_suffix=url_suffix, json_data=body, retries=3)
        return response

    def get_events_request_v2(self, event_type: str, last_run: dict, skip: int = None,
                              limit: int = None, is_command: bool = False) -> Dict:

        url_suffix = f'events/data/{event_type}'
        params = {
            'starttime': last_run.get(event_type),
            'endtime': int(datetime.now().timestamp()),
            'limit': limit if is_command else MAX_EVENTS_PAGE_SIZE,
            'skip': skip
        }
        response = self._http_request(method='GET', url_suffix=url_suffix, headers=self.headers,
                                      params=params, retries=3)
        return response


''' HELPER FUNCTIONS '''


def populate_parsing_rule_fields(event: dict, event_type: str):
    event['source_log_event'] = event_type
    try:
        event['_time'] = timestamp_to_datestring(event['timestamp'] * 1000)
    except TypeError:
        # modeling rule will default on ingestion time if _time is missing
        pass


def dedup_by_id(last_run: dict, results: list, event_type: str, limit: int):
    """
    Dedup mechanism for the fetch to check both event id and timestamp (since timestamp can be duplicate)
    Args:
        last_run: Last run.
        results: List of the events from the api.
        event_type: the event type.
        limit: the number of events to return.

    Returns: list of events to send to XSIAM.

    """
    events = []
    last_run_ids = set(last_run.get(f'{event_type}-ids', []))
    # Sorting the list to Ascending order according to the timestamp (old one first)
    sorted_list = list(reversed(results))
    for event in sorted_list[:limit]:
        event['event_id'] = event['_id']
        if event.get('timestamp') == last_run[event_type] and event.get('event_id') not in last_run_ids:
            events.append(event)
            last_run_ids.add(event['event_id'])

        else:
            last_run[f'{event_type}-ids'] = [event['event_id']]
            last_run_ids.add(event['event_id'])
            last_run[event_type] = event['timestamp']
            events.append(event)

    demisto.debug(f'Last Run Ids to send to XSIAM - {last_run_ids}')
    return events, last_run, last_run_ids


''' COMMAND FUNCTIONS '''


def test_module(client: Client, api_version: str, last_run: dict, max_fetch: int) -> str:

    fetch_events_command(client, api_version, last_run, max_fetch=max_fetch, is_command=True)
    return 'ok'


def get_all_events(client: Client, last_run: dict, limit: int, api_version: str, is_command: bool) -> list:
    """
    This Function is doing a pagination to get all events within the given start and end time.
    Maximum events to get per a fetch call is 50,000 (MAX_SKIP)
    Args:
        client: Netskope Client
        last_run (dict): the last run
        limit (int): the number of events to return
        api_version (str): The API version: v1 or v2
        is_command (bool): Are we running the commands or test_module or not

    Returns (list): list of all the events from a start time.
    """
    events_result = []
    if limit is None:
        limit = MAX_EVENTS_PAGE_SIZE
    for event_type in ALL_SUPPORTED_EVENT_TYPES:
        et_events: list = []
        next_batch = True
        events = []
        skip = 0
        while next_batch:
            if api_version == 'v1':
                if event_type == 'alert':
                    response = client.get_alerts_request_v1(last_run, skip, limit, is_command)
                else:
                    response = client.get_events_request_v1(event_type, last_run, skip, limit, is_command)

                if response.get('status') != 'success':  # type: ignore
                    break

                results = response.get('data', [])  # type: ignore

            else:  # API version == v2
                response = client.get_events_request_v2(event_type, last_run, skip, limit, is_command)
                if response.get('ok') != 1:
                    break

                results = response.get('result', [])

            demisto.debug(f'The number of events pagination - {len(results)}')
            events.extend(results)
            if len(results) == MAX_EVENTS_PAGE_SIZE:
                skip += MAX_EVENTS_PAGE_SIZE

            if len(results) < MAX_EVENTS_PAGE_SIZE or not results or len(events) == MAX_SKIP:
                # This means that we either finished going over all results or that we have reached the
                # limit of accumulated events.
                break

        final_events, new_last_run, last_run_ids = dedup_by_id(last_run, events, event_type, limit)
        et_events.extend(final_events)
        # prepare for the next iteration
        last_run[f'{event_type}-ids'] = list(last_run_ids)
        demisto.debug(f'Initialize last run after fetch - {event_type} - {last_run[event_type]} \n '
                      f'Events IDs to send to XSIAM - {last_run_ids}')

        for event in et_events:
            populate_parsing_rule_fields(event, event_type)
        events_result.extend(et_events)

    return events_result


def v1_get_events_command(client: Client, args: Dict[str, Any], last_run: dict) -> Tuple[CommandResults, list]:
    limit = arg_to_number(args.get('limit', 50))
    events = []
    for event_type in ALL_SUPPORTED_EVENT_TYPES:
        response = client.get_events_request_v1(event_type, last_run, limit, is_command=True)
        if response.get('status') == 'success':
            result = response.get('data', [])
            events.extend(result)

        for event in events:
            event['source_log_event'] = event_type
            event['timestamp'] = timestamp_to_datestring(event['timestamp'] * 1000)

    readable_output = tableToMarkdown('Events List:', events,
                                      removeNull=True,
                                      headers=['_id', 'timestamp', 'type', 'access_method', 'app', 'traffic_type'],
                                      headerTransform=string_to_table_header)

    results = CommandResults(outputs_prefix='Netskope.Event',
                             outputs_key_field='_id',
                             outputs=events,
                             readable_output=readable_output,
                             raw_response=events)
    return results, events


def v2_get_events_command(client: Client, args: Dict[str, Any], last_run: dict) -> Tuple[CommandResults, list]:
    limit = arg_to_number(args.get('limit', 50))
    events = []
    for event_type in ALL_SUPPORTED_EVENT_TYPES:
        response = client.get_events_request_v2(event_type, last_run, limit, is_command=True)
        if response.get('ok') == 1:
            result = response.get('result', [])
            events.extend(result)

        for event in events:
            event['source_log_event'] = event_type
            event['timestamp'] = timestamp_to_datestring(event['timestamp'] * 1000)

    readable_output = tableToMarkdown('Events List:', events,
                                      removeNull=True,
                                      headers=['_id', 'timestamp', 'type', 'access_method', 'app', 'traffic_type'],
                                      headerTransform=string_to_table_header)

    results = CommandResults(outputs_prefix='Netskope.Event',
                             outputs_key_field='_id',
                             outputs=events,
                             readable_output=readable_output,
                             raw_response=events)

    return results, events


def fetch_events_command(client, api_version, last_run, max_fetch, is_command):  # pragma: no cover
    events = get_all_events(client, last_run=last_run, limit=max_fetch, api_version=api_version, is_command=is_command)

    return events


''' MAIN FUNCTION '''


def main() -> None:  # pragma: no cover
    params = demisto.params()

    url = params.get('url')
    api_version = params.get('api_version')
    token = params.get('credentials', {}).get('password')
    base_url = urljoin(url, f'/api/{api_version}/')
    verify_certificate = not params.get('insecure', False)
    proxy = params.get('proxy', False)
    first_fetch = params.get('first_fetch')
    max_fetch = arg_to_number(params.get('max_fetch', 1000))
    vendor, product = params.get('vendor', 'netskope'), params.get('product', 'netskope')

    demisto.debug(f'Command being called is {demisto.command()}')
    try:
        client = Client(base_url, token, api_version, verify_certificate, proxy)

        last_run = demisto.getLastRun()
        for event_type in ALL_SUPPORTED_EVENT_TYPES:
            # First Fetch
            if not last_run.get(event_type):
                first_fetch = int(arg_to_datetime(first_fetch).timestamp())  # type: ignore[union-attr]
                last_run_id_key = f'{event_type}-ids'
                last_run[event_type] = last_run.get(event_type, first_fetch)
                last_run[last_run_id_key] = last_run.get(last_run_id_key, [])
                demisto.debug(f'First Fetch - Initialize last run - {last_run}')

        if demisto.command() == 'test-module':
            # This is the call made when pressing the integration Test button.
            result = test_module(client, api_version, last_run, max_fetch)   # type: ignore[arg-type]
            return_results(result)

        elif demisto.command() == 'netskope-get-events':
            if api_version == 'v1':
                results, events = v1_get_events_command(client, demisto.args(), last_run)
            else:
                results, events = v2_get_events_command(client, demisto.args(), last_run)

            if argToBoolean(demisto.args().get('should_push_events', 'true')):
                send_events_to_xsiam(events=events, vendor=vendor, product=product)  # type: ignore
            return_results(results)

        elif demisto.command() == 'fetch-events':
            demisto.debug(f'Sending request with last run {last_run}')
            events = fetch_events_command(client, api_version, last_run, max_fetch, is_command=False)
            send_events_to_xsiam(events=events, vendor=vendor, product=product)
            demisto.debug(f'Setting the last_run to: {last_run}')
            demisto.setLastRun(last_run)

    # Log exceptions and return errors
    except Exception as e:
        return_error(f'Failed to execute {demisto.command()} command.\nError:\n{str(e)}')


''' ENTRY POINT '''


if __name__ in ('__main__', '__builtin__', 'builtins'):
    main()
