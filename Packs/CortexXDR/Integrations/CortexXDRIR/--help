00000000: 696d 706f 7274 2068 6173 686c 6962 0a69  import hashlib.i
00000010: 6d70 6f72 7420 7365 6372 6574 730a 696d  mport secrets.im
00000020: 706f 7274 2073 7472 696e 670a 696d 706f  port string.impo
00000030: 7274 2064 656d 6973 746f 6d6f 636b 2061  rt demistomock a
00000040: 7320 6465 6d69 7374 6f20 2023 206e 6f71  s demisto  # noq
00000050: 613a 2046 3430 310a 6672 6f6d 2043 6f6d  a: F401.from Com
00000060: 6d6f 6e53 6572 7665 7250 7974 686f 6e20  monServerPython 
00000070: 696d 706f 7274 202a 2020 2320 6e6f 7161  import *  # noqa
00000080: 3a20 4634 3031 0a66 726f 6d20 436f 7265  : F401.from Core
00000090: 4952 4170 694d 6f64 756c 6520 696d 706f  IRApiModule impo
000000a0: 7274 202a 0a66 726f 6d20 6974 6572 746f  rt *.from iterto
000000b0: 6f6c 7320 696d 706f 7274 207a 6970 5f6c  ols import zip_l
000000c0: 6f6e 6765 7374 0a0a 2320 4469 7361 626c  ongest..# Disabl
000000d0: 6520 696e 7365 6375 7265 2077 6172 6e69  e insecure warni
000000e0: 6e67 730a 7572 6c6c 6962 332e 6469 7361  ngs.urllib3.disa
000000f0: 626c 655f 7761 726e 696e 6773 2829 0a0a  ble_warnings()..
00000100: 5449 4d45 5f46 4f52 4d41 5420 3d20 2225  TIME_FORMAT = "%
00000110: 592d 256d 2d25 6454 2548 3a25 4d3a 2553  Y-%m-%dT%H:%M:%S
00000120: 220a 4e4f 4e43 455f 4c45 4e47 5448 203d  ".NONCE_LENGTH =
00000130: 2036 340a 4150 495f 4b45 595f 4c45 4e47   64.API_KEY_LENG
00000140: 5448 203d 2031 3238 0a0a 494e 5445 4752  TH = 128..INTEGR
00000150: 4154 494f 4e5f 434f 4e54 4558 545f 4252  ATION_CONTEXT_BR
00000160: 414e 4420 3d20 2750 616c 6f41 6c74 6f4e  AND = 'PaloAltoN
00000170: 6574 776f 726b 7358 4452 270a 5844 525f  etworksXDR'.XDR_
00000180: 494e 4349 4445 4e54 5f54 5950 455f 4e41  INCIDENT_TYPE_NA
00000190: 4d45 203d 2027 436f 7274 6578 2058 4452  ME = 'Cortex XDR
000001a0: 2049 6e63 6964 656e 7427 0a49 4e54 4547   Incident'.INTEG
000001b0: 5241 5449 4f4e 5f4e 414d 4520 3d20 2743  RATION_NAME = 'C
000001c0: 6f72 7465 7820 5844 5220 2d20 4952 270a  ortex XDR - IR'.
000001d0: 0a58 4452 5f49 4e43 4944 454e 545f 4649  .XDR_INCIDENT_FI
000001e0: 454c 4453 203d 207b 0a20 2020 2022 7374  ELDS = {.    "st
000001f0: 6174 7573 223a 207b 2264 6573 6372 6970  atus": {"descrip
00000200: 7469 6f6e 223a 2022 4375 7272 656e 7420  tion": "Current 
00000210: 7374 6174 7573 206f 6620 7468 6520 696e  status of the in
00000220: 6369 6465 6e74 3a20 5c22 6e65 775c 222c  cident: \"new\",
00000230: 5c22 756e 6465 725f 220a 2020 2020 2020  \"under_".      
00000240: 2020 2020 2020 2020 2020 2020 2020 2020                  
00000250: 2020 2020 2020 2020 2269 6e76 6573 7469          "investi
00000260: 6761 7469 6f6e 5c22 2c5c 2272 6573 6f6c  gation\",\"resol
00000270: 7665 645f 6b6e 6f77 6e5f 6973 7375 655c  ved_known_issue\
00000280: 222c 220a 2020 2020 2020 2020 2020 2020  ",".            
00000290: 2020 2020 2020 2020 2020 2020 2020 2020                  
000002a0: 2020 225c 2272 6573 6f6c 7665 645f 6475    "\"resolved_du
000002b0: 706c 6963 6174 655c 222c 5c22 7265 736f  plicate\",\"reso
000002c0: 6c76 6564 5f66 616c 7365 5f70 6f73 6974  lved_false_posit
000002d0: 6976 655c 222c 220a 2020 2020 2020 2020  ive\",".        
000002e0: 2020 2020 2020 2020 2020 2020 2020 2020                  
000002f0: 2020 2020 2020 225c 2272 6573 6f6c 7665        "\"resolve
00000300: 645f 7472 7565 5f70 6f73 6974 6976 655c  d_true_positive\
00000310: 222c 5c22 7265 736f 6c76 6564 5f73 6563  ",\"resolved_sec
00000320: 7572 6974 795f 7465 7374 696e 675c 222c  urity_testing\",
00000330: 5c22 7265 736f 6c76 6564 5f6f 7468 6572  \"resolved_other
00000340: 5c22 222c 0a20 2020 2020 2020 2020 2020  \"",.           
00000350: 2020 2020 2278 736f 6172 5f66 6965 6c64      "xsoar_field
00000360: 5f6e 616d 6522 3a20 2778 6472 7374 6174  _name": 'xdrstat
00000370: 7573 7632 277d 2c0a 2020 2020 2261 7373  usv2'},.    "ass
00000380: 6967 6e65 645f 7573 6572 5f6d 6169 6c22  igned_user_mail"
00000390: 3a20 7b22 6465 7363 7269 7074 696f 6e22  : {"description"
000003a0: 3a20 2245 6d61 696c 2061 6464 7265 7373  : "Email address
000003b0: 206f 6620 7468 6520 6173 7369 676e 6564   of the assigned
000003c0: 2075 7365 722e 222c 0a20 2020 2020 2020   user.",.       
000003d0: 2020 2020 2020 2020 2020 2020 2020 2020                  
000003e0: 2020 2020 2778 736f 6172 5f66 6965 6c64      'xsoar_field
000003f0: 5f6e 616d 6527 3a20 2278 6472 6173 7369  _name': "xdrassi
00000400: 676e 6564 7573 6572 656d 6169 6c22 7d2c  gneduseremail"},
00000410: 0a20 2020 2022 6173 7369 676e 6564 5f75  .    "assigned_u
00000420: 7365 725f 7072 6574 7479 5f6e 616d 6522  ser_pretty_name"
00000430: 3a20 7b22 6465 7363 7269 7074 696f 6e22  : {"description"
00000440: 3a20 2246 756c 6c20 6e61 6d65 206f 6620  : "Full name of 
00000450: 7468 6520 7573 6572 2061 7373 6967 6e65  the user assigne
00000460: 6420 746f 2074 6865 2069 6e63 6964 656e  d to the inciden
00000470: 742e 222c 0a20 2020 2020 2020 2020 2020  t.",.           
00000480: 2020 2020 2020 2020 2020 2020 2020 2020                  
00000490: 2020 2020 2020 2022 7873 6f61 725f 6669         "xsoar_fi
000004a0: 656c 645f 6e61 6d65 223a 2022 7864 7261  eld_name": "xdra
000004b0: 7373 6967 6e65 6475 7365 7270 7265 7474  ssigneduserprett
000004c0: 796e 616d 6522 7d2c 0a20 2020 2022 7265  yname"},.    "re
000004d0: 736f 6c76 655f 636f 6d6d 656e 7422 3a20  solve_comment": 
000004e0: 7b22 6465 7363 7269 7074 696f 6e22 3a20  {"description": 
000004f0: 2243 6f6d 6d65 6e74 7320 656e 7465 7265  "Comments entere
00000500: 6420 6279 2074 6865 2075 7365 7220 7768  d by the user wh
00000510: 656e 2074 6865 2069 6e63 6964 656e 7420  en the incident 
00000520: 7761 7320 7265 736f 6c76 6564 2e22 2c0a  was resolved.",.
00000530: 2020 2020 2020 2020 2020 2020 2020 2020                  
00000540: 2020 2020 2020 2020 2278 736f 6172 5f66          "xsoar_f
00000550: 6965 6c64 5f6e 616d 6522 3a20 2278 6472  ield_name": "xdr
00000560: 7265 736f 6c76 6563 6f6d 6d65 6e74 227d  resolvecomment"}
00000570: 2c0a 2020 2020 226d 616e 7561 6c5f 7365  ,.    "manual_se
00000580: 7665 7269 7479 223a 207b 2264 6573 6372  verity": {"descr
00000590: 6970 7469 6f6e 223a 2022 496e 6369 6465  iption": "Incide
000005a0: 6e74 2073 6576 6572 6974 7920 6173 7369  nt severity assi
000005b0: 676e 6564 2062 7920 7468 6520 7573 6572  gned by the user
000005c0: 2e20 220a 2020 2020 2020 2020 2020 2020  . ".            
000005d0: 2020 2020 2020 2020 2020 2020 2020 2020                  
000005e0: 2020 2020 2020 2020 2020 2022 5468 6973             "This
000005f0: 2064 6f65 7320 6e6f 7420 6166 6665 6374   does not affect
00000600: 2074 6865 2063 616c 6375 6c61 7465 6420   the calculated 
00000610: 7365 7665 7269 7479 206c 6f77 206d 6564  severity low med
00000620: 6975 6d20 6869 6768 222c 0a20 2020 2020  ium high",.     
00000630: 2020 2020 2020 2020 2020 2020 2020 2020                  
00000640: 2020 2022 7873 6f61 725f 6669 656c 645f     "xsoar_field_
00000650: 6e61 6d65 223a 2022 7365 7665 7269 7479  name": "severity
00000660: 227d 2c0a 7d0a 0a58 4452 5f52 4553 4f4c  "},.}..XDR_RESOL
00000670: 5645 445f 5354 4154 5553 5f54 4f5f 5853  VED_STATUS_TO_XS
00000680: 4f41 5220 3d20 7b0a 2020 2020 2772 6573  OAR = {.    'res
00000690: 6f6c 7665 645f 6b6e 6f77 6e5f 6973 7375  olved_known_issu
000006a0: 6527 3a20 274f 7468 6572 272c 0a20 2020  e': 'Other',.   
000006b0: 2027 7265 736f 6c76 6564 5f64 7570 6c69   'resolved_dupli
000006c0: 6361 7465 273a 2027 4475 706c 6963 6174  cate': 'Duplicat
000006d0: 6527 2c0a 2020 2020 2772 6573 6f6c 7665  e',.    'resolve
000006e0: 645f 6661 6c73 655f 706f 7369 7469 7665  d_false_positive
000006f0: 273a 2027 4661 6c73 6520 506f 7369 7469  ': 'False Positi
00000700: 7665 272c 0a20 2020 2027 7265 736f 6c76  ve',.    'resolv
00000710: 6564 5f74 7275 655f 706f 7369 7469 7665  ed_true_positive
00000720: 273a 2027 5265 736f 6c76 6564 272c 0a20  ': 'Resolved',. 
00000730: 2020 2027 7265 736f 6c76 6564 5f73 6563     'resolved_sec
00000740: 7572 6974 795f 7465 7374 696e 6727 3a20  urity_testing': 
00000750: 274f 7468 6572 272c 0a20 2020 2027 7265  'Other',.    're
00000760: 736f 6c76 6564 5f6f 7468 6572 273a 2027  solved_other': '
00000770: 4f74 6865 7227 2c0a 2020 2020 2772 6573  Other',.    'res
00000780: 6f6c 7665 645f 6175 746f 273a 2027 5265  olved_auto': 'Re
00000790: 736f 6c76 6564 270a 7d0a 0a58 534f 4152  solved'.}..XSOAR
000007a0: 5f52 4553 4f4c 5645 445f 5354 4154 5553  _RESOLVED_STATUS
000007b0: 5f54 4f5f 5844 5220 3d20 7b0a 2020 2020  _TO_XDR = {.    
000007c0: 274f 7468 6572 273a 2027 7265 736f 6c76  'Other': 'resolv
000007d0: 6564 5f6f 7468 6572 272c 0a20 2020 2027  ed_other',.    '
000007e0: 4475 706c 6963 6174 6527 3a20 2772 6573  Duplicate': 'res
000007f0: 6f6c 7665 645f 6475 706c 6963 6174 6527  olved_duplicate'
00000800: 2c0a 2020 2020 2746 616c 7365 2050 6f73  ,.    'False Pos
00000810: 6974 6976 6527 3a20 2772 6573 6f6c 7665  itive': 'resolve
00000820: 645f 6661 6c73 655f 706f 7369 7469 7665  d_false_positive
00000830: 272c 0a20 2020 2027 5265 736f 6c76 6564  ',.    'Resolved
00000840: 273a 2027 7265 736f 6c76 6564 5f74 7275  ': 'resolved_tru
00000850: 655f 706f 7369 7469 7665 272c 0a7d 0a0a  e_positive',.}..
00000860: 4d49 5252 4f52 5f44 4952 4543 5449 4f4e  MIRROR_DIRECTION
00000870: 203d 207b 0a20 2020 2027 4e6f 6e65 273a   = {.    'None':
00000880: 204e 6f6e 652c 0a20 2020 2027 496e 636f   None,.    'Inco
00000890: 6d69 6e67 273a 2027 496e 272c 0a20 2020  ming': 'In',.   
000008a0: 2027 4f75 7467 6f69 6e67 273a 2027 4f75   'Outgoing': 'Ou
000008b0: 7427 2c0a 2020 2020 2742 6f74 6827 3a20  t',.    'Both': 
000008c0: 2742 6f74 6827 0a7d 0a0a 0a64 6566 2063  'Both'.}...def c
000008d0: 6f6e 7665 7274 5f65 706f 6368 5f74 6f5f  onvert_epoch_to_
000008e0: 6d69 6c6c 6928 7469 6d65 7374 616d 7029  milli(timestamp)
000008f0: 3a0a 2020 2020 6966 2074 696d 6573 7461  :.    if timesta
00000900: 6d70 2069 7320 4e6f 6e65 3a0a 2020 2020  mp is None:.    
00000910: 2020 2020 7265 7475 726e 204e 6f6e 650a      return None.
00000920: 2020 2020 6966 2039 203c 206c 656e 2873      if 9 < len(s
00000930: 7472 2874 696d 6573 7461 6d70 2929 203c  tr(timestamp)) <
00000940: 2031 333a 0a20 2020 2020 2020 2074 696d   13:.        tim
00000950: 6573 7461 6d70 203d 2069 6e74 2874 696d  estamp = int(tim
00000960: 6573 7461 6d70 2920 2a20 3130 3030 0a20  estamp) * 1000. 
00000970: 2020 2072 6574 7572 6e20 696e 7428 7469     return int(ti
00000980: 6d65 7374 616d 7029 0a0a 0a64 6566 2063  mestamp)...def c
00000990: 6f6e 7665 7274 5f64 6174 6574 696d 655f  onvert_datetime_
000009a0: 746f 5f65 706f 6368 2874 6865 5f74 696d  to_epoch(the_tim
000009b0: 653d 3029 3a0a 2020 2020 6966 2074 6865  e=0):.    if the
000009c0: 5f74 696d 6520 6973 204e 6f6e 653a 0a20  _time is None:. 
000009d0: 2020 2020 2020 2072 6574 7572 6e20 4e6f         return No
000009e0: 6e65 0a20 2020 2074 7279 3a0a 2020 2020  ne.    try:.    
000009f0: 2020 2020 6966 2069 7369 6e73 7461 6e63      if isinstanc
00000a00: 6528 7468 655f 7469 6d65 2c20 6461 7465  e(the_time, date
00000a10: 7469 6d65 293a 0a20 2020 2020 2020 2020  time):.         
00000a20: 2020 2072 6574 7572 6e20 696e 7428 7468     return int(th
00000a30: 655f 7469 6d65 2e73 7472 6674 696d 6528  e_time.strftime(
00000a40: 2725 7327 2929 0a20 2020 2065 7863 6570  '%s')).    excep
00000a50: 7420 4578 6365 7074 696f 6e20 6173 2065  t Exception as e
00000a60: 7272 3a0a 2020 2020 2020 2020 6465 6d69  rr:.        demi
00000a70: 7374 6f2e 6465 6275 6728 6572 7229 0a20  sto.debug(err). 
00000a80: 2020 2020 2020 2072 6574 7572 6e20 300a         return 0.
00000a90: 0a0a 6465 6620 636f 6e76 6572 745f 6461  ..def convert_da
00000aa0: 7465 7469 6d65 5f74 6f5f 6570 6f63 685f  tetime_to_epoch_
00000ab0: 6d69 6c6c 6973 2874 6865 5f74 696d 653d  millis(the_time=
00000ac0: 3029 3a0a 2020 2020 7265 7475 726e 2063  0):.    return c
00000ad0: 6f6e 7665 7274 5f65 706f 6368 5f74 6f5f  onvert_epoch_to_
00000ae0: 6d69 6c6c 6928 636f 6e76 6572 745f 6461  milli(convert_da
00000af0: 7465 7469 6d65 5f74 6f5f 6570 6f63 6828  tetime_to_epoch(
00000b00: 7468 655f 7469 6d65 3d74 6865 5f74 696d  the_time=the_tim
00000b10: 6529 290a 0a0a 6465 6620 6765 6e65 7261  e))...def genera
00000b20: 7465 5f63 7572 7265 6e74 5f65 706f 6368  te_current_epoch
00000b30: 5f75 7463 2829 3a0a 2020 2020 7265 7475  _utc():.    retu
00000b40: 726e 2063 6f6e 7665 7274 5f64 6174 6574  rn convert_datet
00000b50: 696d 655f 746f 5f65 706f 6368 5f6d 696c  ime_to_epoch_mil
00000b60: 6c69 7328 6461 7465 7469 6d65 2e6e 6f77  lis(datetime.now
00000b70: 2874 696d 657a 6f6e 652e 7574 6329 290a  (timezone.utc)).
00000b80: 0a0a 6465 6620 6765 6e65 7261 7465 5f6b  ..def generate_k
00000b90: 6579 2829 3a0a 2020 2020 7265 7475 726e  ey():.    return
00000ba0: 2022 222e 6a6f 696e 285b 7365 6372 6574   "".join([secret
00000bb0: 732e 6368 6f69 6365 2873 7472 696e 672e  s.choice(string.
00000bc0: 6173 6369 695f 6c65 7474 6572 7320 2b20  ascii_letters + 
00000bd0: 7374 7269 6e67 2e64 6967 6974 7329 2066  string.digits) f
00000be0: 6f72 205f 2069 6e20 7261 6e67 6528 4150  or _ in range(AP
00000bf0: 495f 4b45 595f 4c45 4e47 5448 295d 290a  I_KEY_LENGTH)]).
00000c00: 0a0a 6465 6620 6372 6561 7465 5f61 7574  ..def create_aut
00000c10: 6828 6170 695f 6b65 7929 3a0a 2020 2020  h(api_key):.    
00000c20: 6e6f 6e63 6520 3d20 2222 2e6a 6f69 6e28  nonce = "".join(
00000c30: 5b73 6563 7265 7473 2e63 686f 6963 6528  [secrets.choice(
00000c40: 7374 7269 6e67 2e61 7363 6969 5f6c 6574  string.ascii_let
00000c50: 7465 7273 202b 2073 7472 696e 672e 6469  ters + string.di
00000c60: 6769 7473 2920 666f 7220 5f20 696e 2072  gits) for _ in r
00000c70: 616e 6765 284e 4f4e 4345 5f4c 454e 4754  ange(NONCE_LENGT
00000c80: 4829 5d29 0a20 2020 2074 696d 6573 7461  H)]).    timesta
00000c90: 6d70 203d 2073 7472 2867 656e 6572 6174  mp = str(generat
00000ca0: 655f 6375 7272 656e 745f 6570 6f63 685f  e_current_epoch_
00000cb0: 7574 6328 2929 2020 2320 4765 7420 6570  utc())  # Get ep
00000cc0: 6f63 6820 7469 6d65 2075 7463 206d 696c  och time utc mil
00000cd0: 6c69 730a 2020 2020 6861 7368 5f20 3d20  lis.    hash_ = 
00000ce0: 6861 7368 6c69 622e 7368 6132 3536 2829  hashlib.sha256()
00000cf0: 0a20 2020 2068 6173 685f 2e75 7064 6174  .    hash_.updat
00000d00: 6528 2861 7069 5f6b 6579 202b 206e 6f6e  e((api_key + non
00000d10: 6365 202b 2074 696d 6573 7461 6d70 292e  ce + timestamp).
00000d20: 656e 636f 6465 2822 7574 662d 3822 2929  encode("utf-8"))
00000d30: 0a20 2020 2072 6574 7572 6e20 6e6f 6e63  .    return nonc
00000d40: 652c 2074 696d 6573 7461 6d70 2c20 6861  e, timestamp, ha
00000d50: 7368 5f2e 6865 7864 6967 6573 7428 290a  sh_.hexdigest().
00000d60: 0a0a 6465 6620 636c 6561 725f 7472 6169  ..def clear_trai
00000d70: 6c69 6e67 5f77 6869 7465 7370 6163 6528  ling_whitespace(
00000d80: 7265 7329 3a0a 2020 2020 696e 6465 7820  res):.    index 
00000d90: 3d20 300a 2020 2020 7768 696c 6520 696e  = 0.    while in
00000da0: 6465 7820 3c20 6c65 6e28 7265 7329 3a0a  dex < len(res):.
00000db0: 2020 2020 2020 2020 666f 7220 6b65 792c          for key,
00000dc0: 2076 616c 7565 2069 6e20 7265 735b 696e   value in res[in
00000dd0: 6465 785d 2e69 7465 6d73 2829 3a0a 2020  dex].items():.  
00000de0: 2020 2020 2020 2020 2020 6966 2069 7369            if isi
00000df0: 6e73 7461 6e63 6528 7661 6c75 652c 2073  nstance(value, s
00000e00: 7472 293a 0a20 2020 2020 2020 2020 2020  tr):.           
00000e10: 2020 2020 2072 6573 5b69 6e64 6578 5d5b       res[index][
00000e20: 6b65 795d 203d 2076 616c 7565 2e72 7374  key] = value.rst
00000e30: 7269 7028 290a 2020 2020 2020 2020 696e  rip().        in
00000e40: 6465 7820 2b3d 2031 0a20 2020 2072 6574  dex += 1.    ret
00000e50: 7572 6e20 7265 730a 0a0a 6465 6620 6669  urn res...def fi
00000e60: 6c74 6572 5f61 6e64 5f73 6176 655f 756e  lter_and_save_un
00000e70: 7365 656e 5f69 6e63 6964 656e 7428 696e  seen_incident(in
00000e80: 6369 6465 6e74 733a 204c 6973 742c 206c  cidents: List, l
00000e90: 696d 6974 3a20 696e 742c 206e 756d 6265  imit: int, numbe
00000ea0: 725f 6f66 5f61 6c72 6561 6479 5f66 696c  r_of_already_fil
00000eb0: 7465 7265 645f 696e 6369 6465 6e74 733a  tered_incidents:
00000ec0: 2069 6e74 2920 2d3e 204c 6973 743a 0a20   int) -> List:. 
00000ed0: 2020 2022 2222 0a20 2020 2046 696c 7465     """.    Filte
00000ee0: 7273 2069 6e63 6964 656e 7473 2074 6861  rs incidents tha
00000ef0: 7420 7765 7265 2073 6565 6e20 616c 7265  t were seen alre
00000f00: 6164 7920 616e 6420 7361 7665 7320 7468  ady and saves th
00000f10: 6520 756e 7365 656e 2069 6e63 6964 656e  e unseen inciden
00000f20: 7473 2074 6f20 4c61 7374 5275 6e20 6f62  ts to LastRun ob
00000f30: 6a65 6374 2e0a 2020 2020 3a70 6172 616d  ject..    :param
00000f40: 2069 6e63 6964 656e 7473 3a20 4c69 7374   incidents: List
00000f50: 206f 6620 696e 6369 6465 6e74 202d 206d   of incident - m
00000f60: 7573 7420 6265 206c 6973 740a 2020 2020  ust be list.    
00000f70: 3a70 6172 616d 206c 696d 6974 3a20 7468  :param limit: th
00000f80: 6520 6d61 7869 6d75 6d20 6e75 6d62 6572  e maximum number
00000f90: 206f 6620 696e 6369 6465 6e74 2070 6572   of incident per
00000fa0: 2066 6574 6368 0a20 2020 203a 7061 7261   fetch.    :para
00000fb0: 6d20 6e75 6d62 6572 5f6f 665f 616c 7265  m number_of_alre
00000fc0: 6164 795f 6669 6c74 6572 6564 5f69 6e63  ady_filtered_inc
00000fd0: 6964 656e 7473 3a20 6e75 6d62 6572 206f  idents: number o
00000fe0: 6620 696e 6369 6465 6e74 7320 7468 6174  f incidents that
00000ff0: 2077 6572 6520 6665 7463 6865 6420 616c   were fetched al
00001000: 7265 6164 790a 2020 2020 3a72 6574 7572  ready.    :retur
00001010: 6e3a 2074 6865 2066 696c 7465 7265 6420  n: the filtered 
00001020: 696e 6369 6465 6e74 732e 0a20 2020 2022  incidents..    "
00001030: 2222 0a20 2020 206c 6173 745f 7275 6e5f  "".    last_run_
00001040: 6f62 6a20 3d20 6465 6d69 7374 6f2e 6765  obj = demisto.ge
00001050: 744c 6173 7452 756e 2829 0a20 2020 2066  tLastRun().    f
00001060: 6574 6368 6564 5f73 7461 7272 6564 5f69  etched_starred_i
00001070: 6e63 6964 656e 7473 203d 206c 6173 745f  ncidents = last_
00001080: 7275 6e5f 6f62 6a2e 706f 7028 2766 6574  run_obj.pop('fet
00001090: 6368 6564 5f73 7461 7272 6564 5f69 6e63  ched_starred_inc
000010a0: 6964 656e 7473 272c 207b 7d29 0a20 2020  idents', {}).   
000010b0: 2066 696c 7465 7265 645f 696e 6369 6465   filtered_incide
000010c0: 6e74 7320 3d20 5b5d 0a20 2020 2066 6f72  nts = [].    for
000010d0: 2069 6e63 6964 656e 7420 696e 2069 6e63   incident in inc
000010e0: 6964 656e 7473 3a0a 2020 2020 2020 2020  idents:.        
000010f0: 696e 6369 6465 6e74 5f69 6420 3d20 696e  incident_id = in
00001100: 6369 6465 6e74 2e67 6574 2827 696e 6369  cident.get('inci
00001110: 6465 6e74 5f69 6427 290a 2020 2020 2020  dent_id').      
00001120: 2020 6966 2069 6e63 6964 656e 745f 6964    if incident_id
00001130: 2069 6e20 6665 7463 6865 645f 7374 6172   in fetched_star
00001140: 7265 645f 696e 6369 6465 6e74 733a 0a20  red_incidents:. 
00001150: 2020 2020 2020 2020 2020 2064 656d 6973             demis
00001160: 746f 2e64 6562 7567 2866 2769 6e63 6964  to.debug(f'incid
00001170: 656e 7420 2849 4420 7b69 6e63 6964 656e  ent (ID {inciden
00001180: 745f 6964 7d29 2077 6173 2061 6c72 6561  t_id}) was alrea
00001190: 6479 2066 6574 6368 6564 2069 6e20 7468  dy fetched in th
000011a0: 6520 7061 7374 2e27 290a 2020 2020 2020  e past.').      
000011b0: 2020 2020 2020 636f 6e74 696e 7565 0a20        continue. 
000011c0: 2020 2020 2020 2066 6574 6368 6564 5f73         fetched_s
000011d0: 7461 7272 6564 5f69 6e63 6964 656e 7473  tarred_incidents
000011e0: 5b69 6e63 6964 656e 745f 6964 5d20 3d20  [incident_id] = 
000011f0: 5472 7565 0a20 2020 2020 2020 2066 696c  True.        fil
00001200: 7465 7265 645f 696e 6369 6465 6e74 732e  tered_incidents.
00001210: 6170 7065 6e64 2869 6e63 6964 656e 7429  append(incident)
00001220: 0a20 2020 2020 2020 206e 756d 6265 725f  .        number_
00001230: 6f66 5f61 6c72 6561 6479 5f66 696c 7465  of_already_filte
00001240: 7265 645f 696e 6369 6465 6e74 7320 2b3d  red_incidents +=
00001250: 2031 0a20 2020 2020 2020 2069 6620 6e75   1.        if nu
00001260: 6d62 6572 5f6f 665f 616c 7265 6164 795f  mber_of_already_
00001270: 6669 6c74 6572 6564 5f69 6e63 6964 656e  filtered_inciden
00001280: 7473 203e 3d20 6c69 6d69 743a 0a20 2020  ts >= limit:.   
00001290: 2020 2020 2020 2020 2062 7265 616b 0a0a           break..
000012a0: 2020 2020 6c61 7374 5f72 756e 5f6f 626a      last_run_obj
000012b0: 5b27 6665 7463 6865 645f 7374 6172 7265  ['fetched_starre
000012c0: 645f 696e 6369 6465 6e74 7327 5d20 3d20  d_incidents'] = 
000012d0: 6665 7463 6865 645f 7374 6172 7265 645f  fetched_starred_
000012e0: 696e 6369 6465 6e74 730a 2020 2020 6465  incidents.    de
000012f0: 6d69 7374 6f2e 7365 744c 6173 7452 756e  misto.setLastRun
00001300: 286c 6173 745f 7275 6e5f 6f62 6a29 0a20  (last_run_obj). 
00001310: 2020 2072 6574 7572 6e20 6669 6c74 6572     return filter
00001320: 6564 5f69 6e63 6964 656e 7473 0a0a 0a63  ed_incidents...c
00001330: 6c61 7373 2043 6c69 656e 7428 436f 7265  lass Client(Core
00001340: 436c 6965 6e74 293a 0a0a 2020 2020 6465  Client):..    de
00001350: 6620 7465 7374 5f6d 6f64 756c 6528 7365  f test_module(se
00001360: 6c66 2c20 6669 7273 745f 6665 7463 685f  lf, first_fetch_
00001370: 7469 6d65 293a 0a20 2020 2020 2020 2022  time):.        "
00001380: 2222 0a20 2020 2020 2020 2020 2020 2050  "".            P
00001390: 6572 666f 726d 7320 6261 7369 6320 6765  erforms basic ge
000013a0: 7420 7265 7175 6573 7420 746f 2067 6574  t request to get
000013b0: 2069 7465 6d20 7361 6d70 6c65 730a 2020   item samples.  
000013c0: 2020 2020 2020 2222 220a 2020 2020 2020        """.      
000013d0: 2020 6c61 7374 5f6f 6e65 5f64 6179 2c20    last_one_day, 
000013e0: 5f20 3d20 7061 7273 655f 6461 7465 5f72  _ = parse_date_r
000013f0: 616e 6765 2866 6972 7374 5f66 6574 6368  ange(first_fetch
00001400: 5f74 696d 652c 2054 494d 455f 464f 524d  _time, TIME_FORM
00001410: 4154 290a 2020 2020 2020 2020 7472 793a  AT).        try:
00001420: 0a20 2020 2020 2020 2020 2020 2073 656c  .            sel
00001430: 662e 6765 745f 696e 6369 6465 6e74 7328  f.get_incidents(
00001440: 6c74 655f 6372 6561 7469 6f6e 5f74 696d  lte_creation_tim
00001450: 653d 6c61 7374 5f6f 6e65 5f64 6179 2c20  e=last_one_day, 
00001460: 6c69 6d69 743d 3129 0a20 2020 2020 2020  limit=1).       
00001470: 2065 7863 6570 7420 4578 6365 7074 696f   except Exceptio
00001480: 6e20 6173 2065 7272 3a0a 2020 2020 2020  n as err:.      
00001490: 2020 2020 2020 6966 2027 4150 4920 7265        if 'API re
000014a0: 7175 6573 7420 556e 6175 7468 6f72 697a  quest Unauthoriz
000014b0: 6564 2720 696e 2073 7472 2865 7272 293a  ed' in str(err):
000014c0: 0a20 2020 2020 2020 2020 2020 2020 2020  .               
000014d0: 2023 2074 6869 7320 6572 726f 7220 6973   # this error is
000014e0: 2072 6563 6569 7665 6420 6672 6f6d 2074   received from t
000014f0: 6865 2058 4452 2073 6572 7665 7220 7768  he XDR server wh
00001500: 656e 2074 6865 2063 6c69 656e 7420 636c  en the client cl
00001510: 6f63 6b20 6973 206e 6f74 2069 6e20 7379  ock is not in sy
00001520: 6e63 2074 6f20 7468 6520 7365 7276 6572  nc to the server
00001530: 0a20 2020 2020 2020 2020 2020 2020 2020  .               
00001540: 2072 6169 7365 2044 656d 6973 746f 4578   raise DemistoEx
00001550: 6365 7074 696f 6e28 6627 7b73 7472 2865  ception(f'{str(e
00001560: 7272 297d 2070 6c65 6173 6520 7661 6c69  rr)} please vali
00001570: 6461 7465 2074 6861 7420 796f 7572 2062  date that your b
00001580: 6f74 6820 270a 2020 2020 2020 2020 2020  oth '.          
00001590: 2020 2020 2020 2020 2020 2020 2020 2020                  
000015a0: 2020 2020 2020 2020 2020 2020 2066 2758               f'X
000015b0: 534f 4152 2061 6e64 2058 4452 2073 6572  SOAR and XDR ser
000015c0: 7665 7220 636c 6f63 6b73 2061 7265 2069  ver clocks are i
000015d0: 6e20 7379 6e63 2729 0a20 2020 2020 2020  n sync').       
000015e0: 2020 2020 2065 6c73 653a 0a20 2020 2020       else:.     
000015f0: 2020 2020 2020 2020 2020 2072 6169 7365             raise
00001600: 0a0a 2020 2020 6465 6620 6861 6e64 6c65  ..    def handle
00001610: 5f66 6574 6368 5f73 7461 7272 6564 5f69  _fetch_starred_i
00001620: 6e63 6964 656e 7473 2873 656c 662c 206c  ncidents(self, l
00001630: 696d 6974 3a20 696e 742c 2070 6167 655f  imit: int, page_
00001640: 6e75 6d62 6572 3a20 696e 742c 2072 6571  number: int, req
00001650: 7565 7374 5f64 6174 613a 2064 6963 7429  uest_data: dict)
00001660: 202d 3e20 4c69 7374 3a0a 2020 2020 2020   -> List:.      
00001670: 2020 2222 220a 2020 2020 2020 2020 6861    """.        ha
00001680: 6e64 6c65 7320 7061 6769 6e61 7469 6f6e  ndles pagination
00001690: 2061 6e64 2066 696c 7465 7220 6f66 2073   and filter of s
000016a0: 7461 7272 6564 2069 6e63 6964 656e 7473  tarred incidents
000016b0: 2074 6861 7420 7765 7265 2066 6574 6368   that were fetch
000016c0: 6564 2e0a 2020 2020 2020 2020 3a70 6172  ed..        :par
000016d0: 616d 206c 696d 6974 3a20 7468 6520 6d61  am limit: the ma
000016e0: 7869 6d75 6d20 6e75 6d62 6572 206f 6620  ximum number of 
000016f0: 696e 6369 6465 6e74 2070 6572 2066 6574  incident per fet
00001700: 6368 0a20 2020 2020 2020 203a 7061 7261  ch.        :para
00001710: 6d20 7061 6765 5f6e 756d 6265 723a 2070  m page_number: p
00001720: 6167 6520 6e75 6d62 6572 0a20 2020 2020  age number.     
00001730: 2020 203a 7061 7261 6d20 7265 7175 6573     :param reques
00001740: 745f 6461 7461 3a20 7468 6520 6170 6920  t_data: the api 
00001750: 6361 6c6c 2072 6571 7565 7374 2064 6174  call request dat
00001760: 610a 2020 2020 2020 2020 3a72 6574 7572  a.        :retur
00001770: 6e3a 2074 6865 2066 696c 7465 7265 6420  n: the filtered 
00001780: 7374 6172 7265 6420 696e 6369 6465 6e74  starred incident
00001790: 732e 0a20 2020 2020 2020 2022 2222 0a20  s..        """. 
000017a0: 2020 2020 2020 2072 6573 203d 2073 656c         res = sel
000017b0: 662e 5f68 7474 705f 7265 7175 6573 7428  f._http_request(
000017c0: 0a20 2020 2020 2020 2020 2020 206d 6574  .            met
000017d0: 686f 643d 2750 4f53 5427 2c0a 2020 2020  hod='POST',.    
000017e0: 2020 2020 2020 2020 7572 6c5f 7375 6666          url_suff
000017f0: 6978 3d27 2f69 6e63 6964 656e 7473 2f67  ix='/incidents/g
00001800: 6574 5f69 6e63 6964 656e 7473 2f27 2c0a  et_incidents/',.
00001810: 2020 2020 2020 2020 2020 2020 6a73 6f6e              json
00001820: 5f64 6174 613d 7b27 7265 7175 6573 745f  _data={'request_
00001830: 6461 7461 273a 2072 6571 7565 7374 5f64  data': request_d
00001840: 6174 617d 2c0a 2020 2020 2020 2020 2020  ata},.          
00001850: 2020 7469 6d65 6f75 743d 7365 6c66 2e74    timeout=self.t
00001860: 696d 656f 7574 0a20 2020 2020 2020 2029  imeout.        )
00001870: 0a20 2020 2020 2020 2072 6177 5f69 6e63  .        raw_inc
00001880: 6964 656e 7473 203d 2072 6573 2e67 6574  idents = res.get
00001890: 2827 7265 706c 7927 2c20 7b7d 292e 6765  ('reply', {}).ge
000018a0: 7428 2769 6e63 6964 656e 7473 272c 205b  t('incidents', [
000018b0: 5d29 0a0a 2020 2020 2020 2020 2320 7765  ])..        # we
000018c0: 2077 616e 7420 746f 2061 766f 6964 2064   want to avoid d
000018d0: 7570 6c69 6361 7469 6f6e 7320 6f66 2073  uplications of s
000018e0: 7461 7272 6564 2069 6e63 6964 656e 7473  tarred incidents
000018f0: 2069 6e20 7468 6520 6665 7463 682d 696e   in the fetch-in
00001900: 6369 6465 6e74 2063 6f6d 6d61 6e64 2028  cident command (
00001910: 7765 2066 6574 6368 2061 6c6c 2069 6e63  we fetch all inc
00001920: 6964 656e 7473 0a20 2020 2020 2020 2023  idents.        #
00001930: 2069 6e20 7468 6520 6665 7463 6820 7769   in the fetch wi
00001940: 6e64 6f77 292e 0a20 2020 2020 2020 2066  ndow)..        f
00001950: 696c 7465 7265 645f 696e 6369 6465 6e74  iltered_incident
00001960: 7320 3d20 6669 6c74 6572 5f61 6e64 5f73  s = filter_and_s
00001970: 6176 655f 756e 7365 656e 5f69 6e63 6964  ave_unseen_incid
00001980: 656e 7428 7261 775f 696e 6369 6465 6e74  ent(raw_incident
00001990: 732c 206c 696d 6974 2c20 3029 0a0a 2020  s, limit, 0)..  
000019a0: 2020 2020 2020 2320 7765 2077 616e 7420        # we want 
000019b0: 746f 2073 7570 706f 7274 2070 6167 696e  to support pagin
000019c0: 6174 696f 6e20 6f6e 2073 7461 7272 6564  ation on starred
000019d0: 2069 6e63 6964 656e 7473 2e0a 2020 2020   incidents..    
000019e0: 2020 2020 7768 696c 6520 6c65 6e28 6669      while len(fi
000019f0: 6c74 6572 6564 5f69 6e63 6964 656e 7473  ltered_incidents
00001a00: 2920 3c20 6c69 6d69 743a 0a20 2020 2020  ) < limit:.     
00001a10: 2020 2020 2020 2070 6167 655f 6e75 6d62         page_numb
00001a20: 6572 202b 3d20 310a 2020 2020 2020 2020  er += 1.        
00001a30: 2020 2020 7365 6172 6368 5f66 726f 6d20      search_from 
00001a40: 3d20 7061 6765 5f6e 756d 6265 7220 2a20  = page_number * 
00001a50: 6c69 6d69 740a 2020 2020 2020 2020 2020  limit.          
00001a60: 2020 7365 6172 6368 5f74 6f20 3d20 7365    search_to = se
00001a70: 6172 6368 5f66 726f 6d20 2b20 6c69 6d69  arch_from + limi
00001a80: 740a 2020 2020 2020 2020 2020 2020 7265  t.            re
00001a90: 7175 6573 745f 6461 7461 5b27 7365 6172  quest_data['sear
00001aa0: 6368 5f66 726f 6d27 5d20 3d20 7365 6172  ch_from'] = sear
00001ab0: 6368 5f66 726f 6d0a 2020 2020 2020 2020  ch_from.        
00001ac0: 2020 2020 7265 7175 6573 745f 6461 7461      request_data
00001ad0: 5b27 7365 6172 6368 5f74 6f27 5d20 3d20  ['search_to'] = 
00001ae0: 7365 6172 6368 5f74 6f0a 0a20 2020 2020  search_to..     
00001af0: 2020 2020 2020 2072 6573 203d 2073 656c         res = sel
00001b00: 662e 5f68 7474 705f 7265 7175 6573 7428  f._http_request(
00001b10: 0a20 2020 2020 2020 2020 2020 2020 2020  .               
00001b20: 206d 6574 686f 643d 2750 4f53 5427 2c0a   method='POST',.
00001b30: 2020 2020 2020 2020 2020 2020 2020 2020                  
00001b40: 7572 6c5f 7375 6666 6978 3d27 2f69 6e63  url_suffix='/inc
00001b50: 6964 656e 7473 2f67 6574 5f69 6e63 6964  idents/get_incid
00001b60: 656e 7473 2f27 2c0a 2020 2020 2020 2020  ents/',.        
00001b70: 2020 2020 2020 2020 6a73 6f6e 5f64 6174          json_dat
00001b80: 613d 7b27 7265 7175 6573 745f 6461 7461  a={'request_data
00001b90: 273a 2072 6571 7565 7374 5f64 6174 617d  ': request_data}
00001ba0: 2c0a 2020 2020 2020 2020 2020 2020 2020  ,.              
00001bb0: 2020 7469 6d65 6f75 743d 7365 6c66 2e74    timeout=self.t
00001bc0: 696d 656f 7574 0a20 2020 2020 2020 2020  imeout.         
00001bd0: 2020 2029 0a20 2020 2020 2020 2020 2020     ).           
00001be0: 2072 6177 5f69 6e63 6964 656e 7473 203d   raw_incidents =
00001bf0: 2072 6573 2e67 6574 2827 7265 706c 7927   res.get('reply'
00001c00: 2c20 7b7d 292e 6765 7428 2769 6e63 6964  , {}).get('incid
00001c10: 656e 7473 272c 205b 5d29 0a20 2020 2020  ents', []).     
00001c20: 2020 2020 2020 2069 6620 6e6f 7420 7261         if not ra
00001c30: 775f 696e 6369 6465 6e74 733a 0a20 2020  w_incidents:.   
00001c40: 2020 2020 2020 2020 2020 2020 2062 7265               bre
00001c50: 616b 0a20 2020 2020 2020 2020 2020 2066  ak.            f
00001c60: 696c 7465 7265 645f 696e 6369 6465 6e74  iltered_incident
00001c70: 7320 2b3d 2066 696c 7465 725f 616e 645f  s += filter_and_
00001c80: 7361 7665 5f75 6e73 6565 6e5f 696e 6369  save_unseen_inci
00001c90: 6465 6e74 2872 6177 5f69 6e63 6964 656e  dent(raw_inciden
00001ca0: 7473 2c20 6c69 6d69 742c 206c 656e 2866  ts, limit, len(f
00001cb0: 696c 7465 7265 645f 696e 6369 6465 6e74  iltered_incident
00001cc0: 7329 290a 0a20 2020 2020 2020 2072 6574  s))..        ret
00001cd0: 7572 6e20 6669 6c74 6572 6564 5f69 6e63  urn filtered_inc
00001ce0: 6964 656e 7473 0a0a 2020 2020 6465 6620  idents..    def 
00001cf0: 6765 745f 696e 6369 6465 6e74 7328 7365  get_incidents(se
00001d00: 6c66 2c20 696e 6369 6465 6e74 5f69 645f  lf, incident_id_
00001d10: 6c69 7374 3d4e 6f6e 652c 206c 7465 5f6d  list=None, lte_m
00001d20: 6f64 6966 6963 6174 696f 6e5f 7469 6d65  odification_time
00001d30: 3d4e 6f6e 652c 2067 7465 5f6d 6f64 6966  =None, gte_modif
00001d40: 6963 6174 696f 6e5f 7469 6d65 3d4e 6f6e  ication_time=Non
00001d50: 652c 0a20 2020 2020 2020 2020 2020 2020  e,.             
00001d60: 2020 2020 2020 2020 206c 7465 5f63 7265           lte_cre
00001d70: 6174 696f 6e5f 7469 6d65 3d4e 6f6e 652c  ation_time=None,
00001d80: 2067 7465 5f63 7265 6174 696f 6e5f 7469   gte_creation_ti
00001d90: 6d65 3d4e 6f6e 652c 2073 7461 7475 733d  me=None, status=
00001da0: 4e6f 6e65 2c20 7374 6172 7265 643d 4e6f  None, starred=No
00001db0: 6e65 2c0a 2020 2020 2020 2020 2020 2020  ne,.            
00001dc0: 2020 2020 2020 2020 2020 7374 6172 7265            starre
00001dd0: 645f 696e 6369 6465 6e74 735f 6665 7463  d_incidents_fetc
00001de0: 685f 7769 6e64 6f77 3d4e 6f6e 652c 2073  h_window=None, s
00001df0: 6f72 745f 6279 5f6d 6f64 6966 6963 6174  ort_by_modificat
00001e00: 696f 6e5f 7469 6d65 3d4e 6f6e 652c 2073  ion_time=None, s
00001e10: 6f72 745f 6279 5f63 7265 6174 696f 6e5f  ort_by_creation_
00001e20: 7469 6d65 3d4e 6f6e 652c 0a20 2020 2020  time=None,.     
00001e30: 2020 2020 2020 2020 2020 2020 2020 2020                  
00001e40: 2070 6167 655f 6e75 6d62 6572 3d30 2c20   page_number=0, 
00001e50: 6c69 6d69 743d 3130 302c 2067 7465 5f63  limit=100, gte_c
00001e60: 7265 6174 696f 6e5f 7469 6d65 5f6d 696c  reation_time_mil
00001e70: 6c69 7365 636f 6e64 733d 3029 3a0a 2020  liseconds=0):.  
00001e80: 2020 2020 2020 2222 220a 2020 2020 2020        """.      
00001e90: 2020 4669 6c74 6572 7320 616e 6420 7265    Filters and re
00001ea0: 7475 726e 7320 696e 6369 6465 6e74 730a  turns incidents.
00001eb0: 0a20 2020 2020 2020 203a 7061 7261 6d20  .        :param 
00001ec0: 696e 6369 6465 6e74 5f69 645f 6c69 7374  incident_id_list
00001ed0: 3a20 4c69 7374 206f 6620 696e 6369 6465  : List of incide
00001ee0: 6e74 2069 6473 202d 206d 7573 7420 6265  nt ids - must be
00001ef0: 206c 6973 740a 2020 2020 2020 2020 3a70   list.        :p
00001f00: 6172 616d 206c 7465 5f6d 6f64 6966 6963  aram lte_modific
00001f10: 6174 696f 6e5f 7469 6d65 3a20 7374 7269  ation_time: stri
00001f20: 6e67 206f 6620 7469 6d65 2066 6f72 6d61  ng of time forma
00001f30: 7420 2232 3031 392d 3132 2d33 3154 3233  t "2019-12-31T23
00001f40: 3a35 393a 3030 220a 2020 2020 2020 2020  :59:00".        
00001f50: 3a70 6172 616d 2067 7465 5f6d 6f64 6966  :param gte_modif
00001f60: 6963 6174 696f 6e5f 7469 6d65 3a20 7374  ication_time: st
00001f70: 7269 6e67 206f 6620 7469 6d65 2066 6f72  ring of time for
00001f80: 6d61 7420 2232 3031 392d 3132 2d33 3154  mat "2019-12-31T
00001f90: 3233 3a35 393a 3030 220a 2020 2020 2020  23:59:00".      
00001fa0: 2020 3a70 6172 616d 206c 7465 5f63 7265    :param lte_cre
00001fb0: 6174 696f 6e5f 7469 6d65 3a20 7374 7269  ation_time: stri
00001fc0: 6e67 206f 6620 7469 6d65 2066 6f72 6d61  ng of time forma
00001fd0: 7420 2232 3031 392d 3132 2d33 3154 3233  t "2019-12-31T23
00001fe0: 3a35 393a 3030 220a 2020 2020 2020 2020  :59:00".        
00001ff0: 3a70 6172 616d 2067 7465 5f63 7265 6174  :param gte_creat
00002000: 696f 6e5f 7469 6d65 3a20 7374 7269 6e67  ion_time: string
00002010: 206f 6620 7469 6d65 2066 6f72 6d61 7420   of time format 
00002020: 2232 3031 392d 3132 2d33 3154 3233 3a35  "2019-12-31T23:5
00002030: 393a 3030 220a 2020 2020 2020 2020 3a70  9:00".        :p
00002040: 6172 616d 2073 7461 7272 6564 5f69 6e63  aram starred_inc
00002050: 6964 656e 7473 5f66 6574 6368 5f77 696e  idents_fetch_win
00002060: 646f 773a 2073 7472 696e 6720 6f66 2074  dow: string of t
00002070: 696d 6520 666f 726d 6174 2022 3230 3139  ime format "2019
00002080: 2d31 322d 3331 5432 333a 3539 3a30 3022  -12-31T23:59:00"
00002090: 0a20 2020 2020 2020 203a 7061 7261 6d20  .        :param 
000020a0: 7374 6172 7265 643a 2054 7275 6520 6966  starred: True if
000020b0: 2074 6865 2069 6e63 6964 656e 7420 6973   the incident is
000020c0: 2073 7461 7272 6564 2c20 656c 7365 2046   starred, else F
000020d0: 616c 7365 0a20 2020 2020 2020 203a 7061  alse.        :pa
000020e0: 7261 6d20 7374 6174 7573 3a20 7374 7269  ram status: stri
000020f0: 6e67 206f 6620 7374 6174 7573 0a20 2020  ng of status.   
00002100: 2020 2020 203a 7061 7261 6d20 736f 7274       :param sort
00002110: 5f62 795f 6d6f 6469 6669 6361 7469 6f6e  _by_modification
00002120: 5f74 696d 653a 206f 7074 696f 6e61 6c20  _time: optional 
00002130: 2d20 656e 756d 2028 6173 632c 6465 7363  - enum (asc,desc
00002140: 290a 2020 2020 2020 2020 3a70 6172 616d  ).        :param
00002150: 2073 6f72 745f 6279 5f63 7265 6174 696f   sort_by_creatio
00002160: 6e5f 7469 6d65 3a20 6f70 7469 6f6e 616c  n_time: optional
00002170: 202d 2065 6e75 6d20 2861 7363 2c64 6573   - enum (asc,des
00002180: 6329 0a20 2020 2020 2020 203a 7061 7261  c).        :para
00002190: 6d20 7061 6765 5f6e 756d 6265 723a 2070  m page_number: p
000021a0: 6167 6520 6e75 6d62 6572 0a20 2020 2020  age number.     
000021b0: 2020 203a 7061 7261 6d20 6c69 6d69 743a     :param limit:
000021c0: 206d 6178 696d 756d 206e 756d 6265 7220   maximum number 
000021d0: 6f66 2069 6e63 6964 656e 7473 2074 6f20  of incidents to 
000021e0: 7265 7475 726e 2070 6572 2070 6167 650a  return per page.
000021f0: 2020 2020 2020 2020 3a70 6172 616d 2067          :param g
00002200: 7465 5f63 7265 6174 696f 6e5f 7469 6d65  te_creation_time
00002210: 5f6d 696c 6c69 7365 636f 6e64 733a 2067  _milliseconds: g
00002220: 7265 6174 6572 2074 6861 6e20 7469 6d65  reater than time
00002230: 2069 6e20 6d69 6c6c 6973 6563 6f6e 6473   in milliseconds
00002240: 0a20 2020 2020 2020 203a 7265 7475 726e  .        :return
00002250: 3a0a 2020 2020 2020 2020 2222 220a 2020  :.        """.  
00002260: 2020 2020 2020 7365 6172 6368 5f66 726f        search_fro
00002270: 6d20 3d20 7061 6765 5f6e 756d 6265 7220  m = page_number 
00002280: 2a20 6c69 6d69 740a 2020 2020 2020 2020  * limit.        
00002290: 7365 6172 6368 5f74 6f20 3d20 7365 6172  search_to = sear
000022a0: 6368 5f66 726f 6d20 2b20 6c69 6d69 740a  ch_from + limit.
000022b0: 0a20 2020 2020 2020 2072 6571 7565 7374  .        request
000022c0: 5f64 6174 6120 3d20 7b0a 2020 2020 2020  _data = {.      
000022d0: 2020 2020 2020 2773 6561 7263 685f 6672        'search_fr
000022e0: 6f6d 273a 2073 6561 7263 685f 6672 6f6d  om': search_from
000022f0: 2c0a 2020 2020 2020 2020 2020 2020 2773  ,.            's
00002300: 6561 7263 685f 746f 273a 2073 6561 7263  earch_to': searc
00002310: 685f 746f 2c0a 2020 2020 2020 2020 7d0a  h_to,.        }.
00002320: 0a20 2020 2020 2020 2069 6620 736f 7274  .        if sort
00002330: 5f62 795f 6372 6561 7469 6f6e 5f74 696d  _by_creation_tim
00002340: 6520 616e 6420 736f 7274 5f62 795f 6d6f  e and sort_by_mo
00002350: 6469 6669 6361 7469 6f6e 5f74 696d 653a  dification_time:
00002360: 0a20 2020 2020 2020 2020 2020 2072 6169  .            rai
00002370: 7365 2056 616c 7565 4572 726f 7228 2753  se ValueError('S
00002380: 686f 756c 6420 6265 2070 726f 7669 6465  hould be provide
00002390: 2065 6974 6865 7220 736f 7274 5f62 795f   either sort_by_
000023a0: 6372 6561 7469 6f6e 5f74 696d 6520 6f72  creation_time or
000023b0: 2027 0a20 2020 2020 2020 2020 2020 2020   '.             
000023c0: 2020 2020 2020 2020 2020 2020 2020 2020                  
000023d0: 2773 6f72 745f 6279 5f6d 6f64 6966 6963  'sort_by_modific
000023e0: 6174 696f 6e5f 7469 6d65 2e20 4361 6e5c  ation_time. Can\
000023f0: 2774 2070 726f 7669 6465 2062 6f74 6827  't provide both'
00002400: 290a 2020 2020 2020 2020 6966 2073 6f72  ).        if sor
00002410: 745f 6279 5f63 7265 6174 696f 6e5f 7469  t_by_creation_ti
00002420: 6d65 3a0a 2020 2020 2020 2020 2020 2020  me:.            
00002430: 7265 7175 6573 745f 6461 7461 5b27 736f  request_data['so
00002440: 7274 275d 203d 207b 0a20 2020 2020 2020  rt'] = {.       
00002450: 2020 2020 2020 2020 2027 6669 656c 6427           'field'
00002460: 3a20 2763 7265 6174 696f 6e5f 7469 6d65  : 'creation_time
00002470: 272c 0a20 2020 2020 2020 2020 2020 2020  ',.             
00002480: 2020 2027 6b65 7977 6f72 6427 3a20 736f     'keyword': so
00002490: 7274 5f62 795f 6372 6561 7469 6f6e 5f74  rt_by_creation_t
000024a0: 696d 650a 2020 2020 2020 2020 2020 2020  ime.            
000024b0: 7d0a 2020 2020 2020 2020 656c 6966 2073  }.        elif s
000024c0: 6f72 745f 6279 5f6d 6f64 6966 6963 6174  ort_by_modificat
000024d0: 696f 6e5f 7469 6d65 3a0a 2020 2020 2020  ion_time:.      
000024e0: 2020 2020 2020 7265 7175 6573 745f 6461        request_da
000024f0: 7461 5b27 736f 7274 275d 203d 207b 0a20  ta['sort'] = {. 
00002500: 2020 2020 2020 2020 2020 2020 2020 2027                 '
00002510: 6669 656c 6427 3a20 276d 6f64 6966 6963  field': 'modific
00002520: 6174 696f 6e5f 7469 6d65 272c 0a20 2020  ation_time',.   
00002530: 2020 2020 2020 2020 2020 2020 2027 6b65               'ke
00002540: 7977 6f72 6427 3a20 736f 7274 5f62 795f  yword': sort_by_
00002550: 6d6f 6469 6669 6361 7469 6f6e 5f74 696d  modification_tim
00002560: 650a 2020 2020 2020 2020 2020 2020 7d0a  e.            }.
00002570: 0a20 2020 2020 2020 2066 696c 7465 7273  .        filters
00002580: 203d 205b 5d0a 2020 2020 2020 2020 6966   = [].        if
00002590: 2069 6e63 6964 656e 745f 6964 5f6c 6973   incident_id_lis
000025a0: 7420 6973 206e 6f74 204e 6f6e 6520 616e  t is not None an
000025b0: 6420 6c65 6e28 696e 6369 6465 6e74 5f69  d len(incident_i
000025c0: 645f 6c69 7374 2920 3e20 303a 0a20 2020  d_list) > 0:.   
000025d0: 2020 2020 2020 2020 2066 696c 7465 7273           filters
000025e0: 2e61 7070 656e 6428 7b0a 2020 2020 2020  .append({.      
000025f0: 2020 2020 2020 2020 2020 2766 6965 6c64            'field
00002600: 273a 2027 696e 6369 6465 6e74 5f69 645f  ': 'incident_id_
00002610: 6c69 7374 272c 0a20 2020 2020 2020 2020  list',.         
00002620: 2020 2020 2020 2027 6f70 6572 6174 6f72         'operator
00002630: 273a 2027 696e 272c 0a20 2020 2020 2020  ': 'in',.       
00002640: 2020 2020 2020 2020 2027 7661 6c75 6527           'value'
00002650: 3a20 696e 6369 6465 6e74 5f69 645f 6c69  : incident_id_li
00002660: 7374 0a20 2020 2020 2020 2020 2020 207d  st.            }
00002670: 290a 0a20 2020 2020 2020 2069 6620 7374  )..        if st
00002680: 6174 7573 3a0a 2020 2020 2020 2020 2020  atus:.          
00002690: 2020 6669 6c74 6572 732e 6170 7065 6e64    filters.append
000026a0: 287b 0a20 2020 2020 2020 2020 2020 2020  ({.             
000026b0: 2020 2027 6669 656c 6427 3a20 2773 7461     'field': 'sta
000026c0: 7475 7327 2c0a 2020 2020 2020 2020 2020  tus',.          
000026d0: 2020 2020 2020 276f 7065 7261 746f 7227        'operator'
000026e0: 3a20 2765 7127 2c0a 2020 2020 2020 2020  : 'eq',.        
000026f0: 2020 2020 2020 2020 2776 616c 7565 273a          'value':
00002700: 2073 7461 7475 730a 2020 2020 2020 2020   status.        
00002710: 2020 2020 7d29 0a0a 2020 2020 2020 2020      })..        
00002720: 6966 2073 7461 7272 6564 2061 6e64 2073  if starred and s
00002730: 7461 7272 6564 5f69 6e63 6964 656e 7473  tarred_incidents
00002740: 5f66 6574 6368 5f77 696e 646f 773a 0a20  _fetch_window:. 
00002750: 2020 2020 2020 2020 2020 2066 696c 7465             filte
00002760: 7273 2e61 7070 656e 6428 7b0a 2020 2020  rs.append({.    
00002770: 2020 2020 2020 2020 2020 2020 2766 6965              'fie
00002780: 6c64 273a 2027 7374 6172 7265 6427 2c0a  ld': 'starred',.
00002790: 2020 2020 2020 2020 2020 2020 2020 2020                  
000027a0: 276f 7065 7261 746f 7227 3a20 2765 7127  'operator': 'eq'
000027b0: 2c0a 2020 2020 2020 2020 2020 2020 2020  ,.              
000027c0: 2020 2776 616c 7565 273a 2054 7275 650a    'value': True.
000027d0: 2020 2020 2020 2020 2020 2020 7d29 0a20              }). 
000027e0: 2020 2020 2020 2020 2020 2066 696c 7465             filte
000027f0: 7273 2e61 7070 656e 6428 7b0a 2020 2020  rs.append({.    
00002800: 2020 2020 2020 2020 2020 2020 2766 6965              'fie
00002810: 6c64 273a 2027 6372 6561 7469 6f6e 5f74  ld': 'creation_t
00002820: 696d 6527 2c0a 2020 2020 2020 2020 2020  ime',.          
00002830: 2020 2020 2020 276f 7065 7261 746f 7227        'operator'
00002840: 3a20 2767 7465 272c 0a20 2020 2020 2020  : 'gte',.       
00002850: 2020 2020 2020 2020 2027 7661 6c75 6527           'value'
00002860: 3a20 7374 6172 7265 645f 696e 6369 6465  : starred_incide
00002870: 6e74 735f 6665 7463 685f 7769 6e64 6f77  nts_fetch_window
00002880: 0a20 2020 2020 2020 2020 2020 207d 290a  .            }).
00002890: 2020 2020 2020 2020 2020 2020 6966 2064              if d
000028a0: 656d 6973 746f 2e63 6f6d 6d61 6e64 2829  emisto.command()
000028b0: 203d 3d20 2766 6574 6368 2d69 6e63 6964   == 'fetch-incid
000028c0: 656e 7473 273a 0a20 2020 2020 2020 2020  ents':.         
000028d0: 2020 2020 2020 2069 6620 6c65 6e28 6669         if len(fi
000028e0: 6c74 6572 7329 203e 2030 3a0a 2020 2020  lters) > 0:.    
000028f0: 2020 2020 2020 2020 2020 2020 2020 2020                  
00002900: 7265 7175 6573 745f 6461 7461 5b27 6669  request_data['fi
00002910: 6c74 6572 7327 5d20 3d20 6669 6c74 6572  lters'] = filter
00002920: 730a 2020 2020 2020 2020 2020 2020 2020  s.              
00002930: 2020 696e 6369 6465 6e74 7320 3d20 7365    incidents = se
00002940: 6c66 2e68 616e 646c 655f 6665 7463 685f  lf.handle_fetch_
00002950: 7374 6172 7265 645f 696e 6369 6465 6e74  starred_incident
00002960: 7328 6c69 6d69 742c 2070 6167 655f 6e75  s(limit, page_nu
00002970: 6d62 6572 2c20 7265 7175 6573 745f 6461  mber, request_da
00002980: 7461 290a 2020 2020 2020 2020 2020 2020  ta).            
00002990: 2020 2020 7265 7475 726e 2069 6e63 6964      return incid
000029a0: 656e 7473 0a0a 2020 2020 2020 2020 656c  ents..        el
000029b0: 7365 3a0a 2020 2020 2020 2020 2020 2020  se:.            
000029c0: 6966 206c 7465 5f63 7265 6174 696f 6e5f  if lte_creation_
000029d0: 7469 6d65 3a0a 2020 2020 2020 2020 2020  time:.          
000029e0: 2020 2020 2020 6669 6c74 6572 732e 6170        filters.ap
000029f0: 7065 6e64 287b 0a20 2020 2020 2020 2020  pend({.         
00002a00: 2020 2020 2020 2020 2020 2027 6669 656c             'fiel
00002a10: 6427 3a20 2763 7265 6174 696f 6e5f 7469  d': 'creation_ti
00002a20: 6d65 272c 0a20 2020 2020 2020 2020 2020  me',.           
00002a30: 2020 2020 2020 2020 2027 6f70 6572 6174           'operat
00002a40: 6f72 273a 2027 6c74 6527 2c0a 2020 2020  or': 'lte',.    
00002a50: 2020 2020 2020 2020 2020 2020 2020 2020                  
00002a60: 2776 616c 7565 273a 2064 6174 655f 746f  'value': date_to
00002a70: 5f74 696d 6573 7461 6d70 286c 7465 5f63  _timestamp(lte_c
00002a80: 7265 6174 696f 6e5f 7469 6d65 2c20 5449  reation_time, TI
00002a90: 4d45 5f46 4f52 4d41 5429 0a20 2020 2020  ME_FORMAT).     
00002aa0: 2020 2020 2020 2020 2020 207d 290a 0a20             }).. 
00002ab0: 2020 2020 2020 2020 2020 2069 6620 6774             if gt
00002ac0: 655f 6372 6561 7469 6f6e 5f74 696d 653a  e_creation_time:
00002ad0: 0a20 2020 2020 2020 2020 2020 2020 2020  .               
00002ae0: 2066 696c 7465 7273 2e61 7070 656e 6428   filters.append(
00002af0: 7b0a 2020 2020 2020 2020 2020 2020 2020  {.              
00002b00: 2020 2020 2020 2766 6965 6c64 273a 2027        'field': '
00002b10: 6372 6561 7469 6f6e 5f74 696d 6527 2c0a  creation_time',.
00002b20: 2020 2020 2020 2020 2020 2020 2020 2020                  
00002b30: 2020 2020 276f 7065 7261 746f 7227 3a20      'operator': 
00002b40: 2767 7465 272c 0a20 2020 2020 2020 2020  'gte',.         
00002b50: 2020 2020 2020 2020 2020 2027 7661 6c75             'valu
00002b60: 6527 3a20 6461 7465 5f74 6f5f 7469 6d65  e': date_to_time
00002b70: 7374 616d 7028 6774 655f 6372 6561 7469  stamp(gte_creati
00002b80: 6f6e 5f74 696d 652c 2054 494d 455f 464f  on_time, TIME_FO
00002b90: 524d 4154 290a 2020 2020 2020 2020 2020  RMAT).          
00002ba0: 2020 2020 2020 7d29 0a0a 2020 2020 2020        })..      
00002bb0: 2020 2020 2020 6966 206c 7465 5f6d 6f64        if lte_mod
00002bc0: 6966 6963 6174 696f 6e5f 7469 6d65 3a0a  ification_time:.
00002bd0: 2020 2020 2020 2020 2020 2020 2020 2020                  
00002be0: 6669 6c74 6572 732e 6170 7065 6e64 287b  filters.append({
00002bf0: 0a20 2020 2020 2020 2020 2020 2020 2020  .               
00002c00: 2020 2020 2027 6669 656c 6427 3a20 276d       'field': 'm
00002c10: 6f64 6966 6963 6174 696f 6e5f 7469 6d65  odification_time
00002c20: 272c 0a20 2020 2020 2020 2020 2020 2020  ',.             
00002c30: 2020 2020 2020 2027 6f70 6572 6174 6f72         'operator
00002c40: 273a 2027 6c74 6527 2c0a 2020 2020 2020  ': 'lte',.      
00002c50: 2020 2020 2020 2020 2020 2020 2020 2776                'v
00002c60: 616c 7565 273a 2064 6174 655f 746f 5f74  alue': date_to_t
00002c70: 696d 6573 7461 6d70 286c 7465 5f6d 6f64  imestamp(lte_mod
00002c80: 6966 6963 6174 696f 6e5f 7469 6d65 2c20  ification_time, 
00002c90: 5449 4d45 5f46 4f52 4d41 5429 0a20 2020  TIME_FORMAT).   
00002ca0: 2020 2020 2020 2020 2020 2020 207d 290a               }).
00002cb0: 0a20 2020 2020 2020 2020 2020 2069 6620  .            if 
00002cc0: 6774 655f 6d6f 6469 6669 6361 7469 6f6e  gte_modification
00002cd0: 5f74 696d 653a 0a20 2020 2020 2020 2020  _time:.         
00002ce0: 2020 2020 2020 2066 696c 7465 7273 2e61         filters.a
00002cf0: 7070 656e 6428 7b0a 2020 2020 2020 2020  ppend({.        
00002d00: 2020 2020 2020 2020 2020 2020 2766 6965              'fie
00002d10: 6c64 273a 2027 6d6f 6469 6669 6361 7469  ld': 'modificati
00002d20: 6f6e 5f74 696d 6527 2c0a 2020 2020 2020  on_time',.      
00002d30: 2020 2020 2020 2020 2020 2020 2020 276f                'o
00002d40: 7065 7261 746f 7227 3a20 2767 7465 272c  perator': 'gte',
00002d50: 0a20 2020 2020 2020 2020 2020 2020 2020  .               
00002d60: 2020 2020 2027 7661 6c75 6527 3a20 6461       'value': da
00002d70: 7465 5f74 6f5f 7469 6d65 7374 616d 7028  te_to_timestamp(
00002d80: 6774 655f 6d6f 6469 6669 6361 7469 6f6e  gte_modification
00002d90: 5f74 696d 652c 2054 494d 455f 464f 524d  _time, TIME_FORM
00002da0: 4154 290a 2020 2020 2020 2020 2020 2020  AT).            
00002db0: 2020 2020 7d29 0a0a 2020 2020 2020 2020      })..        
00002dc0: 2020 2020 6966 2067 7465 5f63 7265 6174      if gte_creat
00002dd0: 696f 6e5f 7469 6d65 5f6d 696c 6c69 7365  ion_time_millise
00002de0: 636f 6e64 7320 3e20 303a 0a20 2020 2020  conds > 0:.     
00002df0: 2020 2020 2020 2020 2020 2066 696c 7465             filte
00002e00: 7273 2e61 7070 656e 6428 7b0a 2020 2020  rs.append({.    
00002e10: 2020 2020 2020 2020 2020 2020 2020 2020                  
00002e20: 2766 6965 6c64 273a 2027 6372 6561 7469  'field': 'creati
00002e30: 6f6e 5f74 696d 6527 2c0a 2020 2020 2020  on_time',.      
00002e40: 2020 2020 2020 2020 2020 2020 2020 276f                'o
00002e50: 7065 7261 746f 7227 3a20 2767 7465 272c  perator': 'gte',
00002e60: 0a20 2020 2020 2020 2020 2020 2020 2020  .               
00002e70: 2020 2020 2027 7661 6c75 6527 3a20 6774       'value': gt
00002e80: 655f 6372 6561 7469 6f6e 5f74 696d 655f  e_creation_time_
00002e90: 6d69 6c6c 6973 6563 6f6e 6473 0a20 2020  milliseconds.   
00002ea0: 2020 2020 2020 2020 2020 2020 207d 290a               }).
00002eb0: 0a20 2020 2020 2020 2069 6620 6c65 6e28  .        if len(
00002ec0: 6669 6c74 6572 7329 203e 2030 3a0a 2020  filters) > 0:.  
00002ed0: 2020 2020 2020 2020 2020 7265 7175 6573            reques
00002ee0: 745f 6461 7461 5b27 6669 6c74 6572 7327  t_data['filters'
00002ef0: 5d20 3d20 6669 6c74 6572 730a 0a20 2020  ] = filters..   
00002f00: 2020 2020 2072 6573 203d 2073 656c 662e       res = self.
00002f10: 5f68 7474 705f 7265 7175 6573 7428 0a20  _http_request(. 
00002f20: 2020 2020 2020 2020 2020 206d 6574 686f             metho
00002f30: 643d 2750 4f53 5427 2c0a 2020 2020 2020  d='POST',.      
00002f40: 2020 2020 2020 7572 6c5f 7375 6666 6978        url_suffix
00002f50: 3d27 2f69 6e63 6964 656e 7473 2f67 6574  ='/incidents/get
00002f60: 5f69 6e63 6964 656e 7473 2f27 2c0a 2020  _incidents/',.  
00002f70: 2020 2020 2020 2020 2020 6a73 6f6e 5f64            json_d
00002f80: 6174 613d 7b27 7265 7175 6573 745f 6461  ata={'request_da
00002f90: 7461 273a 2072 6571 7565 7374 5f64 6174  ta': request_dat
00002fa0: 617d 2c0a 2020 2020 2020 2020 2020 2020  a},.            
00002fb0: 7469 6d65 6f75 743d 7365 6c66 2e74 696d  timeout=self.tim
00002fc0: 656f 7574 0a20 2020 2020 2020 2029 0a20  eout.        ). 
00002fd0: 2020 2020 2020 2069 6e63 6964 656e 7473         incidents
00002fe0: 203d 2072 6573 2e67 6574 2827 7265 706c   = res.get('repl
00002ff0: 7927 2c20 7b7d 292e 6765 7428 2769 6e63  y', {}).get('inc
00003000: 6964 656e 7473 272c 205b 5d29 0a0a 2020  idents', [])..  
00003010: 2020 2020 2020 7265 7475 726e 2069 6e63        return inc
00003020: 6964 656e 7473 0a0a 2020 2020 6465 6620  idents..    def 
00003030: 6765 745f 696e 6369 6465 6e74 5f65 7874  get_incident_ext
00003040: 7261 5f64 6174 6128 7365 6c66 2c20 696e  ra_data(self, in
00003050: 6369 6465 6e74 5f69 642c 2061 6c65 7274  cident_id, alert
00003060: 735f 6c69 6d69 743d 3130 3030 293a 0a20  s_limit=1000):. 
00003070: 2020 2020 2020 2022 2222 0a20 2020 2020         """.     
00003080: 2020 2052 6574 7572 6e73 2069 6e63 6964     Returns incid
00003090: 656e 7420 6279 2069 640a 0a20 2020 2020  ent by id..     
000030a0: 2020 203a 7061 7261 6d20 696e 6369 6465     :param incide
000030b0: 6e74 5f69 643a 2054 6865 2069 6420 6f66  nt_id: The id of
000030c0: 2069 6e63 6964 656e 740a 2020 2020 2020   incident.      
000030d0: 2020 3a70 6172 616d 2061 6c65 7274 735f    :param alerts_
000030e0: 6c69 6d69 743a 204d 6178 696d 756d 206e  limit: Maximum n
000030f0: 756d 6265 7220 616c 6572 7473 2074 6f20  umber alerts to 
00003100: 6765 740a 2020 2020 2020 2020 3a72 6574  get.        :ret
00003110: 7572 6e3a 0a20 2020 2020 2020 2022 2222  urn:.        """
00003120: 0a20 2020 2020 2020 2072 6571 7565 7374  .        request
00003130: 5f64 6174 6120 3d20 7b0a 2020 2020 2020  _data = {.      
00003140: 2020 2020 2020 2769 6e63 6964 656e 745f        'incident_
00003150: 6964 273a 2069 6e63 6964 656e 745f 6964  id': incident_id
00003160: 2c0a 2020 2020 2020 2020 2020 2020 2761  ,.            'a
00003170: 6c65 7274 735f 6c69 6d69 7427 3a20 616c  lerts_limit': al
00003180: 6572 7473 5f6c 696d 6974 2c0a 2020 2020  erts_limit,.    
00003190: 2020 2020 7d0a 0a20 2020 2020 2020 2072      }..        r
000031a0: 6570 6c79 203d 2073 656c 662e 5f68 7474  eply = self._htt
000031b0: 705f 7265 7175 6573 7428 0a20 2020 2020  p_request(.     
000031c0: 2020 2020 2020 206d 6574 686f 643d 2750         method='P
000031d0: 4f53 5427 2c0a 2020 2020 2020 2020 2020  OST',.          
000031e0: 2020 7572 6c5f 7375 6666 6978 3d27 2f69    url_suffix='/i
000031f0: 6e63 6964 656e 7473 2f67 6574 5f69 6e63  ncidents/get_inc
00003200: 6964 656e 745f 6578 7472 615f 6461 7461  ident_extra_data
00003210: 2f27 2c0a 2020 2020 2020 2020 2020 2020  /',.            
00003220: 6a73 6f6e 5f64 6174 613d 7b27 7265 7175  json_data={'requ
00003230: 6573 745f 6461 7461 273a 2072 6571 7565  est_data': reque
00003240: 7374 5f64 6174 617d 2c0a 2020 2020 2020  st_data},.      
00003250: 2020 2020 2020 7469 6d65 6f75 743d 7365        timeout=se
00003260: 6c66 2e74 696d 656f 7574 0a20 2020 2020  lf.timeout.     
00003270: 2020 2029 0a0a 2020 2020 2020 2020 696e     )..        in
00003280: 6369 6465 6e74 203d 2072 6570 6c79 2e67  cident = reply.g
00003290: 6574 2827 7265 706c 7927 290a 0a20 2020  et('reply')..   
000032a0: 2020 2020 2072 6574 7572 6e20 696e 6369       return inci
000032b0: 6465 6e74 0a0a 2020 2020 6465 6620 7361  dent..    def sa
000032c0: 7665 5f6d 6f64 6966 6965 645f 696e 6369  ve_modified_inci
000032d0: 6465 6e74 735f 746f 5f69 6e74 6567 7261  dents_to_integra
000032e0: 7469 6f6e 5f63 6f6e 7465 7874 2873 656c  tion_context(sel
000032f0: 6629 3a0a 2020 2020 2020 2020 6c61 7374  f):.        last
00003300: 5f6d 6f64 6966 6965 645f 696e 6369 6465  _modified_incide
00003310: 6e74 7320 3d20 7365 6c66 2e67 6574 5f69  nts = self.get_i
00003320: 6e63 6964 656e 7473 286c 696d 6974 3d31  ncidents(limit=1
00003330: 3030 2c20 736f 7274 5f62 795f 6d6f 6469  00, sort_by_modi
00003340: 6669 6361 7469 6f6e 5f74 696d 653d 2764  fication_time='d
00003350: 6573 6327 290a 2020 2020 2020 2020 6d6f  esc').        mo
00003360: 6469 6669 6564 5f69 6e63 6964 656e 7473  dified_incidents
00003370: 5f63 6f6e 7465 7874 203d 207b 7d0a 2020  _context = {}.  
00003380: 2020 2020 2020 666f 7220 696e 6369 6465        for incide
00003390: 6e74 2069 6e20 6c61 7374 5f6d 6f64 6966  nt in last_modif
000033a0: 6965 645f 696e 6369 6465 6e74 733a 0a20  ied_incidents:. 
000033b0: 2020 2020 2020 2020 2020 2069 6e63 6964             incid
000033c0: 656e 745f 6964 203d 2069 6e63 6964 656e  ent_id = inciden
000033d0: 742e 6765 7428 2769 6e63 6964 656e 745f  t.get('incident_
000033e0: 6964 2729 0a20 2020 2020 2020 2020 2020  id').           
000033f0: 206d 6f64 6966 6965 645f 696e 6369 6465   modified_incide
00003400: 6e74 735f 636f 6e74 6578 745b 696e 6369  nts_context[inci
00003410: 6465 6e74 5f69 645d 203d 2069 6e63 6964  dent_id] = incid
00003420: 656e 742e 6765 7428 276d 6f64 6966 6963  ent.get('modific
00003430: 6174 696f 6e5f 7469 6d65 2729 0a0a 2020  ation_time')..  
00003440: 2020 2020 2020 7365 745f 696e 7465 6772        set_integr
00003450: 6174 696f 6e5f 636f 6e74 6578 7428 7b27  ation_context({'
00003460: 6d6f 6469 6669 6564 5f69 6e63 6964 656e  modified_inciden
00003470: 7473 273a 206d 6f64 6966 6965 645f 696e  ts': modified_in
00003480: 6369 6465 6e74 735f 636f 6e74 6578 747d  cidents_context}
00003490: 290a 0a20 2020 2064 6566 2067 6574 5f63  )..    def get_c
000034a0: 6f6e 7472 6962 7574 696e 675f 6576 656e  ontributing_even
000034b0: 745f 6279 5f61 6c65 7274 5f69 6428 7365  t_by_alert_id(se
000034c0: 6c66 2c20 616c 6572 745f 6964 3a20 696e  lf, alert_id: in
000034d0: 7429 202d 3e20 6469 6374 3a0a 2020 2020  t) -> dict:.    
000034e0: 2020 2020 7265 7175 6573 745f 6461 7461      request_data
000034f0: 203d 207b 0a20 2020 2020 2020 2020 2020   = {.           
00003500: 2022 7265 7175 6573 745f 6461 7461 223a   "request_data":
00003510: 207b 0a20 2020 2020 2020 2020 2020 2020   {.             
00003520: 2020 2022 616c 6572 745f 6964 223a 2061     "alert_id": a
00003530: 6c65 7274 5f69 642c 0a20 2020 2020 2020  lert_id,.       
00003540: 2020 2020 207d 0a20 2020 2020 2020 207d       }.        }
00003550: 0a0a 2020 2020 2020 2020 7265 706c 7920  ..        reply 
00003560: 3d20 7365 6c66 2e5f 6874 7470 5f72 6571  = self._http_req
00003570: 7565 7374 280a 2020 2020 2020 2020 2020  uest(.          
00003580: 2020 6d65 7468 6f64 3d27 504f 5354 272c    method='POST',
00003590: 0a20 2020 2020 2020 2020 2020 2075 726c  .            url
000035a0: 5f73 7566 6669 783d 272f 616c 6572 7473  _suffix='/alerts
000035b0: 2f67 6574 5f63 6f72 7265 6c61 7469 6f6e  /get_correlation
000035c0: 5f61 6c65 7274 5f64 6174 612f 272c 0a20  _alert_data/',. 
000035d0: 2020 2020 2020 2020 2020 206a 736f 6e5f             json_
000035e0: 6461 7461 3d72 6571 7565 7374 5f64 6174  data=request_dat
000035f0: 612c 0a20 2020 2020 2020 2020 2020 2074  a,.            t
00003600: 696d 656f 7574 3d73 656c 662e 7469 6d65  imeout=self.time
00003610: 6f75 742c 0a20 2020 2020 2020 2029 0a0a  out,.        )..
00003620: 2020 2020 2020 2020 7265 7475 726e 2072          return r
00003630: 6570 6c79 2e67 6574 2827 7265 706c 7927  eply.get('reply'
00003640: 2c20 7b7d 290a 0a20 2020 2064 6566 2072  , {})..    def r
00003650: 6570 6c61 6365 5f66 6561 7475 7265 645f  eplace_featured_
00003660: 6669 656c 6428 7365 6c66 2c20 6669 656c  field(self, fiel
00003670: 645f 7479 7065 3a20 7374 722c 2066 6965  d_type: str, fie
00003680: 6c64 733a 206c 6973 745b 6469 6374 5d29  lds: list[dict])
00003690: 202d 3e20 6469 6374 3a0a 2020 2020 2020   -> dict:.      
000036a0: 2020 7265 7175 6573 745f 6461 7461 203d    request_data =
000036b0: 207b 0a20 2020 2020 2020 2020 2020 2027   {.            '
000036c0: 7265 7175 6573 745f 6461 7461 273a 207b  request_data': {
000036d0: 0a20 2020 2020 2020 2020 2020 2020 2020  .               
000036e0: 2027 6669 656c 6473 273a 2066 6965 6c64   'fields': field
000036f0: 730a 2020 2020 2020 2020 2020 2020 7d0a  s.            }.
00003700: 2020 2020 2020 2020 7d0a 0a20 2020 2020          }..     
00003710: 2020 2072 6570 6c79 203d 2073 656c 662e     reply = self.
00003720: 5f68 7474 705f 7265 7175 6573 7428 0a20  _http_request(. 
00003730: 2020 2020 2020 2020 2020 206d 6574 686f             metho
00003740: 643d 2750 4f53 5427 2c0a 2020 2020 2020  d='POST',.      
00003750: 2020 2020 2020 7572 6c5f 7375 6666 6978        url_suffix
00003760: 3d66 272f 6665 6174 7572 6564 5f66 6965  =f'/featured_fie
00003770: 6c64 732f 7265 706c 6163 655f 7b66 6965  lds/replace_{fie
00003780: 6c64 5f74 7970 657d 272c 0a20 2020 2020  ld_type}',.     
00003790: 2020 2020 2020 206a 736f 6e5f 6461 7461         json_data
000037a0: 3d72 6571 7565 7374 5f64 6174 612c 0a20  =request_data,. 
000037b0: 2020 2020 2020 2020 2020 2074 696d 656f             timeo
000037c0: 7574 3d73 656c 662e 7469 6d65 6f75 742c  ut=self.timeout,
000037d0: 0a20 2020 2020 2020 2020 2020 2072 6169  .            rai
000037e0: 7365 5f6f 6e5f 7374 6174 7573 3d54 7275  se_on_status=Tru
000037f0: 650a 2020 2020 2020 2020 290a 0a20 2020  e.        )..   
00003800: 2020 2020 2072 6574 7572 6e20 7265 706c       return repl
00003810: 792e 6765 7428 2772 6570 6c79 2729 0a0a  y.get('reply')..
00003820: 0a64 6566 2067 6574 5f69 6e63 6964 656e  .def get_inciden
00003830: 7473 5f63 6f6d 6d61 6e64 2863 6c69 656e  ts_command(clien
00003840: 742c 2061 7267 7329 3a0a 2020 2020 2222  t, args):.    ""
00003850: 220a 2020 2020 5265 7472 6965 7665 2061  ".    Retrieve a
00003860: 206c 6973 7420 6f66 2069 6e63 6964 656e   list of inciden
00003870: 7473 2066 726f 6d20 5844 522c 2066 696c  ts from XDR, fil
00003880: 7465 7265 6420 6279 2073 6f6d 6520 6669  tered by some fi
00003890: 6c74 6572 732e 0a20 2020 2022 2222 0a0a  lters..    """..
000038a0: 2020 2020 2320 736f 6d65 7469 6d65 7320      # sometimes 
000038b0: 696e 6369 6465 6e74 2069 6420 6361 6e20  incident id can 
000038c0: 6265 2070 6173 7365 6420 6173 2069 6e74  be passed as int
000038d0: 6567 6572 2066 726f 6d20 7468 6520 706c  eger from the pl
000038e0: 6179 626f 6f6b 0a20 2020 2069 6e63 6964  aybook.    incid
000038f0: 656e 745f 6964 5f6c 6973 7420 3d20 6172  ent_id_list = ar
00003900: 6773 2e67 6574 2827 696e 6369 6465 6e74  gs.get('incident
00003910: 5f69 645f 6c69 7374 2729 0a20 2020 2069  _id_list').    i
00003920: 6620 6973 696e 7374 616e 6365 2869 6e63  f isinstance(inc
00003930: 6964 656e 745f 6964 5f6c 6973 742c 2069  ident_id_list, i
00003940: 6e74 293a 0a20 2020 2020 2020 2069 6e63  nt):.        inc
00003950: 6964 656e 745f 6964 5f6c 6973 7420 3d20  ident_id_list = 
00003960: 7374 7228 696e 6369 6465 6e74 5f69 645f  str(incident_id_
00003970: 6c69 7374 290a 0a20 2020 2069 6e63 6964  list)..    incid
00003980: 656e 745f 6964 5f6c 6973 7420 3d20 6172  ent_id_list = ar
00003990: 6754 6f4c 6973 7428 696e 6369 6465 6e74  gToList(incident
000039a0: 5f69 645f 6c69 7374 290a 2020 2020 2320  _id_list).    # 
000039b0: 6d61 6b65 2073 7572 6520 616c 6c20 7468  make sure all th
000039c0: 6520 6964 7320 7061 7373 6564 2061 7265  e ids passed are
000039d0: 2073 7472 696e 6773 2061 6e64 206e 6f74   strings and not
000039e0: 2069 6e74 6567 6572 730a 2020 2020 666f   integers.    fo
000039f0: 7220 696e 6465 782c 2069 645f 2069 6e20  r index, id_ in 
00003a00: 656e 756d 6572 6174 6528 696e 6369 6465  enumerate(incide
00003a10: 6e74 5f69 645f 6c69 7374 293a 0a20 2020  nt_id_list):.   
00003a20: 2020 2020 2069 6620 6973 696e 7374 616e       if isinstan
00003a30: 6365 2869 645f 2c20 2869 6e74 2c20 666c  ce(id_, (int, fl
00003a40: 6f61 7429 293a 0a20 2020 2020 2020 2020  oat)):.         
00003a50: 2020 2069 6e63 6964 656e 745f 6964 5f6c     incident_id_l
00003a60: 6973 745b 696e 6465 785d 203d 2073 7472  ist[index] = str
00003a70: 2869 645f 290a 0a20 2020 206c 7465 5f6d  (id_)..    lte_m
00003a80: 6f64 6966 6963 6174 696f 6e5f 7469 6d65  odification_time
00003a90: 203d 2061 7267 732e 6765 7428 276c 7465   = args.get('lte
00003aa0: 5f6d 6f64 6966 6963 6174 696f 6e5f 7469  _modification_ti
00003ab0: 6d65 2729 0a20 2020 2067 7465 5f6d 6f64  me').    gte_mod
00003ac0: 6966 6963 6174 696f 6e5f 7469 6d65 203d  ification_time =
00003ad0: 2061 7267 732e 6765 7428 2767 7465 5f6d   args.get('gte_m
00003ae0: 6f64 6966 6963 6174 696f 6e5f 7469 6d65  odification_time
00003af0: 2729 0a20 2020 2073 696e 6365 5f6d 6f64  ').    since_mod
00003b00: 6966 6963 6174 696f 6e5f 7469 6d65 203d  ification_time =
00003b10: 2061 7267 732e 6765 7428 2773 696e 6365   args.get('since
00003b20: 5f6d 6f64 6966 6963 6174 696f 6e5f 7469  _modification_ti
00003b30: 6d65 2729 0a0a 2020 2020 6966 2073 696e  me')..    if sin
00003b40: 6365 5f6d 6f64 6966 6963 6174 696f 6e5f  ce_modification_
00003b50: 7469 6d65 2061 6e64 2067 7465 5f6d 6f64  time and gte_mod
00003b60: 6966 6963 6174 696f 6e5f 7469 6d65 3a0a  ification_time:.
00003b70: 2020 2020 2020 2020 7261 6973 6520 5661          raise Va
00003b80: 6c75 6545 7272 6f72 2827 4361 6e5c 2774  lueError('Can\'t
00003b90: 2073 6574 2062 6f74 6820 7369 6e63 655f   set both since_
00003ba0: 6d6f 6469 6669 6361 7469 6f6e 5f74 696d  modification_tim
00003bb0: 6520 616e 6420 6c74 655f 6d6f 6469 6669  e and lte_modifi
00003bc0: 6361 7469 6f6e 5f74 696d 6527 290a 2020  cation_time').  
00003bd0: 2020 6966 2073 696e 6365 5f6d 6f64 6966    if since_modif
00003be0: 6963 6174 696f 6e5f 7469 6d65 3a0a 2020  ication_time:.  
00003bf0: 2020 2020 2020 6774 655f 6d6f 6469 6669        gte_modifi
00003c00: 6361 7469 6f6e 5f74 696d 652c 205f 203d  cation_time, _ =
00003c10: 2070 6172 7365 5f64 6174 655f 7261 6e67   parse_date_rang
00003c20: 6528 7369 6e63 655f 6d6f 6469 6669 6361  e(since_modifica
00003c30: 7469 6f6e 5f74 696d 652c 2054 494d 455f  tion_time, TIME_
00003c40: 464f 524d 4154 290a 0a20 2020 206c 7465  FORMAT)..    lte
00003c50: 5f63 7265 6174 696f 6e5f 7469 6d65 203d  _creation_time =
00003c60: 2061 7267 732e 6765 7428 276c 7465 5f63   args.get('lte_c
00003c70: 7265 6174 696f 6e5f 7469 6d65 2729 0a20  reation_time'). 
00003c80: 2020 2067 7465 5f63 7265 6174 696f 6e5f     gte_creation_
00003c90: 7469 6d65 203d 2061 7267 732e 6765 7428  time = args.get(
00003ca0: 2767 7465 5f63 7265 6174 696f 6e5f 7469  'gte_creation_ti
00003cb0: 6d65 2729 0a20 2020 2073 696e 6365 5f63  me').    since_c
00003cc0: 7265 6174 696f 6e5f 7469 6d65 203d 2061  reation_time = a
00003cd0: 7267 732e 6765 7428 2773 696e 6365 5f63  rgs.get('since_c
00003ce0: 7265 6174 696f 6e5f 7469 6d65 2729 0a0a  reation_time')..
00003cf0: 2020 2020 6966 2073 696e 6365 5f63 7265      if since_cre
00003d00: 6174 696f 6e5f 7469 6d65 2061 6e64 2067  ation_time and g
00003d10: 7465 5f63 7265 6174 696f 6e5f 7469 6d65  te_creation_time
00003d20: 3a0a 2020 2020 2020 2020 7261 6973 6520  :.        raise 
00003d30: 5661 6c75 6545 7272 6f72 2827 4361 6e5c  ValueError('Can\
00003d40: 2774 2073 6574 2062 6f74 6820 7369 6e63  't set both sinc
00003d50: 655f 6372 6561 7469 6f6e 5f74 696d 6520  e_creation_time 
00003d60: 616e 6420 6c74 655f 6372 6561 7469 6f6e  and lte_creation
00003d70: 5f74 696d 6527 290a 2020 2020 6966 2073  _time').    if s
00003d80: 696e 6365 5f63 7265 6174 696f 6e5f 7469  ince_creation_ti
00003d90: 6d65 3a0a 2020 2020 2020 2020 6774 655f  me:.        gte_
00003da0: 6372 6561 7469 6f6e 5f74 696d 652c 205f  creation_time, _
00003db0: 203d 2070 6172 7365 5f64 6174 655f 7261   = parse_date_ra
00003dc0: 6e67 6528 7369 6e63 655f 6372 6561 7469  nge(since_creati
00003dd0: 6f6e 5f74 696d 652c 2054 494d 455f 464f  on_time, TIME_FO
00003de0: 524d 4154 290a 0a20 2020 2073 7461 7475  RMAT)..    statu
00003df0: 7365 7320 3d20 6172 6754 6f4c 6973 7428  ses = argToList(
00003e00: 6172 6773 2e67 6574 2827 7374 6174 7573  args.get('status
00003e10: 272c 2027 2729 290a 0a20 2020 2073 7461  ', ''))..    sta
00003e20: 7272 6564 203d 2061 7267 732e 6765 7428  rred = args.get(
00003e30: 2773 7461 7272 6564 2729 0a20 2020 2073  'starred').    s
00003e40: 7461 7272 6564 5f69 6e63 6964 656e 7473  tarred_incidents
00003e50: 5f66 6574 6368 5f77 696e 646f 7720 3d20  _fetch_window = 
00003e60: 6172 6773 2e67 6574 2827 7374 6172 7265  args.get('starre
00003e70: 645f 696e 6369 6465 6e74 735f 6665 7463  d_incidents_fetc
00003e80: 685f 7769 6e64 6f77 272c 2027 3320 6461  h_window', '3 da
00003e90: 7973 2729 0a20 2020 2073 7461 7272 6564  ys').    starred
00003ea0: 5f69 6e63 6964 656e 7473 5f66 6574 6368  _incidents_fetch
00003eb0: 5f77 696e 646f 772c 205f 203d 2070 6172  _window, _ = par
00003ec0: 7365 5f64 6174 655f 7261 6e67 6528 7374  se_date_range(st
00003ed0: 6172 7265 645f 696e 6369 6465 6e74 735f  arred_incidents_
00003ee0: 6665 7463 685f 7769 6e64 6f77 2c20 746f  fetch_window, to
00003ef0: 5f74 696d 6573 7461 6d70 3d54 7275 6529  _timestamp=True)
00003f00: 0a0a 2020 2020 736f 7274 5f62 795f 6d6f  ..    sort_by_mo
00003f10: 6469 6669 6361 7469 6f6e 5f74 696d 6520  dification_time 
00003f20: 3d20 6172 6773 2e67 6574 2827 736f 7274  = args.get('sort
00003f30: 5f62 795f 6d6f 6469 6669 6361 7469 6f6e  _by_modification
00003f40: 5f74 696d 6527 290a 2020 2020 736f 7274  _time').    sort
00003f50: 5f62 795f 6372 6561 7469 6f6e 5f74 696d  _by_creation_tim
00003f60: 6520 3d20 6172 6773 2e67 6574 2827 736f  e = args.get('so
00003f70: 7274 5f62 795f 6372 6561 7469 6f6e 5f74  rt_by_creation_t
00003f80: 696d 6527 290a 0a20 2020 2070 6167 6520  ime')..    page 
00003f90: 3d20 696e 7428 6172 6773 2e67 6574 2827  = int(args.get('
00003fa0: 7061 6765 272c 2030 2929 0a20 2020 206c  page', 0)).    l
00003fb0: 696d 6974 203d 2069 6e74 2861 7267 732e  imit = int(args.
00003fc0: 6765 7428 276c 696d 6974 272c 2031 3030  get('limit', 100
00003fd0: 2929 0a0a 2020 2020 2320 4966 206e 6f20  ))..    # If no 
00003fe0: 6669 6c74 6572 7320 7765 7265 2067 6976  filters were giv
00003ff0: 656e 2c20 7265 7475 726e 2061 206d 6561  en, return a mea
00004000: 6e69 6e67 6675 6c20 6572 726f 7220 6d65  ningful error me
00004010: 7373 6167 650a 2020 2020 6966 206e 6f74  ssage.    if not
00004020: 2069 6e63 6964 656e 745f 6964 5f6c 6973   incident_id_lis
00004030: 7420 616e 6420 286e 6f74 206c 7465 5f6d  t and (not lte_m
00004040: 6f64 6966 6963 6174 696f 6e5f 7469 6d65  odification_time
00004050: 2061 6e64 206e 6f74 2067 7465 5f6d 6f64   and not gte_mod
00004060: 6966 6963 6174 696f 6e5f 7469 6d65 2061  ification_time a
00004070: 6e64 206e 6f74 2073 696e 6365 5f6d 6f64  nd not since_mod
00004080: 6966 6963 6174 696f 6e5f 7469 6d65 0a20  ification_time. 
00004090: 2020 2020 2020 2020 2020 2020 2020 2020                  
000040a0: 2020 2020 2020 2020 2020 2020 2020 2020                  
000040b0: 616e 6420 6e6f 7420 6c74 655f 6372 6561  and not lte_crea
000040c0: 7469 6f6e 5f74 696d 6520 616e 6420 6e6f  tion_time and no
000040d0: 7420 6774 655f 6372 6561 7469 6f6e 5f74  t gte_creation_t
000040e0: 696d 6520 616e 6420 6e6f 7420 7369 6e63  ime and not sinc
000040f0: 655f 6372 6561 7469 6f6e 5f74 696d 650a  e_creation_time.
00004100: 2020 2020 2020 2020 2020 2020 2020 2020                  
00004110: 2020 2020 2020 2020 2020 2020 2020 2020                  
00004120: 2061 6e64 206e 6f74 2073 7461 7475 7365   and not statuse
00004130: 7320 616e 6420 6e6f 7420 7374 6172 7265  s and not starre
00004140: 6429 3a0a 2020 2020 2020 2020 7261 6973  d):.        rais
00004150: 6520 5661 6c75 6545 7272 6f72 2822 5370  e ValueError("Sp
00004160: 6563 6966 7920 6120 7175 6572 7920 666f  ecify a query fo
00004170: 7220 7468 6520 696e 6369 6465 6e74 732e  r the incidents.
00004180: 5c6e 466f 7220 6578 616d 706c 653a 220a  \nFor example:".
00004190: 2020 2020 2020 2020 2020 2020 2020 2020                  
000041a0: 2020 2020 2020 2020 2022 2021 7864 722d           " !xdr-
000041b0: 6765 742d 696e 6369 6465 6e74 7320 7369  get-incidents si
000041c0: 6e63 655f 6372 6561 7469 6f6e 5f74 696d  nce_creation_tim
000041d0: 653d 5c22 3120 7965 6172 5c22 2073 6f72  e=\"1 year\" sor
000041e0: 745f 6279 5f63 7265 6174 696f 6e5f 7469  t_by_creation_ti
000041f0: 6d65 3d5c 2264 6573 635c 2220 6c69 6d69  me=\"desc\" limi
00004200: 743d 3130 2229 0a0a 2020 2020 6966 2073  t=10")..    if s
00004210: 7461 7475 7365 733a 0a20 2020 2020 2020  tatuses:.       
00004220: 2072 6177 5f69 6e63 6964 656e 7473 203d   raw_incidents =
00004230: 205b 5d0a 0a20 2020 2020 2020 2066 6f72   []..        for
00004240: 2073 7461 7475 7320 696e 2073 7461 7475   status in statu
00004250: 7365 733a 0a20 2020 2020 2020 2020 2020  ses:.           
00004260: 2072 6177 5f69 6e63 6964 656e 7473 202b   raw_incidents +
00004270: 3d20 636c 6965 6e74 2e67 6574 5f69 6e63  = client.get_inc
00004280: 6964 656e 7473 280a 2020 2020 2020 2020  idents(.        
00004290: 2020 2020 2020 2020 696e 6369 6465 6e74          incident
000042a0: 5f69 645f 6c69 7374 3d69 6e63 6964 656e  _id_list=inciden
000042b0: 745f 6964 5f6c 6973 742c 0a20 2020 2020  t_id_list,.     
000042c0: 2020 2020 2020 2020 2020 206c 7465 5f6d             lte_m
000042d0: 6f64 6966 6963 6174 696f 6e5f 7469 6d65  odification_time
000042e0: 3d6c 7465 5f6d 6f64 6966 6963 6174 696f  =lte_modificatio
000042f0: 6e5f 7469 6d65 2c0a 2020 2020 2020 2020  n_time,.        
00004300: 2020 2020 2020 2020 6774 655f 6d6f 6469          gte_modi
00004310: 6669 6361 7469 6f6e 5f74 696d 653d 6774  fication_time=gt
00004320: 655f 6d6f 6469 6669 6361 7469 6f6e 5f74  e_modification_t
00004330: 696d 652c 0a20 2020 2020 2020 2020 2020  ime,.           
00004340: 2020 2020 206c 7465 5f63 7265 6174 696f       lte_creatio
00004350: 6e5f 7469 6d65 3d6c 7465 5f63 7265 6174  n_time=lte_creat
00004360: 696f 6e5f 7469 6d65 2c0a 2020 2020 2020  ion_time,.      
00004370: 2020 2020 2020 2020 2020 6774 655f 6372            gte_cr
00004380: 6561 7469 6f6e 5f74 696d 653d 6774 655f  eation_time=gte_
00004390: 6372 6561 7469 6f6e 5f74 696d 652c 0a20  creation_time,. 
000043a0: 2020 2020 2020 2020 2020 2020 2020 2073                 s
000043b0: 6f72 745f 6279 5f63 7265 6174 696f 6e5f  ort_by_creation_
000043c0: 7469 6d65 3d73 6f72 745f 6279 5f63 7265  time=sort_by_cre
000043d0: 6174 696f 6e5f 7469 6d65 2c0a 2020 2020  ation_time,.    
000043e0: 2020 2020 2020 2020 2020 2020 736f 7274              sort
000043f0: 5f62 795f 6d6f 6469 6669 6361 7469 6f6e  _by_modification
00004400: 5f74 696d 653d 736f 7274 5f62 795f 6d6f  _time=sort_by_mo
00004410: 6469 6669 6361 7469 6f6e 5f74 696d 652c  dification_time,
00004420: 0a20 2020 2020 2020 2020 2020 2020 2020  .               
00004430: 2070 6167 655f 6e75 6d62 6572 3d70 6167   page_number=pag
00004440: 652c 0a20 2020 2020 2020 2020 2020 2020  e,.             
00004450: 2020 206c 696d 6974 3d6c 696d 6974 2c0a     limit=limit,.
00004460: 2020 2020 2020 2020 2020 2020 2020 2020                  
00004470: 7374 6174 7573 3d73 7461 7475 732c 0a20  status=status,. 
00004480: 2020 2020 2020 2020 2020 2020 2020 2073                 s
00004490: 7461 7272 6564 3d73 7461 7272 6564 2c0a  tarred=starred,.
000044a0: 2020 2020 2020 2020 2020 2020 2020 2020                  
000044b0: 7374 6172 7265 645f 696e 6369 6465 6e74  starred_incident
000044c0: 735f 6665 7463 685f 7769 6e64 6f77 3d73  s_fetch_window=s
000044d0: 7461 7272 6564 5f69 6e63 6964 656e 7473  tarred_incidents
000044e0: 5f66 6574 6368 5f77 696e 646f 772c 0a20  _fetch_window,. 
000044f0: 2020 2020 2020 2020 2020 2029 0a0a 2020             )..  
00004500: 2020 2020 2020 6966 206c 656e 2872 6177        if len(raw
00004510: 5f69 6e63 6964 656e 7473 2920 3e20 6c69  _incidents) > li
00004520: 6d69 743a 0a20 2020 2020 2020 2020 2020  mit:.           
00004530: 2072 6177 5f69 6e63 6964 656e 7473 203d   raw_incidents =
00004540: 2072 6177 5f69 6e63 6964 656e 7473 5b3a   raw_incidents[:
00004550: 6c69 6d69 745d 0a20 2020 2065 6c73 653a  limit].    else:
00004560: 0a20 2020 2020 2020 2072 6177 5f69 6e63  .        raw_inc
00004570: 6964 656e 7473 203d 2063 6c69 656e 742e  idents = client.
00004580: 6765 745f 696e 6369 6465 6e74 7328 0a20  get_incidents(. 
00004590: 2020 2020 2020 2020 2020 2069 6e63 6964             incid
000045a0: 656e 745f 6964 5f6c 6973 743d 696e 6369  ent_id_list=inci
000045b0: 6465 6e74 5f69 645f 6c69 7374 2c0a 2020  dent_id_list,.  
000045c0: 2020 2020 2020 2020 2020 6c74 655f 6d6f            lte_mo
000045d0: 6469 6669 6361 7469 6f6e 5f74 696d 653d  dification_time=
000045e0: 6c74 655f 6d6f 6469 6669 6361 7469 6f6e  lte_modification
000045f0: 5f74 696d 652c 0a20 2020 2020 2020 2020  _time,.         
00004600: 2020 2067 7465 5f6d 6f64 6966 6963 6174     gte_modificat
00004610: 696f 6e5f 7469 6d65 3d67 7465 5f6d 6f64  ion_time=gte_mod
00004620: 6966 6963 6174 696f 6e5f 7469 6d65 2c0a  ification_time,.
00004630: 2020 2020 2020 2020 2020 2020 6c74 655f              lte_
00004640: 6372 6561 7469 6f6e 5f74 696d 653d 6c74  creation_time=lt
00004650: 655f 6372 6561 7469 6f6e 5f74 696d 652c  e_creation_time,
00004660: 0a20 2020 2020 2020 2020 2020 2067 7465  .            gte
00004670: 5f63 7265 6174 696f 6e5f 7469 6d65 3d67  _creation_time=g
00004680: 7465 5f63 7265 6174 696f 6e5f 7469 6d65  te_creation_time
00004690: 2c0a 2020 2020 2020 2020 2020 2020 736f  ,.            so
000046a0: 7274 5f62 795f 6372 6561 7469 6f6e 5f74  rt_by_creation_t
000046b0: 696d 653d 736f 7274 5f62 795f 6372 6561  ime=sort_by_crea
000046c0: 7469 6f6e 5f74 696d 652c 0a20 2020 2020  tion_time,.     
000046d0: 2020 2020 2020 2073 6f72 745f 6279 5f6d         sort_by_m
000046e0: 6f64 6966 6963 6174 696f 6e5f 7469 6d65  odification_time
000046f0: 3d73 6f72 745f 6279 5f6d 6f64 6966 6963  =sort_by_modific
00004700: 6174 696f 6e5f 7469 6d65 2c0a 2020 2020  ation_time,.    
00004710: 2020 2020 2020 2020 7061 6765 5f6e 756d          page_num
00004720: 6265 723d 7061 6765 2c0a 2020 2020 2020  ber=page,.      
00004730: 2020 2020 2020 6c69 6d69 743d 6c69 6d69        limit=limi
00004740: 742c 0a20 2020 2020 2020 2020 2020 2073  t,.            s
00004750: 7461 7272 6564 3d73 7461 7272 6564 2c0a  tarred=starred,.
00004760: 2020 2020 2020 2020 2020 2020 7374 6172              star
00004770: 7265 645f 696e 6369 6465 6e74 735f 6665  red_incidents_fe
00004780: 7463 685f 7769 6e64 6f77 3d73 7461 7272  tch_window=starr
00004790: 6564 5f69 6e63 6964 656e 7473 5f66 6574  ed_incidents_fet
000047a0: 6368 5f77 696e 646f 772c 0a20 2020 2020  ch_window,.     
000047b0: 2020 2029 0a0a 2020 2020 7265 7475 726e     )..    return
000047c0: 2028 0a20 2020 2020 2020 2074 6162 6c65   (.        table
000047d0: 546f 4d61 726b 646f 776e 2827 496e 6369  ToMarkdown('Inci
000047e0: 6465 6e74 7327 2c20 7261 775f 696e 6369  dents', raw_inci
000047f0: 6465 6e74 7329 2c0a 2020 2020 2020 2020  dents),.        
00004800: 7b0a 2020 2020 2020 2020 2020 2020 6627  {.            f'
00004810: 7b49 4e54 4547 5241 5449 4f4e 5f43 4f4e  {INTEGRATION_CON
00004820: 5445 5854 5f42 5241 4e44 7d2e 496e 6369  TEXT_BRAND}.Inci
00004830: 6465 6e74 2876 616c 2e69 6e63 6964 656e  dent(val.inciden
00004840: 745f 6964 3d3d 6f62 6a2e 696e 6369 6465  t_id==obj.incide
00004850: 6e74 5f69 6429 273a 2072 6177 5f69 6e63  nt_id)': raw_inc
00004860: 6964 656e 7473 0a20 2020 2020 2020 207d  idents.        }
00004870: 2c0a 2020 2020 2020 2020 7261 775f 696e  ,.        raw_in
00004880: 6369 6465 6e74 730a 2020 2020 290a 0a0a  cidents.    )...
00004890: 6465 6620 6368 6563 6b5f 6966 5f69 6e63  def check_if_inc
000048a0: 6964 656e 745f 7761 735f 6d6f 6469 6669  ident_was_modifi
000048b0: 6564 5f69 6e5f 7864 7228 696e 6369 6465  ed_in_xdr(incide
000048c0: 6e74 5f69 642c 206c 6173 745f 6d69 7272  nt_id, last_mirr
000048d0: 6f72 6564 5f69 6e5f 7469 6d65 5f74 696d  ored_in_time_tim
000048e0: 6573 7461 6d70 2c20 6c61 7374 5f6d 6f64  estamp, last_mod
000048f0: 6966 6965 645f 696e 6369 6465 6e74 735f  ified_incidents_
00004900: 6469 6374 293a 0a20 2020 2069 6620 696e  dict):.    if in
00004910: 6369 6465 6e74 5f69 6420 696e 206c 6173  cident_id in las
00004920: 745f 6d6f 6469 6669 6564 5f69 6e63 6964  t_modified_incid
00004930: 656e 7473 5f64 6963 743a 2020 2320 7365  ents_dict:  # se
00004940: 6172 6368 2074 6865 2069 6e63 6964 656e  arch the inciden
00004950: 7420 696e 2074 6865 2064 6963 7420 6f66  t in the dict of
00004960: 206d 6f64 6966 6965 6420 696e 6369 6465   modified incide
00004970: 6e74 730a 2020 2020 2020 2020 696e 6369  nts.        inci
00004980: 6465 6e74 5f6d 6f64 6966 6963 6174 696f  dent_modificatio
00004990: 6e5f 7469 6d65 5f69 6e5f 7864 7220 3d20  n_time_in_xdr = 
000049a0: 696e 7428 7374 7228 6c61 7374 5f6d 6f64  int(str(last_mod
000049b0: 6966 6965 645f 696e 6369 6465 6e74 735f  ified_incidents_
000049c0: 6469 6374 5b69 6e63 6964 656e 745f 6964  dict[incident_id
000049d0: 5d29 290a 0a20 2020 2020 2020 2064 656d  ]))..        dem
000049e0: 6973 746f 2e64 6562 7567 2866 2258 4452  isto.debug(f"XDR
000049f0: 2069 6e63 6964 656e 7420 7b69 6e63 6964   incident {incid
00004a00: 656e 745f 6964 7d5c 6e22 0a20 2020 2020  ent_id}\n".     
00004a10: 2020 2020 2020 2020 2020 2020 2020 2020                  
00004a20: 2066 226d 6f64 6966 6965 6420 7469 6d65   f"modified time
00004a30: 3a20 2020 2020 2020 2020 7b69 6e63 6964  :         {incid
00004a40: 656e 745f 6d6f 6469 6669 6361 7469 6f6e  ent_modification
00004a50: 5f74 696d 655f 696e 5f78 6472 7d5c 6e22  _time_in_xdr}\n"
00004a60: 0a20 2020 2020 2020 2020 2020 2020 2020  .               
00004a70: 2020 2020 2020 2066 226c 6173 7420 6d69         f"last mi
00004a80: 7272 6f72 6564 2069 6e20 7469 6d65 3a20  rrored in time: 
00004a90: 7b6c 6173 745f 6d69 7272 6f72 6564 5f69  {last_mirrored_i
00004aa0: 6e5f 7469 6d65 5f74 696d 6573 7461 6d70  n_time_timestamp
00004ab0: 7d22 290a 0a20 2020 2020 2020 2069 6620  }")..        if 
00004ac0: 696e 6369 6465 6e74 5f6d 6f64 6966 6963  incident_modific
00004ad0: 6174 696f 6e5f 7469 6d65 5f69 6e5f 7864  ation_time_in_xd
00004ae0: 7220 3e20 6c61 7374 5f6d 6972 726f 7265  r > last_mirrore
00004af0: 645f 696e 5f74 696d 655f 7469 6d65 7374  d_in_time_timest
00004b00: 616d 703a 2020 2320 6e65 6564 2074 6f20  amp:  # need to 
00004b10: 7570 6461 7465 2074 6869 7320 696e 6369  update this inci
00004b20: 6465 6e74 0a20 2020 2020 2020 2020 2020  dent.           
00004b30: 2064 656d 6973 746f 2e69 6e66 6f28 6622   demisto.info(f"
00004b40: 496e 6369 6465 6e74 2027 7b69 6e63 6964  Incident '{incid
00004b50: 656e 745f 6964 7d27 2077 6173 206d 6f64  ent_id}' was mod
00004b60: 6966 6965 642e 2070 6572 666f 726d 696e  ified. performin
00004b70: 6720 6578 7472 612d 6461 7461 2072 6571  g extra-data req
00004b80: 7565 7374 2e22 290a 2020 2020 2020 2020  uest.").        
00004b90: 2020 2020 7265 7475 726e 2054 7275 650a      return True.
00004ba0: 2020 2020 2320 7468 6520 696e 6369 6465      # the incide
00004bb0: 6e74 2077 6173 206e 6f74 206d 6f64 6966  nt was not modif
00004bc0: 6965 640a 2020 2020 7265 7475 726e 2046  ied.    return F
00004bd0: 616c 7365 0a0a 0a64 6566 2067 6574 5f6c  alse...def get_l
00004be0: 6173 745f 6d69 7272 6f72 6564 5f69 6e5f  ast_mirrored_in_
00004bf0: 7469 6d65 2861 7267 7329 3a0a 2020 2020  time(args):.    
00004c00: 6465 6d69 7374 6f5f 696e 6369 6465 6e74  demisto_incident
00004c10: 7320 3d20 6465 6d69 7374 6f2e 6765 745f  s = demisto.get_
00004c20: 696e 6369 6465 6e74 7328 2920 2023 2074  incidents()  # t
00004c30: 7970 653a 2069 676e 6f72 650a 0a20 2020  ype: ignore..   
00004c40: 2069 6620 6465 6d69 7374 6f5f 696e 6369   if demisto_inci
00004c50: 6465 6e74 733a 2020 2320 6861 6e64 6c69  dents:  # handli
00004c60: 6e67 2035 2e35 2076 6572 7369 6f6e 0a20  ng 5.5 version. 
00004c70: 2020 2020 2020 2064 656d 6973 746f 5f69         demisto_i
00004c80: 6e63 6964 656e 7420 3d20 6465 6d69 7374  ncident = demist
00004c90: 6f5f 696e 6369 6465 6e74 735b 305d 0a20  o_incidents[0]. 
00004ca0: 2020 2020 2020 206c 6173 745f 6d69 7272         last_mirr
00004cb0: 6f72 6564 5f69 6e5f 7469 6d65 203d 2064  ored_in_time = d
00004cc0: 656d 6973 746f 5f69 6e63 6964 656e 742e  emisto_incident.
00004cd0: 6765 7428 2743 7573 746f 6d46 6965 6c64  get('CustomField
00004ce0: 7327 2c20 7b7d 292e 6765 7428 276c 6173  s', {}).get('las
00004cf0: 746d 6972 726f 7265 6469 6e74 696d 6527  tmirroredintime'
00004d00: 290a 2020 2020 2020 2020 6966 206e 6f74  ).        if not
00004d10: 206c 6173 745f 6d69 7272 6f72 6564 5f69   last_mirrored_i
00004d20: 6e5f 7469 6d65 3a20 2023 2074 6869 7320  n_time:  # this 
00004d30: 6973 2061 6e20 6f6c 6420 696e 6369 6465  is an old incide
00004d40: 6e74 2c20 7570 6461 7465 2061 6e79 7761  nt, update anywa
00004d50: 790a 2020 2020 2020 2020 2020 2020 7265  y.            re
00004d60: 7475 726e 2030 0a20 2020 2020 2020 206c  turn 0.        l
00004d70: 6173 745f 6d69 7272 6f72 6564 5f69 6e5f  ast_mirrored_in_
00004d80: 7469 6d65 7374 616d 7020 3d20 6172 675f  timestamp = arg_
00004d90: 746f 5f74 696d 6573 7461 6d70 286c 6173  to_timestamp(las
00004da0: 745f 6d69 7272 6f72 6564 5f69 6e5f 7469  t_mirrored_in_ti
00004db0: 6d65 2c20 276c 6173 745f 6d69 7272 6f72  me, 'last_mirror
00004dc0: 6564 5f69 6e5f 7469 6d65 2729 0a0a 2020  ed_in_time')..  
00004dd0: 2020 656c 7365 3a20 2023 2068 616e 646c    else:  # handl
00004de0: 696e 6720 362e 3020 7665 7273 696f 6e0a  ing 6.0 version.
00004df0: 2020 2020 2020 2020 6c61 7374 5f6d 6972          last_mir
00004e00: 726f 7265 645f 696e 5f74 696d 6520 3d20  rored_in_time = 
00004e10: 6172 675f 746f 5f74 696d 6573 7461 6d70  arg_to_timestamp
00004e20: 2861 7267 732e 6765 7428 276c 6173 745f  (args.get('last_
00004e30: 7570 6461 7465 2729 2c20 276c 6173 745f  update'), 'last_
00004e40: 7570 6461 7465 2729 0a20 2020 2020 2020  update').       
00004e50: 206c 6173 745f 6d69 7272 6f72 6564 5f69   last_mirrored_i
00004e60: 6e5f 7469 6d65 7374 616d 7020 3d20 286c  n_timestamp = (l
00004e70: 6173 745f 6d69 7272 6f72 6564 5f69 6e5f  ast_mirrored_in_
00004e80: 7469 6d65 202d 2028 3132 3020 2a20 3130  time - (120 * 10
00004e90: 3030 2929 0a0a 2020 2020 7265 7475 726e  00))..    return
00004ea0: 206c 6173 745f 6d69 7272 6f72 6564 5f69   last_mirrored_i
00004eb0: 6e5f 7469 6d65 7374 616d 700a 0a0a 6465  n_timestamp...de
00004ec0: 6620 6765 745f 696e 6369 6465 6e74 5f65  f get_incident_e
00004ed0: 7874 7261 5f64 6174 615f 636f 6d6d 616e  xtra_data_comman
00004ee0: 6428 636c 6965 6e74 2c20 6172 6773 293a  d(client, args):
00004ef0: 0a20 2020 2069 6e63 6964 656e 745f 6964  .    incident_id
00004f00: 203d 2061 7267 732e 6765 7428 2769 6e63   = args.get('inc
00004f10: 6964 656e 745f 6964 2729 0a20 2020 2061  ident_id').    a
00004f20: 6c65 7274 735f 6c69 6d69 7420 3d20 696e  lerts_limit = in
00004f30: 7428 6172 6773 2e67 6574 2827 616c 6572  t(args.get('aler
00004f40: 7473 5f6c 696d 6974 272c 2031 3030 3029  ts_limit', 1000)
00004f50: 290a 2020 2020 7265 7475 726e 5f6f 6e6c  ).    return_onl
00004f60: 795f 7570 6461 7465 645f 696e 6369 6465  y_updated_incide
00004f70: 6e74 203d 2061 7267 546f 426f 6f6c 6561  nt = argToBoolea
00004f80: 6e28 6172 6773 2e67 6574 2827 7265 7475  n(args.get('retu
00004f90: 726e 5f6f 6e6c 795f 7570 6461 7465 645f  rn_only_updated_
00004fa0: 696e 6369 6465 6e74 272c 2027 4661 6c73  incident', 'Fals
00004fb0: 6527 2929 0a0a 2020 2020 6966 2072 6574  e'))..    if ret
00004fc0: 7572 6e5f 6f6e 6c79 5f75 7064 6174 6564  urn_only_updated
00004fd0: 5f69 6e63 6964 656e 743a 0a20 2020 2020  _incident:.     
00004fe0: 2020 206c 6173 745f 6d69 7272 6f72 6564     last_mirrored
00004ff0: 5f69 6e5f 7469 6d65 203d 2067 6574 5f6c  _in_time = get_l
00005000: 6173 745f 6d69 7272 6f72 6564 5f69 6e5f  ast_mirrored_in_
00005010: 7469 6d65 2861 7267 7329 0a20 2020 2020  time(args).     
00005020: 2020 206c 6173 745f 6d6f 6469 6669 6564     last_modified
00005030: 5f69 6e63 6964 656e 7473 5f64 6963 7420  _incidents_dict 
00005040: 3d20 6765 745f 696e 7465 6772 6174 696f  = get_integratio
00005050: 6e5f 636f 6e74 6578 7428 292e 6765 7428  n_context().get(
00005060: 276d 6f64 6966 6965 645f 696e 6369 6465  'modified_incide
00005070: 6e74 7327 2c20 7b7d 290a 0a20 2020 2020  nts', {})..     
00005080: 2020 2069 6620 6368 6563 6b5f 6966 5f69     if check_if_i
00005090: 6e63 6964 656e 745f 7761 735f 6d6f 6469  ncident_was_modi
000050a0: 6669 6564 5f69 6e5f 7864 7228 696e 6369  fied_in_xdr(inci
000050b0: 6465 6e74 5f69 642c 206c 6173 745f 6d69  dent_id, last_mi
000050c0: 7272 6f72 6564 5f69 6e5f 7469 6d65 2c20  rrored_in_time, 
000050d0: 6c61 7374 5f6d 6f64 6966 6965 645f 696e  last_modified_in
000050e0: 6369 6465 6e74 735f 6469 6374 293a 0a20  cidents_dict):. 
000050f0: 2020 2020 2020 2020 2020 2070 6173 7320             pass 
00005100: 2023 2074 6865 2069 6e63 6964 656e 7420   # the incident 
00005110: 7761 7320 6d6f 6469 6669 6564 2e20 636f  was modified. co
00005120: 6e74 696e 7565 2074 6f20 7065 7266 6f72  ntinue to perfor
00005130: 6d20 6578 7472 612d 6461 7461 2072 6571  m extra-data req
00005140: 7565 7374 0a0a 2020 2020 2020 2020 656c  uest..        el
00005150: 7365 3a20 2023 2074 6865 2069 6e63 6964  se:  # the incid
00005160: 656e 7420 7761 7320 6e6f 7420 6d6f 6469  ent was not modi
00005170: 6669 6564 0a20 2020 2020 2020 2020 2020  fied.           
00005180: 2072 6574 7572 6e20 2254 6865 2069 6e63   return "The inc
00005190: 6964 656e 7420 7761 7320 6e6f 7420 6d6f  ident was not mo
000051a0: 6469 6669 6564 2069 6e20 5844 5220 7369  dified in XDR si
000051b0: 6e63 6520 7468 6520 6c61 7374 206d 6972  nce the last mir
000051c0: 726f 7220 696e 2e22 2c20 7b7d 2c20 7b7d  ror in.", {}, {}
000051d0: 0a0a 2020 2020 6465 6d69 7374 6f2e 6465  ..    demisto.de
000051e0: 6275 6728 6622 5065 7266 6f72 6d69 6e67  bug(f"Performing
000051f0: 2065 7874 7261 2d64 6174 6120 7265 7175   extra-data requ
00005200: 6573 7420 6f6e 2069 6e63 6964 656e 743a  est on incident:
00005210: 207b 696e 6369 6465 6e74 5f69 647d 2229   {incident_id}")
00005220: 0a20 2020 2072 6177 5f69 6e63 6964 656e  .    raw_inciden
00005230: 7420 3d20 636c 6965 6e74 2e67 6574 5f69  t = client.get_i
00005240: 6e63 6964 656e 745f 6578 7472 615f 6461  ncident_extra_da
00005250: 7461 2869 6e63 6964 656e 745f 6964 2c20  ta(incident_id, 
00005260: 616c 6572 7473 5f6c 696d 6974 290a 0a20  alerts_limit).. 
00005270: 2020 2069 6e63 6964 656e 7420 3d20 7261     incident = ra
00005280: 775f 696e 6369 6465 6e74 2e67 6574 2827  w_incident.get('
00005290: 696e 6369 6465 6e74 2729 0a20 2020 2069  incident').    i
000052a0: 6e63 6964 656e 745f 6964 203d 2069 6e63  ncident_id = inc
000052b0: 6964 656e 742e 6765 7428 2769 6e63 6964  ident.get('incid
000052c0: 656e 745f 6964 2729 0a20 2020 2072 6177  ent_id').    raw
000052d0: 5f61 6c65 7274 7320 3d20 7261 775f 696e  _alerts = raw_in
000052e0: 6369 6465 6e74 2e67 6574 2827 616c 6572  cident.get('aler
000052f0: 7473 2729 2e67 6574 2827 6461 7461 2729  ts').get('data')
00005300: 0a20 2020 2063 6f6e 7465 7874 5f61 6c65  .    context_ale
00005310: 7274 7320 3d20 636c 6561 725f 7472 6169  rts = clear_trai
00005320: 6c69 6e67 5f77 6869 7465 7370 6163 6528  ling_whitespace(
00005330: 7261 775f 616c 6572 7473 290a 2020 2020  raw_alerts).    
00005340: 666f 7220 616c 6572 7420 696e 2063 6f6e  for alert in con
00005350: 7465 7874 5f61 6c65 7274 733a 0a20 2020  text_alerts:.   
00005360: 2020 2020 2061 6c65 7274 5b27 686f 7374       alert['host
00005370: 5f69 705f 6c69 7374 275d 203d 2061 6c65  _ip_list'] = ale
00005380: 7274 2e67 6574 2827 686f 7374 5f69 7027  rt.get('host_ip'
00005390: 292e 7370 6c69 7428 272c 2729 2069 6620  ).split(',') if 
000053a0: 616c 6572 742e 6765 7428 2768 6f73 745f  alert.get('host_
000053b0: 6970 2729 2065 6c73 6520 5b5d 0a20 2020  ip') else [].   
000053c0: 2066 696c 655f 6172 7469 6661 6374 7320   file_artifacts 
000053d0: 3d20 7261 775f 696e 6369 6465 6e74 2e67  = raw_incident.g
000053e0: 6574 2827 6669 6c65 5f61 7274 6966 6163  et('file_artifac
000053f0: 7473 2729 2e67 6574 2827 6461 7461 2729  ts').get('data')
00005400: 0a20 2020 206e 6574 776f 726b 5f61 7274  .    network_art
00005410: 6966 6163 7473 203d 2072 6177 5f69 6e63  ifacts = raw_inc
00005420: 6964 656e 742e 6765 7428 276e 6574 776f  ident.get('netwo
00005430: 726b 5f61 7274 6966 6163 7473 2729 2e67  rk_artifacts').g
00005440: 6574 2827 6461 7461 2729 0a0a 2020 2020  et('data')..    
00005450: 7265 6164 6162 6c65 5f6f 7574 7075 7420  readable_output 
00005460: 3d20 5b74 6162 6c65 546f 4d61 726b 646f  = [tableToMarkdo
00005470: 776e 2827 496e 6369 6465 6e74 207b 7d27  wn('Incident {}'
00005480: 2e66 6f72 6d61 7428 696e 6369 6465 6e74  .format(incident
00005490: 5f69 6429 2c20 696e 6369 6465 6e74 295d  _id), incident)]
000054a0: 0a0a 2020 2020 6966 206c 656e 2863 6f6e  ..    if len(con
000054b0: 7465 7874 5f61 6c65 7274 7329 203e 2030  text_alerts) > 0
000054c0: 3a0a 2020 2020 2020 2020 7265 6164 6162  :.        readab
000054d0: 6c65 5f6f 7574 7075 742e 6170 7065 6e64  le_output.append
000054e0: 2874 6162 6c65 546f 4d61 726b 646f 776e  (tableToMarkdown
000054f0: 2827 416c 6572 7473 272c 2063 6f6e 7465  ('Alerts', conte
00005500: 7874 5f61 6c65 7274 732c 0a20 2020 2020  xt_alerts,.     
00005510: 2020 2020 2020 2020 2020 2020 2020 2020                  
00005520: 2020 2020 2020 2020 2020 2020 2020 2020                  
00005530: 2020 2020 2020 2020 2020 6865 6164 6572            header
00005540: 733d 5b6b 6579 2066 6f72 206b 6579 2069  s=[key for key i
00005550: 6e20 636f 6e74 6578 745f 616c 6572 7473  n context_alerts
00005560: 5b30 5d20 6966 206b 6579 2021 3d20 2768  [0] if key != 'h
00005570: 6f73 745f 6970 275d 2929 0a20 2020 2065  ost_ip'])).    e
00005580: 6c73 653a 0a20 2020 2020 2020 2072 6561  lse:.        rea
00005590: 6461 626c 655f 6f75 7470 7574 2e61 7070  dable_output.app
000055a0: 656e 6428 7461 626c 6554 6f4d 6172 6b64  end(tableToMarkd
000055b0: 6f77 6e28 2741 6c65 7274 7327 2c20 5b5d  own('Alerts', []
000055c0: 2929 0a0a 2020 2020 6966 206c 656e 286e  ))..    if len(n
000055d0: 6574 776f 726b 5f61 7274 6966 6163 7473  etwork_artifacts
000055e0: 2920 3e20 303a 0a20 2020 2020 2020 2072  ) > 0:.        r
000055f0: 6561 6461 626c 655f 6f75 7470 7574 2e61  eadable_output.a
00005600: 7070 656e 6428 7461 626c 6554 6f4d 6172  ppend(tableToMar
00005610: 6b64 6f77 6e28 274e 6574 776f 726b 2041  kdown('Network A
00005620: 7274 6966 6163 7473 272c 206e 6574 776f  rtifacts', netwo
00005630: 726b 5f61 7274 6966 6163 7473 2929 0a20  rk_artifacts)). 
00005640: 2020 2065 6c73 653a 0a20 2020 2020 2020     else:.       
00005650: 2072 6561 6461 626c 655f 6f75 7470 7574   readable_output
00005660: 2e61 7070 656e 6428 7461 626c 6554 6f4d  .append(tableToM
00005670: 6172 6b64 6f77 6e28 274e 6574 776f 726b  arkdown('Network
00005680: 2041 7274 6966 6163 7473 272c 205b 5d29   Artifacts', [])
00005690: 290a 0a20 2020 2069 6620 6c65 6e28 6669  )..    if len(fi
000056a0: 6c65 5f61 7274 6966 6163 7473 2920 3e20  le_artifacts) > 
000056b0: 303a 0a20 2020 2020 2020 2072 6561 6461  0:.        reada
000056c0: 626c 655f 6f75 7470 7574 2e61 7070 656e  ble_output.appen
000056d0: 6428 7461 626c 6554 6f4d 6172 6b64 6f77  d(tableToMarkdow
000056e0: 6e28 2746 696c 6520 4172 7469 6661 6374  n('File Artifact
000056f0: 7327 2c20 6669 6c65 5f61 7274 6966 6163  s', file_artifac
00005700: 7473 2929 0a20 2020 2065 6c73 653a 0a20  ts)).    else:. 
00005710: 2020 2020 2020 2072 6561 6461 626c 655f         readable_
00005720: 6f75 7470 7574 2e61 7070 656e 6428 7461  output.append(ta
00005730: 626c 6554 6f4d 6172 6b64 6f77 6e28 2746  bleToMarkdown('F
00005740: 696c 6520 4172 7469 6661 6374 7327 2c20  ile Artifacts', 
00005750: 5b5d 2929 0a0a 2020 2020 696e 6369 6465  []))..    incide
00005760: 6e74 2e75 7064 6174 6528 7b0a 2020 2020  nt.update({.    
00005770: 2020 2020 2761 6c65 7274 7327 3a20 636f      'alerts': co
00005780: 6e74 6578 745f 616c 6572 7473 2c0a 2020  ntext_alerts,.  
00005790: 2020 2020 2020 2766 696c 655f 6172 7469        'file_arti
000057a0: 6661 6374 7327 3a20 6669 6c65 5f61 7274  facts': file_art
000057b0: 6966 6163 7473 2c0a 2020 2020 2020 2020  ifacts,.        
000057c0: 276e 6574 776f 726b 5f61 7274 6966 6163  'network_artifac
000057d0: 7473 273a 206e 6574 776f 726b 5f61 7274  ts': network_art
000057e0: 6966 6163 7473 0a20 2020 207d 290a 2020  ifacts.    }).  
000057f0: 2020 6163 636f 756e 745f 636f 6e74 6578    account_contex
00005800: 745f 6f75 7470 7574 203d 2061 7373 6967  t_output = assig
00005810: 6e5f 7061 7261 6d73 282a 2a7b 0a20 2020  n_params(**{.   
00005820: 2020 2020 2027 5573 6572 6e61 6d65 273a       'Username':
00005830: 2069 6e63 6964 656e 742e 6765 7428 2775   incident.get('u
00005840: 7365 7273 272c 2027 2729 0a20 2020 207d  sers', '').    }
00005850: 290a 2020 2020 656e 6470 6f69 6e74 5f63  ).    endpoint_c
00005860: 6f6e 7465 7874 5f6f 7574 7075 7420 3d20  ontext_output = 
00005870: 6173 7369 676e 5f70 6172 616d 7328 2a2a  assign_params(**
00005880: 7b0a 2020 2020 2020 2020 2748 6f73 746e  {.        'Hostn
00005890: 616d 6527 3a20 696e 6369 6465 6e74 2e67  ame': incident.g
000058a0: 6574 2827 686f 7374 7327 2c20 2727 290a  et('hosts', '').
000058b0: 2020 2020 7d29 0a0a 2020 2020 636f 6e74      })..    cont
000058c0: 6578 745f 6f75 7470 7574 203d 207b 6627  ext_output = {f'
000058d0: 7b49 4e54 4547 5241 5449 4f4e 5f43 4f4e  {INTEGRATION_CON
000058e0: 5445 5854 5f42 5241 4e44 7d2e 496e 6369  TEXT_BRAND}.Inci
000058f0: 6465 6e74 2876 616c 2e69 6e63 6964 656e  dent(val.inciden
00005900: 745f 6964 3d3d 6f62 6a2e 696e 6369 6465  t_id==obj.incide
00005910: 6e74 5f69 6429 273a 2069 6e63 6964 656e  nt_id)': inciden
00005920: 747d 0a20 2020 2069 6620 6163 636f 756e  t}.    if accoun
00005930: 745f 636f 6e74 6578 745f 6f75 7470 7574  t_context_output
00005940: 3a0a 2020 2020 2020 2020 636f 6e74 6578  :.        contex
00005950: 745f 6f75 7470 7574 5b27 4163 636f 756e  t_output['Accoun
00005960: 7428 7661 6c2e 5573 6572 6e61 6d65 3d3d  t(val.Username==
00005970: 6f62 6a2e 5573 6572 6e61 6d65 2927 5d20  obj.Username)'] 
00005980: 3d20 6163 636f 756e 745f 636f 6e74 6578  = account_contex
00005990: 745f 6f75 7470 7574 0a20 2020 2069 6620  t_output.    if 
000059a0: 656e 6470 6f69 6e74 5f63 6f6e 7465 7874  endpoint_context
000059b0: 5f6f 7574 7075 743a 0a20 2020 2020 2020  _output:.       
000059c0: 2063 6f6e 7465 7874 5f6f 7574 7075 745b   context_output[
000059d0: 2745 6e64 706f 696e 7428 7661 6c2e 486f  'Endpoint(val.Ho
000059e0: 7374 6e61 6d65 3d3d 6f62 6a2e 486f 7374  stname==obj.Host
000059f0: 6e61 6d65 2927 5d20 3d20 656e 6470 6f69  name)'] = endpoi
00005a00: 6e74 5f63 6f6e 7465 7874 5f6f 7574 7075  nt_context_outpu
00005a10: 740a 0a20 2020 2066 696c 655f 636f 6e74  t..    file_cont
00005a20: 6578 742c 2070 726f 6365 7373 5f63 6f6e  ext, process_con
00005a30: 7465 7874 2c20 646f 6d61 696e 5f63 6f6e  text, domain_con
00005a40: 7465 7874 2c20 6970 5f63 6f6e 7465 7874  text, ip_context
00005a50: 203d 2067 6574 5f69 6e64 6963 6174 6f72   = get_indicator
00005a60: 735f 636f 6e74 6578 7428 696e 6369 6465  s_context(incide
00005a70: 6e74 290a 0a20 2020 2069 6620 6669 6c65  nt)..    if file
00005a80: 5f63 6f6e 7465 7874 3a0a 2020 2020 2020  _context:.      
00005a90: 2020 636f 6e74 6578 745f 6f75 7470 7574    context_output
00005aa0: 5b43 6f6d 6d6f 6e2e 4669 6c65 2e43 4f4e  [Common.File.CON
00005ab0: 5445 5854 5f50 4154 485d 203d 2066 696c  TEXT_PATH] = fil
00005ac0: 655f 636f 6e74 6578 740a 2020 2020 6966  e_context.    if
00005ad0: 2064 6f6d 6169 6e5f 636f 6e74 6578 743a   domain_context:
00005ae0: 0a20 2020 2020 2020 2063 6f6e 7465 7874  .        context
00005af0: 5f6f 7574 7075 745b 436f 6d6d 6f6e 2e44  _output[Common.D
00005b00: 6f6d 6169 6e2e 434f 4e54 4558 545f 5041  omain.CONTEXT_PA
00005b10: 5448 5d20 3d20 646f 6d61 696e 5f63 6f6e  TH] = domain_con
00005b20: 7465 7874 0a20 2020 2069 6620 6970 5f63  text.    if ip_c
00005b30: 6f6e 7465 7874 3a0a 2020 2020 2020 2020  ontext:.        
00005b40: 636f 6e74 6578 745f 6f75 7470 7574 5b43  context_output[C
00005b50: 6f6d 6d6f 6e2e 4950 2e43 4f4e 5445 5854  ommon.IP.CONTEXT
00005b60: 5f50 4154 485d 203d 2069 705f 636f 6e74  _PATH] = ip_cont
00005b70: 6578 740a 2020 2020 6966 2070 726f 6365  ext.    if proce
00005b80: 7373 5f63 6f6e 7465 7874 3a0a 2020 2020  ss_context:.    
00005b90: 2020 2020 636f 6e74 6578 745f 6f75 7470      context_outp
00005ba0: 7574 5b27 5072 6f63 6573 7328 7661 6c2e  ut['Process(val.
00005bb0: 4e61 6d65 2026 2620 7661 6c2e 4e61 6d65  Name && val.Name
00005bc0: 203d 3d20 6f62 6a2e 4e61 6d65 2927 5d20   == obj.Name)'] 
00005bd0: 3d20 7072 6f63 6573 735f 636f 6e74 6578  = process_contex
00005be0: 740a 0a20 2020 2072 6574 7572 6e20 280a  t..    return (.
00005bf0: 2020 2020 2020 2020 275c 6e27 2e6a 6f69          '\n'.joi
00005c00: 6e28 7265 6164 6162 6c65 5f6f 7574 7075  n(readable_outpu
00005c10: 7429 2c0a 2020 2020 2020 2020 636f 6e74  t),.        cont
00005c20: 6578 745f 6f75 7470 7574 2c0a 2020 2020  ext_output,.    
00005c30: 2020 2020 7261 775f 696e 6369 6465 6e74      raw_incident
00005c40: 0a20 2020 2029 0a0a 0a64 6566 2063 7265  .    )...def cre
00005c50: 6174 655f 7061 7273 6564 5f61 6c65 7274  ate_parsed_alert
00005c60: 2870 726f 6475 6374 2c20 7665 6e64 6f72  (product, vendor
00005c70: 2c20 6c6f 6361 6c5f 6970 2c20 6c6f 6361  , local_ip, loca
00005c80: 6c5f 706f 7274 2c20 7265 6d6f 7465 5f69  l_port, remote_i
00005c90: 702c 2072 656d 6f74 655f 706f 7274 2c20  p, remote_port, 
00005ca0: 6576 656e 745f 7469 6d65 7374 616d 702c  event_timestamp,
00005cb0: 2073 6576 6572 6974 792c 0a20 2020 2020   severity,.     
00005cc0: 2020 2020 2020 2020 2020 2020 2020 2020                  
00005cd0: 2020 2061 6c65 7274 5f6e 616d 652c 2061     alert_name, a
00005ce0: 6c65 7274 5f64 6573 6372 6970 7469 6f6e  lert_description
00005cf0: 293a 0a20 2020 2061 6c65 7274 203d 207b  ):.    alert = {
00005d00: 0a20 2020 2020 2020 2022 7072 6f64 7563  .        "produc
00005d10: 7422 3a20 7072 6f64 7563 742c 0a20 2020  t": product,.   
00005d20: 2020 2020 2022 7665 6e64 6f72 223a 2076       "vendor": v
00005d30: 656e 646f 722c 0a20 2020 2020 2020 2022  endor,.        "
00005d40: 6c6f 6361 6c5f 6970 223a 206c 6f63 616c  local_ip": local
00005d50: 5f69 702c 0a20 2020 2020 2020 2022 6c6f  _ip,.        "lo
00005d60: 6361 6c5f 706f 7274 223a 206c 6f63 616c  cal_port": local
00005d70: 5f70 6f72 742c 0a20 2020 2020 2020 2022  _port,.        "
00005d80: 7265 6d6f 7465 5f69 7022 3a20 7265 6d6f  remote_ip": remo
00005d90: 7465 5f69 702c 0a20 2020 2020 2020 2022  te_ip,.        "
00005da0: 7265 6d6f 7465 5f70 6f72 7422 3a20 7265  remote_port": re
00005db0: 6d6f 7465 5f70 6f72 742c 0a20 2020 2020  mote_port,.     
00005dc0: 2020 2022 6576 656e 745f 7469 6d65 7374     "event_timest
00005dd0: 616d 7022 3a20 6576 656e 745f 7469 6d65  amp": event_time
00005de0: 7374 616d 702c 0a20 2020 2020 2020 2022  stamp,.        "
00005df0: 7365 7665 7269 7479 223a 2073 6576 6572  severity": sever
00005e00: 6974 792c 0a20 2020 2020 2020 2022 616c  ity,.        "al
00005e10: 6572 745f 6e61 6d65 223a 2061 6c65 7274  ert_name": alert
00005e20: 5f6e 616d 652c 0a20 2020 2020 2020 2022  _name,.        "
00005e30: 616c 6572 745f 6465 7363 7269 7074 696f  alert_descriptio
00005e40: 6e22 3a20 616c 6572 745f 6465 7363 7269  n": alert_descri
00005e50: 7074 696f 6e0a 2020 2020 7d0a 0a20 2020  ption.    }..   
00005e60: 2072 6574 7572 6e20 616c 6572 740a 0a0a   return alert...
00005e70: 6465 6620 696e 7365 7274 5f70 6172 7365  def insert_parse
00005e80: 645f 616c 6572 745f 636f 6d6d 616e 6428  d_alert_command(
00005e90: 636c 6965 6e74 2c20 6172 6773 293a 0a20  client, args):. 
00005ea0: 2020 2070 726f 6475 6374 203d 2061 7267     product = arg
00005eb0: 732e 6765 7428 2770 726f 6475 6374 2729  s.get('product')
00005ec0: 0a20 2020 2076 656e 646f 7220 3d20 6172  .    vendor = ar
00005ed0: 6773 2e67 6574 2827 7665 6e64 6f72 2729  gs.get('vendor')
00005ee0: 0a20 2020 206c 6f63 616c 5f69 7020 3d20  .    local_ip = 
00005ef0: 6172 6773 2e67 6574 2827 6c6f 6361 6c5f  args.get('local_
00005f00: 6970 2729 0a20 2020 206c 6f63 616c 5f70  ip').    local_p
00005f10: 6f72 7420 3d20 6172 675f 746f 5f69 6e74  ort = arg_to_int
00005f20: 280a 2020 2020 2020 2020 6172 673d 6172  (.        arg=ar
00005f30: 6773 2e67 6574 2827 6c6f 6361 6c5f 706f  gs.get('local_po
00005f40: 7274 2729 2c0a 2020 2020 2020 2020 6172  rt'),.        ar
00005f50: 675f 6e61 6d65 3d27 6c6f 6361 6c5f 706f  g_name='local_po
00005f60: 7274 270a 2020 2020 290a 2020 2020 7265  rt'.    ).    re
00005f70: 6d6f 7465 5f69 7020 3d20 6172 6773 2e67  mote_ip = args.g
00005f80: 6574 2827 7265 6d6f 7465 5f69 7027 290a  et('remote_ip').
00005f90: 2020 2020 7265 6d6f 7465 5f70 6f72 7420      remote_port 
00005fa0: 3d20 6172 675f 746f 5f69 6e74 280a 2020  = arg_to_int(.  
00005fb0: 2020 2020 2020 6172 673d 6172 6773 2e67        arg=args.g
00005fc0: 6574 2827 7265 6d6f 7465 5f70 6f72 7427  et('remote_port'
00005fd0: 292c 0a20 2020 2020 2020 2061 7267 5f6e  ),.        arg_n
00005fe0: 616d 653d 2772 656d 6f74 655f 706f 7274  ame='remote_port
00005ff0: 270a 2020 2020 290a 0a20 2020 2073 6576  '.    )..    sev
00006000: 6572 6974 7920 3d20 6172 6773 2e67 6574  erity = args.get
00006010: 2827 7365 7665 7269 7479 2729 0a20 2020  ('severity').   
00006020: 2061 6c65 7274 5f6e 616d 6520 3d20 6172   alert_name = ar
00006030: 6773 2e67 6574 2827 616c 6572 745f 6e61  gs.get('alert_na
00006040: 6d65 2729 0a20 2020 2061 6c65 7274 5f64  me').    alert_d
00006050: 6573 6372 6970 7469 6f6e 203d 2061 7267  escription = arg
00006060: 732e 6765 7428 2761 6c65 7274 5f64 6573  s.get('alert_des
00006070: 6372 6970 7469 6f6e 272c 2027 2729 0a0a  cription', '')..
00006080: 2020 2020 6966 2061 7267 732e 6765 7428      if args.get(
00006090: 2765 7665 6e74 5f74 696d 6573 7461 6d70  'event_timestamp
000060a0: 2729 2069 7320 4e6f 6e65 3a0a 2020 2020  ') is None:.    
000060b0: 2020 2020 2320 6765 7420 7469 6d65 7374      # get timest
000060c0: 616d 7020 6e6f 7720 6966 206e 6f74 2070  amp now if not p
000060d0: 726f 7669 6465 640a 2020 2020 2020 2020  rovided.        
000060e0: 6576 656e 745f 7469 6d65 7374 616d 7020  event_timestamp 
000060f0: 3d20 696e 7428 726f 756e 6428 7469 6d65  = int(round(time
00006100: 2e74 696d 6528 2920 2a20 3130 3030 2929  .time() * 1000))
00006110: 0a20 2020 2065 6c73 653a 0a20 2020 2020  .    else:.     
00006120: 2020 2065 7665 6e74 5f74 696d 6573 7461     event_timesta
00006130: 6d70 203d 2069 6e74 2861 7267 732e 6765  mp = int(args.ge
00006140: 7428 2765 7665 6e74 5f74 696d 6573 7461  t('event_timesta
00006150: 6d70 2729 290a 0a20 2020 2061 6c65 7274  mp'))..    alert
00006160: 203d 2063 7265 6174 655f 7061 7273 6564   = create_parsed
00006170: 5f61 6c65 7274 280a 2020 2020 2020 2020  _alert(.        
00006180: 7072 6f64 7563 743d 7072 6f64 7563 742c  product=product,
00006190: 0a20 2020 2020 2020 2076 656e 646f 723d  .        vendor=
000061a0: 7665 6e64 6f72 2c0a 2020 2020 2020 2020  vendor,.        
000061b0: 6c6f 6361 6c5f 6970 3d6c 6f63 616c 5f69  local_ip=local_i
000061c0: 702c 0a20 2020 2020 2020 206c 6f63 616c  p,.        local
000061d0: 5f70 6f72 743d 6c6f 6361 6c5f 706f 7274  _port=local_port
000061e0: 2c0a 2020 2020 2020 2020 7265 6d6f 7465  ,.        remote
000061f0: 5f69 703d 7265 6d6f 7465 5f69 702c 0a20  _ip=remote_ip,. 
00006200: 2020 2020 2020 2072 656d 6f74 655f 706f         remote_po
00006210: 7274 3d72 656d 6f74 655f 706f 7274 2c0a  rt=remote_port,.
00006220: 2020 2020 2020 2020 6576 656e 745f 7469          event_ti
00006230: 6d65 7374 616d 703d 6576 656e 745f 7469  mestamp=event_ti
00006240: 6d65 7374 616d 702c 0a20 2020 2020 2020  mestamp,.       
00006250: 2073 6576 6572 6974 793d 7365 7665 7269   severity=severi
00006260: 7479 2c0a 2020 2020 2020 2020 616c 6572  ty,.        aler
00006270: 745f 6e61 6d65 3d61 6c65 7274 5f6e 616d  t_name=alert_nam
00006280: 652c 0a20 2020 2020 2020 2061 6c65 7274  e,.        alert
00006290: 5f64 6573 6372 6970 7469 6f6e 3d61 6c65  _description=ale
000062a0: 7274 5f64 6573 6372 6970 7469 6f6e 0a20  rt_description. 
000062b0: 2020 2029 0a0a 2020 2020 636c 6965 6e74     )..    client
000062c0: 2e69 6e73 6572 745f 616c 6572 7473 285b  .insert_alerts([
000062d0: 616c 6572 745d 290a 0a20 2020 2072 6574  alert])..    ret
000062e0: 7572 6e20 280a 2020 2020 2020 2020 2741  urn (.        'A
000062f0: 6c65 7274 2069 6e73 6572 7465 6420 7375  lert inserted su
00006300: 6363 6573 7366 756c 6c79 272c 0a20 2020  ccessfully',.   
00006310: 2020 2020 204e 6f6e 652c 0a20 2020 2020       None,.     
00006320: 2020 204e 6f6e 650a 2020 2020 290a 0a0a     None.    )...
00006330: 6465 6620 696e 7365 7274 5f63 6566 5f61  def insert_cef_a
00006340: 6c65 7274 735f 636f 6d6d 616e 6428 636c  lerts_command(cl
00006350: 6965 6e74 2c20 6172 6773 293a 0a20 2020  ient, args):.   
00006360: 2023 2070 6172 7369 6e67 2061 6c65 7274   # parsing alert
00006370: 7320 6c69 7374 2e20 7468 6520 7265 6173  s list. the reas
00006380: 6f6e 2077 6520 646f 6e27 7420 7573 6520  on we don't use 
00006390: 6172 6754 6f4c 6973 7420 6973 2062 6563  argToList is bec
000063a0: 6175 7365 2063 6566 5f61 6c65 7274 7320  ause cef_alerts 
000063b0: 636f 756c 6420 636f 6e74 6169 6e20 636f  could contain co
000063c0: 6d6d 6120 282c 2920 736f 0a20 2020 2023  mma (,) so.    #
000063d0: 2077 6520 7368 6f75 6c64 6e27 7420 7370   we shouldn't sp
000063e0: 6c69 7420 7468 656d 2062 7920 636f 6d6d  lit them by comm
000063f0: 610a 2020 2020 616c 6572 7473 203d 2061  a.    alerts = a
00006400: 7267 732e 6765 7428 2763 6566 5f61 6c65  rgs.get('cef_ale
00006410: 7274 7327 290a 2020 2020 6966 2069 7369  rts').    if isi
00006420: 6e73 7461 6e63 6528 616c 6572 7473 2c20  nstance(alerts, 
00006430: 6c69 7374 293a 0a20 2020 2020 2020 2070  list):.        p
00006440: 6173 730a 2020 2020 656c 6966 2069 7369  ass.    elif isi
00006450: 6e73 7461 6e63 6528 616c 6572 7473 2c20  nstance(alerts, 
00006460: 7374 7229 3a0a 2020 2020 2020 2020 6966  str):.        if
00006470: 2061 6c65 7274 735b 305d 203d 3d20 275b   alerts[0] == '[
00006480: 2720 616e 6420 616c 6572 7473 5b2d 315d  ' and alerts[-1]
00006490: 203d 3d20 275d 273a 0a20 2020 2020 2020   == ']':.       
000064a0: 2020 2020 2023 2069 6620 7468 6520 7374       # if the st
000064b0: 7269 6e67 2063 6f6e 7461 696e 7320 5b5d  ring contains []
000064c0: 2069 7420 6d65 616e 7320 6974 2069 7320   it means it is 
000064d0: 6120 6c69 7374 2061 6e64 206d 7573 7420  a list and must 
000064e0: 6265 2070 6172 7365 640a 2020 2020 2020  be parsed.      
000064f0: 2020 2020 2020 616c 6572 7473 203d 206a        alerts = j
00006500: 736f 6e2e 6c6f 6164 7328 616c 6572 7473  son.loads(alerts
00006510: 290a 2020 2020 2020 2020 656c 7365 3a0a  ).        else:.
00006520: 2020 2020 2020 2020 2020 2020 2320 6f74              # ot
00006530: 6865 7277 6973 6520 6974 2069 7320 6120  herwise it is a 
00006540: 7369 6e67 6c65 2061 6c65 7274 0a20 2020  single alert.   
00006550: 2020 2020 2020 2020 2061 6c65 7274 7320           alerts 
00006560: 3d20 5b61 6c65 7274 735d 0a20 2020 2065  = [alerts].    e
00006570: 6c73 653a 0a20 2020 2020 2020 2072 6169  lse:.        rai
00006580: 7365 2056 616c 7565 4572 726f 7228 2749  se ValueError('I
00006590: 6e76 616c 6964 2061 7267 756d 656e 7420  nvalid argument 
000065a0: 2263 6566 5f61 6c65 7274 7322 2e20 4974  "cef_alerts". It
000065b0: 2073 686f 756c 6420 6265 2065 6974 6865   should be eithe
000065c0: 7220 6c69 7374 206f 6620 7374 7269 6e67  r list of string
000065d0: 7320 2863 6566 2061 6c65 7274 7329 2c20  s (cef alerts), 
000065e0: 270a 2020 2020 2020 2020 2020 2020 2020  '.              
000065f0: 2020 2020 2020 2020 2020 2027 6f72 2073             'or s
00006600: 696e 676c 6520 7374 7269 6e67 2729 0a0a  ingle string')..
00006610: 2020 2020 636c 6965 6e74 2e69 6e73 6572      client.inser
00006620: 745f 6365 665f 616c 6572 7473 2861 6c65  t_cef_alerts(ale
00006630: 7274 7329 0a0a 2020 2020 7265 7475 726e  rts)..    return
00006640: 2028 0a20 2020 2020 2020 2027 416c 6572   (.        'Aler
00006650: 7473 2069 6e73 6572 7465 6420 7375 6363  ts inserted succ
00006660: 6573 7366 756c 6c79 272c 0a20 2020 2020  essfully',.     
00006670: 2020 204e 6f6e 652c 0a20 2020 2020 2020     None,.       
00006680: 204e 6f6e 650a 2020 2020 290a 0a0a 6465   None.    )...de
00006690: 6620 736f 7274 5f61 6c6c 5f6c 6973 745f  f sort_all_list_
000066a0: 696e 6369 6465 6e74 5f66 6965 6c64 7328  incident_fields(
000066b0: 696e 6369 6465 6e74 5f64 6174 6129 3a0a  incident_data):.
000066c0: 2020 2020 2222 2253 6f72 7469 6e67 2061      """Sorting a
000066d0: 6c6c 206c 6973 7473 2066 6965 6c64 7320  ll lists fields 
000066e0: 696e 2061 6e20 696e 6369 6465 6e74 202d  in an incident -
000066f0: 2077 6974 686f 7574 2074 6869 732c 2065   without this, e
00006700: 6c65 6d65 6e74 7320 6d61 7920 7368 6966  lements may shif
00006710: 7420 7768 6963 6820 7265 7375 6c74 7320  t which results 
00006720: 696e 2066 616c 7365 0a20 2020 2069 6465  in false.    ide
00006730: 6e74 6966 6963 6174 696f 6e20 6f66 2063  ntification of c
00006740: 6861 6e67 6564 2066 6965 6c64 7322 2222  hanged fields"""
00006750: 0a20 2020 2069 6620 696e 6369 6465 6e74  .    if incident
00006760: 5f64 6174 612e 6765 7428 2768 6f73 7473  _data.get('hosts
00006770: 272c 205b 5d29 3a0a 2020 2020 2020 2020  ', []):.        
00006780: 696e 6369 6465 6e74 5f64 6174 615b 2768  incident_data['h
00006790: 6f73 7473 275d 203d 2073 6f72 7465 6428  osts'] = sorted(
000067a0: 696e 6369 6465 6e74 5f64 6174 612e 6765  incident_data.ge
000067b0: 7428 2768 6f73 7473 272c 205b 5d29 290a  t('hosts', [])).
000067c0: 2020 2020 2020 2020 696e 6369 6465 6e74          incident
000067d0: 5f64 6174 615b 2768 6f73 7473 275d 203d  _data['hosts'] =
000067e0: 205b 686f 7374 2e75 7070 6572 2829 2066   [host.upper() f
000067f0: 6f72 2068 6f73 7420 696e 2069 6e63 6964  or host in incid
00006800: 656e 745f 6461 7461 2e67 6574 2827 686f  ent_data.get('ho
00006810: 7374 7327 2c20 5b5d 295d 0a0a 2020 2020  sts', [])]..    
00006820: 6966 2069 6e63 6964 656e 745f 6461 7461  if incident_data
00006830: 2e67 6574 2827 7573 6572 7327 2c20 5b5d  .get('users', []
00006840: 293a 0a20 2020 2020 2020 2069 6e63 6964  ):.        incid
00006850: 656e 745f 6461 7461 5b27 7573 6572 7327  ent_data['users'
00006860: 5d20 3d20 736f 7274 6564 2869 6e63 6964  ] = sorted(incid
00006870: 656e 745f 6461 7461 2e67 6574 2827 7573  ent_data.get('us
00006880: 6572 7327 2c20 5b5d 2929 0a20 2020 2020  ers', [])).     
00006890: 2020 2069 6e63 6964 656e 745f 6461 7461     incident_data
000068a0: 5b27 7573 6572 7327 5d20 3d20 5b75 7365  ['users'] = [use
000068b0: 722e 7570 7065 7228 2920 666f 7220 7573  r.upper() for us
000068c0: 6572 2069 6e20 696e 6369 6465 6e74 5f64  er in incident_d
000068d0: 6174 612e 6765 7428 2775 7365 7273 272c  ata.get('users',
000068e0: 205b 5d29 5d0a 0a20 2020 2069 6620 696e   [])]..    if in
000068f0: 6369 6465 6e74 5f64 6174 612e 6765 7428  cident_data.get(
00006900: 2769 6e63 6964 656e 745f 736f 7572 6365  'incident_source
00006910: 7327 2c20 5b5d 293a 0a20 2020 2020 2020  s', []):.       
00006920: 2069 6e63 6964 656e 745f 6461 7461 5b27   incident_data['
00006930: 696e 6369 6465 6e74 5f73 6f75 7263 6573  incident_sources
00006940: 275d 203d 2073 6f72 7465 6428 696e 6369  '] = sorted(inci
00006950: 6465 6e74 5f64 6174 612e 6765 7428 2769  dent_data.get('i
00006960: 6e63 6964 656e 745f 736f 7572 6365 7327  ncident_sources'
00006970: 2c20 5b5d 2929 0a0a 2020 2020 6966 2069  , []))..    if i
00006980: 6e63 6964 656e 745f 6461 7461 2e67 6574  ncident_data.get
00006990: 2827 616c 6572 7473 272c 205b 5d29 3a0a  ('alerts', []):.
000069a0: 2020 2020 2020 2020 696e 6369 6465 6e74          incident
000069b0: 5f64 6174 615b 2761 6c65 7274 7327 5d20  _data['alerts'] 
000069c0: 3d20 736f 7274 5f62 795f 6b65 7928 696e  = sort_by_key(in
000069d0: 6369 6465 6e74 5f64 6174 612e 6765 7428  cident_data.get(
000069e0: 2761 6c65 7274 7327 2c20 5b5d 292c 206d  'alerts', []), m
000069f0: 6169 6e5f 6b65 793d 2761 6c65 7274 5f69  ain_key='alert_i
00006a00: 6427 2c20 6661 6c6c 6261 636b 5f6b 6579  d', fallback_key
00006a10: 3d27 6e61 6d65 2729 0a20 2020 2020 2020  ='name').       
00006a20: 2072 6566 6f72 6d61 745f 7375 626c 6973   reformat_sublis
00006a30: 745f 6669 656c 6473 2869 6e63 6964 656e  t_fields(inciden
00006a40: 745f 6461 7461 5b27 616c 6572 7473 275d  t_data['alerts']
00006a50: 290a 0a20 2020 2069 6620 696e 6369 6465  )..    if incide
00006a60: 6e74 5f64 6174 612e 6765 7428 2766 696c  nt_data.get('fil
00006a70: 655f 6172 7469 6661 6374 7327 2c20 5b5d  e_artifacts', []
00006a80: 293a 0a20 2020 2020 2020 2069 6e63 6964  ):.        incid
00006a90: 656e 745f 6461 7461 5b27 6669 6c65 5f61  ent_data['file_a
00006aa0: 7274 6966 6163 7473 275d 203d 2073 6f72  rtifacts'] = sor
00006ab0: 745f 6279 5f6b 6579 2869 6e63 6964 656e  t_by_key(inciden
00006ac0: 745f 6461 7461 2e67 6574 2827 6669 6c65  t_data.get('file
00006ad0: 5f61 7274 6966 6163 7473 272c 205b 5d29  _artifacts', [])
00006ae0: 2c20 6d61 696e 5f6b 6579 3d27 6669 6c65  , main_key='file
00006af0: 5f6e 616d 6527 2c0a 2020 2020 2020 2020  _name',.        
00006b00: 2020 2020 2020 2020 2020 2020 2020 2020                  
00006b10: 2020 2020 2020 2020 2020 2020 2020 2020                  
00006b20: 2020 2020 2020 2020 2020 2020 2020 6661                fa
00006b30: 6c6c 6261 636b 5f6b 6579 3d27 6669 6c65  llback_key='file
00006b40: 5f73 6861 3235 3627 290a 2020 2020 2020  _sha256').      
00006b50: 2020 7265 666f 726d 6174 5f73 7562 6c69    reformat_subli
00006b60: 7374 5f66 6965 6c64 7328 696e 6369 6465  st_fields(incide
00006b70: 6e74 5f64 6174 615b 2766 696c 655f 6172  nt_data['file_ar
00006b80: 7469 6661 6374 7327 5d29 0a0a 2020 2020  tifacts'])..    
00006b90: 6966 2069 6e63 6964 656e 745f 6461 7461  if incident_data
00006ba0: 2e67 6574 2827 6e65 7477 6f72 6b5f 6172  .get('network_ar
00006bb0: 7469 6661 6374 7327 2c20 5b5d 293a 0a20  tifacts', []):. 
00006bc0: 2020 2020 2020 2069 6e63 6964 656e 745f         incident_
00006bd0: 6461 7461 5b27 6e65 7477 6f72 6b5f 6172  data['network_ar
00006be0: 7469 6661 6374 7327 5d20 3d20 736f 7274  tifacts'] = sort
00006bf0: 5f62 795f 6b65 7928 696e 6369 6465 6e74  _by_key(incident
00006c00: 5f64 6174 612e 6765 7428 276e 6574 776f  _data.get('netwo
00006c10: 726b 5f61 7274 6966 6163 7473 272c 205b  rk_artifacts', [
00006c20: 5d29 2c0a 2020 2020 2020 2020 2020 2020  ]),.            
00006c30: 2020 2020 2020 2020 2020 2020 2020 2020                  
00006c40: 2020 2020 2020 2020 2020 2020 2020 2020                  
00006c50: 2020 2020 2020 2020 2020 2020 206d 6169               mai
00006c60: 6e5f 6b65 793d 276e 6574 776f 726b 5f64  n_key='network_d
00006c70: 6f6d 6169 6e27 2c20 6661 6c6c 6261 636b  omain', fallback
00006c80: 5f6b 6579 3d27 6e65 7477 6f72 6b5f 7265  _key='network_re
00006c90: 6d6f 7465 5f69 7027 290a 2020 2020 2020  mote_ip').      
00006ca0: 2020 7265 666f 726d 6174 5f73 7562 6c69    reformat_subli
00006cb0: 7374 5f66 6965 6c64 7328 696e 6369 6465  st_fields(incide
00006cc0: 6e74 5f64 6174 615b 276e 6574 776f 726b  nt_data['network
00006cd0: 5f61 7274 6966 6163 7473 275d 290a 0a0a  _artifacts'])...
00006ce0: 6465 6620 7379 6e63 5f69 6e63 6f6d 696e  def sync_incomin
00006cf0: 675f 696e 6369 6465 6e74 5f6f 776e 6572  g_incident_owner
00006d00: 7328 696e 6369 6465 6e74 5f64 6174 6129  s(incident_data)
00006d10: 3a0a 2020 2020 6966 2069 6e63 6964 656e  :.    if inciden
00006d20: 745f 6461 7461 2e67 6574 2827 6173 7369  t_data.get('assi
00006d30: 676e 6564 5f75 7365 725f 6d61 696c 2729  gned_user_mail')
00006d40: 2061 6e64 2064 656d 6973 746f 2e70 6172   and demisto.par
00006d50: 616d 7328 292e 6765 7428 2773 796e 635f  ams().get('sync_
00006d60: 6f77 6e65 7273 2729 3a0a 2020 2020 2020  owners'):.      
00006d70: 2020 7573 6572 5f69 6e66 6f20 3d20 6465    user_info = de
00006d80: 6d69 7374 6f2e 6669 6e64 5573 6572 2865  misto.findUser(e
00006d90: 6d61 696c 3d69 6e63 6964 656e 745f 6461  mail=incident_da
00006da0: 7461 2e67 6574 2827 6173 7369 676e 6564  ta.get('assigned
00006db0: 5f75 7365 725f 6d61 696c 2729 290a 2020  _user_mail')).  
00006dc0: 2020 2020 2020 6966 2075 7365 725f 696e        if user_in
00006dd0: 666f 3a0a 2020 2020 2020 2020 2020 2020  fo:.            
00006de0: 6465 6d69 7374 6f2e 6465 6275 6728 6622  demisto.debug(f"
00006df0: 5379 6e63 696e 6720 696e 6369 6465 6e74  Syncing incident
00006e00: 206f 776e 6572 733a 2058 4452 2069 6e63   owners: XDR inc
00006e10: 6964 656e 7420 7b69 6e63 6964 656e 745f  ident {incident_
00006e20: 6461 7461 2e67 6574 2827 696e 6369 6465  data.get('incide
00006e30: 6e74 5f69 6427 297d 2c20 220a 2020 2020  nt_id')}, ".    
00006e40: 2020 2020 2020 2020 2020 2020 2020 2020                  
00006e50: 2020 2020 2020 6622 6f77 6e65 7220 7b75        f"owner {u
00006e60: 7365 725f 696e 666f 2e67 6574 2827 7573  ser_info.get('us
00006e70: 6572 6e61 6d65 2729 7d22 290a 2020 2020  ername')}").    
00006e80: 2020 2020 2020 2020 696e 6369 6465 6e74          incident
00006e90: 5f64 6174 615b 276f 776e 6572 275d 203d  _data['owner'] =
00006ea0: 2075 7365 725f 696e 666f 2e67 6574 2827   user_info.get('
00006eb0: 7573 6572 6e61 6d65 2729 0a0a 2020 2020  username')..    
00006ec0: 2020 2020 656c 7365 3a0a 2020 2020 2020      else:.      
00006ed0: 2020 2020 2020 6465 6d69 7374 6f2e 6465        demisto.de
00006ee0: 6275 6728 6622 5468 6520 7573 6572 2061  bug(f"The user a
00006ef0: 7373 6967 6e65 6420 746f 2058 4452 2069  ssigned to XDR i
00006f00: 6e63 6964 656e 7420 7b69 6e63 6964 656e  ncident {inciden
00006f10: 745f 6461 7461 2e67 6574 2827 696e 6369  t_data.get('inci
00006f20: 6465 6e74 5f69 6427 297d 2022 0a20 2020  dent_id')} ".   
00006f30: 2020 2020 2020 2020 2020 2020 2020 2020                  
00006f40: 2020 2020 2020 2066 2269 7320 6e6f 7420         f"is not 
00006f50: 7265 6769 7374 6572 6564 206f 6e20 5853  registered on XS
00006f60: 4f41 5222 290a 0a0a 6465 6620 6861 6e64  OAR")...def hand
00006f70: 6c65 5f69 6e63 6f6d 696e 675f 7573 6572  le_incoming_user
00006f80: 5f75 6e61 7373 6967 6e6d 656e 7428 696e  _unassignment(in
00006f90: 6369 6465 6e74 5f64 6174 6129 3a0a 2020  cident_data):.  
00006fa0: 2020 696e 6369 6465 6e74 5f64 6174 615b    incident_data[
00006fb0: 2761 7373 6967 6e65 645f 7573 6572 5f6d  'assigned_user_m
00006fc0: 6169 6c27 5d20 3d20 2727 0a20 2020 2069  ail'] = ''.    i
00006fd0: 6e63 6964 656e 745f 6461 7461 5b27 6173  ncident_data['as
00006fe0: 7369 676e 6564 5f75 7365 725f 7072 6574  signed_user_pret
00006ff0: 7479 5f6e 616d 6527 5d20 3d20 2727 0a20  ty_name'] = ''. 
00007000: 2020 2069 6620 6465 6d69 7374 6f2e 7061     if demisto.pa
00007010: 7261 6d73 2829 2e67 6574 2827 7379 6e63  rams().get('sync
00007020: 5f6f 776e 6572 7327 293a 0a20 2020 2020  _owners'):.     
00007030: 2020 2064 656d 6973 746f 2e64 6562 7567     demisto.debug
00007040: 2866 2755 6e61 7373 6967 6e69 6e67 206f  (f'Unassigning o
00007050: 776e 6572 2066 726f 6d20 5844 5220 696e  wner from XDR in
00007060: 6369 6465 6e74 207b 696e 6369 6465 6e74  cident {incident
00007070: 5f64 6174 612e 6765 7428 2269 6e63 6964  _data.get("incid
00007080: 656e 745f 6964 2229 7d27 290a 2020 2020  ent_id")}').    
00007090: 2020 2020 696e 6369 6465 6e74 5f64 6174      incident_dat
000070a0: 615b 276f 776e 6572 275d 203d 2027 270a  a['owner'] = ''.
000070b0: 0a0a 6465 6620 6861 6e64 6c65 5f69 6e63  ..def handle_inc
000070c0: 6f6d 696e 675f 636c 6f73 696e 675f 696e  oming_closing_in
000070d0: 6369 6465 6e74 2869 6e63 6964 656e 745f  cident(incident_
000070e0: 6461 7461 293a 0a20 2020 2063 6c6f 7369  data):.    closi
000070f0: 6e67 5f65 6e74 7279 203d 207b 7d20 2023  ng_entry = {}  #
00007100: 2074 7970 653a 2044 6963 740a 2020 2020   type: Dict.    
00007110: 6966 2069 6e63 6964 656e 745f 6461 7461  if incident_data
00007120: 2e67 6574 2827 7374 6174 7573 2729 2069  .get('status') i
00007130: 6e20 5844 525f 5245 534f 4c56 4544 5f53  n XDR_RESOLVED_S
00007140: 5441 5455 535f 544f 5f58 534f 4152 3a0a  TATUS_TO_XSOAR:.
00007150: 2020 2020 2020 2020 6465 6d69 7374 6f2e          demisto.
00007160: 6465 6275 6728 6622 436c 6f73 696e 6720  debug(f"Closing 
00007170: 5844 5220 6973 7375 6520 7b69 6e63 6964  XDR issue {incid
00007180: 656e 745f 6461 7461 2e67 6574 2827 696e  ent_data.get('in
00007190: 6369 6465 6e74 5f69 6427 297d 2229 0a20  cident_id')}"). 
000071a0: 2020 2020 2020 2063 6c6f 7369 6e67 5f65         closing_e
000071b0: 6e74 7279 203d 207b 0a20 2020 2020 2020  ntry = {.       
000071c0: 2020 2020 2027 5479 7065 273a 2045 6e74       'Type': Ent
000071d0: 7279 5479 7065 2e4e 4f54 452c 0a20 2020  ryType.NOTE,.   
000071e0: 2020 2020 2020 2020 2027 436f 6e74 656e           'Conten
000071f0: 7473 273a 207b 0a20 2020 2020 2020 2020  ts': {.         
00007200: 2020 2020 2020 2027 6462 6f74 496e 6369         'dbotInci
00007210: 6465 6e74 436c 6f73 6527 3a20 5472 7565  dentClose': True
00007220: 2c0a 2020 2020 2020 2020 2020 2020 2020  ,.              
00007230: 2020 2763 6c6f 7365 5265 6173 6f6e 273a    'closeReason':
00007240: 2058 4452 5f52 4553 4f4c 5645 445f 5354   XDR_RESOLVED_ST
00007250: 4154 5553 5f54 4f5f 5853 4f41 522e 6765  ATUS_TO_XSOAR.ge
00007260: 7428 696e 6369 6465 6e74 5f64 6174 612e  t(incident_data.
00007270: 6765 7428 2273 7461 7475 7322 2929 2c0a  get("status")),.
00007280: 2020 2020 2020 2020 2020 2020 2020 2020                  
00007290: 2763 6c6f 7365 4e6f 7465 7327 3a20 6627  'closeNotes': f'
000072a0: 7b4d 4952 524f 525f 494e 5f43 4c4f 5345  {MIRROR_IN_CLOSE
000072b0: 5f52 4541 534f 4e7d 5c6e 7b69 6e63 6964  _REASON}\n{incid
000072c0: 656e 745f 6461 7461 2e67 6574 2822 7265  ent_data.get("re
000072d0: 736f 6c76 655f 636f 6d6d 656e 7422 2c22  solve_comment","
000072e0: 2229 7d27 0a20 2020 2020 2020 2020 2020  ")}'.           
000072f0: 207d 2c0a 2020 2020 2020 2020 2020 2020   },.            
00007300: 2743 6f6e 7465 6e74 7346 6f72 6d61 7427  'ContentsFormat'
00007310: 3a20 456e 7472 7946 6f72 6d61 742e 4a53  : EntryFormat.JS
00007320: 4f4e 0a20 2020 2020 2020 207d 0a20 2020  ON.        }.   
00007330: 2020 2020 2069 6e63 6964 656e 745f 6461       incident_da
00007340: 7461 5b27 636c 6f73 6552 6561 736f 6e27  ta['closeReason'
00007350: 5d20 3d20 636c 6f73 696e 675f 656e 7472  ] = closing_entr
00007360: 795b 2743 6f6e 7465 6e74 7327 5d5b 2763  y['Contents']['c
00007370: 6c6f 7365 5265 6173 6f6e 275d 0a20 2020  loseReason'].   
00007380: 2020 2020 2069 6e63 6964 656e 745f 6461       incident_da
00007390: 7461 5b27 636c 6f73 654e 6f74 6573 275d  ta['closeNotes']
000073a0: 203d 2063 6c6f 7369 6e67 5f65 6e74 7279   = closing_entry
000073b0: 5b27 436f 6e74 656e 7473 275d 5b27 636c  ['Contents']['cl
000073c0: 6f73 654e 6f74 6573 275d 0a0a 2020 2020  oseNotes']..    
000073d0: 2020 2020 6966 2069 6e63 6964 656e 745f      if incident_
000073e0: 6461 7461 2e67 6574 2827 7374 6174 7573  data.get('status
000073f0: 2729 203d 3d20 2772 6573 6f6c 7665 645f  ') == 'resolved_
00007400: 6b6e 6f77 6e5f 6973 7375 6527 3a0a 2020  known_issue':.  
00007410: 2020 2020 2020 2020 2020 636c 6f73 655f            close_
00007420: 6e6f 7465 7320 3d20 6627 4b6e 6f77 6e20  notes = f'Known 
00007430: 4973 7375 652e 5c6e 7b69 6e63 6964 656e  Issue.\n{inciden
00007440: 745f 6461 7461 2e67 6574 2822 636c 6f73  t_data.get("clos
00007450: 654e 6f74 6573 222c 2022 2229 7d27 0a20  eNotes", "")}'. 
00007460: 2020 2020 2020 2020 2020 2063 6c6f 7369             closi
00007470: 6e67 5f65 6e74 7279 5b27 436f 6e74 656e  ng_entry['Conten
00007480: 7473 275d 5b27 636c 6f73 654e 6f74 6573  ts']['closeNotes
00007490: 275d 203d 2063 6c6f 7365 5f6e 6f74 6573  '] = close_notes
000074a0: 0a20 2020 2020 2020 2020 2020 2069 6e63  .            inc
000074b0: 6964 656e 745f 6461 7461 5b27 636c 6f73  ident_data['clos
000074c0: 654e 6f74 6573 275d 203d 2063 6c6f 7365  eNotes'] = close
000074d0: 5f6e 6f74 6573 0a0a 2020 2020 7265 7475  _notes..    retu
000074e0: 726e 2063 6c6f 7369 6e67 5f65 6e74 7279  rn closing_entry
000074f0: 0a0a 0a64 6566 2067 6574 5f6d 6170 7069  ...def get_mappi
00007500: 6e67 5f66 6965 6c64 735f 636f 6d6d 616e  ng_fields_comman
00007510: 6428 293a 0a20 2020 2078 6472 5f69 6e63  d():.    xdr_inc
00007520: 6964 656e 745f 7479 7065 5f73 6368 656d  ident_type_schem
00007530: 6520 3d20 5363 6865 6d65 5479 7065 4d61  e = SchemeTypeMa
00007540: 7070 696e 6728 7479 7065 5f6e 616d 653d  pping(type_name=
00007550: 5844 525f 494e 4349 4445 4e54 5f54 5950  XDR_INCIDENT_TYP
00007560: 455f 4e41 4d45 290a 2020 2020 666f 7220  E_NAME).    for 
00007570: 6669 656c 6420 696e 2058 4452 5f49 4e43  field in XDR_INC
00007580: 4944 454e 545f 4649 454c 4453 3a0a 2020  IDENT_FIELDS:.  
00007590: 2020 2020 2020 7864 725f 696e 6369 6465        xdr_incide
000075a0: 6e74 5f74 7970 655f 7363 6865 6d65 2e61  nt_type_scheme.a
000075b0: 6464 5f66 6965 6c64 286e 616d 653d 6669  dd_field(name=fi
000075c0: 656c 642c 2064 6573 6372 6970 7469 6f6e  eld, description
000075d0: 3d58 4452 5f49 4e43 4944 454e 545f 4649  =XDR_INCIDENT_FI
000075e0: 454c 4453 5b66 6965 6c64 5d2e 6765 7428  ELDS[field].get(
000075f0: 2764 6573 6372 6970 7469 6f6e 2729 290a  'description')).
00007600: 0a20 2020 206d 6170 7069 6e67 5f72 6573  .    mapping_res
00007610: 706f 6e73 6520 3d20 4765 744d 6170 7069  ponse = GetMappi
00007620: 6e67 4669 656c 6473 5265 7370 6f6e 7365  ngFieldsResponse
00007630: 2829 0a20 2020 206d 6170 7069 6e67 5f72  ().    mapping_r
00007640: 6573 706f 6e73 652e 6164 645f 7363 6865  esponse.add_sche
00007650: 6d65 5f74 7970 6528 7864 725f 696e 6369  me_type(xdr_inci
00007660: 6465 6e74 5f74 7970 655f 7363 6865 6d65  dent_type_scheme
00007670: 290a 0a20 2020 2072 6574 7572 6e20 6d61  )..    return ma
00007680: 7070 696e 675f 7265 7370 6f6e 7365 0a0a  pping_response..
00007690: 0a64 6566 2067 6574 5f6d 6f64 6966 6965  .def get_modifie
000076a0: 645f 7265 6d6f 7465 5f64 6174 615f 636f  d_remote_data_co
000076b0: 6d6d 616e 6428 636c 6965 6e74 2c20 6172  mmand(client, ar
000076c0: 6773 293a 0a20 2020 2072 656d 6f74 655f  gs):.    remote_
000076d0: 6172 6773 203d 2047 6574 4d6f 6469 6669  args = GetModifi
000076e0: 6564 5265 6d6f 7465 4461 7461 4172 6773  edRemoteDataArgs
000076f0: 2861 7267 7329 0a20 2020 206c 6173 745f  (args).    last_
00007700: 7570 6461 7465 203d 2072 656d 6f74 655f  update = remote_
00007710: 6172 6773 2e6c 6173 745f 7570 6461 7465  args.last_update
00007720: 2020 2320 496e 2074 6865 2066 6972 7374    # In the first
00007730: 2072 756e 2c20 7468 6973 2076 616c 7565   run, this value
00007740: 2077 696c 6c20 6265 2073 6574 2074 6f20   will be set to 
00007750: 3120 6d69 6e75 7465 2065 6172 6c69 6572  1 minute earlier
00007760: 0a0a 2020 2020 6465 6d69 7374 6f2e 6465  ..    demisto.de
00007770: 6275 6728 6627 5065 7266 6f72 6d69 6e67  bug(f'Performing
00007780: 2067 6574 2d6d 6f64 6966 6965 642d 7265   get-modified-re
00007790: 6d6f 7465 2d64 6174 6120 636f 6d6d 616e  mote-data comman
000077a0: 642e 204c 6173 7420 7570 6461 7465 2069  d. Last update i
000077b0: 733a 207b 6c61 7374 5f75 7064 6174 657d  s: {last_update}
000077c0: 2729 0a0a 2020 2020 6c61 7374 5f75 7064  ')..    last_upd
000077d0: 6174 655f 7574 6320 3d20 6461 7465 7061  ate_utc = datepa
000077e0: 7273 6572 2e70 6172 7365 286c 6173 745f  rser.parse(last_
000077f0: 7570 6461 7465 2c20 7365 7474 696e 6773  update, settings
00007800: 3d7b 2754 494d 455a 4f4e 4527 3a20 2755  ={'TIMEZONE': 'U
00007810: 5443 277d 2920 2023 2063 6f6e 7665 7274  TC'})  # convert
00007820: 2074 6f20 7574 6320 666f 726d 6174 0a20   to utc format. 
00007830: 2020 2069 6620 6c61 7374 5f75 7064 6174     if last_updat
00007840: 655f 7574 633a 0a20 2020 2020 2020 206c  e_utc:.        l
00007850: 6173 745f 7570 6461 7465 5f77 6974 686f  ast_update_witho
00007860: 7574 5f6d 7320 3d20 6c61 7374 5f75 7064  ut_ms = last_upd
00007870: 6174 655f 7574 632e 6973 6f66 6f72 6d61  ate_utc.isoforma
00007880: 7428 292e 7370 6c69 7428 272e 2729 5b30  t().split('.')[0
00007890: 5d0a 0a20 2020 2072 6177 5f69 6e63 6964  ]..    raw_incid
000078a0: 656e 7473 203d 2063 6c69 656e 742e 6765  ents = client.ge
000078b0: 745f 696e 6369 6465 6e74 7328 6774 655f  t_incidents(gte_
000078c0: 6d6f 6469 6669 6361 7469 6f6e 5f74 696d  modification_tim
000078d0: 653d 6c61 7374 5f75 7064 6174 655f 7769  e=last_update_wi
000078e0: 7468 6f75 745f 6d73 2c20 6c69 6d69 743d  thout_ms, limit=
000078f0: 3130 3029 0a0a 2020 2020 6d6f 6469 6669  100)..    modifi
00007900: 6564 5f69 6e63 6964 656e 745f 6964 7320  ed_incident_ids 
00007910: 3d20 6c69 7374 2829 0a20 2020 2066 6f72  = list().    for
00007920: 2072 6177 5f69 6e63 6964 656e 7420 696e   raw_incident in
00007930: 2072 6177 5f69 6e63 6964 656e 7473 3a0a   raw_incidents:.
00007940: 2020 2020 2020 2020 696e 6369 6465 6e74          incident
00007950: 5f69 6420 3d20 7261 775f 696e 6369 6465  _id = raw_incide
00007960: 6e74 2e67 6574 2827 696e 6369 6465 6e74  nt.get('incident
00007970: 5f69 6427 290a 2020 2020 2020 2020 6d6f  _id').        mo
00007980: 6469 6669 6564 5f69 6e63 6964 656e 745f  dified_incident_
00007990: 6964 732e 6170 7065 6e64 2869 6e63 6964  ids.append(incid
000079a0: 656e 745f 6964 290a 0a20 2020 2072 6574  ent_id)..    ret
000079b0: 7572 6e20 4765 744d 6f64 6966 6965 6452  urn GetModifiedR
000079c0: 656d 6f74 6544 6174 6152 6573 706f 6e73  emoteDataRespons
000079d0: 6528 6d6f 6469 6669 6564 5f69 6e63 6964  e(modified_incid
000079e0: 656e 745f 6964 7329 0a0a 0a64 6566 2067  ent_ids)...def g
000079f0: 6574 5f72 656d 6f74 655f 6461 7461 5f63  et_remote_data_c
00007a00: 6f6d 6d61 6e64 2863 6c69 656e 742c 2061  ommand(client, a
00007a10: 7267 7329 3a0a 2020 2020 7265 6d6f 7465  rgs):.    remote
00007a20: 5f61 7267 7320 3d20 4765 7452 656d 6f74  _args = GetRemot
00007a30: 6544 6174 6141 7267 7328 6172 6773 290a  eDataArgs(args).
00007a40: 2020 2020 6465 6d69 7374 6f2e 6465 6275      demisto.debu
00007a50: 6728 6627 5065 7266 6f72 6d69 6e67 2067  g(f'Performing g
00007a60: 6574 2d72 656d 6f74 652d 6461 7461 2063  et-remote-data c
00007a70: 6f6d 6d61 6e64 2077 6974 6820 696e 6369  ommand with inci
00007a80: 6465 6e74 2069 643a 207b 7265 6d6f 7465  dent id: {remote
00007a90: 5f61 7267 732e 7265 6d6f 7465 5f69 6e63  _args.remote_inc
00007aa0: 6964 656e 745f 6964 7d27 290a 0a20 2020  ident_id}')..   
00007ab0: 2069 6e63 6964 656e 745f 6461 7461 203d   incident_data =
00007ac0: 207b 7d0a 2020 2020 7472 793a 0a20 2020   {}.    try:.   
00007ad0: 2020 2020 2023 2077 6865 6e20 4465 6d69       # when Demi
00007ae0: 7374 6f20 7665 7273 696f 6e20 6973 2036  sto version is 6
00007af0: 2e31 2e30 2061 6e64 2061 626f 7665 2c20  .1.0 and above, 
00007b00: 7468 6973 2063 6f6d 6d61 6e64 2077 696c  this command wil
00007b10: 6c20 6f6e 6c79 2062 6520 6175 746f 6d61  l only be automa
00007b20: 7469 6361 6c6c 7920 6578 6563 7574 6564  tically executed
00007b30: 206f 6e20 696e 6369 6465 6e74 730a 2020   on incidents.  
00007b40: 2020 2020 2020 2320 7265 7475 726e 6564        # returned
00007b50: 2066 726f 6d20 6765 745f 6d6f 6469 6669   from get_modifi
00007b60: 6564 5f72 656d 6f74 655f 6461 7461 5f63  ed_remote_data_c
00007b70: 6f6d 6d61 6e64 2073 6f20 7765 2077 616e  ommand so we wan
00007b80: 7420 746f 2070 6572 666f 726d 2065 7874  t to perform ext
00007b90: 7261 2d64 6174 6120 7265 7175 6573 7420  ra-data request 
00007ba0: 6f6e 2074 686f 7365 2069 6e63 6964 656e  on those inciden
00007bb0: 7473 2e0a 2020 2020 2020 2020 7265 7475  ts..        retu
00007bc0: 726e 5f6f 6e6c 795f 7570 6461 7465 645f  rn_only_updated_
00007bd0: 696e 6369 6465 6e74 203d 206e 6f74 2069  incident = not i
00007be0: 735f 6465 6d69 7374 6f5f 7665 7273 696f  s_demisto_versio
00007bf0: 6e5f 6765 2827 362e 312e 3027 2920 2023  n_ge('6.1.0')  #
00007c00: 2054 7275 6520 6966 2076 6572 7369 6f6e   True if version
00007c10: 2069 7320 6265 6c6f 7720 362e 3120 656c   is below 6.1 el
00007c20: 7365 2046 616c 7365 0a0a 2020 2020 2020  se False..      
00007c30: 2020 696e 6369 6465 6e74 5f64 6174 6120    incident_data 
00007c40: 3d20 6765 745f 696e 6369 6465 6e74 5f65  = get_incident_e
00007c50: 7874 7261 5f64 6174 615f 636f 6d6d 616e  xtra_data_comman
00007c60: 6428 636c 6965 6e74 2c20 7b22 696e 6369  d(client, {"inci
00007c70: 6465 6e74 5f69 6422 3a20 7265 6d6f 7465  dent_id": remote
00007c80: 5f61 7267 732e 7265 6d6f 7465 5f69 6e63  _args.remote_inc
00007c90: 6964 656e 745f 6964 2c0a 2020 2020 2020  ident_id,.      
00007ca0: 2020 2020 2020 2020 2020 2020 2020 2020                  
00007cb0: 2020 2020 2020 2020 2020 2020 2020 2020                  
00007cc0: 2020 2020 2020 2020 2020 2020 2020 2020                  
00007cd0: 2020 2020 2020 2020 2020 2022 616c 6572             "aler
00007ce0: 7473 5f6c 696d 6974 223a 2031 3030 302c  ts_limit": 1000,
00007cf0: 0a20 2020 2020 2020 2020 2020 2020 2020  .               
00007d00: 2020 2020 2020 2020 2020 2020 2020 2020                  
00007d10: 2020 2020 2020 2020 2020 2020 2020 2020                  
00007d20: 2020 2020 2020 2020 2020 2020 2020 2020                  
00007d30: 2020 2272 6574 7572 6e5f 6f6e 6c79 5f75    "return_only_u
00007d40: 7064 6174 6564 5f69 6e63 6964 656e 7422  pdated_incident"
00007d50: 3a20 7265 7475 726e 5f6f 6e6c 795f 7570  : return_only_up
00007d60: 6461 7465 645f 696e 6369 6465 6e74 2c0a  dated_incident,.
00007d70: 2020 2020 2020 2020 2020 2020 2020 2020                  
00007d80: 2020 2020 2020 2020 2020 2020 2020 2020                  
00007d90: 2020 2020 2020 2020 2020 2020 2020 2020                  
00007da0: 2020 2020 2020 2020 2020 2020 2020 2020                  
00007db0: 2022 6c61 7374 5f75 7064 6174 6522 3a20   "last_update": 
00007dc0: 7265 6d6f 7465 5f61 7267 732e 6c61 7374  remote_args.last
00007dd0: 5f75 7064 6174 657d 290a 2020 2020 2020  _update}).      
00007de0: 2020 6966 2027 5468 6520 696e 6369 6465    if 'The incide
00007df0: 6e74 2077 6173 206e 6f74 206d 6f64 6966  nt was not modif
00007e00: 6965 6427 206e 6f74 2069 6e20 696e 6369  ied' not in inci
00007e10: 6465 6e74 5f64 6174 615b 305d 3a0a 2020  dent_data[0]:.  
00007e20: 2020 2020 2020 2020 2020 6465 6d69 7374            demist
00007e30: 6f2e 6465 6275 6728 6622 5570 6461 7469  o.debug(f"Updati
00007e40: 6e67 2058 4452 2069 6e63 6964 656e 7420  ng XDR incident 
00007e50: 7b72 656d 6f74 655f 6172 6773 2e72 656d  {remote_args.rem
00007e60: 6f74 655f 696e 6369 6465 6e74 5f69 647d  ote_incident_id}
00007e70: 2229 0a0a 2020 2020 2020 2020 2020 2020  ")..            
00007e80: 696e 6369 6465 6e74 5f64 6174 6120 3d20  incident_data = 
00007e90: 696e 6369 6465 6e74 5f64 6174 615b 325d  incident_data[2]
00007ea0: 2e67 6574 2827 696e 6369 6465 6e74 2729  .get('incident')
00007eb0: 0a20 2020 2020 2020 2020 2020 2069 6e63  .            inc
00007ec0: 6964 656e 745f 6461 7461 5b27 6964 275d  ident_data['id']
00007ed0: 203d 2069 6e63 6964 656e 745f 6461 7461   = incident_data
00007ee0: 2e67 6574 2827 696e 6369 6465 6e74 5f69  .get('incident_i
00007ef0: 6427 290a 0a20 2020 2020 2020 2020 2020  d')..           
00007f00: 2073 6f72 745f 616c 6c5f 6c69 7374 5f69   sort_all_list_i
00007f10: 6e63 6964 656e 745f 6669 656c 6473 2869  ncident_fields(i
00007f20: 6e63 6964 656e 745f 6461 7461 290a 0a20  ncident_data).. 
00007f30: 2020 2020 2020 2020 2020 2023 2064 656c             # del
00007f40: 6574 696e 6720 6372 6561 7469 6f6e 2074  eting creation t
00007f50: 696d 6520 6173 2069 7420 6b65 6570 7320  ime as it keeps 
00007f60: 7570 6461 7469 6e67 2069 6e20 7468 6520  updating in the 
00007f70: 7379 7374 656d 0a20 2020 2020 2020 2020  system.         
00007f80: 2020 2064 656c 2069 6e63 6964 656e 745f     del incident_
00007f90: 6461 7461 5b27 6372 6561 7469 6f6e 5f74  data['creation_t
00007fa0: 696d 6527 5d0a 0a20 2020 2020 2020 2020  ime']..         
00007fb0: 2020 2023 2068 616e 646c 6520 756e 6173     # handle unas
00007fc0: 6967 6e6d 656e 740a 2020 2020 2020 2020  ignment.        
00007fd0: 2020 2020 6966 2069 6e63 6964 656e 745f      if incident_
00007fe0: 6461 7461 2e67 6574 2827 6173 7369 676e  data.get('assign
00007ff0: 6564 5f75 7365 725f 6d61 696c 2729 2069  ed_user_mail') i
00008000: 7320 4e6f 6e65 3a0a 2020 2020 2020 2020  s None:.        
00008010: 2020 2020 2020 2020 6861 6e64 6c65 5f69          handle_i
00008020: 6e63 6f6d 696e 675f 7573 6572 5f75 6e61  ncoming_user_una
00008030: 7373 6967 6e6d 656e 7428 696e 6369 6465  ssignment(incide
00008040: 6e74 5f64 6174 6129 0a0a 2020 2020 2020  nt_data)..      
00008050: 2020 2020 2020 656c 7365 3a0a 2020 2020        else:.    
00008060: 2020 2020 2020 2020 2020 2020 2320 6861              # ha
00008070: 6e64 6c65 206f 776e 6572 2073 796e 630a  ndle owner sync.
00008080: 2020 2020 2020 2020 2020 2020 2020 2020                  
00008090: 7379 6e63 5f69 6e63 6f6d 696e 675f 696e  sync_incoming_in
000080a0: 6369 6465 6e74 5f6f 776e 6572 7328 696e  cident_owners(in
000080b0: 6369 6465 6e74 5f64 6174 6129 0a0a 2020  cident_data)..  
000080c0: 2020 2020 2020 2020 2020 2320 6861 6e64            # hand
000080d0: 6c65 2063 6c6f 7365 6420 6973 7375 6520  le closed issue 
000080e0: 696e 2058 4452 2061 6e64 2068 616e 646c  in XDR and handl
000080f0: 6520 6f75 7467 6f69 6e67 2065 7272 6f72  e outgoing error
00008100: 2065 6e74 7279 0a20 2020 2020 2020 2020   entry.         
00008110: 2020 2065 6e74 7269 6573 203d 205b 6861     entries = [ha
00008120: 6e64 6c65 5f69 6e63 6f6d 696e 675f 636c  ndle_incoming_cl
00008130: 6f73 696e 675f 696e 6369 6465 6e74 2869  osing_incident(i
00008140: 6e63 6964 656e 745f 6461 7461 295d 0a0a  ncident_data)]..
00008150: 2020 2020 2020 2020 2020 2020 7265 666f              refo
00008160: 726d 6174 7465 645f 656e 7472 6965 7320  rmatted_entries 
00008170: 3d20 5b5d 0a20 2020 2020 2020 2020 2020  = [].           
00008180: 2066 6f72 2065 6e74 7279 2069 6e20 656e   for entry in en
00008190: 7472 6965 733a 0a20 2020 2020 2020 2020  tries:.         
000081a0: 2020 2020 2020 2069 6620 656e 7472 793a         if entry:
000081b0: 0a20 2020 2020 2020 2020 2020 2020 2020  .               
000081c0: 2020 2020 2072 6566 6f72 6d61 7474 6564       reformatted
000081d0: 5f65 6e74 7269 6573 2e61 7070 656e 6428  _entries.append(
000081e0: 656e 7472 7929 0a0a 2020 2020 2020 2020  entry)..        
000081f0: 2020 2020 696e 6369 6465 6e74 5f64 6174      incident_dat
00008200: 615b 2769 6e5f 6d69 7272 6f72 5f65 7272  a['in_mirror_err
00008210: 6f72 275d 203d 2027 270a 0a20 2020 2020  or'] = ''..     
00008220: 2020 2020 2020 2072 6574 7572 6e20 4765         return Ge
00008230: 7452 656d 6f74 6544 6174 6152 6573 706f  tRemoteDataRespo
00008240: 6e73 6528 0a20 2020 2020 2020 2020 2020  nse(.           
00008250: 2020 2020 206d 6972 726f 7265 645f 6f62       mirrored_ob
00008260: 6a65 6374 3d69 6e63 6964 656e 745f 6461  ject=incident_da
00008270: 7461 2c0a 2020 2020 2020 2020 2020 2020  ta,.            
00008280: 2020 2020 656e 7472 6965 733d 7265 666f      entries=refo
00008290: 726d 6174 7465 645f 656e 7472 6965 730a  rmatted_entries.
000082a0: 2020 2020 2020 2020 2020 2020 290a 0a20              ).. 
000082b0: 2020 2020 2020 2065 6c73 653a 2020 2320         else:  # 
000082c0: 6e6f 206e 6565 6420 746f 2075 7064 6174  no need to updat
000082d0: 6520 7468 6973 2069 6e63 6964 656e 740a  e this incident.
000082e0: 2020 2020 2020 2020 2020 2020 696e 6369              inci
000082f0: 6465 6e74 5f64 6174 6120 3d20 7b0a 2020  dent_data = {.  
00008300: 2020 2020 2020 2020 2020 2020 2020 2769                'i
00008310: 6427 3a20 7265 6d6f 7465 5f61 7267 732e  d': remote_args.
00008320: 7265 6d6f 7465 5f69 6e63 6964 656e 745f  remote_incident_
00008330: 6964 2c0a 2020 2020 2020 2020 2020 2020  id,.            
00008340: 2020 2020 2769 6e5f 6d69 7272 6f72 5f65      'in_mirror_e
00008350: 7272 6f72 273a 2022 220a 2020 2020 2020  rror': "".      
00008360: 2020 2020 2020 7d0a 0a20 2020 2020 2020        }..       
00008370: 2020 2020 2072 6574 7572 6e20 4765 7452       return GetR
00008380: 656d 6f74 6544 6174 6152 6573 706f 6e73  emoteDataRespons
00008390: 6528 0a20 2020 2020 2020 2020 2020 2020  e(.             
000083a0: 2020 206d 6972 726f 7265 645f 6f62 6a65     mirrored_obje
000083b0: 6374 3d69 6e63 6964 656e 745f 6461 7461  ct=incident_data
000083c0: 2c0a 2020 2020 2020 2020 2020 2020 2020  ,.              
000083d0: 2020 656e 7472 6965 733d 5b5d 0a20 2020    entries=[].   
000083e0: 2020 2020 2020 2020 2029 0a0a 2020 2020           )..    
000083f0: 6578 6365 7074 2045 7863 6570 7469 6f6e  except Exception
00008400: 2061 7320 653a 0a20 2020 2020 2020 2064   as e:.        d
00008410: 656d 6973 746f 2e64 6562 7567 2866 2245  emisto.debug(f"E
00008420: 7272 6f72 2069 6e20 5844 5220 696e 636f  rror in XDR inco
00008430: 6d69 6e67 206d 6972 726f 7220 666f 7220  ming mirror for 
00008440: 696e 6369 6465 6e74 207b 7265 6d6f 7465  incident {remote
00008450: 5f61 7267 732e 7265 6d6f 7465 5f69 6e63  _args.remote_inc
00008460: 6964 656e 745f 6964 7d20 5c6e 220a 2020  ident_id} \n".  
00008470: 2020 2020 2020 2020 2020 2020 2020 2020                  
00008480: 2020 2020 6622 4572 726f 7220 6d65 7373      f"Error mess
00008490: 6167 653a 207b 7374 7228 6529 7d22 290a  age: {str(e)}").
000084a0: 0a20 2020 2020 2020 2069 6620 2252 6174  .        if "Rat
000084b0: 6520 6c69 6d69 7420 6578 6365 6564 6564  e limit exceeded
000084c0: 2220 696e 2073 7472 2865 293a 0a20 2020  " in str(e):.   
000084d0: 2020 2020 2020 2020 2072 6574 7572 6e5f           return_
000084e0: 6572 726f 7228 2241 5049 2072 6174 6520  error("API rate 
000084f0: 6c69 6d69 7422 290a 0a20 2020 2020 2020  limit")..       
00008500: 2069 6620 696e 6369 6465 6e74 5f64 6174   if incident_dat
00008510: 613a 0a20 2020 2020 2020 2020 2020 2069  a:.            i
00008520: 6e63 6964 656e 745f 6461 7461 5b27 696e  ncident_data['in
00008530: 5f6d 6972 726f 725f 6572 726f 7227 5d20  _mirror_error'] 
00008540: 3d20 7374 7228 6529 0a20 2020 2020 2020  = str(e).       
00008550: 2020 2020 2073 6f72 745f 616c 6c5f 6c69       sort_all_li
00008560: 7374 5f69 6e63 6964 656e 745f 6669 656c  st_incident_fiel
00008570: 6473 2869 6e63 6964 656e 745f 6461 7461  ds(incident_data
00008580: 290a 0a20 2020 2020 2020 2020 2020 2023  )..            #
00008590: 2064 656c 6574 696e 6720 6372 6561 7469   deleting creati
000085a0: 6f6e 2074 696d 6520 6173 2069 7420 6b65  on time as it ke
000085b0: 6570 7320 7570 6461 7469 6e67 2069 6e20  eps updating in 
000085c0: 7468 6520 7379 7374 656d 0a20 2020 2020  the system.     
000085d0: 2020 2020 2020 2064 656c 2069 6e63 6964         del incid
000085e0: 656e 745f 6461 7461 5b27 6372 6561 7469  ent_data['creati
000085f0: 6f6e 5f74 696d 6527 5d0a 0a20 2020 2020  on_time']..     
00008600: 2020 2065 6c73 653a 0a20 2020 2020 2020     else:.       
00008610: 2020 2020 2069 6e63 6964 656e 745f 6461       incident_da
00008620: 7461 203d 207b 0a20 2020 2020 2020 2020  ta = {.         
00008630: 2020 2020 2020 2027 6964 273a 2072 656d         'id': rem
00008640: 6f74 655f 6172 6773 2e72 656d 6f74 655f  ote_args.remote_
00008650: 696e 6369 6465 6e74 5f69 642c 0a20 2020  incident_id,.   
00008660: 2020 2020 2020 2020 2020 2020 2027 696e               'in
00008670: 5f6d 6972 726f 725f 6572 726f 7227 3a20  _mirror_error': 
00008680: 7374 7228 6529 0a20 2020 2020 2020 2020  str(e).         
00008690: 2020 207d 0a0a 2020 2020 2020 2020 7265     }..        re
000086a0: 7475 726e 2047 6574 5265 6d6f 7465 4461  turn GetRemoteDa
000086b0: 7461 5265 7370 6f6e 7365 280a 2020 2020  taResponse(.    
000086c0: 2020 2020 2020 2020 6d69 7272 6f72 6564          mirrored
000086d0: 5f6f 626a 6563 743d 696e 6369 6465 6e74  _object=incident
000086e0: 5f64 6174 612c 0a20 2020 2020 2020 2020  _data,.         
000086f0: 2020 2065 6e74 7269 6573 3d5b 5d0a 2020     entries=[].  
00008700: 2020 2020 2020 290a 0a0a 6465 6620 6665        )...def fe
00008710: 7463 685f 696e 6369 6465 6e74 7328 636c  tch_incidents(cl
00008720: 6965 6e74 2c20 6669 7273 745f 6665 7463  ient, first_fetc
00008730: 685f 7469 6d65 2c20 696e 7465 6772 6174  h_time, integrat
00008740: 696f 6e5f 696e 7374 616e 6365 2c20 6c61  ion_instance, la
00008750: 7374 5f72 756e 3a20 6469 6374 203d 204e  st_run: dict = N
00008760: 6f6e 652c 206d 6178 5f66 6574 6368 3a20  one, max_fetch: 
00008770: 696e 7420 3d20 3130 2c0a 2020 2020 2020  int = 10,.      
00008780: 2020 2020 2020 2020 2020 2020 2020 7374                st
00008790: 6174 7573 6573 3a20 4c69 7374 203d 205b  atuses: List = [
000087a0: 5d2c 2073 7461 7272 6564 3a20 4f70 7469  ], starred: Opti
000087b0: 6f6e 616c 5b62 6f6f 6c5d 203d 204e 6f6e  onal[bool] = Non
000087c0: 652c 2073 7461 7272 6564 5f69 6e63 6964  e, starred_incid
000087d0: 656e 7473 5f66 6574 6368 5f77 696e 646f  ents_fetch_windo
000087e0: 773a 2073 7472 203d 204e 6f6e 6529 3a0a  w: str = None):.
000087f0: 2020 2020 2320 4765 7420 7468 6520 6c61      # Get the la
00008800: 7374 2066 6574 6368 2074 696d 652c 2069  st fetch time, i
00008810: 6620 6578 6973 7473 0a20 2020 206c 6173  f exists.    las
00008820: 745f 6665 7463 6820 3d20 6c61 7374 5f72  t_fetch = last_r
00008830: 756e 2e67 6574 2827 7469 6d65 2729 2069  un.get('time') i
00008840: 6620 6973 696e 7374 616e 6365 286c 6173  f isinstance(las
00008850: 745f 7275 6e2c 2064 6963 7429 2065 6c73  t_run, dict) els
00008860: 6520 4e6f 6e65 0a20 2020 2069 6e63 6964  e None.    incid
00008870: 656e 7473 5f66 726f 6d5f 7072 6576 696f  ents_from_previo
00008880: 7573 5f72 756e 203d 206c 6173 745f 7275  us_run = last_ru
00008890: 6e2e 6765 7428 2769 6e63 6964 656e 7473  n.get('incidents
000088a0: 5f66 726f 6d5f 7072 6576 696f 7573 5f72  _from_previous_r
000088b0: 756e 272c 205b 5d29 2069 6620 6973 696e  un', []) if isin
000088c0: 7374 616e 6365 286c 6173 745f 7275 6e2c  stance(last_run,
000088d0: 0a20 2020 2020 2020 2020 2020 2020 2020  .               
000088e0: 2020 2020 2020 2020 2020 2020 2020 2020                  
000088f0: 2020 2020 2020 2020 2020 2020 2020 2020                  
00008900: 2020 2020 2020 2020 2020 2020 2020 2020                  
00008910: 2020 2020 2020 2020 2020 2020 2020 2020                  
00008920: 2020 2020 2020 2020 2020 2020 2020 2020                  
00008930: 2064 6963 7429 2065 6c73 6520 5b5d 0a0a   dict) else []..
00008940: 2020 2020 2320 4861 6e64 6c65 2066 6972      # Handle fir
00008950: 7374 2074 696d 6520 6665 7463 682c 2066  st time fetch, f
00008960: 6574 6368 2069 6e63 6964 656e 7473 2072  etch incidents r
00008970: 6574 726f 6163 7469 7665 6c79 0a20 2020  etroactively.   
00008980: 2069 6620 6c61 7374 5f66 6574 6368 2069   if last_fetch i
00008990: 7320 4e6f 6e65 3a0a 2020 2020 2020 2020  s None:.        
000089a0: 6c61 7374 5f66 6574 6368 2c20 5f20 3d20  last_fetch, _ = 
000089b0: 7061 7273 655f 6461 7465 5f72 616e 6765  parse_date_range
000089c0: 2866 6972 7374 5f66 6574 6368 5f74 696d  (first_fetch_tim
000089d0: 652c 2074 6f5f 7469 6d65 7374 616d 703d  e, to_timestamp=
000089e0: 5472 7565 290a 0a20 2020 2069 6620 7374  True)..    if st
000089f0: 6172 7265 643a 0a20 2020 2020 2020 2073  arred:.        s
00008a00: 7461 7272 6564 5f69 6e63 6964 656e 7473  tarred_incidents
00008a10: 5f66 6574 6368 5f77 696e 646f 772c 205f  _fetch_window, _
00008a20: 203d 2070 6172 7365 5f64 6174 655f 7261   = parse_date_ra
00008a30: 6e67 6528 7374 6172 7265 645f 696e 6369  nge(starred_inci
00008a40: 6465 6e74 735f 6665 7463 685f 7769 6e64  dents_fetch_wind
00008a50: 6f77 2c20 746f 5f74 696d 6573 7461 6d70  ow, to_timestamp
00008a60: 3d54 7275 6529 0a0a 2020 2020 696e 6369  =True)..    inci
00008a70: 6465 6e74 7320 3d20 5b5d 0a20 2020 2069  dents = [].    i
00008a80: 6620 696e 6369 6465 6e74 735f 6672 6f6d  f incidents_from
00008a90: 5f70 7265 7669 6f75 735f 7275 6e3a 0a20  _previous_run:. 
00008aa0: 2020 2020 2020 2072 6177 5f69 6e63 6964         raw_incid
00008ab0: 656e 7473 203d 2069 6e63 6964 656e 7473  ents = incidents
00008ac0: 5f66 726f 6d5f 7072 6576 696f 7573 5f72  _from_previous_r
00008ad0: 756e 0a20 2020 2065 6c73 653a 0a20 2020  un.    else:.   
00008ae0: 2020 2020 2069 6620 7374 6174 7573 6573       if statuses
00008af0: 3a0a 2020 2020 2020 2020 2020 2020 7261  :.            ra
00008b00: 775f 696e 6369 6465 6e74 7320 3d20 5b5d  w_incidents = []
00008b10: 0a20 2020 2020 2020 2020 2020 2066 6f72  .            for
00008b20: 2073 7461 7475 7320 696e 2073 7461 7475   status in statu
00008b30: 7365 733a 0a20 2020 2020 2020 2020 2020  ses:.           
00008b40: 2020 2020 2072 6177 5f69 6e63 6964 656e       raw_inciden
00008b50: 7473 202b 3d20 636c 6965 6e74 2e67 6574  ts += client.get
00008b60: 5f69 6e63 6964 656e 7473 2867 7465 5f63  _incidents(gte_c
00008b70: 7265 6174 696f 6e5f 7469 6d65 5f6d 696c  reation_time_mil
00008b80: 6c69 7365 636f 6e64 733d 6c61 7374 5f66  liseconds=last_f
00008b90: 6574 6368 2c20 7374 6174 7573 3d73 7461  etch, status=sta
00008ba0: 7475 732c 0a20 2020 2020 2020 2020 2020  tus,.           
00008bb0: 2020 2020 2020 2020 2020 2020 2020 2020                  
00008bc0: 2020 2020 2020 2020 2020 2020 2020 2020                  
00008bd0: 2020 2020 2020 2020 2020 206c 696d 6974             limit
00008be0: 3d6d 6178 5f66 6574 6368 2c20 736f 7274  =max_fetch, sort
00008bf0: 5f62 795f 6372 6561 7469 6f6e 5f74 696d  _by_creation_tim
00008c00: 653d 2761 7363 272c 2073 7461 7272 6564  e='asc', starred
00008c10: 3d73 7461 7272 6564 2c0a 2020 2020 2020  =starred,.      
00008c20: 2020 2020 2020 2020 2020 2020 2020 2020                  
00008c30: 2020 2020 2020 2020 2020 2020 2020 2020                  
00008c40: 2020 2020 2020 2020 2020 2020 2020 2020                  
00008c50: 7374 6172 7265 645f 696e 6369 6465 6e74  starred_incident
00008c60: 735f 6665 7463 685f 7769 6e64 6f77 3d73  s_fetch_window=s
00008c70: 7461 7272 6564 5f69 6e63 6964 656e 7473  tarred_incidents
00008c80: 5f66 6574 6368 5f77 696e 646f 7729 0a20  _fetch_window). 
00008c90: 2020 2020 2020 2020 2020 2072 6177 5f69             raw_i
00008ca0: 6e63 6964 656e 7473 203d 2073 6f72 7465  ncidents = sorte
00008cb0: 6428 7261 775f 696e 6369 6465 6e74 732c  d(raw_incidents,
00008cc0: 206b 6579 3d6c 616d 6264 6120 696e 633a   key=lambda inc:
00008cd0: 2069 6e63 5b27 6372 6561 7469 6f6e 5f74   inc['creation_t
00008ce0: 696d 6527 5d29 0a20 2020 2020 2020 2065  ime']).        e
00008cf0: 6c73 653a 0a20 2020 2020 2020 2020 2020  lse:.           
00008d00: 2072 6177 5f69 6e63 6964 656e 7473 203d   raw_incidents =
00008d10: 2063 6c69 656e 742e 6765 745f 696e 6369   client.get_inci
00008d20: 6465 6e74 7328 6774 655f 6372 6561 7469  dents(gte_creati
00008d30: 6f6e 5f74 696d 655f 6d69 6c6c 6973 6563  on_time_millisec
00008d40: 6f6e 6473 3d6c 6173 745f 6665 7463 682c  onds=last_fetch,
00008d50: 206c 696d 6974 3d6d 6178 5f66 6574 6368   limit=max_fetch
00008d60: 2c0a 2020 2020 2020 2020 2020 2020 2020  ,.              
00008d70: 2020 2020 2020 2020 2020 2020 2020 2020                  
00008d80: 2020 2020 2020 2020 2020 2020 2020 2020                  
00008d90: 2020 2073 6f72 745f 6279 5f63 7265 6174     sort_by_creat
00008da0: 696f 6e5f 7469 6d65 3d27 6173 6327 2c20  ion_time='asc', 
00008db0: 7374 6172 7265 643d 7374 6172 7265 642c  starred=starred,
00008dc0: 0a20 2020 2020 2020 2020 2020 2020 2020  .               
00008dd0: 2020 2020 2020 2020 2020 2020 2020 2020                  
00008de0: 2020 2020 2020 2020 2020 2020 2020 2020                  
00008df0: 2020 7374 6172 7265 645f 696e 6369 6465    starred_incide
00008e00: 6e74 735f 6665 7463 685f 7769 6e64 6f77  nts_fetch_window
00008e10: 3d73 7461 7272 6564 5f69 6e63 6964 656e  =starred_inciden
00008e20: 7473 5f66 6574 6368 5f77 696e 646f 7729  ts_fetch_window)
00008e30: 0a0a 2020 2020 2320 7361 7665 2074 6865  ..    # save the
00008e40: 206c 6173 7420 3130 3020 6d6f 6469 6669   last 100 modifi
00008e50: 6564 2069 6e63 6964 656e 7473 2074 6f20  ed incidents to 
00008e60: 7468 6520 696e 7465 6772 6174 696f 6e20  the integration 
00008e70: 636f 6e74 6578 7420 2d20 666f 7220 6d69  context - for mi
00008e80: 7272 6f72 696e 6720 7075 7270 6f73 6573  rroring purposes
00008e90: 0a20 2020 2063 6c69 656e 742e 7361 7665  .    client.save
00008ea0: 5f6d 6f64 6966 6965 645f 696e 6369 6465  _modified_incide
00008eb0: 6e74 735f 746f 5f69 6e74 6567 7261 7469  nts_to_integrati
00008ec0: 6f6e 5f63 6f6e 7465 7874 2829 0a0a 2020  on_context()..  
00008ed0: 2020 2320 6d61 696e 7461 696e 2061 206c    # maintain a l
00008ee0: 6973 7420 6f66 206e 6f6e 2063 7265 6174  ist of non creat
00008ef0: 6564 2069 6e63 6964 656e 7473 2069 6e20  ed incidents in 
00008f00: 6120 6361 7365 206f 6620 6120 7261 7465  a case of a rate
00008f10: 206c 696d 6974 2065 7863 6570 7469 6f6e   limit exception
00008f20: 0a20 2020 206e 6f6e 5f63 7265 6174 6564  .    non_created
00008f30: 5f69 6e63 6964 656e 7473 3a20 6c69 7374  _incidents: list
00008f40: 203d 2072 6177 5f69 6e63 6964 656e 7473   = raw_incidents
00008f50: 2e63 6f70 7928 290a 2020 2020 6e65 7874  .copy().    next
00008f60: 5f72 756e 203d 2064 6963 7428 290a 2020  _run = dict().  
00008f70: 2020 7472 793a 0a20 2020 2020 2020 2023    try:.        #
00008f80: 2054 6865 2063 6f75 6e74 206f 6620 696e   The count of in
00008f90: 6369 6465 6e74 732c 2073 6f20 6173 206e  cidents, so as n
00008fa0: 6f74 2074 6f20 7061 7373 2074 6865 206c  ot to pass the l
00008fb0: 696d 6974 0a20 2020 2020 2020 2063 6f75  imit.        cou
00008fc0: 6e74 5f69 6e63 6964 656e 7473 203d 2030  nt_incidents = 0
00008fd0: 0a0a 2020 2020 2020 2020 666f 7220 7261  ..        for ra
00008fe0: 775f 696e 6369 6465 6e74 2069 6e20 7261  w_incident in ra
00008ff0: 775f 696e 6369 6465 6e74 733a 0a20 2020  w_incidents:.   
00009000: 2020 2020 2020 2020 2069 6e63 6964 656e           inciden
00009010: 745f 6964 203d 2072 6177 5f69 6e63 6964  t_id = raw_incid
00009020: 656e 742e 6765 7428 2769 6e63 6964 656e  ent.get('inciden
00009030: 745f 6964 2729 0a0a 2020 2020 2020 2020  t_id')..        
00009040: 2020 2020 696e 6369 6465 6e74 5f64 6174      incident_dat
00009050: 6120 3d20 6765 745f 696e 6369 6465 6e74  a = get_incident
00009060: 5f65 7874 7261 5f64 6174 615f 636f 6d6d  _extra_data_comm
00009070: 616e 6428 636c 6965 6e74 2c20 7b22 696e  and(client, {"in
00009080: 6369 6465 6e74 5f69 6422 3a20 696e 6369  cident_id": inci
00009090: 6465 6e74 5f69 642c 0a20 2020 2020 2020  dent_id,.       
000090a0: 2020 2020 2020 2020 2020 2020 2020 2020                  
000090b0: 2020 2020 2020 2020 2020 2020 2020 2020                  
000090c0: 2020 2020 2020 2020 2020 2020 2020 2020                  
000090d0: 2020 2020 2020 2020 2020 2020 2020 2261                "a
000090e0: 6c65 7274 735f 6c69 6d69 7422 3a20 3130  lerts_limit": 10
000090f0: 3030 7d29 5b32 5d2e 6765 7428 2769 6e63  00})[2].get('inc
00009100: 6964 656e 7427 290a 0a20 2020 2020 2020  ident')..       
00009110: 2020 2020 2073 6f72 745f 616c 6c5f 6c69       sort_all_li
00009120: 7374 5f69 6e63 6964 656e 745f 6669 656c  st_incident_fiel
00009130: 6473 2869 6e63 6964 656e 745f 6461 7461  ds(incident_data
00009140: 290a 0a20 2020 2020 2020 2020 2020 2069  )..            i
00009150: 6e63 6964 656e 745f 6461 7461 5b27 6d69  ncident_data['mi
00009160: 7272 6f72 5f64 6972 6563 7469 6f6e 275d  rror_direction']
00009170: 203d 204d 4952 524f 525f 4449 5245 4354   = MIRROR_DIRECT
00009180: 494f 4e2e 6765 7428 6465 6d69 7374 6f2e  ION.get(demisto.
00009190: 7061 7261 6d73 2829 2e67 6574 2827 6d69  params().get('mi
000091a0: 7272 6f72 5f64 6972 6563 7469 6f6e 272c  rror_direction',
000091b0: 2027 4e6f 6e65 2729 2c0a 2020 2020 2020   'None'),.      
000091c0: 2020 2020 2020 2020 2020 2020 2020 2020                  
000091d0: 2020 2020 2020 2020 2020 2020 2020 2020                  
000091e0: 2020 2020 2020 2020 2020 2020 2020 2020                  
000091f0: 2020 2020 2020 2020 2020 2020 2020 204e                 N
00009200: 6f6e 6529 0a20 2020 2020 2020 2020 2020  one).           
00009210: 2069 6e63 6964 656e 745f 6461 7461 5b27   incident_data['
00009220: 6d69 7272 6f72 5f69 6e73 7461 6e63 6527  mirror_instance'
00009230: 5d20 3d20 696e 7465 6772 6174 696f 6e5f  ] = integration_
00009240: 696e 7374 616e 6365 0a20 2020 2020 2020  instance.       
00009250: 2020 2020 2069 6e63 6964 656e 745f 6461       incident_da
00009260: 7461 5b27 6c61 7374 5f6d 6972 726f 7265  ta['last_mirrore
00009270: 645f 696e 275d 203d 2069 6e74 2864 6174  d_in'] = int(dat
00009280: 6574 696d 652e 6e6f 7728 292e 7469 6d65  etime.now().time
00009290: 7374 616d 7028 2920 2a20 3130 3030 290a  stamp() * 1000).
000092a0: 0a20 2020 2020 2020 2020 2020 2064 6573  .            des
000092b0: 6372 6970 7469 6f6e 203d 2072 6177 5f69  cription = raw_i
000092c0: 6e63 6964 656e 742e 6765 7428 2764 6573  ncident.get('des
000092d0: 6372 6970 7469 6f6e 2729 0a20 2020 2020  cription').     
000092e0: 2020 2020 2020 206f 6363 7572 7265 6420         occurred 
000092f0: 3d20 7469 6d65 7374 616d 705f 746f 5f64  = timestamp_to_d
00009300: 6174 6573 7472 696e 6728 7261 775f 696e  atestring(raw_in
00009310: 6369 6465 6e74 5b27 6372 6561 7469 6f6e  cident['creation
00009320: 5f74 696d 6527 5d2c 2054 494d 455f 464f  _time'], TIME_FO
00009330: 524d 4154 202b 2027 5a27 290a 2020 2020  RMAT + 'Z').    
00009340: 2020 2020 2020 2020 696e 6369 6465 6e74          incident
00009350: 203d 207b 0a20 2020 2020 2020 2020 2020   = {.           
00009360: 2020 2020 2027 6e61 6d65 273a 2066 2758       'name': f'X
00009370: 4452 2049 6e63 6964 656e 7420 7b69 6e63  DR Incident {inc
00009380: 6964 656e 745f 6964 7d20 2d20 7b64 6573  ident_id} - {des
00009390: 6372 6970 7469 6f6e 7d27 2c0a 2020 2020  cription}',.    
000093a0: 2020 2020 2020 2020 2020 2020 276f 6363              'occ
000093b0: 7572 7265 6427 3a20 6f63 6375 7272 6564  urred': occurred
000093c0: 2c0a 2020 2020 2020 2020 2020 2020 2020  ,.              
000093d0: 2020 2772 6177 4a53 4f4e 273a 206a 736f    'rawJSON': jso
000093e0: 6e2e 6475 6d70 7328 696e 6369 6465 6e74  n.dumps(incident
000093f0: 5f64 6174 6129 2c0a 2020 2020 2020 2020  _data),.        
00009400: 2020 2020 7d0a 0a20 2020 2020 2020 2020      }..         
00009410: 2020 2069 6620 6465 6d69 7374 6f2e 7061     if demisto.pa
00009420: 7261 6d73 2829 2e67 6574 2827 7379 6e63  rams().get('sync
00009430: 5f6f 776e 6572 7327 2920 616e 6420 696e  _owners') and in
00009440: 6369 6465 6e74 5f64 6174 612e 6765 7428  cident_data.get(
00009450: 2761 7373 6967 6e65 645f 7573 6572 5f6d  'assigned_user_m
00009460: 6169 6c27 293a 0a20 2020 2020 2020 2020  ail'):.         
00009470: 2020 2020 2020 2069 6e63 6964 656e 745b         incident[
00009480: 276f 776e 6572 275d 203d 2064 656d 6973  'owner'] = demis
00009490: 746f 2e66 696e 6455 7365 7228 656d 6169  to.findUser(emai
000094a0: 6c3d 696e 6369 6465 6e74 5f64 6174 612e  l=incident_data.
000094b0: 6765 7428 2761 7373 6967 6e65 645f 7573  get('assigned_us
000094c0: 6572 5f6d 6169 6c27 2929 2e67 6574 2827  er_mail')).get('
000094d0: 7573 6572 6e61 6d65 2729 0a0a 2020 2020  username')..    
000094e0: 2020 2020 2020 2020 2320 5570 6461 7465          # Update
000094f0: 206c 6173 7420 7275 6e20 616e 6420 6164   last run and ad
00009500: 6420 696e 6369 6465 6e74 2069 6620 7468  d incident if th
00009510: 6520 696e 6369 6465 6e74 2069 7320 6e65  e incident is ne
00009520: 7765 7220 7468 616e 206c 6173 7420 6665  wer than last fe
00009530: 7463 680a 2020 2020 2020 2020 2020 2020  tch.            
00009540: 6966 2072 6177 5f69 6e63 6964 656e 745b  if raw_incident[
00009550: 2763 7265 6174 696f 6e5f 7469 6d65 275d  'creation_time']
00009560: 203e 206c 6173 745f 6665 7463 683a 0a20   > last_fetch:. 
00009570: 2020 2020 2020 2020 2020 2020 2020 206c                 l
00009580: 6173 745f 6665 7463 6820 3d20 7261 775f  ast_fetch = raw_
00009590: 696e 6369 6465 6e74 5b27 6372 6561 7469  incident['creati
000095a0: 6f6e 5f74 696d 6527 5d0a 0a20 2020 2020  on_time']..     
000095b0: 2020 2020 2020 2069 6e63 6964 656e 7473         incidents
000095c0: 2e61 7070 656e 6428 696e 6369 6465 6e74  .append(incident
000095d0: 290a 2020 2020 2020 2020 2020 2020 6e6f  ).            no
000095e0: 6e5f 6372 6561 7465 645f 696e 6369 6465  n_created_incide
000095f0: 6e74 732e 7265 6d6f 7665 2872 6177 5f69  nts.remove(raw_i
00009600: 6e63 6964 656e 7429 0a0a 2020 2020 2020  ncident)..      
00009610: 2020 2020 2020 636f 756e 745f 696e 6369        count_inci
00009620: 6465 6e74 7320 2b3d 2031 0a20 2020 2020  dents += 1.     
00009630: 2020 2020 2020 2069 6620 636f 756e 745f         if count_
00009640: 696e 6369 6465 6e74 7320 3d3d 206d 6178  incidents == max
00009650: 5f66 6574 6368 3a0a 2020 2020 2020 2020  _fetch:.        
00009660: 2020 2020 2020 2020 6272 6561 6b0a 0a20          break.. 
00009670: 2020 2065 7863 6570 7420 4578 6365 7074     except Except
00009680: 696f 6e20 6173 2065 3a0a 2020 2020 2020  ion as e:.      
00009690: 2020 6966 2022 5261 7465 206c 696d 6974    if "Rate limit
000096a0: 2065 7863 6565 6465 6422 2069 6e20 7374   exceeded" in st
000096b0: 7228 6529 3a0a 2020 2020 2020 2020 2020  r(e):.          
000096c0: 2020 6465 6d69 7374 6f2e 696e 666f 2866    demisto.info(f
000096d0: 2243 6f72 7465 7820 5844 5220 2d20 7261  "Cortex XDR - ra
000096e0: 7465 206c 696d 6974 2065 7863 6565 6465  te limit exceede
000096f0: 642c 206e 756d 6265 7220 6f66 206e 6f6e  d, number of non
00009700: 2063 7265 6174 6564 2069 6e63 6964 656e   created inciden
00009710: 7473 2069 733a 2022 0a20 2020 2020 2020  ts is: ".       
00009720: 2020 2020 2020 2020 2020 2020 2020 2020                  
00009730: 2020 6622 277b 6c65 6e28 6e6f 6e5f 6372    f"'{len(non_cr
00009740: 6561 7465 645f 696e 6369 6465 6e74 7329  eated_incidents)
00009750: 7d27 2e5c 6e20 5468 6520 696e 6369 6465  }'.\n The incide
00009760: 6e74 7320 7769 6c6c 2062 6520 6372 6561  nts will be crea
00009770: 7465 6420 696e 2074 6865 206e 6578 7420  ted in the next 
00009780: 6665 7463 6822 290a 2020 2020 2020 2020  fetch").        
00009790: 656c 7365 3a0a 2020 2020 2020 2020 2020  else:.          
000097a0: 2020 7261 6973 650a 0a20 2020 2069 6620    raise..    if 
000097b0: 6e6f 6e5f 6372 6561 7465 645f 696e 6369  non_created_inci
000097c0: 6465 6e74 733a 0a20 2020 2020 2020 206e  dents:.        n
000097d0: 6578 745f 7275 6e5b 2769 6e63 6964 656e  ext_run['inciden
000097e0: 7473 5f66 726f 6d5f 7072 6576 696f 7573  ts_from_previous
000097f0: 5f72 756e 275d 203d 206e 6f6e 5f63 7265  _run'] = non_cre
00009800: 6174 6564 5f69 6e63 6964 656e 7473 0a20  ated_incidents. 
00009810: 2020 2065 6c73 653a 0a20 2020 2020 2020     else:.       
00009820: 206e 6578 745f 7275 6e5b 2769 6e63 6964   next_run['incid
00009830: 656e 7473 5f66 726f 6d5f 7072 6576 696f  ents_from_previo
00009840: 7573 5f72 756e 275d 203d 205b 5d0a 0a20  us_run'] = [].. 
00009850: 2020 206e 6578 745f 7275 6e5b 2774 696d     next_run['tim
00009860: 6527 5d20 3d20 6c61 7374 5f66 6574 6368  e'] = last_fetch
00009870: 202b 2031 0a0a 2020 2020 7265 7475 726e   + 1..    return
00009880: 206e 6578 745f 7275 6e2c 2069 6e63 6964   next_run, incid
00009890: 656e 7473 0a0a 0a64 6566 2067 6574 5f65  ents...def get_e
000098a0: 6e64 706f 696e 7473 5f62 795f 7374 6174  ndpoints_by_stat
000098b0: 7573 5f63 6f6d 6d61 6e64 2863 6c69 656e  us_command(clien
000098c0: 743a 2043 6c69 656e 742c 2061 7267 733a  t: Client, args:
000098d0: 2044 6963 7429 202d 3e20 436f 6d6d 616e   Dict) -> Comman
000098e0: 6452 6573 756c 7473 3a0a 2020 2020 7374  dResults:.    st
000098f0: 6174 7573 203d 2061 7267 732e 6765 7428  atus = args.get(
00009900: 2773 7461 7475 7327 290a 0a20 2020 206c  'status')..    l
00009910: 6173 745f 7365 656e 5f67 7465 203d 2061  ast_seen_gte = a
00009920: 7267 5f74 6f5f 7469 6d65 7374 616d 7028  rg_to_timestamp(
00009930: 0a20 2020 2020 2020 2061 7267 3d61 7267  .        arg=arg
00009940: 732e 6765 7428 276c 6173 745f 7365 656e  s.get('last_seen
00009950: 5f67 7465 2729 2c0a 2020 2020 2020 2020  _gte'),.        
00009960: 6172 675f 6e61 6d65 3d27 6c61 7374 5f73  arg_name='last_s
00009970: 6565 6e5f 6774 6527 0a20 2020 2029 0a0a  een_gte'.    )..
00009980: 2020 2020 6c61 7374 5f73 6565 6e5f 6c74      last_seen_lt
00009990: 6520 3d20 6172 675f 746f 5f74 696d 6573  e = arg_to_times
000099a0: 7461 6d70 280a 2020 2020 2020 2020 6172  tamp(.        ar
000099b0: 673d 6172 6773 2e67 6574 2827 6c61 7374  g=args.get('last
000099c0: 5f73 6565 6e5f 6c74 6527 292c 0a20 2020  _seen_lte'),.   
000099d0: 2020 2020 2061 7267 5f6e 616d 653d 276c       arg_name='l
000099e0: 6173 745f 7365 656e 5f6c 7465 270a 2020  ast_seen_lte'.  
000099f0: 2020 290a 0a20 2020 2065 6e64 706f 696e    )..    endpoin
00009a00: 7473 5f63 6f75 6e74 2c20 7261 775f 7265  ts_count, raw_re
00009a10: 7320 3d20 636c 6965 6e74 2e67 6574 5f65  s = client.get_e
00009a20: 6e64 706f 696e 7473 5f62 795f 7374 6174  ndpoints_by_stat
00009a30: 7573 2873 7461 7475 732c 206c 6173 745f  us(status, last_
00009a40: 7365 656e 5f67 7465 3d6c 6173 745f 7365  seen_gte=last_se
00009a50: 656e 5f67 7465 2c0a 2020 2020 2020 2020  en_gte,.        
00009a60: 2020 2020 2020 2020 2020 2020 2020 2020                  
00009a70: 2020 2020 2020 2020 2020 2020 2020 2020                  
00009a80: 2020 2020 2020 2020 2020 2020 2020 2020                  
00009a90: 2020 2020 2020 6c61 7374 5f73 6565 6e5f        last_seen_
00009aa0: 6c74 653d 6c61 7374 5f73 6565 6e5f 6c74  lte=last_seen_lt
00009ab0: 6529 0a0a 2020 2020 6563 203d 207b 2773  e)..    ec = {'s
00009ac0: 7461 7475 7327 3a20 7374 6174 7573 2c20  tatus': status, 
00009ad0: 2763 6f75 6e74 273a 2065 6e64 706f 696e  'count': endpoin
00009ae0: 7473 5f63 6f75 6e74 7d0a 0a20 2020 2072  ts_count}..    r
00009af0: 6574 7572 6e20 436f 6d6d 616e 6452 6573  eturn CommandRes
00009b00: 756c 7473 280a 2020 2020 2020 2020 7265  ults(.        re
00009b10: 6164 6162 6c65 5f6f 7574 7075 743d 6627  adable_output=f'
00009b20: 7b73 7461 7475 737d 2065 6e64 706f 696e  {status} endpoin
00009b30: 7473 2063 6f75 6e74 3a20 7b65 6e64 706f  ts count: {endpo
00009b40: 696e 7473 5f63 6f75 6e74 7d27 2c0a 2020  ints_count}',.  
00009b50: 2020 2020 2020 6f75 7470 7574 735f 7072        outputs_pr
00009b60: 6566 6978 3d66 277b 494e 5445 4752 4154  efix=f'{INTEGRAT
00009b70: 494f 4e5f 434f 4e54 4558 545f 4252 414e  ION_CONTEXT_BRAN
00009b80: 447d 2e45 6e64 706f 696e 7473 5374 6174  D}.EndpointsStat
00009b90: 7573 272c 0a20 2020 2020 2020 206f 7574  us',.        out
00009ba0: 7075 7473 5f6b 6579 5f66 6965 6c64 3d27  puts_key_field='
00009bb0: 7374 6174 7573 272c 0a20 2020 2020 2020  status',.       
00009bc0: 206f 7574 7075 7473 3d65 632c 0a20 2020   outputs=ec,.   
00009bd0: 2020 2020 2072 6177 5f72 6573 706f 6e73       raw_respons
00009be0: 653d 7261 775f 7265 7329 0a0a 0a64 6566  e=raw_res)...def
00009bf0: 2066 696c 655f 6465 7461 696c 735f 7265   file_details_re
00009c00: 7375 6c74 7328 636c 6965 6e74 3a20 436c  sults(client: Cl
00009c10: 6965 6e74 2c20 6172 6773 3a20 4469 6374  ient, args: Dict
00009c20: 2c20 6164 645f 746f 5f63 6f6e 7465 7874  , add_to_context
00009c30: 3a20 626f 6f6c 2920 2d3e 204e 6f6e 653a  : bool) -> None:
00009c40: 0a20 2020 2072 6574 7572 6e5f 656e 7472  .    return_entr
00009c50: 792c 2066 696c 655f 7265 7375 6c74 7320  y, file_results 
00009c60: 3d20 7265 7472 6965 7665 5f66 696c 655f  = retrieve_file_
00009c70: 6465 7461 696c 735f 636f 6d6d 616e 6428  details_command(
00009c80: 636c 6965 6e74 2c20 6172 6773 2c20 6164  client, args, ad
00009c90: 645f 746f 5f63 6f6e 7465 7874 290a 2020  d_to_context).  
00009ca0: 2020 6465 6d69 7374 6f2e 7265 7375 6c74    demisto.result
00009cb0: 7328 7265 7475 726e 5f65 6e74 7279 290a  s(return_entry).
00009cc0: 2020 2020 6966 2066 696c 655f 7265 7375      if file_resu
00009cd0: 6c74 733a 0a20 2020 2020 2020 2064 656d  lts:.        dem
00009ce0: 6973 746f 2e72 6573 756c 7473 2866 696c  isto.results(fil
00009cf0: 655f 7265 7375 6c74 7329 0a0a 0a64 6566  e_results)...def
00009d00: 2067 6574 5f63 6f6e 7472 6962 7574 696e   get_contributin
00009d10: 675f 6576 656e 745f 636f 6d6d 616e 6428  g_event_command(
00009d20: 636c 6965 6e74 3a20 436c 6965 6e74 2c20  client: Client, 
00009d30: 6172 6773 3a20 4469 6374 2920 2d3e 2043  args: Dict) -> C
00009d40: 6f6d 6d61 6e64 5265 7375 6c74 733a 0a0a  ommandResults:..
00009d50: 2020 2020 6966 2061 6c65 7274 5f69 6473      if alert_ids
00009d60: 203a 3d20 6172 6754 6f4c 6973 7428 6172   := argToList(ar
00009d70: 6773 2e67 6574 2827 616c 6572 745f 6964  gs.get('alert_id
00009d80: 7327 2929 3a0a 2020 2020 2020 2020 616c  s')):.        al
00009d90: 6572 7473 203d 205b 5d0a 0a20 2020 2020  erts = []..     
00009da0: 2020 2066 6f72 2061 6c65 7274 5f69 6420     for alert_id 
00009db0: 696e 2061 6c65 7274 5f69 6473 3a0a 2020  in alert_ids:.  
00009dc0: 2020 2020 2020 2020 2020 6966 2061 6c65            if ale
00009dd0: 7274 203a 3d20 636c 6965 6e74 2e67 6574  rt := client.get
00009de0: 5f63 6f6e 7472 6962 7574 696e 675f 6576  _contributing_ev
00009df0: 656e 745f 6279 5f61 6c65 7274 5f69 6428  ent_by_alert_id(
00009e00: 696e 7428 616c 6572 745f 6964 2929 3a0a  int(alert_id)):.
00009e10: 2020 2020 2020 2020 2020 2020 2020 2020                  
00009e20: 7061 6765 5f6e 756d 6265 7220 3d20 6d61  page_number = ma
00009e30: 7828 696e 7428 6172 6773 2e67 6574 2827  x(int(args.get('
00009e40: 7061 6765 5f6e 756d 6265 7227 2c20 3129  page_number', 1)
00009e50: 292c 2031 2920 2d20 3120 2023 204d 696e  ), 1) - 1  # Min
00009e60: 2026 2064 6566 6175 6c74 207a 6572 6f20   & default zero 
00009e70: 2846 6972 7374 2070 6167 6529 0a20 2020  (First page).   
00009e80: 2020 2020 2020 2020 2020 2020 2070 6167               pag
00009e90: 655f 7369 7a65 203d 206d 6178 2869 6e74  e_size = max(int
00009ea0: 2861 7267 732e 6765 7428 2770 6167 655f  (args.get('page_
00009eb0: 7369 7a65 272c 2035 3029 292c 2030 2920  size', 50)), 0) 
00009ec0: 2023 204d 696e 207a 6572 6f20 2620 6465   # Min zero & de
00009ed0: 6661 756c 7420 3530 0a20 2020 2020 2020  fault 50.       
00009ee0: 2020 2020 2020 2020 206f 6666 7365 7420           offset 
00009ef0: 3d20 7061 6765 5f6e 756d 6265 7220 2a20  = page_number * 
00009f00: 7061 6765 5f73 697a 650a 2020 2020 2020  page_size.      
00009f10: 2020 2020 2020 2020 2020 6c69 6d69 7420            limit 
00009f20: 3d20 6d61 7828 696e 7428 6172 6773 2e67  = max(int(args.g
00009f30: 6574 2827 6c69 6d69 7427 2c20 3029 292c  et('limit', 0)),
00009f40: 2030 2920 6f72 206f 6666 7365 7420 2b20   0) or offset + 
00009f50: 7061 6765 5f73 697a 650a 0a20 2020 2020  page_size..     
00009f60: 2020 2020 2020 2020 2020 2061 6c65 7274             alert
00009f70: 5f77 6974 685f 6576 656e 7473 203d 207b  _with_events = {
00009f80: 0a20 2020 2020 2020 2020 2020 2020 2020  .               
00009f90: 2020 2020 2027 616c 6572 7449 4427 3a20       'alertID': 
00009fa0: 7374 7228 616c 6572 745f 6964 292c 0a20  str(alert_id),. 
00009fb0: 2020 2020 2020 2020 2020 2020 2020 2020                  
00009fc0: 2020 2027 6576 656e 7473 273a 2061 6c65     'events': ale
00009fd0: 7274 2e67 6574 2827 6576 656e 7473 272c  rt.get('events',
00009fe0: 205b 5d29 5b6f 6666 7365 743a 6c69 6d69   [])[offset:limi
00009ff0: 745d 2c0a 2020 2020 2020 2020 2020 2020  t],.            
0000a000: 2020 2020 7d0a 2020 2020 2020 2020 2020      }.          
0000a010: 2020 2020 2020 616c 6572 7473 2e61 7070        alerts.app
0000a020: 656e 6428 616c 6572 745f 7769 7468 5f65  end(alert_with_e
0000a030: 7665 6e74 7329 0a0a 2020 2020 2020 2020  vents)..        
0000a040: 7265 6164 6162 6c65 5f6f 7574 7075 7420  readable_output 
0000a050: 3d20 7461 626c 6554 6f4d 6172 6b64 6f77  = tableToMarkdow
0000a060: 6e28 0a20 2020 2020 2020 2020 2020 2027  n(.            '
0000a070: 436f 6e74 7269 6275 7469 6e67 2065 7665  Contributing eve
0000a080: 6e74 7327 2c20 616c 6572 7473 2c20 6865  nts', alerts, he
0000a090: 6164 6572 5472 616e 7366 6f72 6d3d 7061  aderTransform=pa
0000a0a0: 7363 616c 546f 5370 6163 652c 2072 656d  scalToSpace, rem
0000a0b0: 6f76 654e 756c 6c3d 5472 7565 2c20 6973  oveNull=True, is
0000a0c0: 5f61 7574 6f5f 6a73 6f6e 5f74 7261 6e73  _auto_json_trans
0000a0d0: 666f 726d 3d54 7275 650a 2020 2020 2020  form=True.      
0000a0e0: 2020 290a 2020 2020 2020 2020 7265 7475    ).        retu
0000a0f0: 726e 2043 6f6d 6d61 6e64 5265 7375 6c74  rn CommandResult
0000a100: 7328 0a20 2020 2020 2020 2020 2020 2072  s(.            r
0000a110: 6561 6461 626c 655f 6f75 7470 7574 3d72  eadable_output=r
0000a120: 6561 6461 626c 655f 6f75 7470 7574 2c0a  eadable_output,.
0000a130: 2020 2020 2020 2020 2020 2020 6f75 7470              outp
0000a140: 7574 735f 7072 6566 6978 3d66 277b 494e  uts_prefix=f'{IN
0000a150: 5445 4752 4154 494f 4e5f 434f 4e54 4558  TEGRATION_CONTEX
0000a160: 545f 4252 414e 447d 2e43 6f6e 7472 6962  T_BRAND}.Contrib
0000a170: 7574 696e 6745 7665 6e74 272c 0a20 2020  utingEvent',.   
0000a180: 2020 2020 2020 2020 206f 7574 7075 7473           outputs
0000a190: 5f6b 6579 5f66 6965 6c64 3d27 616c 6572  _key_field='aler
0000a1a0: 7449 4427 2c0a 2020 2020 2020 2020 2020  tID',.          
0000a1b0: 2020 6f75 7470 7574 733d 616c 6572 7473    outputs=alerts
0000a1c0: 2c0a 2020 2020 2020 2020 2020 2020 7261  ,.            ra
0000a1d0: 775f 7265 7370 6f6e 7365 3d61 6c65 7274  w_response=alert
0000a1e0: 730a 2020 2020 2020 2020 290a 0a20 2020  s.        )..   
0000a1f0: 2065 6c73 653a 0a20 2020 2020 2020 2072   else:.        r
0000a200: 6574 7572 6e20 436f 6d6d 616e 6452 6573  eturn CommandRes
0000a210: 756c 7473 2872 6561 6461 626c 655f 6f75  ults(readable_ou
0000a220: 7470 7574 3d27 5468 6520 616c 6572 745f  tput='The alert_
0000a230: 6964 7320 6172 6775 6d65 6e74 2063 616e  ids argument can
0000a240: 6e6f 7420 6265 2065 6d70 7479 2e27 290a  not be empty.').
0000a250: 0a0a 6465 6620 7265 706c 6163 655f 6665  ..def replace_fe
0000a260: 6174 7572 6564 5f66 6965 6c64 5f63 6f6d  atured_field_com
0000a270: 6d61 6e64 2863 6c69 656e 743a 2043 6c69  mand(client: Cli
0000a280: 656e 742c 2061 7267 733a 2044 6963 7429  ent, args: Dict)
0000a290: 202d 3e20 436f 6d6d 616e 6452 6573 756c   -> CommandResul
0000a2a0: 7473 3a0a 2020 2020 6669 656c 645f 7479  ts:.    field_ty
0000a2b0: 7065 203d 2061 7267 732e 6765 7428 2766  pe = args.get('f
0000a2c0: 6965 6c64 5f74 7970 6527 2c20 2727 290a  ield_type', '').
0000a2d0: 2020 2020 7661 6c75 6573 203d 2061 7267      values = arg
0000a2e0: 546f 4c69 7374 2861 7267 732e 6765 7428  ToList(args.get(
0000a2f0: 2776 616c 7565 7327 2929 0a20 2020 206c  'values')).    l
0000a300: 656e 5f76 616c 7565 7320 3d20 6c65 6e28  en_values = len(
0000a310: 7661 6c75 6573 290a 2020 2020 636f 6d6d  values).    comm
0000a320: 656e 7473 203d 2061 7267 546f 4c69 7374  ents = argToList
0000a330: 2861 7267 732e 6765 7428 2763 6f6d 6d65  (args.get('comme
0000a340: 6e74 7327 2929 5b3a 6c65 6e5f 7661 6c75  nts'))[:len_valu
0000a350: 6573 5d0a 2020 2020 6164 5f74 7970 6520  es].    ad_type 
0000a360: 3d20 6172 6754 6f4c 6973 7428 6172 6773  = argToList(args
0000a370: 2e67 6574 2827 6164 5f74 7970 6527 2c20  .get('ad_type', 
0000a380: 2767 726f 7570 2729 295b 3a6c 656e 5f76  'group'))[:len_v
0000a390: 616c 7565 735d 0a0a 2020 2020 6966 2066  alues]..    if f
0000a3a0: 6965 6c64 5f74 7970 6520 3d3d 2027 6164  ield_type == 'ad
0000a3b0: 5f67 726f 7570 7327 3a0a 2020 2020 2020  _groups':.      
0000a3c0: 2020 6669 656c 6473 203d 205b 0a20 2020    fields = [.   
0000a3d0: 2020 2020 2020 2020 207b 0a20 2020 2020           {.     
0000a3e0: 2020 2020 2020 2020 2020 2027 7661 6c75             'valu
0000a3f0: 6527 3a20 6669 656c 645b 305d 2c20 2763  e': field[0], 'c
0000a400: 6f6d 6d65 6e74 273a 2066 6965 6c64 5b31  omment': field[1
0000a410: 5d2c 2027 7479 7065 273a 2066 6965 6c64  ], 'type': field
0000a420: 5b32 5d0a 2020 2020 2020 2020 2020 2020  [2].            
0000a430: 7d20 666f 7220 6669 656c 6420 696e 207a  } for field in z
0000a440: 6970 5f6c 6f6e 6765 7374 2876 616c 7565  ip_longest(value
0000a450: 732c 2063 6f6d 6d65 6e74 732c 2061 645f  s, comments, ad_
0000a460: 7479 7065 2c20 6669 6c6c 7661 6c75 653d  type, fillvalue=
0000a470: 2727 290a 2020 2020 2020 2020 5d0a 2020  '').        ].  
0000a480: 2020 656c 7365 3a0a 2020 2020 2020 2020    else:.        
0000a490: 6669 656c 6473 203d 205b 0a20 2020 2020  fields = [.     
0000a4a0: 2020 2020 2020 207b 2776 616c 7565 273a         {'value':
0000a4b0: 2066 6965 6c64 5b30 5d2c 2027 636f 6d6d   field[0], 'comm
0000a4c0: 656e 7427 3a20 6669 656c 645b 315d 7d20  ent': field[1]} 
0000a4d0: 666f 7220 6669 656c 6420 696e 207a 6970  for field in zip
0000a4e0: 5f6c 6f6e 6765 7374 2876 616c 7565 732c  _longest(values,
0000a4f0: 2063 6f6d 6d65 6e74 732c 2066 696c 6c76   comments, fillv
0000a500: 616c 7565 3d27 2729 0a20 2020 2020 2020  alue='').       
0000a510: 205d 0a0a 2020 2020 636c 6965 6e74 2e72   ]..    client.r
0000a520: 6570 6c61 6365 5f66 6561 7475 7265 645f  eplace_featured_
0000a530: 6669 656c 6428 6669 656c 645f 7479 7065  field(field_type
0000a540: 2c20 6669 656c 6473 290a 0a20 2020 2072  , fields)..    r
0000a550: 6573 756c 7420 3d20 7b27 6669 656c 6454  esult = {'fieldT
0000a560: 7970 6527 3a20 6669 656c 645f 7479 7065  ype': field_type
0000a570: 2c20 2766 6965 6c64 7327 3a20 6669 656c  , 'fields': fiel
0000a580: 6473 7d0a 0a20 2020 2072 6561 6461 626c  ds}..    readabl
0000a590: 655f 6f75 7470 7574 203d 2074 6162 6c65  e_output = table
0000a5a0: 546f 4d61 726b 646f 776e 280a 2020 2020  ToMarkdown(.    
0000a5b0: 2020 2020 6627 5265 706c 6163 6564 2066      f'Replaced f
0000a5c0: 6561 7475 7265 643a 207b 7265 7375 6c74  eatured: {result
0000a5d0: 2e67 6574 2822 6669 656c 6454 7970 6522  .get("fieldType"
0000a5e0: 297d 272c 2072 6573 756c 742e 6765 7428  )}', result.get(
0000a5f0: 2766 6965 6c64 7327 292c 2068 6561 6465  'fields'), heade
0000a600: 7254 7261 6e73 666f 726d 3d70 6173 6361  rTransform=pasca
0000a610: 6c54 6f53 7061 6365 0a20 2020 2029 0a0a  lToSpace.    )..
0000a620: 2020 2020 7265 7475 726e 2043 6f6d 6d61      return Comma
0000a630: 6e64 5265 7375 6c74 7328 0a20 2020 2020  ndResults(.     
0000a640: 2020 2072 6561 6461 626c 655f 6f75 7470     readable_outp
0000a650: 7574 3d72 6561 6461 626c 655f 6f75 7470  ut=readable_outp
0000a660: 7574 2c0a 2020 2020 2020 2020 6f75 7470  ut,.        outp
0000a670: 7574 735f 7072 6566 6978 3d66 277b 494e  uts_prefix=f'{IN
0000a680: 5445 4752 4154 494f 4e5f 434f 4e54 4558  TEGRATION_CONTEX
0000a690: 545f 4252 414e 447d 2e46 6561 7475 7265  T_BRAND}.Feature
0000a6a0: 6446 6965 6c64 272c 0a20 2020 2020 2020  dField',.       
0000a6b0: 206f 7574 7075 7473 5f6b 6579 5f66 6965   outputs_key_fie
0000a6c0: 6c64 3d27 6669 656c 6454 7970 6527 2c0a  ld='fieldType',.
0000a6d0: 2020 2020 2020 2020 6f75 7470 7574 733d          outputs=
0000a6e0: 7265 7375 6c74 2c0a 2020 2020 2020 2020  result,.        
0000a6f0: 7261 775f 7265 7370 6f6e 7365 3d72 6573  raw_response=res
0000a700: 756c 740a 2020 2020 290a 0a0a 6465 6620  ult.    )...def 
0000a710: 6d61 696e 2829 3a20 2023 2070 7261 676d  main():  # pragm
0000a720: 613a 206e 6f20 636f 7665 720a 2020 2020  a: no cover.    
0000a730: 2222 220a 2020 2020 4578 6563 7574 6573  """.    Executes
0000a740: 2061 6e20 696e 7465 6772 6174 696f 6e20   an integration 
0000a750: 636f 6d6d 616e 640a 2020 2020 2222 220a  command.    """.
0000a760: 2020 2020 636f 6d6d 616e 6420 3d20 6465      command = de
0000a770: 6d69 7374 6f2e 636f 6d6d 616e 6428 290a  misto.command().
0000a780: 2020 2020 7061 7261 6d73 203d 2064 656d      params = dem
0000a790: 6973 746f 2e70 6172 616d 7328 290a 2020  isto.params().  
0000a7a0: 2020 4c4f 4728 6627 436f 6d6d 616e 6420    LOG(f'Command 
0000a7b0: 6265 696e 6720 6361 6c6c 6564 2069 7320  being called is 
0000a7c0: 7b63 6f6d 6d61 6e64 7d27 290a 0a20 2020  {command}')..   
0000a7d0: 2023 2075 7369 6e67 2074 776f 2064 6966   # using two dif
0000a7e0: 6665 7265 6e74 2063 7265 6465 6e74 6961  ferent credentia
0000a7f0: 6c73 206f 626a 6563 7420 6173 2074 6865  ls object as the
0000a800: 7920 626f 7468 2066 6965 6c64 7320 6e65  y both fields ne
0000a810: 6564 2074 6f20 6265 2065 6e63 7279 7074  ed to be encrypt
0000a820: 6564 0a20 2020 2061 7069 5f6b 6579 203d  ed.    api_key =
0000a830: 2070 6172 616d 732e 6765 7428 2761 7069   params.get('api
0000a840: 6b65 7927 2920 6f72 2070 6172 616d 732e  key') or params.
0000a850: 6765 7428 2761 7069 6b65 795f 6372 6564  get('apikey_cred
0000a860: 7327 292e 6765 7428 2770 6173 7377 6f72  s').get('passwor
0000a870: 6427 2c20 2727 290a 2020 2020 6170 695f  d', '').    api_
0000a880: 6b65 795f 6964 203d 2070 6172 616d 732e  key_id = params.
0000a890: 6765 7428 2761 7069 6b65 795f 6964 2729  get('apikey_id')
0000a8a0: 206f 7220 7061 7261 6d73 2e67 6574 2827   or params.get('
0000a8b0: 6170 696b 6579 5f69 645f 6372 6564 7327  apikey_id_creds'
0000a8c0: 292e 6765 7428 2770 6173 7377 6f72 6427  ).get('password'
0000a8d0: 2c20 2727 290a 2020 2020 6669 7273 745f  , '').    first_
0000a8e0: 6665 7463 685f 7469 6d65 203d 2070 6172  fetch_time = par
0000a8f0: 616d 732e 6765 7428 2766 6574 6368 5f74  ams.get('fetch_t
0000a900: 696d 6527 2c20 2733 2064 6179 7327 290a  ime', '3 days').
0000a910: 2020 2020 6261 7365 5f75 726c 203d 2075      base_url = u
0000a920: 726c 6a6f 696e 2870 6172 616d 732e 6765  rljoin(params.ge
0000a930: 7428 2775 726c 2729 2c20 272f 7075 626c  t('url'), '/publ
0000a940: 6963 5f61 7069 2f76 3127 290a 2020 2020  ic_api/v1').    
0000a950: 7072 6f78 7920 3d20 7061 7261 6d73 2e67  proxy = params.g
0000a960: 6574 2827 7072 6f78 7927 290a 2020 2020  et('proxy').    
0000a970: 7665 7269 6679 5f63 6572 7420 3d20 6e6f  verify_cert = no
0000a980: 7420 7061 7261 6d73 2e67 6574 2827 696e  t params.get('in
0000a990: 7365 6375 7265 272c 2046 616c 7365 290a  secure', False).
0000a9a0: 2020 2020 7374 6174 7573 6573 203d 2070      statuses = p
0000a9b0: 6172 616d 732e 6765 7428 2773 7461 7475  arams.get('statu
0000a9c0: 7327 290a 2020 2020 7374 6172 7265 6420  s').    starred 
0000a9d0: 3d20 5472 7565 2069 6620 7061 7261 6d73  = True if params
0000a9e0: 2e67 6574 2827 7374 6172 7265 6427 2920  .get('starred') 
0000a9f0: 656c 7365 204e 6f6e 650a 2020 2020 7374  else None.    st
0000aa00: 6172 7265 645f 696e 6369 6465 6e74 735f  arred_incidents_
0000aa10: 6665 7463 685f 7769 6e64 6f77 203d 2070  fetch_window = p
0000aa20: 6172 616d 732e 6765 7428 2773 7461 7272  arams.get('starr
0000aa30: 6564 5f69 6e63 6964 656e 7473 5f66 6574  ed_incidents_fet
0000aa40: 6368 5f77 696e 646f 7727 2c20 2733 2064  ch_window', '3 d
0000aa50: 6179 7327 290a 0a20 2020 2074 7279 3a0a  ays')..    try:.
0000aa60: 2020 2020 2020 2020 7469 6d65 6f75 7420          timeout 
0000aa70: 3d20 696e 7428 7061 7261 6d73 2e67 6574  = int(params.get
0000aa80: 2827 7469 6d65 6f75 7427 2c20 3132 3029  ('timeout', 120)
0000aa90: 290a 2020 2020 6578 6365 7074 2056 616c  ).    except Val
0000aaa0: 7565 4572 726f 7220 6173 2065 3a0a 2020  ueError as e:.  
0000aab0: 2020 2020 2020 6465 6d69 7374 6f2e 6465        demisto.de
0000aac0: 6275 6728 6627 4661 696c 6564 2063 6173  bug(f'Failed cas
0000aad0: 7469 6e67 2074 696d 656f 7574 2070 6172  ting timeout par
0000aae0: 616d 6574 6572 2074 6f20 696e 742c 2066  ameter to int, f
0000aaf0: 616c 6c69 6e67 2062 6163 6b20 746f 2031  alling back to 1
0000ab00: 3230 202d 207b 657d 2729 0a20 2020 2020  20 - {e}').     
0000ab10: 2020 2074 696d 656f 7574 203d 2031 3230     timeout = 120
0000ab20: 0a20 2020 2074 7279 3a0a 2020 2020 2020  .    try:.      
0000ab30: 2020 6d61 785f 6665 7463 6820 3d20 696e    max_fetch = in
0000ab40: 7428 7061 7261 6d73 2e67 6574 2827 6d61  t(params.get('ma
0000ab50: 785f 6665 7463 6827 2c20 3130 2929 0a20  x_fetch', 10)). 
0000ab60: 2020 2065 7863 6570 7420 5661 6c75 6545     except ValueE
0000ab70: 7272 6f72 2061 7320 653a 0a20 2020 2020  rror as e:.     
0000ab80: 2020 2064 656d 6973 746f 2e64 6562 7567     demisto.debug
0000ab90: 2866 2746 6169 6c65 6420 6361 7374 696e  (f'Failed castin
0000aba0: 6720 6d61 7820 6665 7463 6820 7061 7261  g max fetch para
0000abb0: 6d65 7465 7220 746f 2069 6e74 2c20 6661  meter to int, fa
0000abc0: 6c6c 696e 6720 6261 636b 2074 6f20 3130  lling back to 10
0000abd0: 202d 207b 657d 2729 0a20 2020 2020 2020   - {e}').       
0000abe0: 206d 6178 5f66 6574 6368 203d 2031 300a   max_fetch = 10.
0000abf0: 0a20 2020 206e 6f6e 6365 203d 2022 222e  .    nonce = "".
0000ac00: 6a6f 696e 285b 7365 6372 6574 732e 6368  join([secrets.ch
0000ac10: 6f69 6365 2873 7472 696e 672e 6173 6369  oice(string.asci
0000ac20: 695f 6c65 7474 6572 7320 2b20 7374 7269  i_letters + stri
0000ac30: 6e67 2e64 6967 6974 7329 2066 6f72 205f  ng.digits) for _
0000ac40: 2069 6e20 7261 6e67 6528 3634 295d 290a   in range(64)]).
0000ac50: 2020 2020 7469 6d65 7374 616d 7020 3d20      timestamp = 
0000ac60: 7374 7228 696e 7428 6461 7465 7469 6d65  str(int(datetime
0000ac70: 2e6e 6f77 2874 696d 657a 6f6e 652e 7574  .now(timezone.ut
0000ac80: 6329 2e74 696d 6573 7461 6d70 2829 2920  c).timestamp()) 
0000ac90: 2a20 3130 3030 290a 2020 2020 6175 7468  * 1000).    auth
0000aca0: 5f6b 6579 203d 2022 2573 2573 2573 2220  _key = "%s%s%s" 
0000acb0: 2520 2861 7069 5f6b 6579 2c20 6e6f 6e63  % (api_key, nonc
0000acc0: 652c 2074 696d 6573 7461 6d70 290a 2020  e, timestamp).  
0000acd0: 2020 6175 7468 5f6b 6579 203d 2061 7574    auth_key = aut
0000ace0: 685f 6b65 792e 656e 636f 6465 2822 7574  h_key.encode("ut
0000acf0: 662d 3822 290a 2020 2020 6170 695f 6b65  f-8").    api_ke
0000ad00: 795f 6861 7368 203d 2068 6173 686c 6962  y_hash = hashlib
0000ad10: 2e73 6861 3235 3628 6175 7468 5f6b 6579  .sha256(auth_key
0000ad20: 292e 6865 7864 6967 6573 7428 290a 0a20  ).hexdigest().. 
0000ad30: 2020 2069 6620 6172 6754 6f42 6f6f 6c65     if argToBoole
0000ad40: 616e 2870 6172 616d 732e 6765 7428 2270  an(params.get("p
0000ad50: 7265 7665 6e74 5f6f 6e6c 7922 2c20 4661  revent_only", Fa
0000ad60: 6c73 6529 293a 0a20 2020 2020 2020 2061  lse)):.        a
0000ad70: 7069 5f6b 6579 5f68 6173 6820 3d20 6170  pi_key_hash = ap
0000ad80: 695f 6b65 790a 0a20 2020 2068 6561 6465  i_key..    heade
0000ad90: 7273 203d 207b 0a20 2020 2020 2020 2022  rs = {.        "
0000ada0: 782d 7864 722d 7469 6d65 7374 616d 7022  x-xdr-timestamp"
0000adb0: 3a20 7469 6d65 7374 616d 702c 0a20 2020  : timestamp,.   
0000adc0: 2020 2020 2022 782d 7864 722d 6e6f 6e63       "x-xdr-nonc
0000add0: 6522 3a20 6e6f 6e63 652c 0a20 2020 2020  e": nonce,.     
0000ade0: 2020 2022 782d 7864 722d 6175 7468 2d69     "x-xdr-auth-i
0000adf0: 6422 3a20 7374 7228 6170 695f 6b65 795f  d": str(api_key_
0000ae00: 6964 292c 0a20 2020 2020 2020 2022 4175  id),.        "Au
0000ae10: 7468 6f72 697a 6174 696f 6e22 3a20 6170  thorization": ap
0000ae20: 695f 6b65 795f 6861 7368 0a20 2020 207d  i_key_hash.    }
0000ae30: 0a0a 2020 2020 636c 6965 6e74 203d 2043  ..    client = C
0000ae40: 6c69 656e 7428 0a20 2020 2020 2020 2062  lient(.        b
0000ae50: 6173 655f 7572 6c3d 6261 7365 5f75 726c  ase_url=base_url
0000ae60: 2c0a 2020 2020 2020 2020 7072 6f78 793d  ,.        proxy=
0000ae70: 7072 6f78 792c 0a20 2020 2020 2020 2076  proxy,.        v
0000ae80: 6572 6966 793d 7665 7269 6679 5f63 6572  erify=verify_cer
0000ae90: 742c 0a20 2020 2020 2020 2068 6561 6465  t,.        heade
0000aea0: 7273 3d68 6561 6465 7273 2c0a 2020 2020  rs=headers,.    
0000aeb0: 2020 2020 7469 6d65 6f75 743d 7469 6d65      timeout=time
0000aec0: 6f75 740a 2020 2020 290a 0a20 2020 2061  out.    )..    a
0000aed0: 7267 7320 3d20 6465 6d69 7374 6f2e 6172  rgs = demisto.ar
0000aee0: 6773 2829 0a20 2020 2061 7267 735b 2269  gs().    args["i
0000aef0: 6e74 6567 7261 7469 6f6e 5f63 6f6e 7465  ntegration_conte
0000af00: 7874 5f62 7261 6e64 225d 203d 2049 4e54  xt_brand"] = INT
0000af10: 4547 5241 5449 4f4e 5f43 4f4e 5445 5854  EGRATION_CONTEXT
0000af20: 5f42 5241 4e44 0a20 2020 2061 7267 735b  _BRAND.    args[
0000af30: 2269 6e74 6567 7261 7469 6f6e 5f6e 616d  "integration_nam
0000af40: 6522 5d20 3d20 494e 5445 4752 4154 494f  e"] = INTEGRATIO
0000af50: 4e5f 4e41 4d45 0a0a 2020 2020 7472 793a  N_NAME..    try:
0000af60: 0a20 2020 2020 2020 2069 6620 636f 6d6d  .        if comm
0000af70: 616e 6420 3d3d 2027 7465 7374 2d6d 6f64  and == 'test-mod
0000af80: 756c 6527 3a0a 2020 2020 2020 2020 2020  ule':.          
0000af90: 2020 636c 6965 6e74 2e74 6573 745f 6d6f    client.test_mo
0000afa0: 6475 6c65 2866 6972 7374 5f66 6574 6368  dule(first_fetch
0000afb0: 5f74 696d 6529 0a20 2020 2020 2020 2020  _time).         
0000afc0: 2020 2064 656d 6973 746f 2e72 6573 756c     demisto.resul
0000afd0: 7473 2827 6f6b 2729 0a0a 2020 2020 2020  ts('ok')..      
0000afe0: 2020 656c 6966 2063 6f6d 6d61 6e64 203d    elif command =
0000aff0: 3d20 2766 6574 6368 2d69 6e63 6964 656e  = 'fetch-inciden
0000b000: 7473 273a 0a20 2020 2020 2020 2020 2020  ts':.           
0000b010: 2069 6e74 6567 7261 7469 6f6e 5f69 6e73   integration_ins
0000b020: 7461 6e63 6520 3d20 6465 6d69 7374 6f2e  tance = demisto.
0000b030: 696e 7465 6772 6174 696f 6e49 6e73 7461  integrationInsta
0000b040: 6e63 6528 290a 2020 2020 2020 2020 2020  nce().          
0000b050: 2020 6e65 7874 5f72 756e 2c20 696e 6369    next_run, inci
0000b060: 6465 6e74 7320 3d20 6665 7463 685f 696e  dents = fetch_in
0000b070: 6369 6465 6e74 7328 636c 6965 6e74 2c20  cidents(client, 
0000b080: 6669 7273 745f 6665 7463 685f 7469 6d65  first_fetch_time
0000b090: 2c20 696e 7465 6772 6174 696f 6e5f 696e  , integration_in
0000b0a0: 7374 616e 6365 2c0a 2020 2020 2020 2020  stance,.        
0000b0b0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000b0c0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000b0d0: 2020 2020 2020 2020 2020 6465 6d69 7374            demist
0000b0e0: 6f2e 6765 744c 6173 7452 756e 2829 2e67  o.getLastRun().g
0000b0f0: 6574 2827 6e65 7874 5f72 756e 2729 2c20  et('next_run'), 
0000b100: 6d61 785f 6665 7463 682c 2073 7461 7475  max_fetch, statu
0000b110: 7365 732c 2073 7461 7272 6564 2c0a 2020  ses, starred,.  
0000b120: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000b130: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000b140: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000b150: 7374 6172 7265 645f 696e 6369 6465 6e74  starred_incident
0000b160: 735f 6665 7463 685f 7769 6e64 6f77 290a  s_fetch_window).
0000b170: 2020 2020 2020 2020 2020 2020 6c61 7374              last
0000b180: 5f72 756e 5f6f 626a 203d 2064 656d 6973  _run_obj = demis
0000b190: 746f 2e67 6574 4c61 7374 5275 6e28 290a  to.getLastRun().
0000b1a0: 2020 2020 2020 2020 2020 2020 6c61 7374              last
0000b1b0: 5f72 756e 5f6f 626a 5b27 6e65 7874 5f72  _run_obj['next_r
0000b1c0: 756e 275d 203d 206e 6578 745f 7275 6e0a  un'] = next_run.
0000b1d0: 2020 2020 2020 2020 2020 2020 6465 6d69              demi
0000b1e0: 7374 6f2e 7365 744c 6173 7452 756e 286c  sto.setLastRun(l
0000b1f0: 6173 745f 7275 6e5f 6f62 6a29 0a20 2020  ast_run_obj).   
0000b200: 2020 2020 2020 2020 2064 656d 6973 746f           demisto
0000b210: 2e69 6e63 6964 656e 7473 2869 6e63 6964  .incidents(incid
0000b220: 656e 7473 290a 0a20 2020 2020 2020 2065  ents)..        e
0000b230: 6c69 6620 636f 6d6d 616e 6420 3d3d 2027  lif command == '
0000b240: 7864 722d 6765 742d 696e 6369 6465 6e74  xdr-get-incident
0000b250: 7327 3a0a 2020 2020 2020 2020 2020 2020  s':.            
0000b260: 7265 7475 726e 5f6f 7574 7075 7473 282a  return_outputs(*
0000b270: 6765 745f 696e 6369 6465 6e74 735f 636f  get_incidents_co
0000b280: 6d6d 616e 6428 636c 6965 6e74 2c20 6172  mmand(client, ar
0000b290: 6773 2929 0a0a 2020 2020 2020 2020 656c  gs))..        el
0000b2a0: 6966 2063 6f6d 6d61 6e64 203d 3d20 2778  if command == 'x
0000b2b0: 6472 2d67 6574 2d69 6e63 6964 656e 742d  dr-get-incident-
0000b2c0: 6578 7472 612d 6461 7461 273a 0a20 2020  extra-data':.   
0000b2d0: 2020 2020 2020 2020 2072 6574 7572 6e5f           return_
0000b2e0: 6f75 7470 7574 7328 2a67 6574 5f69 6e63  outputs(*get_inc
0000b2f0: 6964 656e 745f 6578 7472 615f 6461 7461  ident_extra_data
0000b300: 5f63 6f6d 6d61 6e64 2863 6c69 656e 742c  _command(client,
0000b310: 2061 7267 7329 290a 0a20 2020 2020 2020   args))..       
0000b320: 2065 6c69 6620 636f 6d6d 616e 6420 3d3d   elif command ==
0000b330: 2027 7864 722d 7570 6461 7465 2d69 6e63   'xdr-update-inc
0000b340: 6964 656e 7427 3a0a 2020 2020 2020 2020  ident':.        
0000b350: 2020 2020 7265 7475 726e 5f6f 7574 7075      return_outpu
0000b360: 7473 282a 7570 6461 7465 5f69 6e63 6964  ts(*update_incid
0000b370: 656e 745f 636f 6d6d 616e 6428 636c 6965  ent_command(clie
0000b380: 6e74 2c20 6172 6773 2929 0a0a 2020 2020  nt, args))..    
0000b390: 2020 2020 656c 6966 2063 6f6d 6d61 6e64      elif command
0000b3a0: 203d 3d20 2778 6472 2d67 6574 2d65 6e64   == 'xdr-get-end
0000b3b0: 706f 696e 7473 273a 0a20 2020 2020 2020  points':.       
0000b3c0: 2020 2020 2072 6574 7572 6e5f 7265 7375       return_resu
0000b3d0: 6c74 7328 6765 745f 656e 6470 6f69 6e74  lts(get_endpoint
0000b3e0: 735f 636f 6d6d 616e 6428 636c 6965 6e74  s_command(client
0000b3f0: 2c20 6172 6773 2929 0a0a 2020 2020 2020  , args))..      
0000b400: 2020 656c 6966 2063 6f6d 6d61 6e64 203d    elif command =
0000b410: 3d20 2778 6472 2d69 6e73 6572 742d 7061  = 'xdr-insert-pa
0000b420: 7273 6564 2d61 6c65 7274 273a 0a20 2020  rsed-alert':.   
0000b430: 2020 2020 2020 2020 2072 6574 7572 6e5f           return_
0000b440: 6f75 7470 7574 7328 2a69 6e73 6572 745f  outputs(*insert_
0000b450: 7061 7273 6564 5f61 6c65 7274 5f63 6f6d  parsed_alert_com
0000b460: 6d61 6e64 2863 6c69 656e 742c 2061 7267  mand(client, arg
0000b470: 7329 290a 0a20 2020 2020 2020 2065 6c69  s))..        eli
0000b480: 6620 636f 6d6d 616e 6420 3d3d 2027 7864  f command == 'xd
0000b490: 722d 696e 7365 7274 2d63 6566 2d61 6c65  r-insert-cef-ale
0000b4a0: 7274 7327 3a0a 2020 2020 2020 2020 2020  rts':.          
0000b4b0: 2020 7265 7475 726e 5f6f 7574 7075 7473    return_outputs
0000b4c0: 282a 696e 7365 7274 5f63 6566 5f61 6c65  (*insert_cef_ale
0000b4d0: 7274 735f 636f 6d6d 616e 6428 636c 6965  rts_command(clie
0000b4e0: 6e74 2c20 6172 6773 2929 0a0a 2020 2020  nt, args))..    
0000b4f0: 2020 2020 656c 6966 2063 6f6d 6d61 6e64      elif command
0000b500: 203d 3d20 2778 6472 2d69 736f 6c61 7465   == 'xdr-isolate
0000b510: 2d65 6e64 706f 696e 7427 3a0a 2020 2020  -endpoint':.    
0000b520: 2020 2020 2020 2020 7265 7475 726e 5f72          return_r
0000b530: 6573 756c 7473 2869 736f 6c61 7465 5f65  esults(isolate_e
0000b540: 6e64 706f 696e 745f 636f 6d6d 616e 6428  ndpoint_command(
0000b550: 636c 6965 6e74 2c20 6172 6773 2929 0a0a  client, args))..
0000b560: 2020 2020 2020 2020 656c 6966 2063 6f6d          elif com
0000b570: 6d61 6e64 203d 3d20 2778 6472 2d65 6e64  mand == 'xdr-end
0000b580: 706f 696e 742d 6973 6f6c 6174 6527 3a0a  point-isolate':.
0000b590: 2020 2020 2020 2020 2020 2020 706f 6c6c              poll
0000b5a0: 696e 675f 6172 6773 203d 207b 0a20 2020  ing_args = {.   
0000b5b0: 2020 2020 2020 2020 2020 2020 202a 2a61               **a
0000b5c0: 7267 732c 0a20 2020 2020 2020 2020 2020  rgs,.           
0000b5d0: 2020 2020 2022 656e 6470 6f69 6e74 5f69       "endpoint_i
0000b5e0: 645f 6c69 7374 223a 2061 7267 732e 6765  d_list": args.ge
0000b5f0: 7428 2765 6e64 706f 696e 745f 6964 2729  t('endpoint_id')
0000b600: 0a20 2020 2020 2020 2020 2020 207d 0a20  .            }. 
0000b610: 2020 2020 2020 2020 2020 2072 6574 7572             retur
0000b620: 6e5f 7265 7375 6c74 7328 7275 6e5f 706f  n_results(run_po
0000b630: 6c6c 696e 675f 636f 6d6d 616e 6428 636c  lling_command(cl
0000b640: 6965 6e74 3d63 6c69 656e 742c 0a20 2020  ient=client,.   
0000b650: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000b660: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000b670: 2020 2020 2020 2020 2020 2020 6172 6773              args
0000b680: 3d70 6f6c 6c69 6e67 5f61 7267 732c 0a20  =polling_args,. 
0000b690: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000b6a0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000b6b0: 2020 2020 2020 2020 2020 2020 2020 636d                cm
0000b6c0: 643d 2278 6472 2d65 6e64 706f 696e 742d  d="xdr-endpoint-
0000b6d0: 6973 6f6c 6174 6522 2c0a 2020 2020 2020  isolate",.      
0000b6e0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000b6f0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000b700: 2020 2020 2020 2020 2063 6f6d 6d61 6e64           command
0000b710: 5f66 756e 6374 696f 6e3d 6973 6f6c 6174  _function=isolat
0000b720: 655f 656e 6470 6f69 6e74 5f63 6f6d 6d61  e_endpoint_comma
0000b730: 6e64 2c0a 2020 2020 2020 2020 2020 2020  nd,.            
0000b740: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000b750: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000b760: 2020 2063 6f6d 6d61 6e64 5f64 6563 6973     command_decis
0000b770: 696f 6e5f 6669 656c 643d 2261 6374 696f  ion_field="actio
0000b780: 6e5f 6964 222c 0a20 2020 2020 2020 2020  n_id",.         
0000b790: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000b7a0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000b7b0: 2020 2020 2020 7265 7375 6c74 735f 6675        results_fu
0000b7c0: 6e63 7469 6f6e 3d67 6574 5f65 6e64 706f  nction=get_endpo
0000b7d0: 696e 7473 5f63 6f6d 6d61 6e64 2c0a 2020  ints_command,.  
0000b7e0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000b7f0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000b800: 2020 2020 2020 2020 2020 2020 2070 6f6c               pol
0000b810: 6c69 6e67 5f66 6965 6c64 3d22 6973 5f69  ling_field="is_i
0000b820: 736f 6c61 7465 6422 2c0a 2020 2020 2020  solated",.      
0000b830: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000b840: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000b850: 2020 2020 2020 2020 2070 6f6c 6c69 6e67           polling
0000b860: 5f76 616c 7565 3d5b 2241 4745 4e54 5f49  _value=["AGENT_I
0000b870: 534f 4c41 5445 4422 5d2c 0a20 2020 2020  SOLATED"],.     
0000b880: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000b890: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000b8a0: 2020 2020 2020 2020 2020 7374 6f70 5f70            stop_p
0000b8b0: 6f6c 6c69 6e67 3d54 7275 6529 290a 0a20  olling=True)).. 
0000b8c0: 2020 2020 2020 2065 6c69 6620 636f 6d6d         elif comm
0000b8d0: 616e 6420 3d3d 2027 7864 722d 756e 6973  and == 'xdr-unis
0000b8e0: 6f6c 6174 652d 656e 6470 6f69 6e74 273a  olate-endpoint':
0000b8f0: 0a20 2020 2020 2020 2020 2020 2072 6574  .            ret
0000b900: 7572 6e5f 7265 7375 6c74 7328 756e 6973  urn_results(unis
0000b910: 6f6c 6174 655f 656e 6470 6f69 6e74 5f63  olate_endpoint_c
0000b920: 6f6d 6d61 6e64 2863 6c69 656e 742c 2061  ommand(client, a
0000b930: 7267 7329 290a 0a20 2020 2020 2020 2065  rgs))..        e
0000b940: 6c69 6620 636f 6d6d 616e 6420 3d3d 2027  lif command == '
0000b950: 7864 722d 656e 6470 6f69 6e74 2d75 6e69  xdr-endpoint-uni
0000b960: 736f 6c61 7465 273a 0a20 2020 2020 2020  solate':.       
0000b970: 2020 2020 2070 6f6c 6c69 6e67 5f61 7267       polling_arg
0000b980: 7320 3d20 7b0a 2020 2020 2020 2020 2020  s = {.          
0000b990: 2020 2020 2020 2a2a 6172 6773 2c0a 2020        **args,.  
0000b9a0: 2020 2020 2020 2020 2020 2020 2020 2265                "e
0000b9b0: 6e64 706f 696e 745f 6964 5f6c 6973 7422  ndpoint_id_list"
0000b9c0: 3a20 6172 6773 2e67 6574 2827 656e 6470  : args.get('endp
0000b9d0: 6f69 6e74 5f69 6427 290a 2020 2020 2020  oint_id').      
0000b9e0: 2020 2020 2020 7d0a 2020 2020 2020 2020        }.        
0000b9f0: 2020 2020 7265 7475 726e 5f72 6573 756c      return_resul
0000ba00: 7473 2872 756e 5f70 6f6c 6c69 6e67 5f63  ts(run_polling_c
0000ba10: 6f6d 6d61 6e64 2863 6c69 656e 743d 636c  ommand(client=cl
0000ba20: 6965 6e74 2c0a 2020 2020 2020 2020 2020  ient,.          
0000ba30: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000ba40: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000ba50: 2020 2020 2061 7267 733d 706f 6c6c 696e       args=pollin
0000ba60: 675f 6172 6773 2c0a 2020 2020 2020 2020  g_args,.        
0000ba70: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000ba80: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000ba90: 2020 2020 2020 2063 6d64 3d22 7864 722d         cmd="xdr-
0000baa0: 656e 6470 6f69 6e74 2d75 6e69 736f 6c61  endpoint-unisola
0000bab0: 7465 222c 0a20 2020 2020 2020 2020 2020  te",.           
0000bac0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000bad0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000bae0: 2020 2020 636f 6d6d 616e 645f 6675 6e63      command_func
0000baf0: 7469 6f6e 3d75 6e69 736f 6c61 7465 5f65  tion=unisolate_e
0000bb00: 6e64 706f 696e 745f 636f 6d6d 616e 642c  ndpoint_command,
0000bb10: 0a20 2020 2020 2020 2020 2020 2020 2020  .               
0000bb20: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000bb30: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000bb40: 636f 6d6d 616e 645f 6465 6369 7369 6f6e  command_decision
0000bb50: 5f66 6965 6c64 3d22 6163 7469 6f6e 5f69  _field="action_i
0000bb60: 6422 2c0a 2020 2020 2020 2020 2020 2020  d",.            
0000bb70: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000bb80: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000bb90: 2020 2072 6573 756c 7473 5f66 756e 6374     results_funct
0000bba0: 696f 6e3d 6765 745f 656e 6470 6f69 6e74  ion=get_endpoint
0000bbb0: 735f 636f 6d6d 616e 642c 0a20 2020 2020  s_command,.     
0000bbc0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000bbd0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000bbe0: 2020 2020 2020 2020 2020 706f 6c6c 696e            pollin
0000bbf0: 675f 6669 656c 643d 2269 735f 6973 6f6c  g_field="is_isol
0000bc00: 6174 6564 222c 0a20 2020 2020 2020 2020  ated",.         
0000bc10: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000bc20: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000bc30: 2020 2020 2020 706f 6c6c 696e 675f 7661        polling_va
0000bc40: 6c75 653d 5b22 4147 454e 545f 554e 4953  lue=["AGENT_UNIS
0000bc50: 4f4c 4154 4544 222c 0a20 2020 2020 2020  OLATED",.       
0000bc60: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000bc70: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000bc80: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000bc90: 2020 2020 2020 2022 4341 4e43 454c 4c45         "CANCELLE
0000bca0: 4422 2c0a 2020 2020 2020 2020 2020 2020  D",.            
0000bcb0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000bcc0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000bcd0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000bce0: 2020 22d6 bf50 454e 4449 4e47 5f41 424f    "..PENDING_ABO
0000bcf0: 5254 222c 0a20 2020 2020 2020 2020 2020  RT",.           
0000bd00: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000bd10: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000bd20: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000bd30: 2020 2022 4142 4f52 5445 4422 2c0a 2020     "ABORTED",.  
0000bd40: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000bd50: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000bd60: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000bd70: 2020 2020 2020 2020 2020 2020 2245 5850              "EXP
0000bd80: 4952 4544 222c 0a20 2020 2020 2020 2020  IRED",.         
0000bd90: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000bda0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000bdb0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000bdc0: 2020 2020 2022 434f 4d50 4c45 5445 445f       "COMPLETED_
0000bdd0: 5041 5254 4941 4c22 2c0a 2020 2020 2020  PARTIAL",.      
0000bde0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000bdf0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000be00: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000be10: 2020 2020 2020 2020 2243 4f4d 504c 4554          "COMPLET
0000be20: 4544 5f53 5543 4345 5353 4655 4c4c 5922  ED_SUCCESSFULLY"
0000be30: 2c0a 2020 2020 2020 2020 2020 2020 2020  ,.              
0000be40: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000be50: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000be60: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000be70: 2246 4149 4c45 4422 2c0a 2020 2020 2020  "FAILED",.      
0000be80: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000be90: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000bea0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000beb0: 2020 2020 2020 2020 2254 494d 454f 5554          "TIMEOUT
0000bec0: 225d 2c0a 2020 2020 2020 2020 2020 2020  "],.            
0000bed0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000bee0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000bef0: 2020 2073 746f 705f 706f 6c6c 696e 673d     stop_polling=
0000bf00: 5472 7565 2929 0a0a 2020 2020 2020 2020  True))..        
0000bf10: 656c 6966 2063 6f6d 6d61 6e64 203d 3d20  elif command == 
0000bf20: 2778 6472 2d67 6574 2d64 6973 7472 6962  'xdr-get-distrib
0000bf30: 7574 696f 6e2d 7572 6c27 3a0a 2020 2020  ution-url':.    
0000bf40: 2020 2020 2020 2020 7265 7475 726e 5f6f          return_o
0000bf50: 7574 7075 7473 282a 6765 745f 6469 7374  utputs(*get_dist
0000bf60: 7269 6275 7469 6f6e 5f75 726c 5f63 6f6d  ribution_url_com
0000bf70: 6d61 6e64 2863 6c69 656e 742c 2061 7267  mand(client, arg
0000bf80: 7329 290a 0a20 2020 2020 2020 2065 6c69  s))..        eli
0000bf90: 6620 636f 6d6d 616e 6420 3d3d 2027 7864  f command == 'xd
0000bfa0: 722d 6765 742d 6372 6561 7465 2d64 6973  r-get-create-dis
0000bfb0: 7472 6962 7574 696f 6e2d 7374 6174 7573  tribution-status
0000bfc0: 273a 0a20 2020 2020 2020 2020 2020 2072  ':.            r
0000bfd0: 6574 7572 6e5f 6f75 7470 7574 7328 2a67  eturn_outputs(*g
0000bfe0: 6574 5f64 6973 7472 6962 7574 696f 6e5f  et_distribution_
0000bff0: 7374 6174 7573 5f63 6f6d 6d61 6e64 2863  status_command(c
0000c000: 6c69 656e 742c 2061 7267 7329 290a 0a20  lient, args)).. 
0000c010: 2020 2020 2020 2065 6c69 6620 636f 6d6d         elif comm
0000c020: 616e 6420 3d3d 2027 7864 722d 6765 742d  and == 'xdr-get-
0000c030: 6469 7374 7269 6275 7469 6f6e 2d76 6572  distribution-ver
0000c040: 7369 6f6e 7327 3a0a 2020 2020 2020 2020  sions':.        
0000c050: 2020 2020 7265 7475 726e 5f6f 7574 7075      return_outpu
0000c060: 7473 282a 6765 745f 6469 7374 7269 6275  ts(*get_distribu
0000c070: 7469 6f6e 5f76 6572 7369 6f6e 735f 636f  tion_versions_co
0000c080: 6d6d 616e 6428 636c 6965 6e74 2c20 6172  mmand(client, ar
0000c090: 6773 2929 0a0a 2020 2020 2020 2020 656c  gs))..        el
0000c0a0: 6966 2063 6f6d 6d61 6e64 203d 3d20 2778  if command == 'x
0000c0b0: 6472 2d63 7265 6174 652d 6469 7374 7269  dr-create-distri
0000c0c0: 6275 7469 6f6e 273a 0a20 2020 2020 2020  bution':.       
0000c0d0: 2020 2020 2072 6574 7572 6e5f 6f75 7470       return_outp
0000c0e0: 7574 7328 2a63 7265 6174 655f 6469 7374  uts(*create_dist
0000c0f0: 7269 6275 7469 6f6e 5f63 6f6d 6d61 6e64  ribution_command
0000c100: 2863 6c69 656e 742c 2061 7267 7329 290a  (client, args)).
0000c110: 0a20 2020 2020 2020 2065 6c69 6620 636f  .        elif co
0000c120: 6d6d 616e 6420 3d3d 2027 7864 722d 6765  mmand == 'xdr-ge
0000c130: 742d 6175 6469 742d 6d61 6e61 6765 6d65  t-audit-manageme
0000c140: 6e74 2d6c 6f67 7327 3a0a 2020 2020 2020  nt-logs':.      
0000c150: 2020 2020 2020 7265 7475 726e 5f6f 7574        return_out
0000c160: 7075 7473 282a 6765 745f 6175 6469 745f  puts(*get_audit_
0000c170: 6d61 6e61 6765 6d65 6e74 5f6c 6f67 735f  management_logs_
0000c180: 636f 6d6d 616e 6428 636c 6965 6e74 2c20  command(client, 
0000c190: 6172 6773 2929 0a0a 2020 2020 2020 2020  args))..        
0000c1a0: 656c 6966 2063 6f6d 6d61 6e64 203d 3d20  elif command == 
0000c1b0: 2778 6472 2d67 6574 2d61 7564 6974 2d61  'xdr-get-audit-a
0000c1c0: 6765 6e74 2d72 6570 6f72 7473 273a 0a20  gent-reports':. 
0000c1d0: 2020 2020 2020 2020 2020 2072 6574 7572             retur
0000c1e0: 6e5f 6f75 7470 7574 7328 2a67 6574 5f61  n_outputs(*get_a
0000c1f0: 7564 6974 5f61 6765 6e74 5f72 6570 6f72  udit_agent_repor
0000c200: 7473 5f63 6f6d 6d61 6e64 2863 6c69 656e  ts_command(clien
0000c210: 742c 2061 7267 7329 290a 0a20 2020 2020  t, args))..     
0000c220: 2020 2065 6c69 6620 636f 6d6d 616e 6420     elif command 
0000c230: 3d3d 2027 7864 722d 7175 6172 616e 7469  == 'xdr-quaranti
0000c240: 6e65 2d66 696c 6573 273a 0a20 2020 2020  ne-files':.     
0000c250: 2020 2020 2020 2072 6574 7572 6e5f 7265         return_re
0000c260: 7375 6c74 7328 7175 6172 616e 7469 6e65  sults(quarantine
0000c270: 5f66 696c 6573 5f63 6f6d 6d61 6e64 2863  _files_command(c
0000c280: 6c69 656e 742c 2061 7267 7329 290a 0a20  lient, args)).. 
0000c290: 2020 2020 2020 2065 6c69 6620 636f 6d6d         elif comm
0000c2a0: 616e 6420 3d3d 2027 636f 7265 2d71 7561  and == 'core-qua
0000c2b0: 7261 6e74 696e 652d 6669 6c65 7327 3a0a  rantine-files':.
0000c2c0: 2020 2020 2020 2020 2020 2020 706f 6c6c              poll
0000c2d0: 696e 675f 6172 6773 203d 207b 0a20 2020  ing_args = {.   
0000c2e0: 2020 2020 2020 2020 2020 2020 202a 2a61               **a
0000c2f0: 7267 732c 0a20 2020 2020 2020 2020 2020  rgs,.           
0000c300: 2020 2020 2022 656e 6470 6f69 6e74 5f69       "endpoint_i
0000c310: 6422 3a20 6172 6754 6f4c 6973 7428 6172  d": argToList(ar
0000c320: 6773 2e67 6574 2822 656e 6470 6f69 6e74  gs.get("endpoint
0000c330: 5f69 645f 6c69 7374 2229 295b 305d 0a20  _id_list"))[0]. 
0000c340: 2020 2020 2020 2020 2020 207d 0a20 2020             }.   
0000c350: 2020 2020 2020 2020 2072 6574 7572 6e5f           return_
0000c360: 7265 7375 6c74 7328 7275 6e5f 706f 6c6c  results(run_poll
0000c370: 696e 675f 636f 6d6d 616e 6428 636c 6965  ing_command(clie
0000c380: 6e74 3d63 6c69 656e 742c 0a20 2020 2020  nt=client,.     
0000c390: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000c3a0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000c3b0: 2020 2020 2020 2020 2020 6172 6773 3d70            args=p
0000c3c0: 6f6c 6c69 6e67 5f61 7267 732c 0a20 2020  olling_args,.   
0000c3d0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000c3e0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000c3f0: 2020 2020 2020 2020 2020 2020 636d 643d              cmd=
0000c400: 2263 6f72 652d 7175 6172 616e 7469 6e65  "core-quarantine
0000c410: 2d66 696c 6573 222c 0a20 2020 2020 2020  -files",.       
0000c420: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000c430: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000c440: 2020 2020 2020 2020 636f 6d6d 616e 645f          command_
0000c450: 6675 6e63 7469 6f6e 3d71 7561 7261 6e74  function=quarant
0000c460: 696e 655f 6669 6c65 735f 636f 6d6d 616e  ine_files_comman
0000c470: 642c 0a20 2020 2020 2020 2020 2020 2020  d,.             
0000c480: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000c490: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000c4a0: 2020 636f 6d6d 616e 645f 6465 6369 7369    command_decisi
0000c4b0: 6f6e 5f66 6965 6c64 3d22 6163 7469 6f6e  on_field="action
0000c4c0: 5f69 6422 2c0a 2020 2020 2020 2020 2020  _id",.          
0000c4d0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000c4e0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000c4f0: 2020 2020 2072 6573 756c 7473 5f66 756e       results_fun
0000c500: 6374 696f 6e3d 6163 7469 6f6e 5f73 7461  ction=action_sta
0000c510: 7475 735f 6765 745f 636f 6d6d 616e 642c  tus_get_command,
0000c520: 0a20 2020 2020 2020 2020 2020 2020 2020  .               
0000c530: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000c540: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000c550: 706f 6c6c 696e 675f 6669 656c 643d 2273  polling_field="s
0000c560: 7461 7475 7322 2c0a 2020 2020 2020 2020  tatus",.        
0000c570: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000c580: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000c590: 2020 2020 2020 2070 6f6c 6c69 6e67 5f76         polling_v
0000c5a0: 616c 7565 3d5b 2250 454e 4449 4e47 222c  alue=["PENDING",
0000c5b0: 0a20 2020 2020 2020 2020 2020 2020 2020  .               
0000c5c0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000c5d0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000c5e0: 2020 2020 2020 2020 2020 2020 2020 2022                 "
0000c5f0: 494e 5f50 524f 4752 4553 5322 2c0a 2020  IN_PROGRESS",.  
0000c600: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000c610: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000c620: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000c630: 2020 2020 2020 2020 2020 2020 2250 454e              "PEN
0000c640: 4449 4e47 5f41 424f 5254 225d 2929 0a0a  DING_ABORT"]))..
0000c650: 2020 2020 2020 2020 656c 6966 2063 6f6d          elif com
0000c660: 6d61 6e64 203d 3d20 2778 6472 2d67 6574  mand == 'xdr-get
0000c670: 2d71 7561 7261 6e74 696e 652d 7374 6174  -quarantine-stat
0000c680: 7573 273a 0a20 2020 2020 2020 2020 2020  us':.           
0000c690: 2072 6574 7572 6e5f 7265 7375 6c74 7328   return_results(
0000c6a0: 6765 745f 7175 6172 616e 7469 6e65 5f73  get_quarantine_s
0000c6b0: 7461 7475 735f 636f 6d6d 616e 6428 636c  tatus_command(cl
0000c6c0: 6965 6e74 2c20 6172 6773 2929 0a0a 2020  ient, args))..  
0000c6d0: 2020 2020 2020 656c 6966 2063 6f6d 6d61        elif comma
0000c6e0: 6e64 203d 3d20 2778 6472 2d72 6573 746f  nd == 'xdr-resto
0000c6f0: 7265 2d66 696c 6527 3a0a 2020 2020 2020  re-file':.      
0000c700: 2020 2020 2020 7265 7475 726e 5f72 6573        return_res
0000c710: 756c 7473 2872 6573 746f 7265 5f66 696c  ults(restore_fil
0000c720: 655f 636f 6d6d 616e 6428 636c 6965 6e74  e_command(client
0000c730: 2c20 6172 6773 2929 0a0a 2020 2020 2020  , args))..      
0000c740: 2020 656c 6966 2063 6f6d 6d61 6e64 203d    elif command =
0000c750: 3d20 2778 6472 2d66 696c 652d 7265 7374  = 'xdr-file-rest
0000c760: 6f72 6527 3a0a 2020 2020 2020 2020 2020  ore':.          
0000c770: 2020 7265 7475 726e 5f72 6573 756c 7473    return_results
0000c780: 2872 756e 5f70 6f6c 6c69 6e67 5f63 6f6d  (run_polling_com
0000c790: 6d61 6e64 2863 6c69 656e 743d 636c 6965  mand(client=clie
0000c7a0: 6e74 2c0a 2020 2020 2020 2020 2020 2020  nt,.            
0000c7b0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000c7c0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000c7d0: 2020 2061 7267 733d 6172 6773 2c0a 2020     args=args,.  
0000c7e0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000c7f0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000c800: 2020 2020 2020 2020 2020 2020 2063 6d64               cmd
0000c810: 3d22 7864 722d 6669 6c65 2d72 6573 746f  ="xdr-file-resto
0000c820: 7265 222c 0a20 2020 2020 2020 2020 2020  re",.           
0000c830: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000c840: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000c850: 2020 2020 636f 6d6d 616e 645f 6675 6e63      command_func
0000c860: 7469 6f6e 3d72 6573 746f 7265 5f66 696c  tion=restore_fil
0000c870: 655f 636f 6d6d 616e 642c 0a20 2020 2020  e_command,.     
0000c880: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000c890: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000c8a0: 2020 2020 2020 2020 2020 636f 6d6d 616e            comman
0000c8b0: 645f 6465 6369 7369 6f6e 5f66 6965 6c64  d_decision_field
0000c8c0: 3d22 6163 7469 6f6e 5f69 6422 2c0a 2020  ="action_id",.  
0000c8d0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000c8e0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000c8f0: 2020 2020 2020 2020 2020 2020 2072 6573               res
0000c900: 756c 7473 5f66 756e 6374 696f 6e3d 6163  ults_function=ac
0000c910: 7469 6f6e 5f73 7461 7475 735f 6765 745f  tion_status_get_
0000c920: 636f 6d6d 616e 642c 0a20 2020 2020 2020  command,.       
0000c930: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000c940: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000c950: 2020 2020 2020 2020 706f 6c6c 696e 675f          polling_
0000c960: 6669 656c 643d 2273 7461 7475 7322 2c0a  field="status",.
0000c970: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000c980: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000c990: 2020 2020 2020 2020 2020 2020 2020 2070                 p
0000c9a0: 6f6c 6c69 6e67 5f76 616c 7565 3d5b 2250  olling_value=["P
0000c9b0: 454e 4449 4e47 222c 0a20 2020 2020 2020  ENDING",.       
0000c9c0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000c9d0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000c9e0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000c9f0: 2020 2020 2020 2022 494e 5f50 524f 4752         "IN_PROGR
0000ca00: 4553 5322 2c0a 2020 2020 2020 2020 2020  ESS",.          
0000ca10: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000ca20: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000ca30: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000ca40: 2020 2020 2250 454e 4449 4e47 5f41 424f      "PENDING_ABO
0000ca50: 5254 225d 2929 0a0a 2020 2020 2020 2020  RT"]))..        
0000ca60: 656c 6966 2063 6f6d 6d61 6e64 203d 3d20  elif command == 
0000ca70: 2778 6472 2d65 6e64 706f 696e 742d 7363  'xdr-endpoint-sc
0000ca80: 616e 273a 0a20 2020 2020 2020 2020 2020  an':.           
0000ca90: 2072 6574 7572 6e5f 7265 7375 6c74 7328   return_results(
0000caa0: 656e 6470 6f69 6e74 5f73 6361 6e5f 636f  endpoint_scan_co
0000cab0: 6d6d 616e 6428 636c 6965 6e74 2c20 6172  mmand(client, ar
0000cac0: 6773 2929 0a0a 2020 2020 2020 2020 656c  gs))..        el
0000cad0: 6966 2063 6f6d 6d61 6e64 203d 3d20 2778  if command == 'x
0000cae0: 6472 2d65 6e64 706f 696e 742d 7363 616e  dr-endpoint-scan
0000caf0: 2d65 7865 6375 7465 273a 0a20 2020 2020  -execute':.     
0000cb00: 2020 2020 2020 2072 6574 7572 6e5f 7265         return_re
0000cb10: 7375 6c74 7328 7275 6e5f 706f 6c6c 696e  sults(run_pollin
0000cb20: 675f 636f 6d6d 616e 6428 636c 6965 6e74  g_command(client
0000cb30: 3d63 6c69 656e 742c 0a20 2020 2020 2020  =client,.       
0000cb40: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000cb50: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000cb60: 2020 2020 2020 2020 6172 6773 3d61 7267          args=arg
0000cb70: 732c 0a20 2020 2020 2020 2020 2020 2020  s,.             
0000cb80: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000cb90: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000cba0: 2020 636d 643d 2278 6472 2d65 6e64 706f    cmd="xdr-endpo
0000cbb0: 696e 742d 7363 616e 2d65 7865 6375 7465  int-scan-execute
0000cbc0: 222c 0a20 2020 2020 2020 2020 2020 2020  ",.             
0000cbd0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000cbe0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000cbf0: 2020 636f 6d6d 616e 645f 6675 6e63 7469    command_functi
0000cc00: 6f6e 3d65 6e64 706f 696e 745f 7363 616e  on=endpoint_scan
0000cc10: 5f63 6f6d 6d61 6e64 2c0a 2020 2020 2020  _command,.      
0000cc20: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000cc30: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000cc40: 2020 2020 2020 2020 2063 6f6d 6d61 6e64           command
0000cc50: 5f64 6563 6973 696f 6e5f 6669 656c 643d  _decision_field=
0000cc60: 2261 6374 696f 6e5f 6964 222c 0a20 2020  "action_id",.   
0000cc70: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000cc80: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000cc90: 2020 2020 2020 2020 2020 2020 7265 7375              resu
0000cca0: 6c74 735f 6675 6e63 7469 6f6e 3d61 6374  lts_function=act
0000ccb0: 696f 6e5f 7374 6174 7573 5f67 6574 5f63  ion_status_get_c
0000ccc0: 6f6d 6d61 6e64 2c0a 2020 2020 2020 2020  ommand,.        
0000ccd0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000cce0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000ccf0: 2020 2020 2020 2070 6f6c 6c69 6e67 5f66         polling_f
0000cd00: 6965 6c64 3d22 7374 6174 7573 222c 0a20  ield="status",. 
0000cd10: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000cd20: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000cd30: 2020 2020 2020 2020 2020 2020 2020 706f                po
0000cd40: 6c6c 696e 675f 7661 6c75 653d 5b22 5045  lling_value=["PE
0000cd50: 4e44 494e 4722 2c0a 2020 2020 2020 2020  NDING",.        
0000cd60: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000cd70: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000cd80: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000cd90: 2020 2020 2020 2249 4e5f 5052 4f47 5245        "IN_PROGRE
0000cda0: 5353 222c 0a20 2020 2020 2020 2020 2020  SS",.           
0000cdb0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000cdc0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000cdd0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000cde0: 2020 2022 5045 4e44 494e 475f 4142 4f52     "PENDING_ABOR
0000cdf0: 5422 5d29 290a 0a20 2020 2020 2020 2065  T"]))..        e
0000ce00: 6c69 6620 636f 6d6d 616e 6420 3d3d 2027  lif command == '
0000ce10: 7864 722d 656e 6470 6f69 6e74 2d73 6361  xdr-endpoint-sca
0000ce20: 6e2d 6162 6f72 7427 3a0a 2020 2020 2020  n-abort':.      
0000ce30: 2020 2020 2020 7265 7475 726e 5f72 6573        return_res
0000ce40: 756c 7473 2865 6e64 706f 696e 745f 7363  ults(endpoint_sc
0000ce50: 616e 5f61 626f 7274 5f63 6f6d 6d61 6e64  an_abort_command
0000ce60: 2863 6c69 656e 742c 2061 7267 7329 290a  (client, args)).
0000ce70: 0a20 2020 2020 2020 2065 6c69 6620 636f  .        elif co
0000ce80: 6d6d 616e 6420 3d3d 2027 6765 742d 6d61  mmand == 'get-ma
0000ce90: 7070 696e 672d 6669 656c 6473 273a 0a20  pping-fields':. 
0000cea0: 2020 2020 2020 2020 2020 2072 6574 7572             retur
0000ceb0: 6e5f 7265 7375 6c74 7328 6765 745f 6d61  n_results(get_ma
0000cec0: 7070 696e 675f 6669 656c 6473 5f63 6f6d  pping_fields_com
0000ced0: 6d61 6e64 2829 290a 0a20 2020 2020 2020  mand())..       
0000cee0: 2065 6c69 6620 636f 6d6d 616e 6420 3d3d   elif command ==
0000cef0: 2027 6765 742d 7265 6d6f 7465 2d64 6174   'get-remote-dat
0000cf00: 6127 3a0a 2020 2020 2020 2020 2020 2020  a':.            
0000cf10: 7265 7475 726e 5f72 6573 756c 7473 2867  return_results(g
0000cf20: 6574 5f72 656d 6f74 655f 6461 7461 5f63  et_remote_data_c
0000cf30: 6f6d 6d61 6e64 2863 6c69 656e 742c 2061  ommand(client, a
0000cf40: 7267 7329 290a 0a20 2020 2020 2020 2065  rgs))..        e
0000cf50: 6c69 6620 636f 6d6d 616e 6420 3d3d 2027  lif command == '
0000cf60: 7570 6461 7465 2d72 656d 6f74 652d 7379  update-remote-sy
0000cf70: 7374 656d 273a 0a20 2020 2020 2020 2020  stem':.         
0000cf80: 2020 2072 6574 7572 6e5f 7265 7375 6c74     return_result
0000cf90: 7328 7570 6461 7465 5f72 656d 6f74 655f  s(update_remote_
0000cfa0: 7379 7374 656d 5f63 6f6d 6d61 6e64 2863  system_command(c
0000cfb0: 6c69 656e 742c 2061 7267 7329 290a 0a20  lient, args)).. 
0000cfc0: 2020 2020 2020 2065 6c69 6620 636f 6d6d         elif comm
0000cfd0: 616e 6420 3d3d 2027 7864 722d 6465 6c65  and == 'xdr-dele
0000cfe0: 7465 2d65 6e64 706f 696e 7473 273a 0a20  te-endpoints':. 
0000cff0: 2020 2020 2020 2020 2020 2072 6574 7572             retur
0000d000: 6e5f 6f75 7470 7574 7328 2a64 656c 6574  n_outputs(*delet
0000d010: 655f 656e 6470 6f69 6e74 735f 636f 6d6d  e_endpoints_comm
0000d020: 616e 6428 636c 6965 6e74 2c20 6172 6773  and(client, args
0000d030: 2929 0a0a 2020 2020 2020 2020 656c 6966  ))..        elif
0000d040: 2063 6f6d 6d61 6e64 203d 3d20 2778 6472   command == 'xdr
0000d050: 2d67 6574 2d70 6f6c 6963 7927 3a0a 2020  -get-policy':.  
0000d060: 2020 2020 2020 2020 2020 7265 7475 726e            return
0000d070: 5f6f 7574 7075 7473 282a 6765 745f 706f  _outputs(*get_po
0000d080: 6c69 6379 5f63 6f6d 6d61 6e64 2863 6c69  licy_command(cli
0000d090: 656e 742c 2061 7267 7329 290a 0a20 2020  ent, args))..   
0000d0a0: 2020 2020 2065 6c69 6620 636f 6d6d 616e       elif comman
0000d0b0: 6420 3d3d 2027 7864 722d 6765 742d 656e  d == 'xdr-get-en
0000d0c0: 6470 6f69 6e74 2d64 6576 6963 652d 636f  dpoint-device-co
0000d0d0: 6e74 726f 6c2d 7669 6f6c 6174 696f 6e73  ntrol-violations
0000d0e0: 273a 0a20 2020 2020 2020 2020 2020 2072  ':.            r
0000d0f0: 6574 7572 6e5f 6f75 7470 7574 7328 2a67  eturn_outputs(*g
0000d100: 6574 5f65 6e64 706f 696e 745f 6465 7669  et_endpoint_devi
0000d110: 6365 5f63 6f6e 7472 6f6c 5f76 696f 6c61  ce_control_viola
0000d120: 7469 6f6e 735f 636f 6d6d 616e 6428 636c  tions_command(cl
0000d130: 6965 6e74 2c20 6172 6773 2929 0a0a 2020  ient, args))..  
0000d140: 2020 2020 2020 656c 6966 2063 6f6d 6d61        elif comma
0000d150: 6e64 203d 3d20 2778 6472 2d72 6574 7269  nd == 'xdr-retri
0000d160: 6576 652d 6669 6c65 7327 3a0a 2020 2020  eve-files':.    
0000d170: 2020 2020 2020 2020 7265 7475 726e 5f72          return_r
0000d180: 6573 756c 7473 2872 6574 7269 6576 655f  esults(retrieve_
0000d190: 6669 6c65 735f 636f 6d6d 616e 6428 636c  files_command(cl
0000d1a0: 6965 6e74 2c20 6172 6773 2929 0a0a 2020  ient, args))..  
0000d1b0: 2020 2020 2020 656c 6966 2063 6f6d 6d61        elif comma
0000d1c0: 6e64 203d 3d20 2778 6472 2d66 696c 652d  nd == 'xdr-file-
0000d1d0: 7265 7472 6965 7665 273a 0a20 2020 2020  retrieve':.     
0000d1e0: 2020 2020 2020 2070 6f6c 6c69 6e67 203d         polling =
0000d1f0: 2072 756e 5f70 6f6c 6c69 6e67 5f63 6f6d   run_polling_com
0000d200: 6d61 6e64 2863 6c69 656e 743d 636c 6965  mand(client=clie
0000d210: 6e74 2c0a 2020 2020 2020 2020 2020 2020  nt,.            
0000d220: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000d230: 2020 2020 2020 2020 2020 2020 2020 6172                ar
0000d240: 6773 3d61 7267 732c 0a20 2020 2020 2020  gs=args,.       
0000d250: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000d260: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000d270: 2020 2063 6d64 3d22 7864 722d 6669 6c65     cmd="xdr-file
0000d280: 2d72 6574 7269 6576 6522 2c0a 2020 2020  -retrieve",.    
0000d290: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000d2a0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000d2b0: 2020 2020 2020 636f 6d6d 616e 645f 6675        command_fu
0000d2c0: 6e63 7469 6f6e 3d72 6574 7269 6576 655f  nction=retrieve_
0000d2d0: 6669 6c65 735f 636f 6d6d 616e 642c 0a20  files_command,. 
0000d2e0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000d2f0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000d300: 2020 2020 2020 2020 2063 6f6d 6d61 6e64           command
0000d310: 5f64 6563 6973 696f 6e5f 6669 656c 643d  _decision_field=
0000d320: 2261 6374 696f 6e5f 6964 222c 0a20 2020  "action_id",.   
0000d330: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000d340: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000d350: 2020 2020 2020 2072 6573 756c 7473 5f66         results_f
0000d360: 756e 6374 696f 6e3d 6163 7469 6f6e 5f73  unction=action_s
0000d370: 7461 7475 735f 6765 745f 636f 6d6d 616e  tatus_get_comman
0000d380: 642c 0a20 2020 2020 2020 2020 2020 2020  d,.             
0000d390: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000d3a0: 2020 2020 2020 2020 2020 2020 2070 6f6c               pol
0000d3b0: 6c69 6e67 5f66 6965 6c64 3d22 7374 6174  ling_field="stat
0000d3c0: 7573 222c 0a20 2020 2020 2020 2020 2020  us",.           
0000d3d0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000d3e0: 2020 2020 2020 2020 2020 2020 2020 2070                 p
0000d3f0: 6f6c 6c69 6e67 5f76 616c 7565 3d5b 2250  olling_value=["P
0000d400: 454e 4449 4e47 222c 0a20 2020 2020 2020  ENDING",.       
0000d410: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000d420: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000d430: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000d440: 2020 2249 4e5f 5052 4f47 5245 5353 222c    "IN_PROGRESS",
0000d450: 0a20 2020 2020 2020 2020 2020 2020 2020  .               
0000d460: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000d470: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000d480: 2020 2020 2020 2020 2020 2250 454e 4449            "PENDI
0000d490: 4e47 5f41 424f 5254 225d 290a 2020 2020  NG_ABORT"]).    
0000d4a0: 2020 2020 2020 2020 7261 7720 3d20 706f          raw = po
0000d4b0: 6c6c 696e 672e 7261 775f 7265 7370 6f6e  lling.raw_respon
0000d4c0: 7365 0a20 2020 2020 2020 2020 2020 2023  se.            #
0000d4d0: 2072 6177 2069 7320 7468 6520 7265 7370   raw is the resp
0000d4e0: 6f6e 7365 2072 6574 7572 6e65 6420 6279  onse returned by
0000d4f0: 2074 6865 2067 6574 2d61 6374 696f 6e2d   the get-action-
0000d500: 7374 6174 7573 0a20 2020 2020 2020 2020  status.         
0000d510: 2020 2069 6620 706f 6c6c 696e 672e 7363     if polling.sc
0000d520: 6865 6475 6c65 645f 636f 6d6d 616e 643a  heduled_command:
0000d530: 0a20 2020 2020 2020 2020 2020 2020 2020  .               
0000d540: 2072 6574 7572 6e5f 7265 7375 6c74 7328   return_results(
0000d550: 706f 6c6c 696e 6729 0a20 2020 2020 2020  polling).       
0000d560: 2020 2020 2020 2020 2072 6574 7572 6e0a           return.
0000d570: 2020 2020 2020 2020 2020 2020 7374 6174              stat
0000d580: 7573 203d 2072 6177 5b30 5d2e 6765 7428  us = raw[0].get(
0000d590: 2773 7461 7475 7327 2920 2023 2074 7970  'status')  # typ
0000d5a0: 653a 2069 676e 6f72 650a 2020 2020 2020  e: ignore.      
0000d5b0: 2020 2020 2020 6966 2073 7461 7475 7320        if status 
0000d5c0: 3d3d 2027 434f 4d50 4c45 5445 445f 5355  == 'COMPLETED_SU
0000d5d0: 4343 4553 5346 554c 4c59 273a 0a20 2020  CCESSFULLY':.   
0000d5e0: 2020 2020 2020 2020 2020 2020 2066 696c               fil
0000d5f0: 655f 6465 7461 696c 735f 7265 7375 6c74  e_details_result
0000d600: 7328 636c 6965 6e74 2c20 6172 6773 2c20  s(client, args, 
0000d610: 5472 7565 290a 2020 2020 2020 2020 2020  True).          
0000d620: 2020 656c 7365 3a20 2023 2073 7461 7475    else:  # statu
0000d630: 7320 6973 206e 6f74 2069 6e20 706f 6c6c  s is not in poll
0000d640: 696e 6720 7661 6c75 6520 616e 6420 6f70  ing value and op
0000d650: 6572 6174 696f 6e20 7761 7320 6e6f 7420  eration was not 
0000d660: 434f 4d50 4c45 5445 445f 5355 4343 4553  COMPLETED_SUCCES
0000d670: 5346 554c 4c59 0a20 2020 2020 2020 2020  SFULLY.         
0000d680: 2020 2020 2020 2070 6f6c 6c69 6e67 2e6f         polling.o
0000d690: 7574 7075 7473 5f70 7265 6669 7820 3d20  utputs_prefix = 
0000d6a0: 6627 7b61 7267 732e 6765 7428 2269 6e74  f'{args.get("int
0000d6b0: 6567 7261 7469 6f6e 5f63 6f6e 7465 7874  egration_context
0000d6c0: 5f62 7261 6e64 222c 2022 436f 7265 4170  _brand", "CoreAp
0000d6d0: 694d 6f64 756c 6522 297d 2720 5c0a 2020  iModule")}' \.  
0000d6e0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000d6f0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000d700: 2020 2020 2020 2066 272e 5265 7472 6965         f'.Retrie
0000d710: 7665 6446 696c 6573 2876 616c 2e61 6374  vedFiles(val.act
0000d720: 696f 6e5f 6964 203d 3d20 6f62 6a2e 6163  ion_id == obj.ac
0000d730: 7469 6f6e 5f69 6429 270a 2020 2020 2020  tion_id)'.      
0000d740: 2020 2020 2020 2020 2020 7265 7475 726e            return
0000d750: 5f72 6573 756c 7473 2870 6f6c 6c69 6e67  _results(polling
0000d760: 290a 0a20 2020 2020 2020 2065 6c69 6620  )..        elif 
0000d770: 636f 6d6d 616e 6420 3d3d 2027 7864 722d  command == 'xdr-
0000d780: 7265 7472 6965 7665 2d66 696c 652d 6465  retrieve-file-de
0000d790: 7461 696c 7327 3a0a 2020 2020 2020 2020  tails':.        
0000d7a0: 2020 2020 6669 6c65 5f64 6574 6169 6c73      file_details
0000d7b0: 5f72 6573 756c 7473 2863 6c69 656e 742c  _results(client,
0000d7c0: 2061 7267 732c 2046 616c 7365 290a 0a20   args, False).. 
0000d7d0: 2020 2020 2020 2065 6c69 6620 636f 6d6d         elif comm
0000d7e0: 616e 6420 3d3d 2027 7864 722d 6765 742d  and == 'xdr-get-
0000d7f0: 7363 7269 7074 7327 3a0a 2020 2020 2020  scripts':.      
0000d800: 2020 2020 2020 7265 7475 726e 5f6f 7574        return_out
0000d810: 7075 7473 282a 6765 745f 7363 7269 7074  puts(*get_script
0000d820: 735f 636f 6d6d 616e 6428 636c 6965 6e74  s_command(client
0000d830: 2c20 6172 6773 2929 0a0a 2020 2020 2020  , args))..      
0000d840: 2020 656c 6966 2063 6f6d 6d61 6e64 203d    elif command =
0000d850: 3d20 2778 6472 2d67 6574 2d73 6372 6970  = 'xdr-get-scrip
0000d860: 742d 6d65 7461 6461 7461 273a 0a20 2020  t-metadata':.   
0000d870: 2020 2020 2020 2020 2072 6574 7572 6e5f           return_
0000d880: 6f75 7470 7574 7328 2a67 6574 5f73 6372  outputs(*get_scr
0000d890: 6970 745f 6d65 7461 6461 7461 5f63 6f6d  ipt_metadata_com
0000d8a0: 6d61 6e64 2863 6c69 656e 742c 2061 7267  mand(client, arg
0000d8b0: 7329 290a 0a20 2020 2020 2020 2065 6c69  s))..        eli
0000d8c0: 6620 636f 6d6d 616e 6420 3d3d 2027 7864  f command == 'xd
0000d8d0: 722d 6765 742d 7363 7269 7074 2d63 6f64  r-get-script-cod
0000d8e0: 6527 3a0a 2020 2020 2020 2020 2020 2020  e':.            
0000d8f0: 7265 7475 726e 5f6f 7574 7075 7473 282a  return_outputs(*
0000d900: 6765 745f 7363 7269 7074 5f63 6f64 655f  get_script_code_
0000d910: 636f 6d6d 616e 6428 636c 6965 6e74 2c20  command(client, 
0000d920: 6172 6773 2929 0a0a 2020 2020 2020 2020  args))..        
0000d930: 656c 6966 2063 6f6d 6d61 6e64 203d 3d20  elif command == 
0000d940: 2778 6472 2d61 6374 696f 6e2d 7374 6174  'xdr-action-stat
0000d950: 7573 2d67 6574 273a 0a20 2020 2020 2020  us-get':.       
0000d960: 2020 2020 2072 6574 7572 6e5f 7265 7375       return_resu
0000d970: 6c74 7328 6163 7469 6f6e 5f73 7461 7475  lts(action_statu
0000d980: 735f 6765 745f 636f 6d6d 616e 6428 636c  s_get_command(cl
0000d990: 6965 6e74 2c20 6172 6773 2929 0a0a 2020  ient, args))..  
0000d9a0: 2020 2020 2020 656c 6966 2063 6f6d 6d61        elif comma
0000d9b0: 6e64 203d 3d20 2767 6574 2d6d 6f64 6966  nd == 'get-modif
0000d9c0: 6965 642d 7265 6d6f 7465 2d64 6174 6127  ied-remote-data'
0000d9d0: 3a0a 2020 2020 2020 2020 2020 2020 7265  :.            re
0000d9e0: 7475 726e 5f72 6573 756c 7473 2867 6574  turn_results(get
0000d9f0: 5f6d 6f64 6966 6965 645f 7265 6d6f 7465  _modified_remote
0000da00: 5f64 6174 615f 636f 6d6d 616e 6428 636c  _data_command(cl
0000da10: 6965 6e74 2c20 6465 6d69 7374 6f2e 6172  ient, demisto.ar
0000da20: 6773 2829 2929 0a0a 2020 2020 2020 2020  gs()))..        
0000da30: 656c 6966 2063 6f6d 6d61 6e64 203d 3d20  elif command == 
0000da40: 2778 6472 2d73 6372 6970 742d 7275 6e27  'xdr-script-run'
0000da50: 3a20 2023 2075 7365 6420 7769 7468 2070  :  # used with p
0000da60: 6f6c 6c69 6e67 203d 2074 7275 6520 616c  olling = true al
0000da70: 7761 7973 0a20 2020 2020 2020 2020 2020  ways.           
0000da80: 2072 6574 7572 6e5f 7265 7375 6c74 7328   return_results(
0000da90: 7363 7269 7074 5f72 756e 5f70 6f6c 6c69  script_run_polli
0000daa0: 6e67 5f63 6f6d 6d61 6e64 2861 7267 732c  ng_command(args,
0000dab0: 2063 6c69 656e 7429 290a 0a20 2020 2020   client))..     
0000dac0: 2020 2065 6c69 6620 636f 6d6d 616e 6420     elif command 
0000dad0: 3d3d 2027 7864 722d 7275 6e2d 7363 7269  == 'xdr-run-scri
0000dae0: 7074 273a 0a20 2020 2020 2020 2020 2020  pt':.           
0000daf0: 2072 6574 7572 6e5f 7265 7375 6c74 7328   return_results(
0000db00: 7275 6e5f 7363 7269 7074 5f63 6f6d 6d61  run_script_comma
0000db10: 6e64 2863 6c69 656e 742c 2061 7267 7329  nd(client, args)
0000db20: 290a 0a20 2020 2020 2020 2065 6c69 6620  )..        elif 
0000db30: 636f 6d6d 616e 6420 3d3d 2027 7864 722d  command == 'xdr-
0000db40: 7275 6e2d 736e 6970 7065 742d 636f 6465  run-snippet-code
0000db50: 2d73 6372 6970 7427 3a0a 2020 2020 2020  -script':.      
0000db60: 2020 2020 2020 7265 7475 726e 5f72 6573        return_res
0000db70: 756c 7473 2872 756e 5f73 6e69 7070 6574  ults(run_snippet
0000db80: 5f63 6f64 655f 7363 7269 7074 5f63 6f6d  _code_script_com
0000db90: 6d61 6e64 2863 6c69 656e 742c 2061 7267  mand(client, arg
0000dba0: 7329 290a 0a20 2020 2020 2020 2065 6c69  s))..        eli
0000dbb0: 6620 636f 6d6d 616e 6420 3d3d 2027 7864  f command == 'xd
0000dbc0: 722d 736e 6970 7065 742d 636f 6465 2d73  r-snippet-code-s
0000dbd0: 6372 6970 742d 6578 6563 7574 6527 3a0a  cript-execute':.
0000dbe0: 2020 2020 2020 2020 2020 2020 7265 7475              retu
0000dbf0: 726e 5f72 6573 756c 7473 2872 756e 5f70  rn_results(run_p
0000dc00: 6f6c 6c69 6e67 5f63 6f6d 6d61 6e64 2863  olling_command(c
0000dc10: 6c69 656e 743d 636c 6965 6e74 2c0a 2020  lient=client,.  
0000dc20: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000dc30: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000dc40: 2020 2020 2020 2020 2020 2020 2061 7267               arg
0000dc50: 733d 6172 6773 2c0a 2020 2020 2020 2020  s=args,.        
0000dc60: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000dc70: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000dc80: 2020 2020 2020 2063 6d64 3d22 7864 722d         cmd="xdr-
0000dc90: 736e 6970 7065 742d 636f 6465 2d73 6372  snippet-code-scr
0000dca0: 6970 742d 6578 6563 7574 6522 2c0a 2020  ipt-execute",.  
0000dcb0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000dcc0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000dcd0: 2020 2020 2020 2020 2020 2020 2063 6f6d               com
0000dce0: 6d61 6e64 5f66 756e 6374 696f 6e3d 7275  mand_function=ru
0000dcf0: 6e5f 736e 6970 7065 745f 636f 6465 5f73  n_snippet_code_s
0000dd00: 6372 6970 745f 636f 6d6d 616e 642c 0a20  cript_command,. 
0000dd10: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000dd20: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000dd30: 2020 2020 2020 2020 2020 2020 2020 636f                co
0000dd40: 6d6d 616e 645f 6465 6369 7369 6f6e 5f66  mmand_decision_f
0000dd50: 6965 6c64 3d22 6163 7469 6f6e 5f69 6422  ield="action_id"
0000dd60: 2c0a 2020 2020 2020 2020 2020 2020 2020  ,.              
0000dd70: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000dd80: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000dd90: 2072 6573 756c 7473 5f66 756e 6374 696f   results_functio
0000dda0: 6e3d 6163 7469 6f6e 5f73 7461 7475 735f  n=action_status_
0000ddb0: 6765 745f 636f 6d6d 616e 642c 0a20 2020  get_command,.   
0000ddc0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000ddd0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000dde0: 2020 2020 2020 2020 2020 2020 706f 6c6c              poll
0000ddf0: 696e 675f 6669 656c 643d 2273 7461 7475  ing_field="statu
0000de00: 7322 2c0a 2020 2020 2020 2020 2020 2020  s",.            
0000de10: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000de20: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000de30: 2020 2070 6f6c 6c69 6e67 5f76 616c 7565     polling_value
0000de40: 3d5b 2250 454e 4449 4e47 222c 0a20 2020  =["PENDING",.   
0000de50: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000de60: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000de70: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000de80: 2020 2020 2020 2020 2020 2022 494e 5f50             "IN_P
0000de90: 524f 4752 4553 5322 2c0a 2020 2020 2020  ROGRESS",.      
0000dea0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000deb0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000dec0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000ded0: 2020 2020 2020 2020 2250 454e 4449 4e47          "PENDING
0000dee0: 5f41 424f 5254 225d 2929 0a0a 2020 2020  _ABORT"]))..    
0000def0: 2020 2020 656c 6966 2063 6f6d 6d61 6e64      elif command
0000df00: 203d 3d20 2778 6472 2d67 6574 2d73 6372   == 'xdr-get-scr
0000df10: 6970 742d 6578 6563 7574 696f 6e2d 7374  ipt-execution-st
0000df20: 6174 7573 273a 0a20 2020 2020 2020 2020  atus':.         
0000df30: 2020 2072 6574 7572 6e5f 7265 7375 6c74     return_result
0000df40: 7328 6765 745f 7363 7269 7074 5f65 7865  s(get_script_exe
0000df50: 6375 7469 6f6e 5f73 7461 7475 735f 636f  cution_status_co
0000df60: 6d6d 616e 6428 636c 6965 6e74 2c20 6172  mmand(client, ar
0000df70: 6773 2929 0a0a 2020 2020 2020 2020 656c  gs))..        el
0000df80: 6966 2063 6f6d 6d61 6e64 203d 3d20 2778  if command == 'x
0000df90: 6472 2d67 6574 2d73 6372 6970 742d 6578  dr-get-script-ex
0000dfa0: 6563 7574 696f 6e2d 7265 7375 6c74 7327  ecution-results'
0000dfb0: 3a0a 2020 2020 2020 2020 2020 2020 7265  :.            re
0000dfc0: 7475 726e 5f72 6573 756c 7473 2867 6574  turn_results(get
0000dfd0: 5f73 6372 6970 745f 6578 6563 7574 696f  _script_executio
0000dfe0: 6e5f 7265 7375 6c74 735f 636f 6d6d 616e  n_results_comman
0000dff0: 6428 636c 6965 6e74 2c20 6172 6773 2929  d(client, args))
0000e000: 0a0a 2020 2020 2020 2020 656c 6966 2063  ..        elif c
0000e010: 6f6d 6d61 6e64 203d 3d20 2778 6472 2d67  ommand == 'xdr-g
0000e020: 6574 2d73 6372 6970 742d 6578 6563 7574  et-script-execut
0000e030: 696f 6e2d 7265 7375 6c74 2d66 696c 6573  ion-result-files
0000e040: 273a 0a20 2020 2020 2020 2020 2020 2072  ':.            r
0000e050: 6574 7572 6e5f 7265 7375 6c74 7328 6765  eturn_results(ge
0000e060: 745f 7363 7269 7074 5f65 7865 6375 7469  t_script_executi
0000e070: 6f6e 5f72 6573 756c 745f 6669 6c65 735f  on_result_files_
0000e080: 636f 6d6d 616e 6428 636c 6965 6e74 2c20  command(client, 
0000e090: 6172 6773 2929 0a0a 2020 2020 2020 2020  args))..        
0000e0a0: 656c 6966 2063 6f6d 6d61 6e64 203d 3d20  elif command == 
0000e0b0: 2778 6472 2d67 6574 2d63 6c6f 7564 2d6f  'xdr-get-cloud-o
0000e0c0: 7269 6769 6e61 6c2d 616c 6572 7473 273a  riginal-alerts':
0000e0d0: 0a20 2020 2020 2020 2020 2020 2072 6574  .            ret
0000e0e0: 7572 6e5f 7265 7375 6c74 7328 6765 745f  urn_results(get_
0000e0f0: 6f72 6967 696e 616c 5f61 6c65 7274 735f  original_alerts_
0000e100: 636f 6d6d 616e 6428 636c 6965 6e74 2c20  command(client, 
0000e110: 6172 6773 2929 0a0a 2020 2020 2020 2020  args))..        
0000e120: 656c 6966 2063 6f6d 6d61 6e64 203d 3d20  elif command == 
0000e130: 2778 6472 2d67 6574 2d61 6c65 7274 7327  'xdr-get-alerts'
0000e140: 3a0a 2020 2020 2020 2020 2020 2020 7265  :.            re
0000e150: 7475 726e 5f72 6573 756c 7473 2867 6574  turn_results(get
0000e160: 5f61 6c65 7274 735f 6279 5f66 696c 7465  _alerts_by_filte
0000e170: 725f 636f 6d6d 616e 6428 636c 6965 6e74  r_command(client
0000e180: 2c20 6172 6773 2929 0a0a 2020 2020 2020  , args))..      
0000e190: 2020 656c 6966 2063 6f6d 6d61 6e64 203d    elif command =
0000e1a0: 3d20 2778 6472 2d72 756e 2d73 6372 6970  = 'xdr-run-scrip
0000e1b0: 742d 6578 6563 7574 652d 636f 6d6d 616e  t-execute-comman
0000e1c0: 6473 273a 0a20 2020 2020 2020 2020 2020  ds':.           
0000e1d0: 2072 6574 7572 6e5f 7265 7375 6c74 7328   return_results(
0000e1e0: 7275 6e5f 7363 7269 7074 5f65 7865 6375  run_script_execu
0000e1f0: 7465 5f63 6f6d 6d61 6e64 735f 636f 6d6d  te_commands_comm
0000e200: 616e 6428 636c 6965 6e74 2c20 6172 6773  and(client, args
0000e210: 2929 0a0a 2020 2020 2020 2020 656c 6966  ))..        elif
0000e220: 2063 6f6d 6d61 6e64 203d 3d20 2778 6472   command == 'xdr
0000e230: 2d73 6372 6970 742d 636f 6d6d 616e 6473  -script-commands
0000e240: 2d65 7865 6375 7465 273a 0a20 2020 2020  -execute':.     
0000e250: 2020 2020 2020 2072 6574 7572 6e5f 7265         return_re
0000e260: 7375 6c74 7328 7275 6e5f 706f 6c6c 696e  sults(run_pollin
0000e270: 675f 636f 6d6d 616e 6428 636c 6965 6e74  g_command(client
0000e280: 3d63 6c69 656e 742c 0a20 2020 2020 2020  =client,.       
0000e290: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e2a0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e2b0: 2020 2020 2020 2020 6172 6773 3d61 7267          args=arg
0000e2c0: 732c 0a20 2020 2020 2020 2020 2020 2020  s,.             
0000e2d0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e2e0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e2f0: 2020 636d 643d 2278 6472 2d73 6372 6970    cmd="xdr-scrip
0000e300: 742d 636f 6d6d 616e 6473 2d65 7865 6375  t-commands-execu
0000e310: 7465 222c 0a20 2020 2020 2020 2020 2020  te",.           
0000e320: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e330: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e340: 2020 2020 636f 6d6d 616e 645f 6675 6e63      command_func
0000e350: 7469 6f6e 3d72 756e 5f73 6372 6970 745f  tion=run_script_
0000e360: 6578 6563 7574 655f 636f 6d6d 616e 6473  execute_commands
0000e370: 5f63 6f6d 6d61 6e64 2c0a 2020 2020 2020  _command,.      
0000e380: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e390: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e3a0: 2020 2020 2020 2020 2063 6f6d 6d61 6e64           command
0000e3b0: 5f64 6563 6973 696f 6e5f 6669 656c 643d  _decision_field=
0000e3c0: 2261 6374 696f 6e5f 6964 222c 0a20 2020  "action_id",.   
0000e3d0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e3e0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e3f0: 2020 2020 2020 2020 2020 2020 7265 7375              resu
0000e400: 6c74 735f 6675 6e63 7469 6f6e 3d61 6374  lts_function=act
0000e410: 696f 6e5f 7374 6174 7573 5f67 6574 5f63  ion_status_get_c
0000e420: 6f6d 6d61 6e64 2c0a 2020 2020 2020 2020  ommand,.        
0000e430: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e440: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e450: 2020 2020 2020 2070 6f6c 6c69 6e67 5f66         polling_f
0000e460: 6965 6c64 3d22 7374 6174 7573 222c 0a20  ield="status",. 
0000e470: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e480: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e490: 2020 2020 2020 2020 2020 2020 2020 706f                po
0000e4a0: 6c6c 696e 675f 7661 6c75 653d 5b22 5045  lling_value=["PE
0000e4b0: 4e44 494e 4722 2c0a 2020 2020 2020 2020  NDING",.        
0000e4c0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e4d0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e4e0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e4f0: 2020 2020 2020 2249 4e5f 5052 4f47 5245        "IN_PROGRE
0000e500: 5353 222c 0a20 2020 2020 2020 2020 2020  SS",.           
0000e510: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e520: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e530: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e540: 2020 2022 5045 4e44 494e 475f 4142 4f52     "PENDING_ABOR
0000e550: 5422 5d29 290a 0a20 2020 2020 2020 2065  T"]))..        e
0000e560: 6c69 6620 636f 6d6d 616e 6420 3d3d 2027  lif command == '
0000e570: 7864 722d 7275 6e2d 7363 7269 7074 2d64  xdr-run-script-d
0000e580: 656c 6574 652d 6669 6c65 273a 0a20 2020  elete-file':.   
0000e590: 2020 2020 2020 2020 2072 6574 7572 6e5f           return_
0000e5a0: 7265 7375 6c74 7328 7275 6e5f 7363 7269  results(run_scri
0000e5b0: 7074 5f64 656c 6574 655f 6669 6c65 5f63  pt_delete_file_c
0000e5c0: 6f6d 6d61 6e64 2863 6c69 656e 742c 2061  ommand(client, a
0000e5d0: 7267 7329 290a 0a20 2020 2020 2020 2065  rgs))..        e
0000e5e0: 6c69 6620 636f 6d6d 616e 6420 3d3d 2027  lif command == '
0000e5f0: 7864 722d 6669 6c65 2d64 656c 6574 652d  xdr-file-delete-
0000e600: 7363 7269 7074 2d65 7865 6375 7465 273a  script-execute':
0000e610: 0a20 2020 2020 2020 2020 2020 2072 6574  .            ret
0000e620: 7572 6e5f 7265 7375 6c74 7328 7275 6e5f  urn_results(run_
0000e630: 706f 6c6c 696e 675f 636f 6d6d 616e 6428  polling_command(
0000e640: 636c 6965 6e74 3d63 6c69 656e 742c 0a20  client=client,. 
0000e650: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e660: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e670: 2020 2020 2020 2020 2020 2020 2020 6172                ar
0000e680: 6773 3d61 7267 732c 0a20 2020 2020 2020  gs=args,.       
0000e690: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e6a0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e6b0: 2020 2020 2020 2020 636d 643d 2278 6472          cmd="xdr
0000e6c0: 2d66 696c 652d 6465 6c65 7465 2d73 6372  -file-delete-scr
0000e6d0: 6970 742d 6578 6563 7574 6522 2c0a 2020  ipt-execute",.  
0000e6e0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e6f0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e700: 2020 2020 2020 2020 2020 2020 2063 6f6d               com
0000e710: 6d61 6e64 5f66 756e 6374 696f 6e3d 7275  mand_function=ru
0000e720: 6e5f 7363 7269 7074 5f64 656c 6574 655f  n_script_delete_
0000e730: 6669 6c65 5f63 6f6d 6d61 6e64 2c0a 2020  file_command,.  
0000e740: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e750: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e760: 2020 2020 2020 2020 2020 2020 2063 6f6d               com
0000e770: 6d61 6e64 5f64 6563 6973 696f 6e5f 6669  mand_decision_fi
0000e780: 656c 643d 2261 6374 696f 6e5f 6964 222c  eld="action_id",
0000e790: 0a20 2020 2020 2020 2020 2020 2020 2020  .               
0000e7a0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e7b0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e7c0: 7265 7375 6c74 735f 6675 6e63 7469 6f6e  results_function
0000e7d0: 3d61 6374 696f 6e5f 7374 6174 7573 5f67  =action_status_g
0000e7e0: 6574 5f63 6f6d 6d61 6e64 2c0a 2020 2020  et_command,.    
0000e7f0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e800: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e810: 2020 2020 2020 2020 2020 2070 6f6c 6c69             polli
0000e820: 6e67 5f66 6965 6c64 3d22 7374 6174 7573  ng_field="status
0000e830: 222c 0a20 2020 2020 2020 2020 2020 2020  ",.             
0000e840: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e850: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e860: 2020 706f 6c6c 696e 675f 7661 6c75 653d    polling_value=
0000e870: 5b22 5045 4e44 494e 4722 2c0a 2020 2020  ["PENDING",.    
0000e880: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e890: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e8a0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e8b0: 2020 2020 2020 2020 2020 2249 4e5f 5052            "IN_PR
0000e8c0: 4f47 5245 5353 222c 0a20 2020 2020 2020  OGRESS",.       
0000e8d0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e8e0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e8f0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000e900: 2020 2020 2020 2022 5045 4e44 494e 475f         "PENDING_
0000e910: 4142 4f52 5422 5d29 290a 0a20 2020 2020  ABORT"]))..     
0000e920: 2020 2065 6c69 6620 636f 6d6d 616e 6420     elif command 
0000e930: 3d3d 2027 7864 722d 7275 6e2d 7363 7269  == 'xdr-run-scri
0000e940: 7074 2d66 696c 652d 6578 6973 7473 273a  pt-file-exists':
0000e950: 0a20 2020 2020 2020 2020 2020 2072 6574  .            ret
0000e960: 7572 6e5f 7265 7375 6c74 7328 7275 6e5f  urn_results(run_
0000e970: 7363 7269 7074 5f66 696c 655f 6578 6973  script_file_exis
0000e980: 7473 5f63 6f6d 6d61 6e64 2863 6c69 656e  ts_command(clien
0000e990: 742c 2061 7267 7329 290a 0a20 2020 2020  t, args))..     
0000e9a0: 2020 2065 6c69 6620 636f 6d6d 616e 6420     elif command 
0000e9b0: 3d3d 2027 7864 722d 6669 6c65 2d65 7869  == 'xdr-file-exi
0000e9c0: 7374 2d73 6372 6970 742d 6578 6563 7574  st-script-execut
0000e9d0: 6527 3a0a 2020 2020 2020 2020 2020 2020  e':.            
0000e9e0: 7265 7475 726e 5f72 6573 756c 7473 2872  return_results(r
0000e9f0: 756e 5f70 6f6c 6c69 6e67 5f63 6f6d 6d61  un_polling_comma
0000ea00: 6e64 2863 6c69 656e 743d 636c 6965 6e74  nd(client=client
0000ea10: 2c0a 2020 2020 2020 2020 2020 2020 2020  ,.              
0000ea20: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000ea30: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000ea40: 2061 7267 733d 6172 6773 2c0a 2020 2020   args=args,.    
0000ea50: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000ea60: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000ea70: 2020 2020 2020 2020 2020 2063 6d64 3d22             cmd="
0000ea80: 7864 722d 6669 6c65 2d65 7869 7374 2d73  xdr-file-exist-s
0000ea90: 6372 6970 742d 6578 6563 7574 6522 2c0a  cript-execute",.
0000eaa0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000eab0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000eac0: 2020 2020 2020 2020 2020 2020 2020 2063                 c
0000ead0: 6f6d 6d61 6e64 5f66 756e 6374 696f 6e3d  ommand_function=
0000eae0: 7275 6e5f 7363 7269 7074 5f66 696c 655f  run_script_file_
0000eaf0: 6578 6973 7473 5f63 6f6d 6d61 6e64 2c0a  exists_command,.
0000eb00: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000eb10: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000eb20: 2020 2020 2020 2020 2020 2020 2020 2063                 c
0000eb30: 6f6d 6d61 6e64 5f64 6563 6973 696f 6e5f  ommand_decision_
0000eb40: 6669 656c 643d 2261 6374 696f 6e5f 6964  field="action_id
0000eb50: 222c 0a20 2020 2020 2020 2020 2020 2020  ",.             
0000eb60: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000eb70: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000eb80: 2020 7265 7375 6c74 735f 6675 6e63 7469    results_functi
0000eb90: 6f6e 3d61 6374 696f 6e5f 7374 6174 7573  on=action_status
0000eba0: 5f67 6574 5f63 6f6d 6d61 6e64 2c0a 2020  _get_command,.  
0000ebb0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000ebc0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000ebd0: 2020 2020 2020 2020 2020 2020 2070 6f6c               pol
0000ebe0: 6c69 6e67 5f66 6965 6c64 3d22 7374 6174  ling_field="stat
0000ebf0: 7573 222c 0a20 2020 2020 2020 2020 2020  us",.           
0000ec00: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000ec10: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000ec20: 2020 2020 706f 6c6c 696e 675f 7661 6c75      polling_valu
0000ec30: 653d 5b22 5045 4e44 494e 4722 2c0a 2020  e=["PENDING",.  
0000ec40: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000ec50: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000ec60: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000ec70: 2020 2020 2020 2020 2020 2020 2249 4e5f              "IN_
0000ec80: 5052 4f47 5245 5353 222c 0a20 2020 2020  PROGRESS",.     
0000ec90: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000eca0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000ecb0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000ecc0: 2020 2020 2020 2020 2022 5045 4e44 494e           "PENDIN
0000ecd0: 475f 4142 4f52 5422 5d29 290a 0a20 2020  G_ABORT"]))..   
0000ece0: 2020 2020 2065 6c69 6620 636f 6d6d 616e       elif comman
0000ecf0: 6420 3d3d 2027 7864 722d 7275 6e2d 7363  d == 'xdr-run-sc
0000ed00: 7269 7074 2d6b 696c 6c2d 7072 6f63 6573  ript-kill-proces
0000ed10: 7327 3a0a 2020 2020 2020 2020 2020 2020  s':.            
0000ed20: 7265 7475 726e 5f72 6573 756c 7473 2828  return_results((
0000ed30: 636c 6965 6e74 2c20 6172 6773 2929 0a0a  client, args))..
0000ed40: 2020 2020 2020 2020 656c 6966 2063 6f6d          elif com
0000ed50: 6d61 6e64 203d 3d20 2778 6472 2d6b 696c  mand == 'xdr-kil
0000ed60: 6c2d 7072 6f63 6573 732d 7363 7269 7074  l-process-script
0000ed70: 2d65 7865 6375 7465 273a 0a20 2020 2020  -execute':.     
0000ed80: 2020 2020 2020 2072 6574 7572 6e5f 7265         return_re
0000ed90: 7375 6c74 7328 7275 6e5f 706f 6c6c 696e  sults(run_pollin
0000eda0: 675f 636f 6d6d 616e 6428 636c 6965 6e74  g_command(client
0000edb0: 3d63 6c69 656e 742c 0a20 2020 2020 2020  =client,.       
0000edc0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000edd0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000ede0: 2020 2020 2020 2020 6172 6773 3d61 7267          args=arg
0000edf0: 732c 0a20 2020 2020 2020 2020 2020 2020  s,.             
0000ee00: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000ee10: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000ee20: 2020 636d 643d 2278 6472 2d6b 696c 6c2d    cmd="xdr-kill-
0000ee30: 7072 6f63 6573 732d 7363 7269 7074 2d65  process-script-e
0000ee40: 7865 6375 7465 222c 0a20 2020 2020 2020  xecute",.       
0000ee50: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000ee60: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000ee70: 2020 2020 2020 2020 636f 6d6d 616e 645f          command_
0000ee80: 6675 6e63 7469 6f6e 3d72 756e 5f73 6372  function=run_scr
0000ee90: 6970 745f 6b69 6c6c 5f70 726f 6365 7373  ipt_kill_process
0000eea0: 5f63 6f6d 6d61 6e64 2c0a 2020 2020 2020  _command,.      
0000eeb0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000eec0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000eed0: 2020 2020 2020 2020 2063 6f6d 6d61 6e64           command
0000eee0: 5f64 6563 6973 696f 6e5f 6669 656c 643d  _decision_field=
0000eef0: 2261 6374 696f 6e5f 6964 222c 0a20 2020  "action_id",.   
0000ef00: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000ef10: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000ef20: 2020 2020 2020 2020 2020 2020 7265 7375              resu
0000ef30: 6c74 735f 6675 6e63 7469 6f6e 3d61 6374  lts_function=act
0000ef40: 696f 6e5f 7374 6174 7573 5f67 6574 5f63  ion_status_get_c
0000ef50: 6f6d 6d61 6e64 2c0a 2020 2020 2020 2020  ommand,.        
0000ef60: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000ef70: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000ef80: 2020 2020 2020 2070 6f6c 6c69 6e67 5f66         polling_f
0000ef90: 6965 6c64 3d22 7374 6174 7573 222c 0a20  ield="status",. 
0000efa0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000efb0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000efc0: 2020 2020 2020 2020 2020 2020 2020 706f                po
0000efd0: 6c6c 696e 675f 7661 6c75 653d 5b22 5045  lling_value=["PE
0000efe0: 4e44 494e 4722 2c0a 2020 2020 2020 2020  NDING",.        
0000eff0: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000f000: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000f010: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000f020: 2020 2020 2020 2249 4e5f 5052 4f47 5245        "IN_PROGRE
0000f030: 5353 222c 0a20 2020 2020 2020 2020 2020  SS",.           
0000f040: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000f050: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000f060: 2020 2020 2020 2020 2020 2020 2020 2020                  
0000f070: 2020 2022 5045 4e44 494e 475f 4142 4f52     "PENDING_ABOR
0000f080: 5422 5d29 290a 0a20 2020 2020 2020 2065  T"]))..        e
0000f090: 6c69 6620 636f 6d6d 616e 6420 3d3d 2027  lif command == '
0000f0a0: 656e 6470 6f69 6e74 273a 0a20 2020 2020  endpoint':.     
0000f0b0: 2020 2020 2020 2072 6574 7572 6e5f 7265         return_re
0000f0c0: 7375 6c74 7328 656e 6470 6f69 6e74 5f63  sults(endpoint_c
0000f0d0: 6f6d 6d61 6e64 2863 6c69 656e 742c 2061  ommand(client, a
0000f0e0: 7267 7329 290a 0a20 2020 2020 2020 2065  rgs))..        e
0000f0f0: 6c69 6620 636f 6d6d 616e 6420 3d3d 2027  lif command == '
0000f100: 7864 722d 6765 742d 656e 6470 6f69 6e74  xdr-get-endpoint
0000f110: 732d 6279 2d73 7461 7475 7327 3a0a 2020  s-by-status':.  
0000f120: 2020 2020 2020 2020 2020 7265 7475 726e            return
0000f130: 5f72 6573 756c 7473 2867 6574 5f65 6e64  _results(get_end
0000f140: 706f 696e 7473 5f62 795f 7374 6174 7573  points_by_status
0000f150: 5f63 6f6d 6d61 6e64 2863 6c69 656e 742c  _command(client,
0000f160: 2061 7267 7329 290a 0a20 2020 2020 2020   args))..       
0000f170: 2065 6c69 6620 636f 6d6d 616e 6420 3d3d   elif command ==
0000f180: 2027 7864 722d 626c 6f63 6b6c 6973 742d   'xdr-blocklist-
0000f190: 6669 6c65 7327 3a0a 2020 2020 2020 2020  files':.        
0000f1a0: 2020 2020 7265 7475 726e 5f72 6573 756c      return_resul
0000f1b0: 7473 2862 6c6f 636b 6c69 7374 5f66 696c  ts(blocklist_fil
0000f1c0: 6573 5f63 6f6d 6d61 6e64 2863 6c69 656e  es_command(clien
0000f1d0: 742c 2061 7267 7329 290a 0a20 2020 2020  t, args))..     
0000f1e0: 2020 2065 6c69 6620 636f 6d6d 616e 6420     elif command 
0000f1f0: 3d3d 2027 7864 722d 616c 6c6f 776c 6973  == 'xdr-allowlis
0000f200: 742d 6669 6c65 7327 3a0a 2020 2020 2020  t-files':.      
0000f210: 2020 2020 2020 7265 7475 726e 5f72 6573        return_res
0000f220: 756c 7473 2861 6c6c 6f77 6c69 7374 5f66  ults(allowlist_f
0000f230: 696c 6573 5f63 6f6d 6d61 6e64 2863 6c69  iles_command(cli
0000f240: 656e 742c 2061 7267 7329 290a 0a20 2020  ent, args))..   
0000f250: 2020 2020 2065 6c69 6620 636f 6d6d 616e       elif comman
0000f260: 6420 3d3d 2027 7864 722d 7265 6d6f 7665  d == 'xdr-remove
0000f270: 2d62 6c6f 636b 6c69 7374 2d66 696c 6573  -blocklist-files
0000f280: 273a 0a20 2020 2020 2020 2020 2020 2072  ':.            r
0000f290: 6574 7572 6e5f 7265 7375 6c74 7328 7265  eturn_results(re
0000f2a0: 6d6f 7665 5f62 6c6f 636b 6c69 7374 5f66  move_blocklist_f
0000f2b0: 696c 6573 5f63 6f6d 6d61 6e64 2863 6c69  iles_command(cli
0000f2c0: 656e 742c 2061 7267 7329 290a 0a20 2020  ent, args))..   
0000f2d0: 2020 2020 2065 6c69 6620 636f 6d6d 616e       elif comman
0000f2e0: 6420 3d3d 2027 7864 722d 7265 6d6f 7665  d == 'xdr-remove
0000f2f0: 2d61 6c6c 6f77 6c69 7374 2d66 696c 6573  -allowlist-files
0000f300: 273a 0a20 2020 2020 2020 2020 2020 2072  ':.            r
0000f310: 6574 7572 6e5f 7265 7375 6c74 7328 7265  eturn_results(re
0000f320: 6d6f 7665 5f61 6c6c 6f77 6c69 7374 5f66  move_allowlist_f
0000f330: 696c 6573 5f63 6f6d 6d61 6e64 2863 6c69  iles_command(cli
0000f340: 656e 742c 2061 7267 7329 290a 0a20 2020  ent, args))..   
0000f350: 2020 2020 2065 6c69 6620 636f 6d6d 616e       elif comman
0000f360: 6420 3d3d 2027 7864 722d 6765 742d 636f  d == 'xdr-get-co
0000f370: 6e74 7269 6275 7469 6e67 2d65 7665 6e74  ntributing-event
0000f380: 273a 0a20 2020 2020 2020 2020 2020 2072  ':.            r
0000f390: 6574 7572 6e5f 7265 7375 6c74 7328 6765  eturn_results(ge
0000f3a0: 745f 636f 6e74 7269 6275 7469 6e67 5f65  t_contributing_e
0000f3b0: 7665 6e74 5f63 6f6d 6d61 6e64 2863 6c69  vent_command(cli
0000f3c0: 656e 742c 2061 7267 7329 290a 0a20 2020  ent, args))..   
0000f3d0: 2020 2020 2065 6c69 6620 636f 6d6d 616e       elif comman
0000f3e0: 6420 3d3d 2027 7864 722d 7265 706c 6163  d == 'xdr-replac
0000f3f0: 652d 6665 6174 7572 6564 2d66 6965 6c64  e-featured-field
0000f400: 273a 0a20 2020 2020 2020 2020 2020 2072  ':.            r
0000f410: 6574 7572 6e5f 7265 7375 6c74 7328 7265  eturn_results(re
0000f420: 706c 6163 655f 6665 6174 7572 6564 5f66  place_featured_f
0000f430: 6965 6c64 5f63 6f6d 6d61 6e64 2863 6c69  ield_command(cli
0000f440: 656e 742c 2061 7267 7329 290a 0a20 2020  ent, args))..   
0000f450: 2065 7863 6570 7420 4578 6365 7074 696f   except Exceptio
0000f460: 6e20 6173 2065 7272 3a0a 2020 2020 2020  n as err:.      
0000f470: 2020 7265 7475 726e 5f65 7272 6f72 2873    return_error(s
0000f480: 7472 2865 7272 2929 0a0a 0a69 6620 5f5f  tr(err))...if __
0000f490: 6e61 6d65 5f5f 2069 6e20 2827 5f5f 6d61  name__ in ('__ma
0000f4a0: 696e 5f5f 272c 2027 5f5f 6275 696c 7469  in__', '__builti
0000f4b0: 6e5f 5f27 2c20 2762 7569 6c74 696e 7327  n__', 'builtins'
0000f4c0: 293a 0a20 2020 206d 6169 6e28 290a       ):.    main().
