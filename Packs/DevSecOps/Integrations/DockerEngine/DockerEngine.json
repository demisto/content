{
    "name": "Docker Engine API",
    "description": "The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't  eak. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.41) is used. For example, calling `/info` is the same as calling `/v1.41/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query  meters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not  eak when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` ",
    "category": "IT Services",
    "url": "https://www.example.com/api",
    "auth": [
        "apiKey"
    ],
    "context_path": "Docker",
    "commands": [
        {
            "name": "build-prune",
            "path": "build/prune",
            "method": "post",
            "description": "Delete builder cache",
            "arguments": [
                {
                    "name": "keep-storage",
                    "description": "Amount of disk space in bytes to keep for cache",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "all",
                    "description": "Remove all types of build cache",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "filters",
                    "description": "A JSON encoded value of the filters (a `map[string][]string`) to process on the list of build cache objects.  Available filters:  - `until= duration `: duration relative to daemon's time, during which build cache was not used, in Go's duration format (e.g., '24h') - `id= id ` - `parent= id ` - `type= string ` - `description= string ` - `inuse` - `shared` - `private` ",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "SpaceReclaimed",
                    "description": "Disk space reclaimed in bytes",
                    "type": "Number"
                }
            ],
            "context_path": "BuildPruneResponse",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "config-create",
            "path": "configs/create",
            "method": "post",
            "description": "Create a config",
            "arguments": [
                {
                    "name": "Name",
                    "description": "User-defined name of the config.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ConfigSpec",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Labels",
                    "description": "User-defined key/value metadata.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ConfigSpec",
                    "type": "object",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Data",
                    "description": "Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-5)) config data. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ConfigSpec",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Templating",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ConfigSpec",
                    "type": "string",
                    "options": null,
                    "properties": {
                        "Name": {
                            "type": "string",
                            "description": "Name of the driver.",
                            "required": true,
                            "options": null
                        },
                        "Options": {
                            "type": "object",
                            "description": "Key/value map of driver-specific options.",
                            "required": false,
                            "options": null
                        }
                    }
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "config-delete",
            "path": "configs/{id}",
            "method": "delete",
            "description": "Delete a config",
            "arguments": [
                {
                    "name": "id",
                    "description": "ID of the config",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "config-inspect",
            "path": "configs/{id}",
            "method": "get",
            "description": "Inspect a config",
            "arguments": [
                {
                    "name": "id",
                    "description": "ID of the config",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "ID",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "CreatedAt",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "UpdatedAt",
                    "description": "",
                    "type": "String"
                }
            ],
            "context_path": "Config",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "config-list",
            "path": "configs",
            "method": "get",
            "description": "List configs",
            "arguments": [
                {
                    "name": "filters",
                    "description": "A JSON encoded value of the filters (a `map[string][]string`) to process on the configs list.  Available filters:  - `id= config id ` - `label= key  or label= key =value` - `name= config name ` - `names= config name ` ",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "ID",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "CreatedAt",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "UpdatedAt",
                    "description": "",
                    "type": "String"
                }
            ],
            "context_path": "Config",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "config-update",
            "path": "configs/{id}/update",
            "method": "post",
            "description": "Update a Config",
            "arguments": [
                {
                    "name": "id",
                    "description": "The ID or name of the config",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Name",
                    "description": "User-defined name of the config.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ConfigSpec",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Labels",
                    "description": "User-defined key/value metadata.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ConfigSpec",
                    "type": "object",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Data",
                    "description": "Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-5)) config data. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ConfigSpec",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Templating",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ConfigSpec",
                    "type": "string",
                    "options": null,
                    "properties": {
                        "Name": {
                            "type": "string",
                            "description": "Name of the driver.",
                            "required": true,
                            "options": null
                        },
                        "Options": {
                            "type": "object",
                            "description": "Key/value map of driver-specific options.",
                            "required": false,
                            "options": null
                        }
                    }
                },
                {
                    "name": "version",
                    "description": "The version number of the config object being updated. This is required to avoid conflicting writes. ",
                    "required": true,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "container-archive",
            "path": "containers/{id}/archive",
            "method": "get",
            "description": "Get an archive of a filesystem resource in a container",
            "arguments": [
                {
                    "name": "id",
                    "description": "ID or name of the container",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "path",
                    "description": "Resource in the container\u2019s filesystem to archive.",
                    "required": true,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [
                {
                    "Accept": "application/x-tar"
                }
            ],
            "unique_key": ""
        },
        {
            "name": "container-archive-info",
            "path": "containers/{id}/archive",
            "method": "head",
            "description": "Get information about files in a container",
            "arguments": [
                {
                    "name": "id",
                    "description": "ID or name of the container",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "path",
                    "description": "Resource in the container\u2019s filesystem to archive.",
                    "required": true,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "container-attach",
            "path": "containers/{id}/attach",
            "method": "post",
            "description": "Attach to a container",
            "arguments": [
                {
                    "name": "id",
                    "description": "ID or name of the container",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "detachKeys",
                    "description": "Override the key sequence for detaching a container.Format is a single character `[a-Z]` or `ctrl- value ` where ` value ` is one of: `a-z`, `@`, `^`, `[`, `,` or `_`. ",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "logs",
                    "description": "Replay previous logs from the container.  This is useful for attaching to a container that has started and you want to output everything since the container started.  If `stream` is also enabled, once all the previous output has been returned, it will seamlessly transition into streaming current output. ",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "stream",
                    "description": "Stream attached streams from the time the request was made onwards. ",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "stdin",
                    "description": "Attach to `stdin`",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "stdout",
                    "description": "Attach to `stdout`",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "stderr",
                    "description": "Attach to `stderr`",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [
                {
                    "Accept": "application/vnd.docker.raw-stream"
                }
            ],
            "unique_key": ""
        },
        {
            "name": "container-attach-websocket",
            "path": "containers/{id}/attach/ws",
            "method": "get",
            "description": "Attach to a container via a websocket",
            "arguments": [
                {
                    "name": "id",
                    "description": "ID or name of the container",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "detachKeys",
                    "description": "Override the key sequence for detaching a container.Format is a single character `[a-Z]` or `ctrl- value ` where ` value ` is one of: `a-z`, `@`, `^`, `[`, `,`, or `_`. ",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "logs",
                    "description": "Return logs",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "stream",
                    "description": "Return stream",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "stdin",
                    "description": "Attach to `stdin`",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "stdout",
                    "description": "Attach to `stdout`",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "stderr",
                    "description": "Attach to `stderr`",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "container-changes",
            "path": "containers/{id}/changes",
            "method": "get",
            "description": "Get changes on a container\u2019s filesystem",
            "arguments": [
                {
                    "name": "id",
                    "description": "ID or name of the container",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "Path",
                    "description": "Path to file that has changed",
                    "type": "String"
                },
                {
                    "name": "Kind",
                    "description": "Kind of change",
                    "type": "Number"
                }
            ],
            "context_path": "ContainerChangeResponseItem",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "container-create",
            "path": "containers/create",
            "method": "post",
            "description": "Create a container",
            "arguments": [
                {
                    "name": "name",
                    "description": "Assign the specified name to the container. Must match `/?[a-zA-Z0-9][a-zA-Z0-9_.-]+`. ",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Hostname",
                    "description": "The hostname to use for the container, as a valid RFC 1123 hostname.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Domainname",
                    "description": "The domain name to use for the container.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "User",
                    "description": "The user that commands are run as inside the container.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "AttachStdin",
                    "description": "Whether to attach to `stdin`.",
                    "required": false,
                    "default": false,
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "AttachStdout",
                    "description": "Whether to attach to `stdout`.",
                    "required": false,
                    "default": true,
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "AttachStderr",
                    "description": "Whether to attach to `stderr`.",
                    "required": false,
                    "default": true,
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "ExposedPorts",
                    "description": "An object mapping ports to an empty object in the form:  `{\" port / tcp|udp|sctp \": {}}` ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "object",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Tty",
                    "description": "Attach standard streams to a TTY, including `stdin` if it is not closed. ",
                    "required": false,
                    "default": false,
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "OpenStdin",
                    "description": "Open `stdin`",
                    "required": false,
                    "default": false,
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "StdinOnce",
                    "description": "Close `stdin` after one attached client disconnects",
                    "required": false,
                    "default": false,
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Env",
                    "description": "A list of environment variables to set inside the container in the form `[\"VAR=value\", ...]`. A variable without `=` is removed from the environment, rather than to have an empty value. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Cmd",
                    "description": "Command to run specified as a string or an array of strings. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Healthcheck",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "string",
                    "options": null,
                    "properties": {
                        "Test": {
                            "type": "array",
                            "description": "The test to perform. Possible values are:\n\n- `[]` inherit healthcheck from image or parent image\n- `[\"NONE\"]` disable healthcheck\n- `[\"CMD\", args...]` exec arguments directly\n- `[\"CMD-SHELL\", command]` run command with system's default shell\n",
                            "required": false,
                            "options": null
                        },
                        "Interval": {
                            "type": "integer",
                            "description": "The time to wait between checks in nanoseconds. It should be 0 or at\nleast 1000000 (1 ms). 0 means inherit.\n",
                            "required": false,
                            "options": null
                        },
                        "Timeout": {
                            "type": "integer",
                            "description": "The time to wait before considering the check to have hung. It should\nbe 0 or at least 1000000 (1 ms). 0 means inherit.\n",
                            "required": false,
                            "options": null
                        },
                        "Retries": {
                            "type": "integer",
                            "description": "The number of consecutive failures needed to consider a container as\nunhealthy. 0 means inherit.\n",
                            "required": false,
                            "options": null
                        },
                        "StartPeriod": {
                            "type": "integer",
                            "description": "Start period for the container to initialize before starting\nhealth-retries countdown in nanoseconds. It should be 0 or at least\n1000000 (1 ms). 0 means inherit.\n",
                            "required": false,
                            "options": null
                        }
                    }
                },
                {
                    "name": "ArgsEscaped",
                    "description": "Command is already escaped (Windows only)",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Image",
                    "description": "The name of the image to use when creating the container/ ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Volumes",
                    "description": "An object mapping mount point paths inside the container to empty objects. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "object",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "WorkingDir",
                    "description": "The working directory for commands to run in.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Entrypoint",
                    "description": "The entry point for the container as a string or an array of strings.  If the array consists of exactly one empty string (`[\"\"]`) then the entry point is reset to system default (i.e., the entry point used by docker when there is no `ENTRYPOINT` instruction in the `Dockerfile`). ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "NetworkDisabled",
                    "description": "Disable networking for the container.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "MacAddress",
                    "description": "MAC address of the container.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "OnBuild",
                    "description": "`ONBUILD` metadata that were defined in the image's `Dockerfile`. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Labels",
                    "description": "User-defined key/value metadata.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "object",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "StopSignal",
                    "description": "Signal to stop a container as a string or unsigned integer. ",
                    "required": false,
                    "default": "SIGTERM",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "StopTimeout",
                    "description": "Timeout to stop a container in seconds.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Shell",
                    "description": "Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Binds",
                    "description": "A list of volume bindings for this container. Each volume binding is a string in one of these forms:  - `host-src:container-dest[:options]` to bind-mount a host path   into the container. Both `host-src`, and `container-dest` must   be an _absolute_ path. - `volume-name:container-dest[:options]` to bind-mount a volume   managed by a volume driver into the container. `container-dest`   must be an _absolute_ path.  `options` is an optional, comma-delimited list of:  - `nocopy` disables automatic copying of data from the container   path to the volume. The `nocopy` flag only applies to named volumes. - `[ro|rw]` mounts a volume read-only or read-write, respectively.   If omitted or set to `rw`, volumes are mounted read-write. - `[z|Z]` applies SELinux labels to allow or deny multiple containers   to read and write to the same volume.     - `z`: a _shared_ content label is applied to the content. This       label indicates that multiple containers can share the volume       content, for both reading and writing.     - `Z`: a _private unshared_ label is applied to the content.       This label indicates that only the current container can use       a private volume. Labeling systems such as SELinux require       proper labels to be placed on volume content that is mounted       into a container. Without a label, the security system can       prevent a container's processes from using the content. By       default, the labels set by the host operating system are not       modified. - `[[r]shared|[r]slave|[r]private]` specifies mount   [propagation behavior](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt).   This only applies to bind-mounted volumes, not internal volumes   or named volumes. Mount propagation requires the source mount   point (the location where the source directory is mounted in the   host operating system) to have the correct propagation properties.   For shared volumes, the source mount point must be set to `shared`.   For slave volumes, the mount must be set to either `shared` or   `slave`. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "ContainerIDFile",
                    "description": "Path to a file where the container ID is written",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "LogConfig",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "string",
                    "options": null,
                    "properties": {
                        "Type": {
                            "type": "string",
                            "description": "",
                            "required": false,
                            "options": null
                        },
                        "Config": {
                            "type": "object",
                            "description": "",
                            "required": false,
                            "options": null
                        }
                    }
                },
                {
                    "name": "NetworkMode",
                    "description": "Network mode to use for this container. Supported standard values are: ` idge`, `host`, `none`, and `container: name|id `. Any other value is taken as a custom network's name to which this container should connect to. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "PortBindings",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "RestartPolicy",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "string",
                    "options": null,
                    "properties": {
                        "Name": {
                            "type": "string",
                            "description": "- Empty string means not to restart\n- `always` Always restart\n- `unless-stopped` Restart always except when the user has manually stopped the container\n- `on-failure` Restart only when the container exit code is non-zero\n",
                            "required": false,
                            "options": null
                        },
                        "MaximumRetryCount": {
                            "type": "integer",
                            "description": "If `on-failure` is used, the number of times to retry before giving up.\n",
                            "required": false,
                            "options": null
                        }
                    }
                },
                {
                    "name": "AutoRemove",
                    "description": "Automatically remove the container when the container's process exits. This has no effect if `RestartPolicy` is set. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "VolumeDriver",
                    "description": "Driver that this container uses to mount volumes.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "VolumesFrom",
                    "description": "A list of volumes to inherit from another container, specified in the form ` container name [: ro|rw ]`. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Mounts",
                    "description": "Specification for mounts to be added to the container. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "CapAdd",
                    "description": "A list of kernel capabilities to add to the container. Conflicts with option 'Capabilities'. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "CapDrop",
                    "description": "A list of kernel capabilities to drop from the container. Conflicts with option 'Capabilities'. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "CgroupnsMode",
                    "description": "cgroup namespace mode for the container. Possible values are:  - `\"private\"`: the container runs in its own private cgroup namespace - `\"host\"`: use the host system's cgroup namespace  If not specified, the daemon default is used, which can either be `\"private\"` or `\"host\"`, depending on daemon version, kernel support and configuration. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "string",
                    "options": [
                        "private",
                        "host"
                    ],
                    "properties": {}
                },
                {
                    "name": "Dns",
                    "description": "A list of DNS servers for the container to use.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "DnsOptions",
                    "description": "A list of DNS options.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "DnsSearch",
                    "description": "A list of DNS search domains.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "ExtraHosts",
                    "description": "A list of hostnames/IP mappings to add to the container's `/etc/hosts` file. Specified in the form `[\"hostname:IP\"]`. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "GroupAdd",
                    "description": "A list of additional groups that the container process will run as. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "IpcMode",
                    "description": "IPC sharing mode for the container. Possible values are:  - `\"none\"`: own private IPC namespace, with /dev/shm not mounted - `\"private\"`: own private IPC namespace - `\"shareable\"`: own private IPC namespace, with a possibility to share it with other containers - `\"container: name|id \"`: join another (shareable) container's IPC namespace - `\"host\"`: use the host system's IPC namespace  If not specified, daemon default is used, which can either be `\"private\"` or `\"shareable\"`, depending on daemon version and configuration. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Cgroup",
                    "description": "Cgroup to use for the container.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Links",
                    "description": "A list of links for the container in the form `container_name:alias`. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "OomScoreAdj",
                    "description": "An integer value containing the score given to the container in order to tune OOM killer preferences. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "PidMode",
                    "description": "Set the PID (Process) Namespace mode for the container. It can be either:  - `\"container: name|id \"`: joins another container's PID namespace - `\"host\"`: use the host's PID namespace inside the container ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Privileged",
                    "description": "Gives the container full access to the host.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "PublishAllPorts",
                    "description": "Allocates an ephemeral host port for all of a container's exposed ports.  Ports are de-allocated when the container stops and allocated when the container starts. The allocated port might be changed when restarting the container.  The port is selected from the ephemeral port range that depends on the kernel. For example, on Linux the range is defined by `/proc/sys/net/ipv4/ip_local_port_range`. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "ReadonlyRootfs",
                    "description": "Mount the container's root filesystem as read only.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "SecurityOpt",
                    "description": "A list of string values to customize labels for MLS systems, such as SELinux.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "StorageOpt",
                    "description": "Storage driver options for this container, in the form `{\"size\": \"120G\"}`. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "object",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Tmpfs",
                    "description": "A map of container directories which should be replaced by tmpfs mounts, and their corresponding mount options. For example:  ``` { \"/run\": \"rw,noexec,nosuid,size=65536k\" } ``` ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "object",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "UTSMode",
                    "description": "UTS namespace to use for the container.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "UsernsMode",
                    "description": "Sets the usernamespace mode for the container when usernamespace remapping option is enabled. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "ShmSize",
                    "description": "Size of `/dev/shm` in bytes. If omitted, the system uses 64MB. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Sysctls",
                    "description": "A list of kernel  meters (sysctls) to set in the container. For example:  ``` {\"net.ipv4.ip_forward\": \"1\"} ``` ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "object",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Runtime",
                    "description": "Runtime to use with this container.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "ConsoleSize",
                    "description": "Initial console size, as an `[height, width]` array. (Windows only) ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Isolation",
                    "description": "Isolation technology of the container. (Windows only) ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "string",
                    "options": [
                        "default",
                        "process",
                        "hyperv"
                    ],
                    "properties": {}
                },
                {
                    "name": "MaskedPaths",
                    "description": "The list of paths to be masked inside the container (this overrides the default set of paths). ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "ReadonlyPaths",
                    "description": "The list of paths to be set as read-only inside the container (this overrides the default set of paths). ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "HostConfig",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "EndpointsConfig",
                    "description": "A mapping of network name to endpoint configuration for that network. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "NetworkingConfig",
                    "type": "object",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "container-delete",
            "path": "containers/{id}",
            "method": "delete",
            "description": "Remove a container",
            "arguments": [
                {
                    "name": "id",
                    "description": "ID or name of the container",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "v",
                    "description": "Remove anonymous volumes associated with the container.",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "force",
                    "description": "If the container is running, kill it before removing it.",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "link",
                    "description": "Remove the specified link associated with the container.",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "container-exec",
            "path": "containers/{id}/exec",
            "method": "post",
            "description": "Create an exec instance",
            "arguments": [
                {
                    "name": "AttachStdin",
                    "description": "Attach to `stdin` of the exec command.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "execConfig",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "AttachStdout",
                    "description": "Attach to `stdout` of the exec command.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "execConfig",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "AttachStderr",
                    "description": "Attach to `stderr` of the exec command.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "execConfig",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "DetachKeys",
                    "description": "Override the key sequence for detaching a container. Format is a single character `[a-Z]` or `ctrl- value ` where ` value ` is one of: `a-z`, `@`, `^`, `[`, `,` or `_`. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "execConfig",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Tty",
                    "description": "Allocate a pseudo-TTY.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "execConfig",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Env",
                    "description": "A list of environment variables in the form `[\"VAR=value\", ...]`. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "execConfig",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Cmd",
                    "description": "Command to run, as a string or array of strings.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "execConfig",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Privileged",
                    "description": "Runs the exec process with extended privileges.",
                    "required": false,
                    "default": false,
                    "in": "body",
                    "ref": "execConfig",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "User",
                    "description": "The user, and optionally, group to run the exec process inside the container. Format is one of: `user`, `user:group`, `uid`, or `uid:gid`. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "execConfig",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "WorkingDir",
                    "description": "The working directory for the exec process inside the container. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "execConfig",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "id",
                    "description": "ID or name of container",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "container-export",
            "path": "containers/{id}/export",
            "method": "get",
            "description": "Export a container",
            "arguments": [
                {
                    "name": "id",
                    "description": "ID or name of the container",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [
                {
                    "Accept": "application/octet-stream"
                }
            ],
            "unique_key": ""
        },
        {
            "name": "container-inspect",
            "path": "containers/{id}/json",
            "method": "get",
            "description": "Inspect a container",
            "arguments": [
                {
                    "name": "id",
                    "description": "ID or name of the container",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "size",
                    "description": "Return the size of container as fields `SizeRw` and `SizeRootFs`",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "Id",
                    "description": "The ID of the container",
                    "type": "String"
                },
                {
                    "name": "Created",
                    "description": "The time the container was created",
                    "type": "String"
                },
                {
                    "name": "Path",
                    "description": "The path to the command being run",
                    "type": "String"
                },
                {
                    "name": "Image",
                    "description": "The container's image ID",
                    "type": "String"
                },
                {
                    "name": "ResolvConfPath",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "HostnamePath",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "HostsPath",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "LogPath",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "RestartCount",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "Driver",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Platform",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "MountLabel",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "ProcessLabel",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "AppArmorProfile",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "SizeRw",
                    "description": "The size of files that have been created or changed by this container. ",
                    "type": "Number"
                },
                {
                    "name": "SizeRootFs",
                    "description": "The total size of all the files in this container.",
                    "type": "Number"
                },
                {
                    "name": "Mounts.Type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Mounts.Name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Mounts.Source",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Mounts.Destination",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Mounts.Driver",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Mounts.Mode",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Mounts.RW",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "Mounts.Propagation",
                    "description": "",
                    "type": "String"
                }
            ],
            "context_path": "ContainerInspectResponse",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "container-kill",
            "path": "containers/{id}/kill",
            "method": "post",
            "description": "Kill a container",
            "arguments": [
                {
                    "name": "id",
                    "description": "ID or name of the container",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "signal",
                    "description": "Signal to send to the container as an integer or string (e.g. `SIGINT`)",
                    "required": false,
                    "default": "SIGKILL",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "container-list",
            "path": "containers/json",
            "method": "get",
            "description": "List containers",
            "arguments": [
                {
                    "name": "all",
                    "description": "Return all containers. By default, only running containers are shown. ",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "limit",
                    "description": "Return this number of most recently created containers, including non-running ones. ",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "size",
                    "description": "Return the size of container as fields `SizeRw` and `SizeRootFs`. ",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "filters",
                    "description": "Filters to process on the container list, encoded as JSON (a `map[string][]string`). For example, `{\"status\": [\"paused\"]}` will only return paused containers.  Available filters:  - `ancestor`=(` image-name [: tag ]`, ` image id `, or ` image@digest `) - `before`=(` container id ` or ` container name `) - `expose`=(` port [/ proto ]`|` startport-endport /[ proto ]`) - `exited= int ` containers with exit code of ` int ` - `health`=(`starting`|`healthy`|`unhealthy`|`none`) - `id= ID ` a container's ID - `isolation=`(`default`|`process`|`hyperv`) (Windows daemon only) - `is-task=`(`true`|`false`) - `label=key` or `label=\"key=value\"` of a container label - `name= name ` a container's name - `network`=(` network id ` or ` network name `) - `publish`=(` port [/ proto ]`|` startport-endport /[ proto ]`) - `since`=(` container id ` or ` container name `) - `status=`(`created`|`restarting`|`running`|`removing`|`paused`|`exited`|`dead`) - `volume`=(` volume name ` or ` mount point destination `) ",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "ContainerSummary",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "container-logs",
            "path": "containers/{id}/logs",
            "method": "get",
            "description": "Get container logs",
            "arguments": [
                {
                    "name": "id",
                    "description": "ID or name of the container",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "follow",
                    "description": "Keep connection after returning logs.",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "stdout",
                    "description": "Return logs from `stdout`",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "stderr",
                    "description": "Return logs from `stderr`",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "since",
                    "description": "Only return logs since this time, as a UNIX timestamp",
                    "required": false,
                    "default": 0,
                    "in": "query",
                    "ref": "",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "until",
                    "description": "Only return logs before this time, as a UNIX timestamp",
                    "required": false,
                    "default": 0,
                    "in": "query",
                    "ref": "",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "timestamps",
                    "description": "Add timestamps to every log line",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "tail",
                    "description": "Only return this number of log lines from the end of the logs. Specify as an integer or `all` to output all log lines. ",
                    "required": false,
                    "default": "all",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "container-pause",
            "path": "containers/{id}/pause",
            "method": "post",
            "description": "Pause a container",
            "arguments": [
                {
                    "name": "id",
                    "description": "ID or name of the container",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "container-prune",
            "path": "containers/prune",
            "method": "post",
            "description": "Delete stopped containers",
            "arguments": [
                {
                    "name": "filters",
                    "description": "Filters to process on the prune list, encoded as JSON (a `map[string][]string`).  Available filters: - `until= timestamp ` Prune containers created before this timestamp. The ` timestamp ` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine\u2019s time. - `label` (`label= key `, `label= key = value `, `label!= key `, or `label!= key = value `) Prune containers with (or without, in case `label!=...` is used) the specified labels. ",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "SpaceReclaimed",
                    "description": "Disk space reclaimed in bytes",
                    "type": "Number"
                }
            ],
            "context_path": "ContainerPruneResponse",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "container-rename",
            "path": "containers/{id}/rename",
            "method": "post",
            "description": "Rename a container",
            "arguments": [
                {
                    "name": "id",
                    "description": "ID or name of the container",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "name",
                    "description": "New name for the container",
                    "required": true,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "container-resize",
            "path": "containers/{id}/resize",
            "method": "post",
            "description": "Resize a container TTY",
            "arguments": [
                {
                    "name": "id",
                    "description": "ID or name of the container",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "h",
                    "description": "Height of the TTY session in characters",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "w",
                    "description": "Width of the TTY session in characters",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [
                {
                    "Content-Type": "application/octet-stream"
                },
                {
                    "Accept": "text/plain"
                }
            ],
            "unique_key": ""
        },
        {
            "name": "container-restart",
            "path": "containers/{id}/restart",
            "method": "post",
            "description": "Restart a container",
            "arguments": [
                {
                    "name": "id",
                    "description": "ID or name of the container",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "t",
                    "description": "Number of seconds to wait before killing the container",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "container-start",
            "path": "containers/{id}/start",
            "method": "post",
            "description": "Start a container",
            "arguments": [
                {
                    "name": "id",
                    "description": "ID or name of the container",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "detachKeys",
                    "description": "Override the key sequence for detaching a container. Format is a single character `[a-Z]` or `ctrl- value ` where ` value ` is one of: `a-z`, `@`, `^`, `[`, `,` or `_`. ",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "container-stats",
            "path": "containers/{id}/stats",
            "method": "get",
            "description": "Get container stats based on resource usage",
            "arguments": [
                {
                    "name": "id",
                    "description": "ID or name of the container",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "stream",
                    "description": "Stream the output. If false, the stats will be output once and then it will disconnect. ",
                    "required": false,
                    "default": true,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "one-shot",
                    "description": "Only get a single stat instead of waiting for 2 cycles. Must be used with `stream=false`. ",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "container-stop",
            "path": "containers/{id}/stop",
            "method": "post",
            "description": "Stop a container",
            "arguments": [
                {
                    "name": "id",
                    "description": "ID or name of the container",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "t",
                    "description": "Number of seconds to wait before killing the container",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "container-top",
            "path": "containers/{id}/top",
            "method": "get",
            "description": "List processes running inside a container",
            "arguments": [
                {
                    "name": "id",
                    "description": "ID or name of the container",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "ps_args",
                    "description": "The arguments to pass to `ps`. For example, `aux`",
                    "required": false,
                    "default": "-ef",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "Processes",
                    "description": "",
                    "type": "String"
                }
            ],
            "context_path": "ContainerTopResponse",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "container-unpause",
            "path": "containers/{id}/unpause",
            "method": "post",
            "description": "Unpause a container",
            "arguments": [
                {
                    "name": "id",
                    "description": "ID or name of the container",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "container-update",
            "path": "containers/{id}/update",
            "method": "post",
            "description": "Update a container",
            "arguments": [
                {
                    "name": "id",
                    "description": "ID or name of the container",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "CpuShares",
                    "description": "An integer value representing this container's relative CPU weight versus other containers. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "Resources",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Memory",
                    "description": "Memory limit in bytes.",
                    "required": false,
                    "default": 0,
                    "in": "body",
                    "ref": "Resources",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "CgroupParent",
                    "description": "Path to `cgroups` under which the container's `cgroup` is created. If the path is not absolute, the path is considered to be relative to the `cgroups` path of the init process. Cgroups are created if they do not already exist. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "Resources",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "BlkioWeight",
                    "description": "Block IO weight (relative weight).",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "Resources",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "BlkioWeightDevice",
                    "description": "Block IO weight (relative device weight) in the form:  ``` [{\"Path\": \"device_path\", \"Weight\": weight}] ``` ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "Resources",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "BlkioDeviceReadBps",
                    "description": "Limit read rate (bytes per second) from a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ``` ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "Resources",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "BlkioDeviceWriteBps",
                    "description": "Limit write rate (bytes per second) to a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ``` ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "Resources",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "BlkioDeviceReadIOps",
                    "description": "Limit read rate (IO per second) from a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ``` ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "Resources",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "BlkioDeviceWriteIOps",
                    "description": "Limit write rate (IO per second) to a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ``` ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "Resources",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "CpuPeriod",
                    "description": "The length of a CPU period in microseconds.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "Resources",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "CpuQuota",
                    "description": "Microseconds of CPU time that the container can get in a CPU period. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "Resources",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "CpuRealtimePeriod",
                    "description": "The length of a CPU real-time period in microseconds. Set to 0 to allocate no time allocated to real-time tasks. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "Resources",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "CpuRealtimeRuntime",
                    "description": "The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time allocated to real-time tasks. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "Resources",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "CpusetCpus",
                    "description": "CPUs in which to allow execution (e.g., `0-3`, `0,1`). ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "Resources",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "CpusetMems",
                    "description": "Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "Resources",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Devices",
                    "description": "A list of devices to add to the container.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "Resources",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "DeviceCgroupRules",
                    "description": "a list of cgroup rules to apply to the container",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "Resources",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "DeviceRequests",
                    "description": "A list of requests for devices to be sent to device drivers. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "Resources",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "KernelMemory",
                    "description": "Kernel memory limit in bytes.   p    /  /p       Deprecated  : This field is deprecated as the kernel 5.4 deprecated   `kmem.limit_in_bytes`. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "Resources",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "KernelMemoryTCP",
                    "description": "Hard limit for kernel TCP buffer memory (in bytes).",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "Resources",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "MemoryReservation",
                    "description": "Memory soft limit in bytes.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "Resources",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "MemorySwap",
                    "description": "Total memory limit (memory + swap). Set as `-1` to enable unlimited swap. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "Resources",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "MemorySwappiness",
                    "description": "Tune a container's memory swappiness behavior. Accepts an integer between 0 and 100. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "Resources",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "NanoCPUs",
                    "description": "CPU quota in units of 10 sup -9 /sup  CPUs.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "Resources",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "OomKillDisable",
                    "description": "Disable OOM Killer for the container.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "Resources",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Init",
                    "description": "Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and the default (as configured on the daemon) is used. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "Resources",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "PidsLimit",
                    "description": "Tune a container's PIDs limit. Set `0` or `-1` for unlimited, or `null` to not change. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "Resources",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Ulimits",
                    "description": "A list of resource limits to set in the container. For example:  ``` {\"Name\": \"nofile\", \"Soft\": 1024, \"Hard\": 2048} ``` ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "Resources",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "CpuCount",
                    "description": "The number of usable CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "Resources",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "CpuPercent",
                    "description": "The usable percentage of the available CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "Resources",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "IOMaximumIOps",
                    "description": "Maximum IOps for the container system drive (Windows only)",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "Resources",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "IOMaximumBandwidth",
                    "description": "Maximum IO in bytes per second for the container system drive (Windows only). ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "Resources",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Name",
                    "description": "- Empty string means not to restart - `always` Always restart - `unless-stopped` Restart always except when the user has manually stopped the container - `on-failure` Restart only when the container exit code is non-zero ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "RestartPolicy",
                    "type": "string",
                    "options": [
                        "",
                        "always",
                        "unless-stopped",
                        "on-failure"
                    ],
                    "properties": {}
                },
                {
                    "name": "MaximumRetryCount",
                    "description": "If `on-failure` is used, the number of times to retry before giving up. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "RestartPolicy",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "ContainerUpdateResponse",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "container-wait",
            "path": "containers/{id}/wait",
            "method": "post",
            "description": "Wait for a container",
            "arguments": [
                {
                    "name": "id",
                    "description": "ID or name of the container",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "condition",
                    "description": "Wait until a container state reaches the given condition, either 'not-running' (default), 'next-exit', or 'removed'. ",
                    "required": false,
                    "default": "not-running",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "StatusCode",
                    "description": "Exit code of the container",
                    "type": "Number"
                }
            ],
            "context_path": "ContainerWaitResponse",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "distribution-inspect",
            "path": "distribution/{name}/json",
            "method": "get",
            "description": "Get image information from the registry",
            "arguments": [
                {
                    "name": "name",
                    "description": "Image name or id",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "Platforms.Architecture",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Platforms.OS",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Platforms.OSVersion",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Platforms.Variant",
                    "description": "",
                    "type": "String"
                }
            ],
            "context_path": "DistributionInspectResponse",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "exec-inspect",
            "path": "exec/{id}/json",
            "method": "get",
            "description": "Inspect an exec instance",
            "arguments": [
                {
                    "name": "id",
                    "description": "Exec instance ID",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "CanRemove",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "DetachKeys",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "ID",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Running",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "ExitCode",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "OpenStdin",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "OpenStderr",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "OpenStdout",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "ContainerID",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Pid",
                    "description": "The system process ID for the exec process.",
                    "type": "Number"
                }
            ],
            "context_path": "ExecInspectResponse",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "exec-resize",
            "path": "exec/{id}/resize",
            "method": "post",
            "description": "Resize an exec instance",
            "arguments": [
                {
                    "name": "id",
                    "description": "Exec instance ID",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "h",
                    "description": "Height of the TTY session in characters",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "w",
                    "description": "Width of the TTY session in characters",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "exec-start",
            "path": "exec/{id}/start",
            "method": "post",
            "description": "Start an exec instance",
            "arguments": [
                {
                    "name": "Detach",
                    "description": "Detach from the command.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "execStartConfig",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Tty",
                    "description": "Allocate a pseudo-TTY.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "execStartConfig",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "id",
                    "description": "Exec instance ID",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [
                {
                    "Accept": "application/vnd.docker.raw-stream"
                }
            ],
            "unique_key": ""
        },
        {
            "name": "get-plugin-privileges",
            "path": "plugins/privileges",
            "method": "get",
            "description": "Get plugin privileges",
            "arguments": [
                {
                    "name": "remote",
                    "description": "The name of the plugin. The `:latest` tag is optional, and is the default if omitted. ",
                    "required": true,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "Name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Description",
                    "description": "",
                    "type": "String"
                }
            ],
            "context_path": "PluginPrivilegeItem",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "image-build",
            "path": "build",
            "method": "post",
            "description": "Build an image",
            "arguments": [
                {
                    "name": "inputStream",
                    "description": "A tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "dockerfile",
                    "description": "Path within the build context to the `Dockerfile`. This is ignored if `remote` is specified and points to an external `Dockerfile`.",
                    "required": false,
                    "default": "Dockerfile",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "t",
                    "description": "A name and optional tag to apply to the image in the `name:tag` format. If you omit the tag the default `latest` value is assumed. You can provide several `t`  meters.",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "extrahosts",
                    "description": "Extra hosts to add to /etc/hosts",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "remote",
                    "description": "A Git repository URI or HTTP/HTTPS context URI. If the URI points to a single text file, the file\u2019s contents are placed into a file called `Dockerfile` and the image is built from that file. If the URI points to a tarball, the file is downloaded by the daemon and the contents therein used as the context for the build. If the URI points to a tarball and the `dockerfile`  meter is also specified, there must be a file with the corresponding path inside the tarball.",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "q",
                    "description": "Suppress verbose build output.",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "nocache",
                    "description": "Do not use the cache when building the image.",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "cachefrom",
                    "description": "JSON array of images used for build cache resolution.",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "pull",
                    "description": "Attempt to pull the image even if an older image exists locally.",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "rm",
                    "description": "Remove intermediate containers after a successful build.",
                    "required": false,
                    "default": true,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "forcerm",
                    "description": "Always remove intermediate containers, even upon failure.",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "memory",
                    "description": "Set memory limit for build.",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "memswap",
                    "description": "Total memory (memory + swap). Set as `-1` to disable swap.",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "cpushares",
                    "description": "CPU shares (relative weight).",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "cpusetcpus",
                    "description": "CPUs in which to allow execution (e.g., `0-3`, `0,1`).",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "cpuperiod",
                    "description": "The length of a CPU period in microseconds.",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "cpuquota",
                    "description": "Microseconds of CPU time that the container can get in a CPU period.",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "buildargs",
                    "description": "JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker uses the buildargs as the environment context for commands run via the `Dockerfile` RUN instruction, or for variable expansion in other `Dockerfile` instructions. This is not meant for passing secret values.  For example, the build arg `FOO=bar` would become `{\"FOO\":\"bar\"}` in JSON. This would result in the the query  meter `buildargs={\"FOO\":\"bar\"}`. Note that `{\"FOO\":\"bar\"}` should be URI component encoded.  [Read more about the buildargs instruction.](https://docs.docker.com/engine/reference/builder/#arg) ",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "shmsize",
                    "description": "Size of `/dev/shm` in bytes. The size must be greater than 0. If omitted the system uses 64MB.",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "squash",
                    "description": "Squash the resulting images layers into a single layer.  (Experimental release only.) ",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "labels",
                    "description": "Arbitrary key/value labels to set on the image, as a JSON map of string pairs.",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "networkmode",
                    "description": "Sets the networking mode for the run commands during build. Supported standard values are: ` idge`, `host`, `none`, and `container: name|id `. Any other value is taken as a custom network's name or ID to which this container should connect to. ",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Content-type",
                    "description": "",
                    "required": false,
                    "default": "application/x-tar",
                    "in": "header",
                    "ref": "",
                    "type": "string",
                    "options": [
                        "application/x-tar"
                    ],
                    "properties": {}
                },
                {
                    "name": "X-Registry-Config",
                    "description": "This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.  The key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:  ``` {   \"docker.example.com\": {     \"username\": \"janedoe\",     \"password\": \"hunter2\"   },   \"https://index.docker.io/v1/\": {     \"username\": \"mobydock\",     \"password\": \"conta1n3rize14\"   } } ```  Only the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a `https://` prefix and a `/v1/` suffix even though Docker will prefer to use the v2 registry API. ",
                    "required": false,
                    "default": "",
                    "in": "header",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "platform",
                    "description": "Platform in the format os[/arch[/variant]]",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "target",
                    "description": "Target build stage",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "outputs",
                    "description": "BuildKit output configuration",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [
                {
                    "Content-Type": "application/octet-stream"
                }
            ],
            "unique_key": ""
        },
        {
            "name": "image-commit",
            "path": "commit",
            "method": "post",
            "description": "Create a new image from a container",
            "arguments": [
                {
                    "name": "Hostname",
                    "description": "The hostname to use for the container, as a valid RFC 1123 hostname.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Domainname",
                    "description": "The domain name to use for the container.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "User",
                    "description": "The user that commands are run as inside the container.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "AttachStdin",
                    "description": "Whether to attach to `stdin`.",
                    "required": false,
                    "default": false,
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "AttachStdout",
                    "description": "Whether to attach to `stdout`.",
                    "required": false,
                    "default": true,
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "AttachStderr",
                    "description": "Whether to attach to `stderr`.",
                    "required": false,
                    "default": true,
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "ExposedPorts",
                    "description": "An object mapping ports to an empty object in the form:  `{\" port / tcp|udp|sctp \": {}}` ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "object",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Tty",
                    "description": "Attach standard streams to a TTY, including `stdin` if it is not closed. ",
                    "required": false,
                    "default": false,
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "OpenStdin",
                    "description": "Open `stdin`",
                    "required": false,
                    "default": false,
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "StdinOnce",
                    "description": "Close `stdin` after one attached client disconnects",
                    "required": false,
                    "default": false,
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Env",
                    "description": "A list of environment variables to set inside the container in the form `[\"VAR=value\", ...]`. A variable without `=` is removed from the environment, rather than to have an empty value. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Cmd",
                    "description": "Command to run specified as a string or an array of strings. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Healthcheck",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "string",
                    "options": null,
                    "properties": {
                        "Test": {
                            "type": "array",
                            "description": "The test to perform. Possible values are:\n\n- `[]` inherit healthcheck from image or parent image\n- `[\"NONE\"]` disable healthcheck\n- `[\"CMD\", args...]` exec arguments directly\n- `[\"CMD-SHELL\", command]` run command with system's default shell\n",
                            "required": false,
                            "options": null
                        },
                        "Interval": {
                            "type": "integer",
                            "description": "The time to wait between checks in nanoseconds. It should be 0 or at\nleast 1000000 (1 ms). 0 means inherit.\n",
                            "required": false,
                            "options": null
                        },
                        "Timeout": {
                            "type": "integer",
                            "description": "The time to wait before considering the check to have hung. It should\nbe 0 or at least 1000000 (1 ms). 0 means inherit.\n",
                            "required": false,
                            "options": null
                        },
                        "Retries": {
                            "type": "integer",
                            "description": "The number of consecutive failures needed to consider a container as\nunhealthy. 0 means inherit.\n",
                            "required": false,
                            "options": null
                        },
                        "StartPeriod": {
                            "type": "integer",
                            "description": "Start period for the container to initialize before starting\nhealth-retries countdown in nanoseconds. It should be 0 or at least\n1000000 (1 ms). 0 means inherit.\n",
                            "required": false,
                            "options": null
                        }
                    }
                },
                {
                    "name": "ArgsEscaped",
                    "description": "Command is already escaped (Windows only)",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Image",
                    "description": "The name of the image to use when creating the container/ ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Volumes",
                    "description": "An object mapping mount point paths inside the container to empty objects. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "object",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "WorkingDir",
                    "description": "The working directory for commands to run in.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Entrypoint",
                    "description": "The entry point for the container as a string or an array of strings.  If the array consists of exactly one empty string (`[\"\"]`) then the entry point is reset to system default (i.e., the entry point used by docker when there is no `ENTRYPOINT` instruction in the `Dockerfile`). ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "NetworkDisabled",
                    "description": "Disable networking for the container.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "MacAddress",
                    "description": "MAC address of the container.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "OnBuild",
                    "description": "`ONBUILD` metadata that were defined in the image's `Dockerfile`. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Labels",
                    "description": "User-defined key/value metadata.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "object",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "StopSignal",
                    "description": "Signal to stop a container as a string or unsigned integer. ",
                    "required": false,
                    "default": "SIGTERM",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "StopTimeout",
                    "description": "Timeout to stop a container in seconds.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Shell",
                    "description": "Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ContainerConfig",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "container",
                    "description": "The ID or name of the container to commit",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "repo",
                    "description": "Repository name for the created image",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "tag",
                    "description": "Tag name for the create image",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "comment",
                    "description": "Commit message",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "author",
                    "description": "Author of the image (e.g., `John Hannibal Smith  hannibal@a-team.com `)",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "pause",
                    "description": "Whether to pause the container before committing",
                    "required": false,
                    "default": true,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "changes",
                    "description": "`Dockerfile` instructions to apply while committing",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "image-create",
            "path": "images/create",
            "method": "post",
            "description": "Create an image",
            "arguments": [
                {
                    "name": "fromImage",
                    "description": "Name of the image to pull. The name may include a tag or digest. This  meter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed.",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "fromSrc",
                    "description": "Source to import. The value may be a URL from which the image can be retrieved or `-` to read the image from the request body. This  meter may only be used when importing an image.",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "repo",
                    "description": "Repository name given to an image when it is imported. The repo may include a tag. This  meter may only be used when importing an image.",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "tag",
                    "description": "Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled.",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "message",
                    "description": "Set commit message for imported image.",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "inputImage",
                    "description": "Image content if the value `-` has been specified in fromSrc query  meter",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "X-Registry-Auth",
                    "description": "A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. ",
                    "required": false,
                    "default": "",
                    "in": "header",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "platform",
                    "description": "Platform in the format os[/arch[/variant]]",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [
                {
                    "Content-Type": "text/plain"
                }
            ],
            "unique_key": ""
        },
        {
            "name": "image-delete",
            "path": "images/{name}",
            "method": "delete",
            "description": "Remove an image",
            "arguments": [
                {
                    "name": "name",
                    "description": "Image name or ID",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "force",
                    "description": "Remove the image even if it is being used by stopped containers or has other tags",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "noprune",
                    "description": "Do not delete untagged parent images",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "Untagged",
                    "description": "The image ID of an image that was untagged",
                    "type": "String"
                },
                {
                    "name": "Deleted",
                    "description": "The image ID of an image that was deleted",
                    "type": "String"
                }
            ],
            "context_path": "ImageDeleteResponseItem",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "image-get",
            "path": "images/{name}/get",
            "method": "get",
            "description": "Export an image",
            "arguments": [
                {
                    "name": "name",
                    "description": "Image name or ID",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [
                {
                    "Accept": "application/x-tar"
                }
            ],
            "unique_key": ""
        },
        {
            "name": "image-get-all",
            "path": "images/get",
            "method": "get",
            "description": "Export several images",
            "arguments": [
                {
                    "name": "names",
                    "description": "Image names to filter by",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "array",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [
                {
                    "Accept": "application/x-tar"
                }
            ],
            "unique_key": ""
        },
        {
            "name": "image-history",
            "path": "images/{name}/history",
            "method": "get",
            "description": "Get the history of an image",
            "arguments": [
                {
                    "name": "name",
                    "description": "Image name or ID",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "Id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Created",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "CreatedBy",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Size",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "Comment",
                    "description": "",
                    "type": "String"
                }
            ],
            "context_path": "HistoryResponseItem",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "image-inspect",
            "path": "images/{name}/json",
            "method": "get",
            "description": "Inspect an image",
            "arguments": [
                {
                    "name": "name",
                    "description": "Image name or id",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "Id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Parent",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Comment",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Created",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Container",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "DockerVersion",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Author",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Architecture",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Os",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "OsVersion",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Size",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "VirtualSize",
                    "description": "",
                    "type": "Number"
                }
            ],
            "context_path": "Image",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "image-list",
            "path": "images/json",
            "method": "get",
            "description": "List Images",
            "arguments": [
                {
                    "name": "all",
                    "description": "Show all images. Only images from a final layer (no children) are shown by default.",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "filters",
                    "description": "A JSON encoded value of the filters (a `map[string][]string`) to process on the images list.  Available filters:  - `before`=(` image-name [: tag ]`,  ` image id ` or ` image@digest `) - `dangling=true` - `label=key` or `label=\"key=value\"` of an image label - `reference`=(` image-name [: tag ]`) - `since`=(` image-name [: tag ]`,  ` image id ` or ` image@digest `) ",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "digests",
                    "description": "Show digest information as a `RepoDigests` field on each image.",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "Id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "ParentId",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Created",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "Size",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "SharedSize",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "VirtualSize",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "Containers",
                    "description": "",
                    "type": "Number"
                }
            ],
            "context_path": "ImageSummary",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "image-load",
            "path": "images/load",
            "method": "post",
            "description": "Import images",
            "arguments": [
                {
                    "name": "imagesTarball",
                    "description": "Tar archive containing images",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "quiet",
                    "description": "Suppress progress details during load.",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [
                {
                    "Content-Type": "application/x-tar"
                }
            ],
            "unique_key": ""
        },
        {
            "name": "image-prune",
            "path": "images/prune",
            "method": "post",
            "description": "Delete unused images",
            "arguments": [
                {
                    "name": "filters",
                    "description": "Filters to process on the prune list, encoded as JSON (a `map[string][]string`). Available filters:  - `dangling= boolean ` When set to `true` (or `1`), prune only    unused  and  untagged images. When set to `false`    (or `0`), all unused images are pruned. - `until= string ` Prune images created before this timestamp. The ` timestamp ` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine\u2019s time. - `label` (`label= key `, `label= key = value `, `label!= key `, or `label!= key = value `) Prune images with (or without, in case `label!=...` is used) the specified labels. ",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "ImagesDeleted.Untagged",
                    "description": "The image ID of an image that was untagged",
                    "type": "String"
                },
                {
                    "name": "ImagesDeleted.Deleted",
                    "description": "The image ID of an image that was deleted",
                    "type": "String"
                },
                {
                    "name": "SpaceReclaimed",
                    "description": "Disk space reclaimed in bytes",
                    "type": "Number"
                }
            ],
            "context_path": "ImagePruneResponse",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "image-push",
            "path": "images/{name}/push",
            "method": "post",
            "description": "Push an image",
            "arguments": [
                {
                    "name": "name",
                    "description": "Image name or ID.",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "tag",
                    "description": "The tag to associate with the image on the registry.",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "X-Registry-Auth",
                    "description": "A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. ",
                    "required": true,
                    "default": "",
                    "in": "header",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [
                {
                    "Content-Type": "application/octet-stream"
                }
            ],
            "unique_key": ""
        },
        {
            "name": "image-search",
            "path": "images/search",
            "method": "get",
            "description": "Search images",
            "arguments": [
                {
                    "name": "term",
                    "description": "Term to search",
                    "required": true,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "limit",
                    "description": "Maximum number of results to return",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "filters",
                    "description": "A JSON encoded value of the filters (a `map[string][]string`) to process on the images list. Available filters:  - `is-automated=(true|false)` - `is-official=(true|false)` - `stars= number ` Matches images that has at least 'number' stars. ",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "description",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "is_official",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "is_automated",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "star_count",
                    "description": "",
                    "type": "Number"
                }
            ],
            "context_path": "ImageSearchResponseItem",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "image-tag",
            "path": "images/{name}/tag",
            "method": "post",
            "description": "Tag an image",
            "arguments": [
                {
                    "name": "name",
                    "description": "Image name or ID to tag.",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "repo",
                    "description": "The repository to tag in. For example, `someuser/someimage`.",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "tag",
                    "description": "The name of the new tag.",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "network-connect",
            "path": "networks/{id}/connect",
            "method": "post",
            "description": "Connect a container to a network",
            "arguments": [
                {
                    "name": "id",
                    "description": "Network ID or name",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Container",
                    "description": "The ID or name of the container to connect to the network.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "container",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "EndpointConfig",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "container",
                    "type": "string",
                    "options": null,
                    "properties": {
                        "IPAMConfig": {
                            "type": "string",
                            "description": "",
                            "required": false,
                            "options": null
                        },
                        "Links": {
                            "type": "array",
                            "description": "",
                            "required": false,
                            "options": null
                        },
                        "Aliases": {
                            "type": "array",
                            "description": "",
                            "required": false,
                            "options": null
                        },
                        "NetworkID": {
                            "type": "string",
                            "description": "Unique ID of the network.\n",
                            "required": false,
                            "options": null
                        },
                        "EndpointID": {
                            "type": "string",
                            "description": "Unique ID for the service endpoint in a Sandbox.\n",
                            "required": false,
                            "options": null
                        },
                        "Gateway": {
                            "type": "string",
                            "description": "Gateway address for this network.\n",
                            "required": false,
                            "options": null
                        },
                        "IPAddress": {
                            "type": "string",
                            "description": "IPv4 address.\n",
                            "required": false,
                            "options": null
                        },
                        "IPPrefixLen": {
                            "type": "integer",
                            "description": "Mask length of the IPv4 address.\n",
                            "required": false,
                            "options": null
                        },
                        "IPv6Gateway": {
                            "type": "string",
                            "description": "IPv6 gateway address.\n",
                            "required": false,
                            "options": null
                        },
                        "GlobalIPv6Address": {
                            "type": "string",
                            "description": "Global IPv6 address.\n",
                            "required": false,
                            "options": null
                        },
                        "GlobalIPv6PrefixLen": {
                            "type": "integer",
                            "description": "Mask length of the global IPv6 address.\n",
                            "required": false,
                            "options": null
                        },
                        "MacAddress": {
                            "type": "string",
                            "description": "MAC address for the endpoint on this network.\n",
                            "required": false,
                            "options": null
                        },
                        "DriverOpts": {
                            "type": "object",
                            "description": "DriverOpts is a mapping of driver options and values. These options\nare passed directly to the driver and are driver specific.\n",
                            "required": false,
                            "options": null
                        }
                    }
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "network-create",
            "path": "networks/create",
            "method": "post",
            "description": "Create a network",
            "arguments": [
                {
                    "name": "Name",
                    "description": "The network's name.",
                    "required": true,
                    "default": "",
                    "in": "body",
                    "ref": "networkConfig",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "CheckDuplicate",
                    "description": "Check for networks with duplicate names. Since Network is primarily keyed based on a random ID and not on the name, and network name is strictly a user-friendly alias to the network which is uniquely identified using ID, there is no guaranteed way to check for duplicates. CheckDuplicate is there to provide a best effort checking of any networks which has the same name but it is not guaranteed to catch all name collisions. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "networkConfig",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Driver",
                    "description": "Name of the network driver plugin to use.",
                    "required": false,
                    "default": "bridge",
                    "in": "body",
                    "ref": "networkConfig",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Internal",
                    "description": "Restrict external access to the network.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "networkConfig",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Attachable",
                    "description": "Globally scoped network is manually attachable by regular containers from workers in swarm mode. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "networkConfig",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Ingress",
                    "description": "Ingress network is the network which provides the routing-mesh in swarm mode. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "networkConfig",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "IPAM",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "networkConfig",
                    "type": "string",
                    "options": null,
                    "properties": {
                        "Driver": {
                            "type": "string",
                            "description": "Name of the IPAM driver to use.",
                            "required": false,
                            "options": null
                        },
                        "Config": {
                            "type": "array",
                            "description": "List of IPAM configuration options, specified as a map:\n\n```\n{\"Subnet\": <CIDR>, \"IPRange\": <CIDR>, \"Gateway\": <IP address>, \"AuxAddress\": <device_name:IP address>}\n```\n",
                            "required": false,
                            "options": null
                        },
                        "Options": {
                            "type": "object",
                            "description": "Driver-specific options, specified as a map.",
                            "required": false,
                            "options": null
                        }
                    }
                },
                {
                    "name": "EnableIPv6",
                    "description": "Enable IPv6 on the network.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "networkConfig",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Options",
                    "description": "Network specific options to be used by the drivers.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "networkConfig",
                    "type": "object",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Labels",
                    "description": "User-defined key/value metadata.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "networkConfig",
                    "type": "object",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "network-delete",
            "path": "networks/{id}",
            "method": "delete",
            "description": "Remove a network",
            "arguments": [
                {
                    "name": "id",
                    "description": "Network ID or name",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "network-disconnect",
            "path": "networks/{id}/disconnect",
            "method": "post",
            "description": "Disconnect a container from a network",
            "arguments": [
                {
                    "name": "id",
                    "description": "Network ID or name",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Container",
                    "description": "The ID or name of the container to disconnect from the network. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "container_1",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Force",
                    "description": "Force the container to disconnect from the network. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "container_1",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "network-inspect",
            "path": "networks/{id}",
            "method": "get",
            "description": "Inspect a network",
            "arguments": [
                {
                    "name": "id",
                    "description": "Network ID or name",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "verbose",
                    "description": "Detailed inspect output for troubleshooting",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "scope",
                    "description": "Filter the network by scope (swarm, global, or local)",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "Name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Created",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Scope",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Driver",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "EnableIPv6",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "Internal",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "Attachable",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "Ingress",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "Containers.Name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Containers.EndpointID",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Containers.MacAddress",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Containers.IPv4Address",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Containers.IPv6Address",
                    "description": "",
                    "type": "String"
                }
            ],
            "context_path": "Network",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "network-list",
            "path": "networks",
            "method": "get",
            "description": "List networks",
            "arguments": [
                {
                    "name": "filters",
                    "description": "JSON encoded value of the filters (a `map[string][]string`) to process on the networks list.  Available filters:  - `dangling= boolean ` When set to `true` (or `1`), returns all    networks that are not in use by a container. When set to `false`    (or `0`), only networks that are in use by one or more    containers are returned. - `driver= driver-name ` Matches a network's driver. - `id= network-id ` Matches all or part of a network ID. - `label= key ` or `label= key = value ` of a network label. - `name= network-name ` Matches all or part of a network name. - `scope=[\"swarm\"|\"global\"|\"local\"]` Filters networks by scope (`swarm`, `global`, or `local`). - `type=[\"custom\"|\"builtin\"]` Filters networks by type. The `custom` keyword returns all user-defined networks. ",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "Name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Created",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Scope",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Driver",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "EnableIPv6",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "Internal",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "Attachable",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "Ingress",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "Containers.Name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Containers.EndpointID",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Containers.MacAddress",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Containers.IPv4Address",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Containers.IPv6Address",
                    "description": "",
                    "type": "String"
                }
            ],
            "context_path": "Network",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "network-prune",
            "path": "networks/prune",
            "method": "post",
            "description": "Delete unused networks",
            "arguments": [
                {
                    "name": "filters",
                    "description": "Filters to process on the prune list, encoded as JSON (a `map[string][]string`).  Available filters: - `until= timestamp ` Prune networks created before this timestamp. The ` timestamp ` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine\u2019s time. - `label` (`label= key `, `label= key = value `, `label!= key `, or `label!= key = value `) Prune networks with (or without, in case `label!=...` is used) the specified labels. ",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "NetworkPruneResponse",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "node-delete",
            "path": "nodes/{id}",
            "method": "delete",
            "description": "Delete a node",
            "arguments": [
                {
                    "name": "id",
                    "description": "The ID or name of the node",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "force",
                    "description": "Force remove a node from the swarm",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "node-inspect",
            "path": "nodes/{id}",
            "method": "get",
            "description": "Inspect a node",
            "arguments": [
                {
                    "name": "id",
                    "description": "The ID or name of the node",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "ID",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "CreatedAt",
                    "description": "Date and time at which the node was added to the swarm in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. ",
                    "type": "String"
                },
                {
                    "name": "UpdatedAt",
                    "description": "Date and time at which the node was last updated in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. ",
                    "type": "String"
                }
            ],
            "context_path": "Node",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "node-list",
            "path": "nodes",
            "method": "get",
            "description": "List nodes",
            "arguments": [
                {
                    "name": "filters",
                    "description": "Filters to process on the nodes list, encoded as JSON (a `map[string][]string`).  Available filters: - `id= node id ` - `label= engine label ` - `membership=`(`accepted`|`pending`)` - `name= node name ` - `node.label= node label ` - `role=`(`manager`|`worker`)` ",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "ID",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "CreatedAt",
                    "description": "Date and time at which the node was added to the swarm in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. ",
                    "type": "String"
                },
                {
                    "name": "UpdatedAt",
                    "description": "Date and time at which the node was last updated in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. ",
                    "type": "String"
                }
            ],
            "context_path": "Node",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "node-update",
            "path": "nodes/{id}/update",
            "method": "post",
            "description": "Update a node",
            "arguments": [
                {
                    "name": "id",
                    "description": "The ID of the node",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Name",
                    "description": "Name for the node.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "NodeSpec",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Labels",
                    "description": "User-defined key/value metadata.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "NodeSpec",
                    "type": "object",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Role",
                    "description": "Role of the node.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "NodeSpec",
                    "type": "string",
                    "options": [
                        "worker",
                        "manager"
                    ],
                    "properties": {}
                },
                {
                    "name": "Availability",
                    "description": "Availability of the node.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "NodeSpec",
                    "type": "string",
                    "options": [
                        "active",
                        "pause",
                        "drain"
                    ],
                    "properties": {}
                },
                {
                    "name": "version",
                    "description": "The version number of the node object being updated. This is required to avoid conflicting writes. ",
                    "required": true,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "plugin-create",
            "path": "plugins/create",
            "method": "post",
            "description": "Create a plugin",
            "arguments": [
                {
                    "name": "name",
                    "description": "The name of the plugin. The `:latest` tag is optional, and is the default if omitted. ",
                    "required": true,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "tarContext",
                    "description": "Path to tar containing plugin rootfs and manifest",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [
                {
                    "Content-Type": "application/x-tar"
                }
            ],
            "unique_key": ""
        },
        {
            "name": "plugin-delete",
            "path": "plugins/{name}",
            "method": "delete",
            "description": "Remove a plugin",
            "arguments": [
                {
                    "name": "name",
                    "description": "The name of the plugin. The `:latest` tag is optional, and is the default if omitted. ",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "force",
                    "description": "Disable the plugin before removing. This may result in issues if the plugin is in use by a container. ",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "Id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Enabled",
                    "description": "True if the plugin is running. False if the plugin is not running, only installed.",
                    "type": "Boolean"
                },
                {
                    "name": "PluginReference",
                    "description": "plugin remote reference used to push/pull the plugin",
                    "type": "String"
                }
            ],
            "context_path": "Plugin",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "plugin-disable",
            "path": "plugins/{name}/disable",
            "method": "post",
            "description": "Disable a plugin",
            "arguments": [
                {
                    "name": "name",
                    "description": "The name of the plugin. The `:latest` tag is optional, and is the default if omitted. ",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "plugin-enable",
            "path": "plugins/{name}/enable",
            "method": "post",
            "description": "Enable a plugin",
            "arguments": [
                {
                    "name": "name",
                    "description": "The name of the plugin. The `:latest` tag is optional, and is the default if omitted. ",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "timeout",
                    "description": "Set the HTTP client timeout (in seconds)",
                    "required": false,
                    "default": 0,
                    "in": "query",
                    "ref": "",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "plugin-inspect",
            "path": "plugins/{name}/json",
            "method": "get",
            "description": "Inspect a plugin",
            "arguments": [
                {
                    "name": "name",
                    "description": "The name of the plugin. The `:latest` tag is optional, and is the default if omitted. ",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "Id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Enabled",
                    "description": "True if the plugin is running. False if the plugin is not running, only installed.",
                    "type": "Boolean"
                },
                {
                    "name": "PluginReference",
                    "description": "plugin remote reference used to push/pull the plugin",
                    "type": "String"
                }
            ],
            "context_path": "Plugin",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "plugin-list",
            "path": "plugins",
            "method": "get",
            "description": "List plugins",
            "arguments": [
                {
                    "name": "filters",
                    "description": "A JSON encoded value of the filters (a `map[string][]string`) to process on the plugin list.  Available filters:  - `capability= capability name ` - `enable= true | false ` ",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "Id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Enabled",
                    "description": "True if the plugin is running. False if the plugin is not running, only installed.",
                    "type": "Boolean"
                },
                {
                    "name": "PluginReference",
                    "description": "plugin remote reference used to push/pull the plugin",
                    "type": "String"
                }
            ],
            "context_path": "Plugin",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "plugin-pull",
            "path": "plugins/pull",
            "method": "post",
            "description": "Install a plugin",
            "arguments": [
                {
                    "name": "remote",
                    "description": "Remote reference for plugin to install.  The `:latest` tag is optional, and is used as the default if omitted. ",
                    "required": true,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "name",
                    "description": "Local name for the pulled plugin.  The `:latest` tag is optional, and is used as the default if omitted. ",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "X-Registry-Auth",
                    "description": "A base64url-encoded auth configuration to use when pulling a plugin from a registry.  Refer to the [authentication section](#section/Authentication) for details. ",
                    "required": false,
                    "default": "",
                    "in": "header",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Name",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "body",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Description",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "body",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Value",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "body",
                    "type": "array",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "plugin-push",
            "path": "plugins/{name}/push",
            "method": "post",
            "description": "Push a plugin",
            "arguments": [
                {
                    "name": "name",
                    "description": "The name of the plugin. The `:latest` tag is optional, and is the default if omitted. ",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "plugin-set",
            "path": "plugins/{name}/set",
            "method": "post",
            "description": "Configure a plugin",
            "arguments": [
                {
                    "name": "name",
                    "description": "The name of the plugin. The `:latest` tag is optional, and is the default if omitted. ",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "body",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "",
                    "type": "array",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "plugin-upgrade",
            "path": "plugins/{name}/upgrade",
            "method": "post",
            "description": "Upgrade a plugin",
            "arguments": [
                {
                    "name": "name",
                    "description": "The name of the plugin. The `:latest` tag is optional, and is the default if omitted. ",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "remote",
                    "description": "Remote reference to upgrade to.  The `:latest` tag is optional, and is used as the default if omitted. ",
                    "required": true,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "X-Registry-Auth",
                    "description": "A base64url-encoded auth configuration to use when pulling a plugin from a registry.  Refer to the [authentication section](#section/Authentication) for details. ",
                    "required": false,
                    "default": "",
                    "in": "header",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Name",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "body",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Description",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "body",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Value",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "body",
                    "type": "array",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "put-container-archive",
            "path": "containers/{id}/archive",
            "method": "put",
            "description": "Extract an archive of files or folders to a directory in a container",
            "arguments": [
                {
                    "name": "id",
                    "description": "ID or name of the container",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "path",
                    "description": "Path to a directory in the container to extract the archive\u2019s contents into. ",
                    "required": true,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "noOverwriteDirNonDir",
                    "description": "If `1`, `true`, or `True` then it will be an error if unpacking the given content would cause an existing directory to be replaced with a non-directory and vice versa. ",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "copyUIDGID",
                    "description": "If `1`, `true`, then it will copy UID/GID maps to the dest file or dir ",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "inputStream",
                    "description": "The input stream must be a tar archive compressed with one of the following algorithms: `identity` (no compression), `gzip`, `bzip2`, or `xz`. ",
                    "required": true,
                    "default": "",
                    "in": "body",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [
                {
                    "Content-Type": "application/x-tar"
                }
            ],
            "unique_key": ""
        },
        {
            "name": "secret-create",
            "path": "secrets/create",
            "method": "post",
            "description": "Create a secret",
            "arguments": [
                {
                    "name": "Name",
                    "description": "User-defined name of the secret.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "SecretSpec",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Labels",
                    "description": "User-defined key/value metadata.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "SecretSpec",
                    "type": "object",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Data",
                    "description": "Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-5)) data to store as secret.  This field is only used to _create_ a secret, and is not returned by other endpoints. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "SecretSpec",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Driver",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "SecretSpec",
                    "type": "string",
                    "options": null,
                    "properties": {
                        "Name": {
                            "type": "string",
                            "description": "Name of the driver.",
                            "required": true,
                            "options": null
                        },
                        "Options": {
                            "type": "object",
                            "description": "Key/value map of driver-specific options.",
                            "required": false,
                            "options": null
                        }
                    }
                },
                {
                    "name": "Templating",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "SecretSpec",
                    "type": "string",
                    "options": null,
                    "properties": {
                        "Name": {
                            "type": "string",
                            "description": "Name of the driver.",
                            "required": true,
                            "options": null
                        },
                        "Options": {
                            "type": "object",
                            "description": "Key/value map of driver-specific options.",
                            "required": false,
                            "options": null
                        }
                    }
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "secret-delete",
            "path": "secrets/{id}",
            "method": "delete",
            "description": "Delete a secret",
            "arguments": [
                {
                    "name": "id",
                    "description": "ID of the secret",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "secret-inspect",
            "path": "secrets/{id}",
            "method": "get",
            "description": "Inspect a secret",
            "arguments": [
                {
                    "name": "id",
                    "description": "ID of the secret",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "ID",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "CreatedAt",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "UpdatedAt",
                    "description": "",
                    "type": "String"
                }
            ],
            "context_path": "Secret",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "secret-list",
            "path": "secrets",
            "method": "get",
            "description": "List secrets",
            "arguments": [
                {
                    "name": "filters",
                    "description": "A JSON encoded value of the filters (a `map[string][]string`) to process on the secrets list.  Available filters:  - `id= secret id ` - `label= key  or label= key =value` - `name= secret name ` - `names= secret name ` ",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "ID",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "CreatedAt",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "UpdatedAt",
                    "description": "",
                    "type": "String"
                }
            ],
            "context_path": "Secret",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "secret-update",
            "path": "secrets/{id}/update",
            "method": "post",
            "description": "Update a Secret",
            "arguments": [
                {
                    "name": "id",
                    "description": "The ID or name of the secret",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Name",
                    "description": "User-defined name of the secret.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "SecretSpec",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Labels",
                    "description": "User-defined key/value metadata.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "SecretSpec",
                    "type": "object",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Data",
                    "description": "Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-5)) data to store as secret.  This field is only used to _create_ a secret, and is not returned by other endpoints. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "SecretSpec",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Driver",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "SecretSpec",
                    "type": "string",
                    "options": null,
                    "properties": {
                        "Name": {
                            "type": "string",
                            "description": "Name of the driver.",
                            "required": true,
                            "options": null
                        },
                        "Options": {
                            "type": "object",
                            "description": "Key/value map of driver-specific options.",
                            "required": false,
                            "options": null
                        }
                    }
                },
                {
                    "name": "Templating",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "SecretSpec",
                    "type": "string",
                    "options": null,
                    "properties": {
                        "Name": {
                            "type": "string",
                            "description": "Name of the driver.",
                            "required": true,
                            "options": null
                        },
                        "Options": {
                            "type": "object",
                            "description": "Key/value map of driver-specific options.",
                            "required": false,
                            "options": null
                        }
                    }
                },
                {
                    "name": "version",
                    "description": "The version number of the secret object being updated. This is required to avoid conflicting writes. ",
                    "required": true,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "service-create",
            "path": "services/create",
            "method": "post",
            "description": "Create a service",
            "arguments": [
                {
                    "name": "Name",
                    "description": "Name of the service.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ServiceSpec",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Labels",
                    "description": "User-defined key/value metadata.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ServiceSpec",
                    "type": "object",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "TaskTemplate",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ServiceSpec",
                    "type": "string",
                    "options": null,
                    "properties": {
                        "PluginSpec": {
                            "type": "string",
                            "description": "",
                            "required": false,
                            "options": null
                        },
                        "ContainerSpec": {
                            "type": "string",
                            "description": "",
                            "required": false,
                            "options": null
                        },
                        "NetworkAttachmentSpec": {
                            "type": "string",
                            "description": "",
                            "required": false,
                            "options": null
                        },
                        "Resources": {
                            "type": "string",
                            "description": "",
                            "required": false,
                            "options": null
                        },
                        "RestartPolicy": {
                            "type": "string",
                            "description": "",
                            "required": false,
                            "options": null
                        },
                        "Placement": {
                            "type": "string",
                            "description": "",
                            "required": false,
                            "options": null
                        },
                        "ForceUpdate": {
                            "type": "integer",
                            "description": "A counter that triggers an update even if no relevant parameters have\nbeen changed.\n",
                            "required": false,
                            "options": null
                        },
                        "Runtime": {
                            "type": "string",
                            "description": "Runtime is the type of runtime specified for the task executor.\n",
                            "required": false,
                            "options": null
                        },
                        "Networks": {
                            "type": "array",
                            "description": "Specifies which networks the service should attach to.",
                            "required": false,
                            "options": null
                        },
                        "LogDriver": {
                            "type": "string",
                            "description": "",
                            "required": false,
                            "options": null
                        }
                    }
                },
                {
                    "name": "Mode",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ServiceSpec",
                    "type": "string",
                    "options": null,
                    "properties": {
                        "Replicated": {
                            "type": "string",
                            "description": "",
                            "required": false,
                            "options": null
                        },
                        "Global": {
                            "type": "object",
                            "description": "",
                            "required": false,
                            "options": null
                        },
                        "ReplicatedJob": {
                            "type": "string",
                            "description": "",
                            "required": false,
                            "options": null
                        },
                        "GlobalJob": {
                            "type": "object",
                            "description": "The mode used for services which run a task to the completed state\non each valid node.\n",
                            "required": false,
                            "options": null
                        }
                    }
                },
                {
                    "name": "UpdateConfig",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ServiceSpec",
                    "type": "string",
                    "options": null,
                    "properties": {
                        "Parallelism": {
                            "type": "integer",
                            "description": "Maximum number of tasks to be updated in one iteration (0 means\nunlimited parallelism).\n",
                            "required": false,
                            "options": null
                        },
                        "Delay": {
                            "type": "integer",
                            "description": "Amount of time between updates, in nanoseconds.",
                            "required": false,
                            "options": null
                        },
                        "FailureAction": {
                            "type": "string",
                            "description": "Action to take if an updated task fails to run, or stops running\nduring the update.\n",
                            "required": false,
                            "options": null
                        },
                        "Monitor": {
                            "type": "integer",
                            "description": "Amount of time to monitor each updated task for failures, in\nnanoseconds.\n",
                            "required": false,
                            "options": null
                        },
                        "MaxFailureRatio": {
                            "type": "number",
                            "description": "The fraction of tasks that may fail during an update before the\nfailure action is invoked, specified as a floating point number\nbetween 0 and 1.\n",
                            "required": false,
                            "options": null
                        },
                        "Order": {
                            "type": "string",
                            "description": "The order of operations when rolling out an updated task. Either\nthe old task is shut down before the new task is started, or the\nnew task is started before the old task is shut down.\n",
                            "required": false,
                            "options": null
                        }
                    }
                },
                {
                    "name": "RollbackConfig",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ServiceSpec",
                    "type": "string",
                    "options": null,
                    "properties": {
                        "Parallelism": {
                            "type": "integer",
                            "description": "Maximum number of tasks to be rolled back in one iteration (0 means\nunlimited parallelism).\n",
                            "required": false,
                            "options": null
                        },
                        "Delay": {
                            "type": "integer",
                            "description": "Amount of time between rollback iterations, in nanoseconds.\n",
                            "required": false,
                            "options": null
                        },
                        "FailureAction": {
                            "type": "string",
                            "description": "Action to take if an rolled back task fails to run, or stops\nrunning during the rollback.\n",
                            "required": false,
                            "options": null
                        },
                        "Monitor": {
                            "type": "integer",
                            "description": "Amount of time to monitor each rolled back task for failures, in\nnanoseconds.\n",
                            "required": false,
                            "options": null
                        },
                        "MaxFailureRatio": {
                            "type": "number",
                            "description": "The fraction of tasks that may fail during a rollback before the\nfailure action is invoked, specified as a floating point number\nbetween 0 and 1.\n",
                            "required": false,
                            "options": null
                        },
                        "Order": {
                            "type": "string",
                            "description": "The order of operations when rolling back a task. Either the old\ntask is shut down before the new task is started, or the new task\nis started before the old task is shut down.\n",
                            "required": false,
                            "options": null
                        }
                    }
                },
                {
                    "name": "Networks",
                    "description": "Specifies which networks the service should attach to.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ServiceSpec",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "EndpointSpec",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ServiceSpec",
                    "type": "string",
                    "options": null,
                    "properties": {
                        "Mode": {
                            "type": "string",
                            "description": "The mode of resolution to use for internal load balancing between tasks.\n",
                            "required": false,
                            "options": null
                        },
                        "Ports": {
                            "type": "array",
                            "description": "List of exposed ports that this service is accessible on from the\noutside. Ports can only be provided if `vip` resolution mode is used.\n",
                            "required": false,
                            "options": null
                        }
                    }
                },
                {
                    "name": "X-Registry-Auth",
                    "description": "A base64url-encoded auth configuration for pulling from private registries.  Refer to the [authentication section](#section/Authentication) for details. ",
                    "required": false,
                    "default": "",
                    "in": "header",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "service-delete",
            "path": "services/{id}",
            "method": "delete",
            "description": "Delete a service",
            "arguments": [
                {
                    "name": "id",
                    "description": "ID or name of service.",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "service-inspect",
            "path": "services/{id}",
            "method": "get",
            "description": "Inspect a service",
            "arguments": [
                {
                    "name": "id",
                    "description": "ID or name of service.",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "insertDefaults",
                    "description": "Fill empty fields with default values.",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "ID",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "CreatedAt",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "UpdatedAt",
                    "description": "",
                    "type": "String"
                }
            ],
            "context_path": "Service",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "service-list",
            "path": "services",
            "method": "get",
            "description": "List services",
            "arguments": [
                {
                    "name": "filters",
                    "description": "A JSON encoded value of the filters (a `map[string][]string`) to process on the services list.  Available filters:  - `id= service id ` - `label= service label ` - `mode=[\"replicated\"|\"global\"]` - `name= service name ` ",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "status",
                    "description": "Include service status, with count of running and desired tasks. ",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "ID",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "CreatedAt",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "UpdatedAt",
                    "description": "",
                    "type": "String"
                }
            ],
            "context_path": "Service",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "service-logs",
            "path": "services/{id}/logs",
            "method": "get",
            "description": "Get service logs",
            "arguments": [
                {
                    "name": "id",
                    "description": "ID or name of the service",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "details",
                    "description": "Show service context and extra details provided to logs.",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "follow",
                    "description": "Keep connection after returning logs.",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "stdout",
                    "description": "Return logs from `stdout`",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "stderr",
                    "description": "Return logs from `stderr`",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "since",
                    "description": "Only return logs since this time, as a UNIX timestamp",
                    "required": false,
                    "default": 0,
                    "in": "query",
                    "ref": "",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "timestamps",
                    "description": "Add timestamps to every log line",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "tail",
                    "description": "Only return this number of log lines from the end of the logs. Specify as an integer or `all` to output all log lines. ",
                    "required": false,
                    "default": "all",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "service-update",
            "path": "services/{id}/update",
            "method": "post",
            "description": "Update a service",
            "arguments": [
                {
                    "name": "id",
                    "description": "ID or name of service.",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Name",
                    "description": "Name of the service.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ServiceSpec",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Labels",
                    "description": "User-defined key/value metadata.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ServiceSpec",
                    "type": "object",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "TaskTemplate",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ServiceSpec",
                    "type": "string",
                    "options": null,
                    "properties": {
                        "PluginSpec": {
                            "type": "string",
                            "description": "",
                            "required": false,
                            "options": null
                        },
                        "ContainerSpec": {
                            "type": "string",
                            "description": "",
                            "required": false,
                            "options": null
                        },
                        "NetworkAttachmentSpec": {
                            "type": "string",
                            "description": "",
                            "required": false,
                            "options": null
                        },
                        "Resources": {
                            "type": "string",
                            "description": "",
                            "required": false,
                            "options": null
                        },
                        "RestartPolicy": {
                            "type": "string",
                            "description": "",
                            "required": false,
                            "options": null
                        },
                        "Placement": {
                            "type": "string",
                            "description": "",
                            "required": false,
                            "options": null
                        },
                        "ForceUpdate": {
                            "type": "integer",
                            "description": "A counter that triggers an update even if no relevant parameters have\nbeen changed.\n",
                            "required": false,
                            "options": null
                        },
                        "Runtime": {
                            "type": "string",
                            "description": "Runtime is the type of runtime specified for the task executor.\n",
                            "required": false,
                            "options": null
                        },
                        "Networks": {
                            "type": "array",
                            "description": "Specifies which networks the service should attach to.",
                            "required": false,
                            "options": null
                        },
                        "LogDriver": {
                            "type": "string",
                            "description": "",
                            "required": false,
                            "options": null
                        }
                    }
                },
                {
                    "name": "Mode",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ServiceSpec",
                    "type": "string",
                    "options": null,
                    "properties": {
                        "Replicated": {
                            "type": "string",
                            "description": "",
                            "required": false,
                            "options": null
                        },
                        "Global": {
                            "type": "object",
                            "description": "",
                            "required": false,
                            "options": null
                        },
                        "ReplicatedJob": {
                            "type": "string",
                            "description": "",
                            "required": false,
                            "options": null
                        },
                        "GlobalJob": {
                            "type": "object",
                            "description": "The mode used for services which run a task to the completed state\non each valid node.\n",
                            "required": false,
                            "options": null
                        }
                    }
                },
                {
                    "name": "UpdateConfig",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ServiceSpec",
                    "type": "string",
                    "options": null,
                    "properties": {
                        "Parallelism": {
                            "type": "integer",
                            "description": "Maximum number of tasks to be updated in one iteration (0 means\nunlimited parallelism).\n",
                            "required": false,
                            "options": null
                        },
                        "Delay": {
                            "type": "integer",
                            "description": "Amount of time between updates, in nanoseconds.",
                            "required": false,
                            "options": null
                        },
                        "FailureAction": {
                            "type": "string",
                            "description": "Action to take if an updated task fails to run, or stops running\nduring the update.\n",
                            "required": false,
                            "options": null
                        },
                        "Monitor": {
                            "type": "integer",
                            "description": "Amount of time to monitor each updated task for failures, in\nnanoseconds.\n",
                            "required": false,
                            "options": null
                        },
                        "MaxFailureRatio": {
                            "type": "number",
                            "description": "The fraction of tasks that may fail during an update before the\nfailure action is invoked, specified as a floating point number\nbetween 0 and 1.\n",
                            "required": false,
                            "options": null
                        },
                        "Order": {
                            "type": "string",
                            "description": "The order of operations when rolling out an updated task. Either\nthe old task is shut down before the new task is started, or the\nnew task is started before the old task is shut down.\n",
                            "required": false,
                            "options": null
                        }
                    }
                },
                {
                    "name": "RollbackConfig",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ServiceSpec",
                    "type": "string",
                    "options": null,
                    "properties": {
                        "Parallelism": {
                            "type": "integer",
                            "description": "Maximum number of tasks to be rolled back in one iteration (0 means\nunlimited parallelism).\n",
                            "required": false,
                            "options": null
                        },
                        "Delay": {
                            "type": "integer",
                            "description": "Amount of time between rollback iterations, in nanoseconds.\n",
                            "required": false,
                            "options": null
                        },
                        "FailureAction": {
                            "type": "string",
                            "description": "Action to take if an rolled back task fails to run, or stops\nrunning during the rollback.\n",
                            "required": false,
                            "options": null
                        },
                        "Monitor": {
                            "type": "integer",
                            "description": "Amount of time to monitor each rolled back task for failures, in\nnanoseconds.\n",
                            "required": false,
                            "options": null
                        },
                        "MaxFailureRatio": {
                            "type": "number",
                            "description": "The fraction of tasks that may fail during a rollback before the\nfailure action is invoked, specified as a floating point number\nbetween 0 and 1.\n",
                            "required": false,
                            "options": null
                        },
                        "Order": {
                            "type": "string",
                            "description": "The order of operations when rolling back a task. Either the old\ntask is shut down before the new task is started, or the new task\nis started before the old task is shut down.\n",
                            "required": false,
                            "options": null
                        }
                    }
                },
                {
                    "name": "Networks",
                    "description": "Specifies which networks the service should attach to.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ServiceSpec",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "EndpointSpec",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "ServiceSpec",
                    "type": "string",
                    "options": null,
                    "properties": {
                        "Mode": {
                            "type": "string",
                            "description": "The mode of resolution to use for internal load balancing between tasks.\n",
                            "required": false,
                            "options": null
                        },
                        "Ports": {
                            "type": "array",
                            "description": "List of exposed ports that this service is accessible on from the\noutside. Ports can only be provided if `vip` resolution mode is used.\n",
                            "required": false,
                            "options": null
                        }
                    }
                },
                {
                    "name": "version",
                    "description": "The version number of the service object being updated. This is required to avoid conflicting writes. This version number should be the value as currently set on the service  before  the update. You can find the current version by calling `GET /services/{id}` ",
                    "required": true,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "registryAuthFrom",
                    "description": "If the `X-Registry-Auth` header is not specified, this  meter indicates where to find registry authorization credentials. ",
                    "required": false,
                    "default": "spec",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": [
                        "spec",
                        "previous-spec"
                    ],
                    "properties": {}
                },
                {
                    "name": "rollback",
                    "description": "Set to this  meter to `previous` to cause a server-side rollback to the previous service spec. The supplied spec will be ignored in this case. ",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "X-Registry-Auth",
                    "description": "A base64url-encoded auth configuration for pulling from private registries.  Refer to the [authentication section](#section/Authentication) for details. ",
                    "required": false,
                    "default": "",
                    "in": "header",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "ServiceUpdateResponse",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "session",
            "path": "session",
            "method": "post",
            "description": "Initialize interactive session",
            "arguments": [],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [
                {
                    "Accept": "application/vnd.docker.raw-stream"
                }
            ],
            "unique_key": ""
        },
        {
            "name": "swarm-init",
            "path": "swarm/init",
            "method": "post",
            "description": "Initialize a new swarm",
            "arguments": [
                {
                    "name": "ListenAddr",
                    "description": "Listen address used for inter-manager communication, as well as determining the networking interface used for the VXLAN Tunnel Endpoint (VTEP). This can either be an address/port combination in the form `192.168.1.1:4567`, or an interface followed by a port number, like `eth0:4567`. If the port number is omitted, the default swarm listening port is used. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "body_1",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "AdvertiseAddr",
                    "description": "Externally reachable address advertised to other nodes. This can either be an address/port combination in the form `192.168.1.1:4567`, or an interface followed by a port number, like `eth0:4567`. If the port number is omitted, the port number from the listen address is used. If `AdvertiseAddr` is not specified, it will be automatically detected when possible. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "body_1",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "DataPathAddr",
                    "description": "Address or interface to use for data path traffic (format: ` ip|interface `), for example,  `192.168.1.1`, or an interface, like `eth0`. If `DataPathAddr` is unspecified, the same address as `AdvertiseAddr` is used.  The `DataPathAddr` specifies the address that global scope network drivers will publish towards other  nodes in order to reach the containers running on this node. Using this  meter it is possible to se te the container data traffic from the management traffic of the cluster. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "body_1",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "DataPathPort",
                    "description": "DataPathPort specifies the data path port number for data traffic. Acceptable port range is 1024 to 49151. if no port is set or is set to 0, default port 4789 will be used. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "body_1",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "DefaultAddrPool",
                    "description": "Default Address Pool specifies default subnet pools for global scope networks. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "body_1",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "ForceNewCluster",
                    "description": "Force creation of a new swarm.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "body_1",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "SubnetSize",
                    "description": "SubnetSize specifies the subnet size of the networks created from the default subnet pool. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "body_1",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Spec",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "body_1",
                    "type": "string",
                    "options": null,
                    "properties": {
                        "Name": {
                            "type": "string",
                            "description": "Name of the swarm.",
                            "required": false,
                            "options": null
                        },
                        "Labels": {
                            "type": "object",
                            "description": "User-defined key/value metadata.",
                            "required": false,
                            "options": null
                        },
                        "Orchestration": {
                            "type": "string",
                            "description": "",
                            "required": false,
                            "options": null
                        },
                        "Raft": {
                            "type": "string",
                            "description": "",
                            "required": false,
                            "options": null
                        },
                        "Dispatcher": {
                            "type": "string",
                            "description": "",
                            "required": false,
                            "options": null
                        },
                        "CAConfig": {
                            "type": "string",
                            "description": "",
                            "required": false,
                            "options": null
                        },
                        "EncryptionConfig": {
                            "type": "string",
                            "description": "",
                            "required": false,
                            "options": null
                        },
                        "TaskDefaults": {
                            "type": "string",
                            "description": "",
                            "required": false,
                            "options": null
                        }
                    }
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "swarm-inspect",
            "path": "swarm",
            "method": "get",
            "description": "Inspect swarm",
            "arguments": [],
            "outputs": [],
            "context_path": "Swarm",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "swarm-join",
            "path": "swarm/join",
            "method": "post",
            "description": "Join an existing swarm",
            "arguments": [
                {
                    "name": "ListenAddr",
                    "description": "Listen address used for inter-manager communication if the node gets promoted to manager, as well as determining the networking interface used for the VXLAN Tunnel Endpoint (VTEP). ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "body_2",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "AdvertiseAddr",
                    "description": "Externally reachable address advertised to other nodes. This can either be an address/port combination in the form `192.168.1.1:4567`, or an interface followed by a port number, like `eth0:4567`. If the port number is omitted, the port number from the listen address is used. If `AdvertiseAddr` is not specified, it will be automatically detected when possible. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "body_2",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "DataPathAddr",
                    "description": "Address or interface to use for data path traffic (format: ` ip|interface `), for example,  `192.168.1.1`, or an interface, like `eth0`. If `DataPathAddr` is unspecified, the same address as `AdvertiseAddr` is used.  The `DataPathAddr` specifies the address that global scope network drivers will publish towards other nodes in order to reach the containers running on this node. Using this  meter it is possible to se te the container data traffic from the management traffic of the cluster. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "body_2",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "RemoteAddrs",
                    "description": "Addresses of manager nodes already participating in the swarm. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "body_2",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "JoinToken",
                    "description": "Secret token for joining this swarm.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "body_2",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "swarm-leave",
            "path": "swarm/leave",
            "method": "post",
            "description": "Leave a swarm",
            "arguments": [
                {
                    "name": "force",
                    "description": "Force leave swarm, even if this is the last manager or that it will  eak the cluster. ",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "swarm-unlock",
            "path": "swarm/unlock",
            "method": "post",
            "description": "Unlock a locked manager",
            "arguments": [
                {
                    "name": "UnlockKey",
                    "description": "The swarm's unlock key.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "body_3",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "swarm-unlockkey",
            "path": "swarm/unlockkey",
            "method": "get",
            "description": "Get the unlock key",
            "arguments": [],
            "outputs": [
                {
                    "name": "UnlockKey",
                    "description": "The swarm's unlock key.",
                    "type": "String"
                }
            ],
            "context_path": "UnlockKeyResponse",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "swarm-update",
            "path": "swarm/update",
            "method": "post",
            "description": "Update a swarm",
            "arguments": [
                {
                    "name": "Name",
                    "description": "Name of the swarm.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "SwarmSpec",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Labels",
                    "description": "User-defined key/value metadata.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "SwarmSpec",
                    "type": "object",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Orchestration",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "SwarmSpec",
                    "type": "string",
                    "options": null,
                    "properties": {
                        "TaskHistoryRetentionLimit": {
                            "type": "integer",
                            "description": "The number of historic tasks to keep per instance or node. If\nnegative, never remove completed or failed tasks.\n",
                            "required": false,
                            "options": null
                        }
                    }
                },
                {
                    "name": "Raft",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "SwarmSpec",
                    "type": "string",
                    "options": null,
                    "properties": {
                        "SnapshotInterval": {
                            "type": "integer",
                            "description": "The number of log entries between snapshots.",
                            "required": false,
                            "options": null
                        },
                        "KeepOldSnapshots": {
                            "type": "integer",
                            "description": "The number of snapshots to keep beyond the current snapshot.\n",
                            "required": false,
                            "options": null
                        },
                        "LogEntriesForSlowFollowers": {
                            "type": "integer",
                            "description": "The number of log entries to keep around to sync up slow followers\nafter a snapshot is created.\n",
                            "required": false,
                            "options": null
                        },
                        "ElectionTick": {
                            "type": "integer",
                            "description": "The number of ticks that a follower will wait for a message from\nthe leader before becoming a candidate and starting an election.\n`ElectionTick` must be greater than `HeartbeatTick`.\n\nA tick currently defaults to one second, so these translate\ndirectly to seconds currently, but this is NOT guaranteed.\n",
                            "required": false,
                            "options": null
                        },
                        "HeartbeatTick": {
                            "type": "integer",
                            "description": "The number of ticks between heartbeats. Every HeartbeatTick ticks,\nthe leader will send a heartbeat to the followers.\n\nA tick currently defaults to one second, so these translate\ndirectly to seconds currently, but this is NOT guaranteed.\n",
                            "required": false,
                            "options": null
                        }
                    }
                },
                {
                    "name": "Dispatcher",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "SwarmSpec",
                    "type": "string",
                    "options": null,
                    "properties": {
                        "HeartbeatPeriod": {
                            "type": "integer",
                            "description": "The delay for an agent to send a heartbeat to the dispatcher.\n",
                            "required": false,
                            "options": null
                        }
                    }
                },
                {
                    "name": "CAConfig",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "SwarmSpec",
                    "type": "string",
                    "options": null,
                    "properties": {
                        "NodeCertExpiry": {
                            "type": "integer",
                            "description": "The duration node certificates are issued for.",
                            "required": false,
                            "options": null
                        },
                        "ExternalCAs": {
                            "type": "array",
                            "description": "Configuration for forwarding signing requests to an external\ncertificate authority.\n",
                            "required": false,
                            "options": null
                        },
                        "SigningCACert": {
                            "type": "string",
                            "description": "The desired signing CA certificate for all swarm node TLS leaf\ncertificates, in PEM format.\n",
                            "required": false,
                            "options": null
                        },
                        "SigningCAKey": {
                            "type": "string",
                            "description": "The desired signing CA key for all swarm node TLS leaf certificates,\nin PEM format.\n",
                            "required": false,
                            "options": null
                        },
                        "ForceRotate": {
                            "type": "integer",
                            "description": "An integer whose purpose is to force swarm to generate a new\nsigning CA certificate and key, if none have been specified in\n`SigningCACert` and `SigningCAKey`\n",
                            "required": false,
                            "options": null
                        }
                    }
                },
                {
                    "name": "EncryptionConfig",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "SwarmSpec",
                    "type": "string",
                    "options": null,
                    "properties": {
                        "AutoLockManagers": {
                            "type": "boolean",
                            "description": "If set, generate a key and use it to lock data stored on the\nmanagers.\n",
                            "required": false,
                            "options": null
                        }
                    }
                },
                {
                    "name": "TaskDefaults",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "SwarmSpec",
                    "type": "string",
                    "options": null,
                    "properties": {
                        "LogDriver": {
                            "type": "string",
                            "description": "",
                            "required": false,
                            "options": null
                        }
                    }
                },
                {
                    "name": "version",
                    "description": "The version number of the swarm object being updated. This is required to avoid conflicting writes. ",
                    "required": true,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "rotateWorkerToken",
                    "description": "Rotate the worker join token.",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "rotateManagerToken",
                    "description": "Rotate the manager join token.",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "rotateManagerUnlockKey",
                    "description": "Rotate the manager unlock key.",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "system-auth",
            "path": "auth",
            "method": "post",
            "description": "Check auth configuration",
            "arguments": [
                {
                    "name": "username",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "AuthConfig",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "password",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "AuthConfig",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "email",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "AuthConfig",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "serveraddress",
                    "description": "",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "AuthConfig",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "Status",
                    "description": "The status of the authentication",
                    "type": "String"
                },
                {
                    "name": "IdentityToken",
                    "description": "An opaque token used to authenticate a user after a successful login",
                    "type": "String"
                }
            ],
            "context_path": "SystemAuthResponse",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "system-data-usage",
            "path": "system/df",
            "method": "get",
            "description": "Get data usage information",
            "arguments": [],
            "outputs": [
                {
                    "name": "LayersSize",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "Images.Id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Images.ParentId",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Images.Created",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "Images.Size",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "Images.SharedSize",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "Images.VirtualSize",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "Images.Containers",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "Volumes.Name",
                    "description": "Name of the volume.",
                    "type": "String"
                },
                {
                    "name": "Volumes.Driver",
                    "description": "Name of the volume driver used by the volume.",
                    "type": "String"
                },
                {
                    "name": "Volumes.Mountpoint",
                    "description": "Mount path of the volume on the host.",
                    "type": "String"
                },
                {
                    "name": "Volumes.CreatedAt",
                    "description": "Date/Time the volume was created.",
                    "type": "String"
                },
                {
                    "name": "Volumes.Scope",
                    "description": "The level at which the volume exists. Either `global` for cluster-wide, or `local` for machine level. ",
                    "type": "String"
                },
                {
                    "name": "BuildCache.ID",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "BuildCache.Parent",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "BuildCache.Type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "BuildCache.Description",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "BuildCache.InUse",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "BuildCache.Shared",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "BuildCache.Size",
                    "description": "Amount of disk space used by the build cache (in bytes). ",
                    "type": "Number"
                },
                {
                    "name": "BuildCache.CreatedAt",
                    "description": "Date and time at which the build cache was created in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. ",
                    "type": "String"
                },
                {
                    "name": "BuildCache.LastUsedAt",
                    "description": "Date and time at which the build cache was last used in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. ",
                    "type": "String"
                },
                {
                    "name": "BuildCache.UsageCount",
                    "description": "",
                    "type": "Number"
                }
            ],
            "context_path": "SystemDataUsageResponse",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "system-events",
            "path": "events",
            "method": "get",
            "description": "Monitor events",
            "arguments": [
                {
                    "name": "since",
                    "description": "Show events created since this timestamp then stream new events.",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "until",
                    "description": "Show events created until this timestamp then stop streaming.",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "filters",
                    "description": "A JSON encoded value of filters (a `map[string][]string`) to process on the event list. Available filters:  - `config= string ` config name or ID - `container= string ` container name or ID - `daemon= string ` daemon name or ID - `event= string ` event type - `image= string ` image name or ID - `label= string ` image or container label - `network= string ` network name or ID - `node= string ` node ID - `plugin`= string  plugin name or ID - `scope`= string  local or swarm - `secret= string ` secret name or ID - `service= string ` service name or ID - `type= string ` object to filter by, one of `container`, `image`, `volume`, `network`, `daemon`, `plugin`, `node`, `service`, `secret` or `config` - `volume= string ` volume name ",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "Type",
                    "description": "The type of object emitting the event",
                    "type": "String"
                },
                {
                    "name": "Action",
                    "description": "The type of event",
                    "type": "String"
                },
                {
                    "name": "time",
                    "description": "Timestamp of event",
                    "type": "Number"
                },
                {
                    "name": "timeNano",
                    "description": "Timestamp of event, with nanosecond accuracy",
                    "type": "Number"
                }
            ],
            "context_path": "SystemEventsResponse",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "system-info",
            "path": "info",
            "method": "get",
            "description": "Get system information",
            "arguments": [],
            "outputs": [
                {
                    "name": "ID",
                    "description": "Unique identifier of the daemon.   p    /  /p       Note  : The format of the ID itself is not part of the API, and   should not be considered stable. ",
                    "type": "String"
                },
                {
                    "name": "Containers",
                    "description": "Total number of containers on the host.",
                    "type": "Number"
                },
                {
                    "name": "ContainersRunning",
                    "description": "Number of containers with status `\"running\"`. ",
                    "type": "Number"
                },
                {
                    "name": "ContainersPaused",
                    "description": "Number of containers with status `\"paused\"`. ",
                    "type": "Number"
                },
                {
                    "name": "ContainersStopped",
                    "description": "Number of containers with status `\"stopped\"`. ",
                    "type": "Number"
                },
                {
                    "name": "Images",
                    "description": "Total number of images on the host.  Both _tagged_ and _untagged_ (dangling) images are counted. ",
                    "type": "Number"
                },
                {
                    "name": "Driver",
                    "description": "Name of the storage driver in use.",
                    "type": "String"
                },
                {
                    "name": "DriverStatus",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "DockerRootDir",
                    "description": "Root directory of persistent Docker state.  Defaults to `/var/lib/docker` on Linux, and `C:\\ProgramData\\docker` on Windows. ",
                    "type": "String"
                },
                {
                    "name": "MemoryLimit",
                    "description": "Indicates if the host has memory limit support enabled.",
                    "type": "Boolean"
                },
                {
                    "name": "SwapLimit",
                    "description": "Indicates if the host has memory swap limit support enabled.",
                    "type": "Boolean"
                },
                {
                    "name": "KernelMemory",
                    "description": "Indicates if the host has kernel memory limit support enabled.   p    /  /p       Deprecated  : This field is deprecated as the kernel 5.4 deprecated   `kmem.limit_in_bytes`. ",
                    "type": "Boolean"
                },
                {
                    "name": "CpuCfsPeriod",
                    "description": "Indicates if CPU CFS(Completely Fair Scheduler) period is supported by the host. ",
                    "type": "Boolean"
                },
                {
                    "name": "CpuCfsQuota",
                    "description": "Indicates if CPU CFS(Completely Fair Scheduler) quota is supported by the host. ",
                    "type": "Boolean"
                },
                {
                    "name": "CPUShares",
                    "description": "Indicates if CPU Shares limiting is supported by the host. ",
                    "type": "Boolean"
                },
                {
                    "name": "CPUSet",
                    "description": "Indicates if CPUsets (cpuset.cpus, cpuset.mems) are supported by the host.  See [cpuset(7)](https://www.kernel.org/doc/Documentation/cgroup-v1/cpusets.txt) ",
                    "type": "Boolean"
                },
                {
                    "name": "PidsLimit",
                    "description": "Indicates if the host kernel has PID limit support enabled.",
                    "type": "Boolean"
                },
                {
                    "name": "OomKillDisable",
                    "description": "Indicates if OOM killer disable is supported on the host.",
                    "type": "Boolean"
                },
                {
                    "name": "IPv4Forwarding",
                    "description": "Indicates IPv4 forwarding is enabled.",
                    "type": "Boolean"
                },
                {
                    "name": "BridgeNfIptables",
                    "description": "Indicates if ` idge-nf-call-iptables` is available on the host.",
                    "type": "Boolean"
                },
                {
                    "name": "BridgeNfIp6tables",
                    "description": "Indicates if ` idge-nf-call-ip6tables` is available on the host.",
                    "type": "Boolean"
                },
                {
                    "name": "Debug",
                    "description": "Indicates if the daemon is running in debug-mode / with debug-level logging enabled. ",
                    "type": "Boolean"
                },
                {
                    "name": "NFd",
                    "description": "The total number of file Descriptors in use by the daemon process.  This information is only returned if debug-mode is enabled. ",
                    "type": "Number"
                },
                {
                    "name": "NGoroutines",
                    "description": "The  number of goroutines that currently exist.  This information is only returned if debug-mode is enabled. ",
                    "type": "Number"
                },
                {
                    "name": "SystemTime",
                    "description": "Current system-time in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. ",
                    "type": "String"
                },
                {
                    "name": "LoggingDriver",
                    "description": "The logging driver to use as a default for new containers. ",
                    "type": "String"
                },
                {
                    "name": "CgroupDriver",
                    "description": "The driver to use for managing cgroups. ",
                    "type": "String"
                },
                {
                    "name": "CgroupVersion",
                    "description": "The version of the cgroup. ",
                    "type": "String"
                },
                {
                    "name": "NEventsListener",
                    "description": "Number of event listeners subscribed.",
                    "type": "Number"
                },
                {
                    "name": "KernelVersion",
                    "description": "Kernel version of the host.  On Linux, this information obtained from `uname`. On Windows this information is queried from the  kbd HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\ /kbd  registry value, for example _\"10.0 14393 (14393.1198.amd64fre.rs1_release_sec.170427-1353)\"_. ",
                    "type": "String"
                },
                {
                    "name": "OperatingSystem",
                    "description": "Name of the host's operating system, for example: \"Ubuntu 16.04.2 LTS\" or \"Windows Server 2016 Datacenter\" ",
                    "type": "String"
                },
                {
                    "name": "OSVersion",
                    "description": "Version of the host's operating system   p    /  /p       Note  : The information returned in this field, including its   very existence, and the formatting of values, should not be considered   stable, and may change without notice. ",
                    "type": "String"
                },
                {
                    "name": "OSType",
                    "description": "Generic type of the operating system of the host, as returned by the Go runtime (`GOOS`).  Currently returned values are \"linux\" and \"windows\". A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment). ",
                    "type": "String"
                },
                {
                    "name": "Architecture",
                    "description": "Hardware architecture of the host, as returned by the Go runtime (`GOARCH`).  A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment). ",
                    "type": "String"
                },
                {
                    "name": "NCPU",
                    "description": "The number of logical CPUs usable by the daemon.  The number of available CPUs is checked by querying the operating system when the daemon starts. Changes to operating system CPU allocation after the daemon is started are not reflected. ",
                    "type": "Number"
                },
                {
                    "name": "MemTotal",
                    "description": "Total amount of physical memory available on the host, in bytes. ",
                    "type": "Number"
                },
                {
                    "name": "IndexServerAddress",
                    "description": "Address / URL of the index server that is used for image search, and as a default for user authentication for Docker Hub and Docker Cloud. ",
                    "type": "String"
                },
                {
                    "name": "HttpProxy",
                    "description": "HTTP-proxy configured for the daemon. This value is obtained from the [`HTTP_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable. Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL are masked in the API response.  Containers do not automatically inherit this configuration. ",
                    "type": "String"
                },
                {
                    "name": "HttpsProxy",
                    "description": "HTTPS-proxy configured for the daemon. This value is obtained from the [`HTTPS_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable. Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL are masked in the API response.  Containers do not automatically inherit this configuration. ",
                    "type": "String"
                },
                {
                    "name": "NoProxy",
                    "description": "Comma-se ted list of domain extensions for which no proxy should be used. This value is obtained from the [`NO_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.  Containers do not automatically inherit this configuration. ",
                    "type": "String"
                },
                {
                    "name": "Name",
                    "description": "Hostname of the host.",
                    "type": "String"
                },
                {
                    "name": "ExperimentalBuild",
                    "description": "Indicates if experimental features are enabled on the daemon. ",
                    "type": "Boolean"
                },
                {
                    "name": "ServerVersion",
                    "description": "Version string of the daemon.      Note  : the [standalone Swarm API](https://docs.docker.com/swarm/swarm-api/)   returns the Swarm version instead of the daemon  version, for example   `swarm/1.2.8`. ",
                    "type": "String"
                },
                {
                    "name": "ClusterStore",
                    "description": "URL of the distributed storage backend.   The storage backend is used for multihost networking (to store network and endpoint information) and by the node discovery mechanism.   p    /  /p       Deprecated  : This field is only propagated when using standalone Swarm   mode, and overlay networking using an external k/v store. Overlay   networks with Swarm mode enabled use the built-in raft store, and   this field will be empty. ",
                    "type": "String"
                },
                {
                    "name": "ClusterAdvertise",
                    "description": "The network endpoint that the Engine advertises for the purpose of node discovery. ClusterAdvertise is a `host:port` combination on which the daemon is reachable by other hosts.   p    /  /p       Deprecated  : This field is only propagated when using standalone Swarm   mode, and overlay networking using an external k/v store. Overlay   networks with Swarm mode enabled use the built-in raft store, and   this field will be empty. ",
                    "type": "String"
                },
                {
                    "name": "Runtimes.path",
                    "description": "Name and, optional, path, of the OCI executable binary.  If the path is omitted, the daemon searches the host's `$PATH` for the binary and uses the first result. ",
                    "type": "String"
                },
                {
                    "name": "DefaultRuntime",
                    "description": "Name of the default OCI runtime that is used when starting containers.  The default can be overridden per-container at create time. ",
                    "type": "String"
                },
                {
                    "name": "LiveRestoreEnabled",
                    "description": "Indicates if live restore is enabled.  If enabled, containers are kept running when the daemon is shutdown or upon daemon start if running containers are detected. ",
                    "type": "Boolean"
                },
                {
                    "name": "Isolation",
                    "description": "Represents the isolation technology to use as a default for containers. The supported values are platform-specific.  If no isolation value is specified on daemon start, on Windows client, the default is `hyperv`, and on Windows server, the default is `process`.  This option is currently not used on other platforms. ",
                    "type": "String"
                },
                {
                    "name": "InitBinary",
                    "description": "Name and, optional, path of the `docker-init` binary.  If the path is omitted, the daemon searches the host's `$PATH` for the binary and uses the first result. ",
                    "type": "String"
                },
                {
                    "name": "ProductLicense",
                    "description": "Reports a summary of the product license on the daemon.  If a commercial license has been applied to the daemon, information such as number of nodes, and expiration are included. ",
                    "type": "String"
                },
                {
                    "name": "DefaultAddressPools.Base",
                    "description": "The network address in CIDR format",
                    "type": "String"
                },
                {
                    "name": "DefaultAddressPools.Size",
                    "description": "The network pool size",
                    "type": "Number"
                }
            ],
            "context_path": "SystemInfo",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "system-ping",
            "path": "_ping",
            "method": "get",
            "description": "Ping",
            "arguments": [],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [
                {
                    "Accept": "text/plain"
                }
            ],
            "unique_key": ""
        },
        {
            "name": "system-ping-head",
            "path": "_ping",
            "method": "head",
            "description": "Ping",
            "arguments": [],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [
                {
                    "Accept": "text/plain"
                }
            ],
            "unique_key": ""
        },
        {
            "name": "system-version",
            "path": "version",
            "method": "get",
            "description": "Get version",
            "arguments": [],
            "outputs": [
                {
                    "name": "Components.Name",
                    "description": "Name of the component ",
                    "type": "String"
                },
                {
                    "name": "Components.Version",
                    "description": "Version of the component ",
                    "type": "String"
                },
                {
                    "name": "Version",
                    "description": "The version of the daemon",
                    "type": "String"
                },
                {
                    "name": "ApiVersion",
                    "description": "The default (and highest) API version that is supported by the daemon ",
                    "type": "String"
                },
                {
                    "name": "MinAPIVersion",
                    "description": "The minimum API version that is supported by the daemon ",
                    "type": "String"
                },
                {
                    "name": "GitCommit",
                    "description": "The Git commit of the source code that was used to build the daemon ",
                    "type": "String"
                },
                {
                    "name": "GoVersion",
                    "description": "The version Go used to compile the daemon, and the version of the Go runtime in use. ",
                    "type": "String"
                },
                {
                    "name": "Os",
                    "description": "The operating system that the daemon is running on (\"linux\" or \"windows\") ",
                    "type": "String"
                },
                {
                    "name": "Arch",
                    "description": "The architecture that the daemon is running on ",
                    "type": "String"
                },
                {
                    "name": "KernelVersion",
                    "description": "The kernel version (`uname -r`) that the daemon is running on.  This field is omitted when empty. ",
                    "type": "String"
                },
                {
                    "name": "Experimental",
                    "description": "Indicates if the daemon is started with experimental features enabled.  This field is omitted when empty / false. ",
                    "type": "Boolean"
                },
                {
                    "name": "BuildTime",
                    "description": "The date and time that the daemon was compiled. ",
                    "type": "String"
                }
            ],
            "context_path": "SystemVersion",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "task-inspect",
            "path": "tasks/{id}",
            "method": "get",
            "description": "Inspect a task",
            "arguments": [
                {
                    "name": "id",
                    "description": "ID of the task",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "ID",
                    "description": "The ID of the task.",
                    "type": "String"
                },
                {
                    "name": "CreatedAt",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "UpdatedAt",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Name",
                    "description": "Name of the task.",
                    "type": "String"
                },
                {
                    "name": "ServiceID",
                    "description": "The ID of the service this task is part of.",
                    "type": "String"
                },
                {
                    "name": "Slot",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "NodeID",
                    "description": "The ID of the node that this task is on.",
                    "type": "String"
                }
            ],
            "context_path": "Task",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "task-list",
            "path": "tasks",
            "method": "get",
            "description": "List tasks",
            "arguments": [
                {
                    "name": "filters",
                    "description": "A JSON encoded value of the filters (a `map[string][]string`) to process on the tasks list.  Available filters:  - `desired-state=(running | shutdown | accepted)` - `id= task id ` - `label=key` or `label=\"key=value\"` - `name= task name ` - `node= node id or name ` - `service= service name ` ",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "ID",
                    "description": "The ID of the task.",
                    "type": "String"
                },
                {
                    "name": "CreatedAt",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "UpdatedAt",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Name",
                    "description": "Name of the task.",
                    "type": "String"
                },
                {
                    "name": "ServiceID",
                    "description": "The ID of the service this task is part of.",
                    "type": "String"
                },
                {
                    "name": "Slot",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "NodeID",
                    "description": "The ID of the node that this task is on.",
                    "type": "String"
                }
            ],
            "context_path": "Task",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "task-logs",
            "path": "tasks/{id}/logs",
            "method": "get",
            "description": "Get task logs",
            "arguments": [
                {
                    "name": "id",
                    "description": "ID of the task",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "details",
                    "description": "Show task context and extra details provided to logs.",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "follow",
                    "description": "Keep connection after returning logs.",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "stdout",
                    "description": "Return logs from `stdout`",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "stderr",
                    "description": "Return logs from `stderr`",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "since",
                    "description": "Only return logs since this time, as a UNIX timestamp",
                    "required": false,
                    "default": 0,
                    "in": "query",
                    "ref": "",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "timestamps",
                    "description": "Add timestamps to every log line",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "tail",
                    "description": "Only return this number of log lines from the end of the logs. Specify as an integer or `all` to output all log lines. ",
                    "required": false,
                    "default": "all",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "volume-create",
            "path": "volumes/create",
            "method": "post",
            "description": "Create a volume",
            "arguments": [
                {
                    "name": "Name",
                    "description": "The new volume's name. If not specified, Docker generates a name. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "VolumeConfig",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Driver",
                    "description": "Name of the volume driver to use.",
                    "required": false,
                    "default": "local",
                    "in": "body",
                    "ref": "VolumeConfig",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "DriverOpts",
                    "description": "A mapping of driver options and values. These options are passed directly to the driver and are driver specific. ",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "VolumeConfig",
                    "type": "object",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "Labels",
                    "description": "User-defined key/value metadata.",
                    "required": false,
                    "default": "",
                    "in": "body",
                    "ref": "VolumeConfig",
                    "type": "object",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "volume-delete",
            "path": "volumes/{name}",
            "method": "delete",
            "description": "Remove a volume",
            "arguments": [
                {
                    "name": "name",
                    "description": "Volume name or ID",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "force",
                    "description": "Force the removal of the volume",
                    "required": false,
                    "default": false,
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "volume-inspect",
            "path": "volumes/{name}",
            "method": "get",
            "description": "Inspect a volume",
            "arguments": [
                {
                    "name": "name",
                    "description": "Volume name or ID",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "Name",
                    "description": "Name of the volume.",
                    "type": "String"
                },
                {
                    "name": "Driver",
                    "description": "Name of the volume driver used by the volume.",
                    "type": "String"
                },
                {
                    "name": "Mountpoint",
                    "description": "Mount path of the volume on the host.",
                    "type": "String"
                },
                {
                    "name": "CreatedAt",
                    "description": "Date/Time the volume was created.",
                    "type": "String"
                },
                {
                    "name": "Scope",
                    "description": "The level at which the volume exists. Either `global` for cluster-wide, or `local` for machine level. ",
                    "type": "String"
                }
            ],
            "context_path": "Volume",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "volume-list",
            "path": "volumes",
            "method": "get",
            "description": "List volumes",
            "arguments": [
                {
                    "name": "filters",
                    "description": "JSON encoded value of the filters (a `map[string][]string`) to process on the volumes list. Available filters:  - `dangling= boolean ` When set to `true` (or `1`), returns all    volumes that are not in use by a container. When set to `false`    (or `0`), only volumes that are in use by one or more    containers are returned. - `driver= volume-driver-name ` Matches volumes based on their driver. - `label= key ` or `label= key : value ` Matches volumes based on    the presence of a `label` alone or a `label` and a value. - `name= volume-name ` Matches all or part of a volume name. ",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "Volumes.Name",
                    "description": "Name of the volume.",
                    "type": "String"
                },
                {
                    "name": "Volumes.Driver",
                    "description": "Name of the volume driver used by the volume.",
                    "type": "String"
                },
                {
                    "name": "Volumes.Mountpoint",
                    "description": "Mount path of the volume on the host.",
                    "type": "String"
                },
                {
                    "name": "Volumes.CreatedAt",
                    "description": "Date/Time the volume was created.",
                    "type": "String"
                },
                {
                    "name": "Volumes.Scope",
                    "description": "The level at which the volume exists. Either `global` for cluster-wide, or `local` for machine level. ",
                    "type": "String"
                }
            ],
            "context_path": "VolumeListResponse",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "volume-prune",
            "path": "volumes/prune",
            "method": "post",
            "description": "Delete unused volumes",
            "arguments": [
                {
                    "name": "filters",
                    "description": "Filters to process on the prune list, encoded as JSON (a `map[string][]string`).  Available filters: - `label` (`label= key `, `label= key = value `, `label!= key `, or `label!= key = value `) Prune volumes with (or without, in case `label!=...` is used) the specified labels. ",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "SpaceReclaimed",
                    "description": "Disk space reclaimed in bytes",
                    "type": "Number"
                }
            ],
            "context_path": "VolumePruneResponse",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        }
    ],
    "code_type": "python",
    "code_subtype": "python3",
    "docker_image": "demisto/python3:3.9.1.14969"
}