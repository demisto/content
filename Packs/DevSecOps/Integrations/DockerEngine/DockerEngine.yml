category: IT Services
commonfields:
  id: Docker Engine API
  version: -1
configuration:
- display: Server URL (e.g. https://www.example.com:1000)
  name: url
  required: true
  type: 0
- display: Docker Client Certificate
  name: client_certificate
  required: true
  type: 12
- displaypassword: Docker Client Private Key
  name: client_key
  required: true
  type: 9
  hiddenusername: true
- display: CA Certificate
  name: ca_certificate
  type: 12
  required: false
- display: Trust any certificate (not secure)
  name: insecure
  type: 8
  required: false
- display: Use system proxy settings
  name: proxy
  type: 8
  required: false
- display: Registry Identity Token
  name: identitytoken
  type: 4
  hiddenusername: true
  required: false
- displaypassword: Registry Password
  name: Registry Username
  type: 9
  required: false
- display: Registry Server Address (e.g. docker.io)
  name: registry_serveraddress
  type: 0
  required: false
description: The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.
display: Docker Engine API
name: Docker Engine API
script:
  commands:
  - arguments:
    - description: Amount of disk space in bytes to keep for cache
      name: keep_storage
    - description: Remove all types of build cache
      name: prune_all
    - description: "A JSON encoded value of the filters (a `map[string][]string`) to process on the list of build cache objects.  Available filters:  - `until= duration `: duration relative to daemon's time, during which build cache was not used, in Go's duration format (e.g., '24h') - `id= id ` - `parent= id ` - `type= string ` - `description= string ` - `inuse` - `shared` - `private` "
      name: filters
    description: Delete builder cache
    name: docker-build-prune
    outputs:
    - contextPath: Docker.BuildPruneResponse.SpaceReclaimed
      description: Disk space reclaimed in bytes
      type: Number
  - arguments:
    - description: User-defined name of the config.
      name: configspec_name
    - description: User-defined key/value metadata.
      name: configspec_labels
    - description: 'Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-5)) config data. '
      name: configspec_data
    - description: configspec_templating Name
      name: configspec_templating_Name
    - description: configspec_templating Options
      name: configspec_templating_Options
    description: Create a config
    name: docker-config-create
  - arguments:
    - description: ID of the config
      name: id
      required: true
    description: Inspect a config
    name: docker-config-inspect
    outputs:
    - contextPath: Docker.Config.ID
      description: Docker Config ID
      type: String
    - contextPath: Docker.Config.CreatedAt
      description: Docker Config CreatedAt
      type: String
    - contextPath: Docker.Config.UpdatedAt
      description: Docker Config UpdatedAt
      type: String
  - arguments:
    - description: 'A JSON encoded value of the filters '
      name: filters
    description: List configs
    name: docker-config-list
    outputs:
    - contextPath: Docker.Config.ID
      description: Docker Config ID
      type: String
    - contextPath: Docker.Config.CreatedAt
      description: Docker Config CreatedAt
      type: String
    - contextPath: Docker.Config.UpdatedAt
      description: Docker Config UpdatedAt
      type: String
  - arguments:
    - description: ID or name of the container
      name: id
      required: true
    description: Get changes on a containerâ€™s filesystem
    name: docker-container-changes
    outputs:
    - contextPath: Docker.ContainerChangeResponseItem.Path
      description: Path to file that has changed
      type: String
    - contextPath: Docker.ContainerChangeResponseItem.Kind
      description: Kind of change
      type: Number
  - arguments:
    - description: 'Assign the specified name to the container. Must match `/?[a-zA-Z0-9][a-zA-Z0-9_.-]+`. '
      name: name
    - description: The hostname to use for the container, as a valid RFC 1123 hostname.
      name: containerconfig_hostname
    - description: The domain name to use for the container.
      name: containerconfig_domainname
    - description: The user that commands are run as inside the container.
      name: containerconfig_user
    - description: Whether to attach to `stdin`.
      name: containerconfig_attachstdin
    - description: Whether to attach to `stdout`.
      name: containerconfig_attachstdout
    - description: Whether to attach to `stderr`.
      name: containerconfig_attachstderr
    - description: 'An object mapping ports to an empty object in the form:  `{" port / tcp|udp|sctp ": {}}` '
      name: containerconfig_exposedports
    - description: 'Attach standard streams to a TTY, including `stdin` if it is not closed. '
      name: containerconfig_tty
    - description: Open `stdin`
      name: containerconfig_openstdin
    - description: Close `stdin` after one attached client disconnects
      name: containerconfig_stdinonce
    - description: 'A list of environment variables to set inside the container in the form `["VAR=value", ...]`. A variable without `=` is removed from the environment, rather than to have an empty value. '
      isArray: true
      name: containerconfig_env
    - description: 'Command to run specified as a string or an array of strings. '
      isArray: true
      name: containerconfig_cmd
    - description: containerconfig_healthcheck Test
      name: containerconfig_healthcheck_Test
    - description: containerconfig_healthcheck Interval
      name: containerconfig_healthcheck_Interval
    - description: containerconfig_healthcheck Timeout
      name: containerconfig_healthcheck_Timeout
    - description: containerconfig_healthcheck Retries
      name: containerconfig_healthcheck_Retries
    - description: containerconfig_healthcheck StartPeriod
      name: containerconfig_healthcheck_StartPeriod
    - description: Command is already escaped (Windows only)
      name: containerconfig_argsescaped
    - description: 'The name of the image to use when creating the container/ '
      name: containerconfig_image
    - description: 'An object mapping mount point paths inside the container to empty objects. '
      name: containerconfig_volumes
    - description: The working directory for commands to run in.
      name: containerconfig_workingdir
    - description: 'The entry point for the container as a string or an array of strings.  If the array consists of exactly one empty string (`[""]`) then the entry point is reset to system default (i.e., the entry point used by docker when there is no `ENTRYPOINT` instruction in the `Dockerfile`). '
      isArray: true
      name: containerconfig_entrypoint
    - description: Disable networking for the container.
      name: containerconfig_networkdisabled
    - description: MAC address of the container.
      name: containerconfig_macaddress
    - description: "`ONBUILD` metadata that were defined in the image's `Dockerfile`. "
      isArray: true
      name: containerconfig_onbuild
    - description: User-defined key/value metadata.
      name: containerconfig_labels
    - description: 'Signal to stop a container as a string or unsigned integer. '
      name: containerconfig_stopsignal
    - description: Timeout to stop a container in seconds.
      name: containerconfig_stoptimeout
    - description: 'Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell. '
      isArray: true
      name: containerconfig_shell
    - description: A list of volume bindings for this container.
      isArray: true
      name: hostconfig_binds
    - description: Path to a file where the container ID is written
      name: hostconfig_containeridfile
    - description: hostconfig_logconfig Type
      name: hostconfig_logconfig_Type
    - description: Log Config
      name: hostconfig_logconfig_Config
    - description: Network mode to use for this container.
      name: hostconfig_networkmode
    - description: hostconfig port bindings
      name: hostconfig_portbindings
    - description: hostconfig_restartpolicy Name
      name: hostconfig_restartpolicy_Name
    - description: hostconfig_restartpolicy MaximumRetryCount
      name: hostconfig_restartpolicy_MaximumRetryCount
    - description: "Automatically remove the container when the container's process exits. This has no effect if `RestartPolicy` is set. "
      name: hostconfig_autoremove
    - description: Driver that this container uses to mount volumes.
      name: hostconfig_volumedriver
    - description: A list of volumes to inherit from another container
      isArray: true
      name: hostconfig_volumesfrom
    - description: 'Specification for mounts to be added to the container. '
      isArray: true
      name: hostconfig_mounts
    - description: "A list of kernel capabilities to add to the container. Conflicts with option 'Capabilities'. "
      isArray: true
      name: hostconfig_capadd
    - description: "A list of kernel capabilities to drop from the container. Conflicts with option 'Capabilities'. "
      isArray: true
      name: hostconfig_capdrop
    - auto: PREDEFINED
      description: "cgroup namespace mode for the container. Possible values are:  - `\"private\"`: the container runs in its own private cgroup namespace - `\"host\"`: use the host system's cgroup namespace  If not specified, the daemon default is used, which can either be `\"private\"` or `\"host\"`, depending on daemon version, kernel support and configuration. "
      name: hostconfig_cgroupnsmode
      predefined:
      - private
      - host
    - description: A list of DNS servers for the container to use.
      isArray: true
      name: hostconfig_dns
    - description: A list of DNS options.
      isArray: true
      name: hostconfig_dnsoptions
    - description: A list of DNS search domains.
      isArray: true
      name: hostconfig_dnssearch
    - description: "A list of hostnames/IP mappings to add to the container's `/etc/hosts` file. Specified in the form `[\"hostname:IP\"]`. "
      isArray: true
      name: hostconfig_extrahosts
    - description: 'A list of additional groups that the container process will run as. '
      isArray: true
      name: hostconfig_groupadd
    - description: "IPC sharing mode for the container. Possible values are:  - `\"none\"`: own private IPC namespace, with /dev/shm not mounted - `\"private\"`: own private IPC namespace - `\"shareable\"`: own private IPC namespace, with a possibility to share it with other containers - `\"container: name|id \"`: join another (shareable) container's IPC namespace - `\"host\"`: use the host system's IPC namespace  If not specified, daemon default is used, which can either be `\"private\"` or `\"shareable\"`, depending on daemon version and configuration. "
      name: hostconfig_ipcmode
    - description: Cgroup to use for the container.
      name: hostconfig_cgroup
    - description: 'A list of links for the container in the form `container_name:alias`. '
      isArray: true
      name: hostconfig_links
    - description: 'An integer value containing the score given to the container in order to tune OOM killer preferences. '
      name: hostconfig_oomscoreadj
    - description: "Set the PID (Process) Namespace mode for the container. It can be either:  - `\"container: name|id \"`: joins another container's PID namespace - `\"host\"`: use the host's PID namespace inside the container "
      name: hostconfig_pidmode
    - description: Gives the container full access to the host.
      name: hostconfig_privileged
    - description: "Allocates an ephemeral host port for all of a container's exposed ports.  Ports are de-allocated when the container stops and allocated when the container starts. The allocated port might be changed when restarting the container.  The port is selected from the ephemeral port range that depends on the kernel. For example, on Linux the range is defined by `/proc/sys/net/ipv4/ip_local_port_range`. "
      name: hostconfig_publishallports
    - description: Mount the container's root filesystem as read only.
      name: hostconfig_readonlyrootfs
    - description: A list of string values to customize labels for MLS systems, such as SELinux.
      isArray: true
      name: hostconfig_securityopt
    - description: 'Storage driver options for this container, in the form `{"size": "120G"}`. '
      name: hostconfig_storageopt
    - description: 'A map of container directories which should be replaced by tmpfs mounts, and their corresponding mount options. For example:  ``` { "/run": "rw,noexec,nosuid,size=65536k" } ``` '
      name: hostconfig_tmpfs
    - description: UTS namespace to use for the container.
      name: hostconfig_utsmode
    - description: 'Sets the usernamespace mode for the container when usernamespace remapping option is enabled. '
      name: hostconfig_usernsmode
    - description: 'Size of `/dev/shm` in bytes. If omitted, the system uses 64MB. '
      name: hostconfig_shmsize
    - description: 'A list of kernel  meters (sysctls) to set in the container. For example:  ``` {"net.ipv4.ip_forward": "1"} ``` '
      name: hostconfig_sysctls
    - description: Runtime to use with this container.
      name: hostconfig_runtime
    - description: 'Initial console size, as an `[height, width]` array. (Windows only) '
      isArray: true
      name: hostconfig_consolesize
    - auto: PREDEFINED
      description: 'Isolation technology of the container. (Windows only) '
      name: hostconfig_isolation
      predefined:
      - default
      - process
      - hyperv
    - description: 'The list of paths to be masked inside the container (this overrides the default set of paths). '
      isArray: true
      name: hostconfig_maskedpaths
    - description: 'The list of paths to be set as read-only inside the container (this overrides the default set of paths). '
      isArray: true
      name: hostconfig_readonlypaths
    - description: 'A mapping of network name to endpoint configuration for that network. '
      name: networkingconfig_endpointsconfig
    description: Create a container
    name: docker-container-create
  - arguments:
    - description: ID or name of the container
      name: id
      required: true
    - description: Return the size of container as fields `SizeRw` and `SizeRootFs`
      name: size
    description: Inspect a container
    name: docker-container-inspect
    outputs:
    - contextPath: Docker.ContainerInspectResponse.Id
      description: The ID of the container
      type: String
    - contextPath: Docker.ContainerInspectResponse.Created
      description: The time the container was created
      type: String
    - contextPath: Docker.ContainerInspectResponse.Path
      description: The path to the command being run
      type: String
    - contextPath: Docker.ContainerInspectResponse.Image
      description: The container's image ID
      type: String
    - contextPath: Docker.ContainerInspectResponse.ResolvConfPath
      description: Docker ContainerInspectResponse ResolvConfPath
      type: String
    - contextPath: Docker.ContainerInspectResponse.HostnamePath
      description: Docker ContainerInspectResponse HostnamePath
      type: String
    - contextPath: Docker.ContainerInspectResponse.HostsPath
      description: Docker ContainerInspectResponse HostsPath
      type: String
    - contextPath: Docker.ContainerInspectResponse.LogPath
      description: Docker ContainerInspectResponse LogPath
      type: String
    - contextPath: Docker.ContainerInspectResponse.Name
      description: Docker ContainerInspectResponse Name
      type: String
    - contextPath: Docker.ContainerInspectResponse.RestartCount
      description: Docker ContainerInspectResponse RestartCount
      type: Number
    - contextPath: Docker.ContainerInspectResponse.Driver
      description: Docker ContainerInspectResponse Driver
      type: String
    - contextPath: Docker.ContainerInspectResponse.Platform
      description: Docker ContainerInspectResponse Platform
      type: String
    - contextPath: Docker.ContainerInspectResponse.MountLabel
      description: Docker ContainerInspectResponse MountLabel
      type: String
    - contextPath: Docker.ContainerInspectResponse.ProcessLabel
      description: Docker ContainerInspectResponse ProcessLabel
      type: String
    - contextPath: Docker.ContainerInspectResponse.AppArmorProfile
      description: Docker ContainerInspectResponse AppArmorProfile
      type: String
    - contextPath: Docker.ContainerInspectResponse.SizeRw
      description: 'The size of files that have been created or changed by this container. '
      type: Number
    - contextPath: Docker.ContainerInspectResponse.SizeRootFs
      description: The total size of all the files in this container.
      type: Number
    - contextPath: Docker.ContainerInspectResponse.Mounts.Type
      description: Docker ContainerInspectResponse Mounts Type
      type: String
    - contextPath: Docker.ContainerInspectResponse.Mounts.Name
      description: Docker ContainerInspectResponse Mounts Name
      type: String
    - contextPath: Docker.ContainerInspectResponse.Mounts.Source
      description: Docker ContainerInspectResponse Mounts Source
      type: String
    - contextPath: Docker.ContainerInspectResponse.Mounts.Destination
      description: Docker ContainerInspectResponse Mounts Destination
      type: String
    - contextPath: Docker.ContainerInspectResponse.Mounts.Driver
      description: Docker ContainerInspectResponse Mounts Driver
      type: String
    - contextPath: Docker.ContainerInspectResponse.Mounts.Mode
      description: Docker ContainerInspectResponse Mounts Mode
      type: String
    - contextPath: Docker.ContainerInspectResponse.Mounts.RW
      description: Docker ContainerInspectResponse Mounts RW
      type: Boolean
    - contextPath: Docker.ContainerInspectResponse.Mounts.Propagation
      description: Docker ContainerInspectResponse Mounts Propagation
      type: String
  - arguments:
    - description: 'Return all containers. By default, only running containers are shown. '
      name: list_all
    - description: 'Return this number of most recently created containers, including non-running ones. '
      name: limit
    - description: 'Return the size of container as fields `SizeRw` and `SizeRootFs`. '
      name: size
    - description: "Filters to process on the container list, encoded as JSON (a `map[string][]string`). For example, `{\"status\": [\"paused\"]}` will only return paused containers.  Available filters:  - `ancestor`=(` image-name [: tag ]`, ` image id `, or ` image@digest `) - `before`=(` container id ` or ` container name `) - `expose`=(` port [/ proto ]`|` startport-endport /[ proto ]`) - `exited= int ` containers with exit code of ` int ` - `health`=(`starting`|`healthy`|`unhealthy`|`none`) - `id= ID ` a container's ID - `isolation=`(`default`|`process`|`hyperv`) (Windows daemon only) - `is-task=`(`true`|`false`) - `label=key` or `label=\"key=value\"` of a container label - `name= name ` a container's name - `network`=(` network id ` or ` network name `) - `publish`=(` port [/ proto ]`|` startport-endport /[ proto ]`) - `since`=(` container id ` or ` container name `) - `status=`(`created`|`restarting`|`running`|`removing`|`paused`|`exited`|`dead`) - `volume`=(` volume name ` or ` mount point destination `) "
      name: filters
    description: List containers
    name: docker-container-list
  - arguments:
    - description: ID or name of the container
      name: id
      required: true
    - description: 'Stream the output. If false, the stats will be output once and then it will disconnect. '
      name: stream
    - description: 'Only get a single stat instead of waiting for 2 cycles. Must be used with `stream=false`. '
      name: one_shot
    description: Get container stats based on resource usage
    name: docker-container-stats
  - arguments:
    - description: ID or name of the container
      name: id
      required: true
    - description: The arguments to pass to `ps`. For example, `aux`
      name: ps_args
    description: List processes running inside a container
    name: docker-container-top
    outputs:
    - contextPath: Docker.ContainerTopResponse.Processes
      description: Docker ContainerTopResponse Processes
      type: String
  - arguments:
    - description: Image name or ID
      name: name
      required: true
    description: Get the history of an image
    name: docker-image-history
    outputs:
    - contextPath: Docker.HistoryResponseItem.Id
      description: Docker HistoryResponseItem Id
      type: String
    - contextPath: Docker.HistoryResponseItem.Created
      description: Docker HistoryResponseItem Created
      type: Number
    - contextPath: Docker.HistoryResponseItem.CreatedBy
      description: Docker HistoryResponseItem CreatedBy
      type: String
    - contextPath: Docker.HistoryResponseItem.Size
      description: Docker HistoryResponseItem Size
      type: Number
    - contextPath: Docker.HistoryResponseItem.Comment
      description: Docker HistoryResponseItem Comment
      type: String
  - arguments:
    - description: Image name or id
      name: name
      required: true
    description: Inspect an image
    name: docker-image-inspect
    outputs:
    - contextPath: Docker.Image.Id
      description: Docker Image ID
      type: String
    - contextPath: Docker.Image.Parent
      description: Docker Image Parent
      type: String
    - contextPath: Docker.Image.Comment
      description: Docker Image Comment
      type: String
    - contextPath: Docker.Image.Created
      description: Docker Image Created
      type: String
    - contextPath: Docker.Image.Container
      description: Docker Image Container
      type: String
    - contextPath: Docker.Image.DockerVersion
      description: Docker Image DockerVersion
      type: String
    - contextPath: Docker.Image.Author
      description: Docker Image Author
      type: String
    - contextPath: Docker.Image.Architecture
      description: Docker Image Architecture
      type: String
    - contextPath: Docker.Image.Os
      description: Docker Image Os
      type: String
    - contextPath: Docker.Image.OsVersion
      description: Docker Image OsVersion
      type: String
    - contextPath: Docker.Image.Size
      description: Docker Image Size
      type: Number
    - contextPath: Docker.Image.VirtualSize
      description: Docker Image VirtualSize
      type: Number
  - arguments:
    - description: Show all images. Only images from a final layer (no children) are shown by default.
      name: list_all
    - description: A JSON encoded value of the filters
      name: filters
    - description: Show digest information as a `RepoDigests` field on each image.
      name: digests
    description: List Images
    name: docker-image-list
    outputs:
    - contextPath: Docker.ImageSummary.Id
      description: Docker Image Summary ID
      type: String
    - contextPath: Docker.ImageSummary.ParentId
      description: Docker Image Summary ParentId
      type: String
    - contextPath: Docker.ImageSummary.Created
      description: Docker Image Summary Created
      type: Number
    - contextPath: Docker.ImageSummary.Size
      description: Docker Image Summary Size
      type: Number
    - contextPath: Docker.ImageSummary.SharedSize
      description: Docker Image Summary SharedSize
      type: Number
    - contextPath: Docker.ImageSummary.VirtualSize
      description: Docker Image Summary VirtualSize
      type: Number
    - contextPath: Docker.ImageSummary.Containers
      description: Docker Image Summary Containers
      type: Number
  - arguments:
    - description: Filters to process on the prune list
      name: filters
    description: Delete unused images
    name: docker-image-prune
    outputs:
    - contextPath: Docker.ImagePruneResponse.ImagesDeleted.Untagged
      description: The image ID of an image that was untagged
      type: String
    - contextPath: Docker.ImagePruneResponse.ImagesDeleted.Deleted
      description: The image ID of an image that was deleted
      type: String
    - contextPath: Docker.ImagePruneResponse.SpaceReclaimed
      description: Disk space reclaimed in bytes
      type: Number
  - arguments:
    - description: Term to search
      name: term
      required: true
    - description: Maximum number of results to return
      name: limit
    - description: "A JSON encoded value of the filters (a `map[string][]string`) to process on the images list. Available filters:  - `is-automated=(true|false)` - `is-official=(true|false)` - `stars= number ` Matches images that has at least 'number' stars. "
      name: filters
    description: Search images
    name: docker-image-search
    outputs:
    - contextPath: Docker.ImageSearchResponseItem.description
      description: Docker ImageSearchResponseItem description
      type: String
    - contextPath: Docker.ImageSearchResponseItem.is_official
      description: Docker ImageSearchResponseItem is_official
      type: Boolean
    - contextPath: Docker.ImageSearchResponseItem.is_automated
      description: Docker ImageSearchResponseItem is_automated
      type: Boolean
    - contextPath: Docker.ImageSearchResponseItem.name
      description: Docker ImageSearchResponseItem name
      type: String
    - contextPath: Docker.ImageSearchResponseItem.star_count
      description: Docker ImageSearchResponseItem star_count
      type: Number
  - arguments:
    - description: The network's name.
      name: networkconfig_name
      required: true
    - description: 'Check for networks with duplicate names. Since Network is primarily keyed based on a random ID and not on the name, and network name is strictly a user-friendly alias to the network which is uniquely identified using ID, there is no guaranteed way to check for duplicates. CheckDuplicate is there to provide a best effort checking of any networks which has the same name but it is not guaranteed to catch all name collisions. '
      name: networkconfig_checkduplicate
    - description: Name of the network driver plugin to use.
      name: networkconfig_driver
    - description: Restrict external access to the network.
      name: networkconfig_internal
    - description: 'Globally scoped network is manually attachable by regular containers from workers in swarm mode. '
      name: networkconfig_attachable
    - description: 'Ingress network is the network which provides the routing-mesh in swarm mode. '
      name: networkconfig_ingress
    - description: networkconfig_ipam Driver
      name: networkconfig_ipam_Driver
    - description: networkconfig_ipam Config
      name: networkconfig_ipam_Config
    - description: networkconfig_ipam Options
      name: networkconfig_ipam_Options
    - description: Enable IPv6 on the network.
      name: networkconfig_enableipv6
    - description: Network specific options to be used by the drivers.
      name: networkconfig_options
    - description: User-defined key/value metadata.
      name: networkconfig_labels
    description: Create a network
    name: docker-network-create
  - arguments:
    - description: 'JSON encoded value of the filters  '
      name: filters
    description: List networks
    name: docker-network-list
    outputs:
    - contextPath: Docker.Network.Name
      description: Docker Network Name
      type: String
    - contextPath: Docker.Network.Id
      description: Docker Network Id
      type: String
    - contextPath: Docker.Network.Created
      description: Docker Network Created
      type: String
    - contextPath: Docker.Network.Scope
      description: Docker Network Scope
      type: String
    - contextPath: Docker.Network.Driver
      description: Docker Network Driver
      type: String
    - contextPath: Docker.Network.EnableIPv6
      description: Docker Network EnableIPv6
      type: Boolean
    - contextPath: Docker.Network.Internal
      description: Docker Network Internal
      type: Boolean
    - contextPath: Docker.Network.Attachable
      description: Docker Network Attachable
      type: Boolean
    - contextPath: Docker.Network.Ingress
      description: Docker Network Ingress
      type: Boolean
    - contextPath: Docker.Network.Containers.Name
      description: Docker Network Containers Name
      type: String
    - contextPath: Docker.Network.Containers.EndpointID
      description: Docker Network Containers EndpointID
      type: String
    - contextPath: Docker.Network.Containers.MacAddress
      description: Docker Network Containers MacAddress
      type: String
    - contextPath: Docker.Network.Containers.IPv4Address
      description: Docker Network Containers IPv4Address
      type: String
    - contextPath: Docker.Network.Containers.IPv6Address
      description: Docker Network Containers IPv6Address
      type: String
  - arguments:
    - description: 'Filters to process on the prune list. '
      name: filters
    description: Delete unused networks
    name: docker-network-prune
  - arguments:
    - description: The ID or name of the node
      name: id
      required: true
    description: Inspect a node
    name: docker-node-inspect
    outputs:
    - contextPath: Docker.Node.ID
      description: Docker Node ID
      type: String
    - contextPath: Docker.Node.CreatedAt
      description: 'Date and time at which the node was added to the swarm in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. '
      type: String
    - contextPath: Docker.Node.UpdatedAt
      description: 'Date and time at which the node was last updated in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. '
      type: String
  - arguments:
    - description: 'Filters to process on the nodes list, encoded as JSON (a `map[string][]string`).  Available filters: - `id= node id ` - `label= engine label ` - `membership=`(`accepted`|`pending`)` - `name= node name ` - `node.label= node label ` - `role=`(`manager`|`worker`)` '
      name: filters
    description: List nodes
    name: docker-node-list
    outputs:
    - contextPath: Docker.Node.ID
      description: Docker Node ID
      type: String
    - contextPath: Docker.Node.CreatedAt
      description: 'Date and time at which the node was added to the swarm in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. '
      type: String
    - contextPath: Docker.Node.UpdatedAt
      description: 'Date and time at which the node was last updated in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. '
      type: String
  - arguments:
    - description: User-defined name of the secret.
      name: secretspec_name
    - description: User-defined key/value metadata.
      name: secretspec_labels
    - description: 'Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-5)) data to store as secret.  This field is only used to _create_ a secret, and is not returned by other endpoints. '
      name: secretspec_data
    - description: secretspec_driver Name
      name: secretspec_driver_Name
    - description: secretspec_driver Options
      name: secretspec_driver_Options
    - description: secretspec_templating Name
      name: secretspec_templating_Name
    - description: secretspec_templating Options
      name: secretspec_templating_Options
    description: Create a secret
    name: docker-secret-create
  - arguments:
    - description: ID of the secret
      name: id
      required: true
    description: Inspect a secret
    name: docker-secret-inspect
    outputs:
    - contextPath: Docker.Secret.ID
      description: Docker Secret ID
      type: String
    - contextPath: Docker.Secret.CreatedAt
      description: Docker Secret CreatedAt
      type: String
    - contextPath: Docker.Secret.UpdatedAt
      description: Docker Secret UpdatedAt
      type: String
  - arguments:
    - description: 'A JSON encoded value of the filters (a `map[string][]string`) to process on the secrets list.  Available filters:  - `id= secret id ` - `label= key  or label= key =value` - `name= secret name ` - `names= secret name ` '
      name: filters
    description: List secrets
    name: docker-secret-list
    outputs:
    - contextPath: Docker.Secret.ID
      description: Docker Secret ID
      type: String
    - contextPath: Docker.Secret.CreatedAt
      description: Docker Secret CreatedAt
      type: String
    - contextPath: Docker.Secret.UpdatedAt
      description: Docker Secret UpdatedAt
      type: String
  - arguments:
    - description: 'Listen address used for inter-manager communication, as well as determining the networking interface used for the VXLAN Tunnel Endpoint (VTEP). This can either be an address/port combination in the form `192.168.1.1:4567`, or an interface followed by a port number, like `eth0:4567`. If the port number is omitted, the default swarm listening port is used. '
      name: listenaddr
    - description: 'Externally reachable address advertised to other nodes. This can either be an address/port combination in the form `192.168.1.1:4567`, or an interface followed by a port number, like `eth0:4567`. If the port number is omitted, the port number from the listen address is used. If `AdvertiseAddr` is not specified, it will be automatically detected when possible. '
      name: advertiseaddr
    - description: 'Address or interface to use for data path traffic (format: ` ip|interface `), for example,  `192.168.1.1`, or an interface, like `eth0`. If `DataPathAddr` is unspecified, the same address as `AdvertiseAddr` is used.  The `DataPathAddr` specifies the address that global scope network drivers will publish towards other  nodes in order to reach the containers running on this node. Using this  meter it is possible to se te the container data traffic from the management traffic of the cluster. '
      name: datapathaddr
    - description: 'DataPathPort specifies the data path port number for data traffic. Acceptable port range is 1024 to 49151. if no port is set or is set to 0, default port 4789 will be used. '
      name: datapathport
    - description: 'Default Address Pool specifies default subnet pools for global scope networks. '
      isArray: true
      name: defaultaddrpool
    - description: Force creation of a new swarm.
      name: forcenewcluster
    - description: 'SubnetSize specifies the subnet size of the networks created from the default subnet pool. '
      name: subnetsize
    - description: spec Name
      name: spec_Name
    - description: spec Labels
      name: spec_Labels
    - description: spec Orchestration
      name: spec_Orchestration
    - description: spec Raft
      name: spec_Raft
    - description: spec Dispatcher
      name: spec_Dispatcher
    - description: spec CAConfig
      name: spec_CAConfig
    - description: spec EncryptionConfig
      name: spec_EncryptionConfig
    - description: spec TaskDefaults
      name: spec_TaskDefaults
    description: Initialize a new swarm
    name: docker-swarm-init
  - description: Inspect swarm
    name: docker-swarm-inspect
  - arguments:
    - description: 'Listen address used for inter-manager communication if the node gets promoted to manager, as well as determining the networking interface used for the VXLAN Tunnel Endpoint (VTEP). '
      name: listenaddr
    - description: 'Externally reachable address advertised to other nodes. This can either be an address/port combination in the form `192.168.1.1:4567`, or an interface followed by a port number, like `eth0:4567`. If the port number is omitted, the port number from the listen address is used. If `AdvertiseAddr` is not specified, it will be automatically detected when possible. '
      name: advertiseaddr
    - description: 'Address or interface to use for data path traffic (format: ` ip|interface `), for example,  `192.168.1.1`, or an interface, like `eth0`. If `DataPathAddr` is unspecified, the same address as `AdvertiseAddr` is used.  The `DataPathAddr` specifies the address that global scope network drivers will publish towards other nodes in order to reach the containers running on this node. Using this  meter it is possible to se te the container data traffic from the management traffic of the cluster. '
      name: datapathaddr
    - description: 'Addresses of manager nodes already participating in the swarm. '
      isArray: true
      name: remoteaddrs
    - description: Secret token for joining this swarm.
      name: jointoken
    description: Join an existing swarm
    name: docker-swarm-join
  - arguments:
    - description: 'Force leave swarm, even if this is the last manager or that it will  eak the cluster. '
      name: force
    description: Leave a swarm
    name: docker-swarm-leave
  - arguments:
    - description: The swarm's unlock key.
      name: unlockkey
    description: Unlock a locked manager
    name: docker-swarm-unlock
  - description: Get the unlock key
    name: docker-swarm-unlockkey
    outputs:
    - contextPath: Docker.UnlockKeyResponse.UnlockKey
      description: The swarm's unlock key.
      type: String
  - description: Get data usage information
    name: docker-system-data-usage
    outputs:
    - contextPath: Docker.SystemDataUsageResponse.LayersSize
      description: Docker SystemDataUsageResponse LayersSize
      type: Number
    - contextPath: Docker.SystemDataUsageResponse.Images.Id
      description: Docker SystemDataUsageResponse Images ID
      type: String
    - contextPath: Docker.SystemDataUsageResponse.Images.ParentId
      description: Docker SystemDataUsageResponse Images ParentId
      type: String
    - contextPath: Docker.SystemDataUsageResponse.Images.Created
      description: Docker SystemDataUsageResponse Images Created
      type: Number
    - contextPath: Docker.SystemDataUsageResponse.Images.Size
      description: Docker SystemDataUsageResponse Images Size
      type: Number
    - contextPath: Docker.SystemDataUsageResponse.Images.SharedSize
      description: Docker SystemDataUsageResponse Images SharedSize
      type: Number
    - contextPath: Docker.SystemDataUsageResponse.Images.VirtualSize
      description: Docker SystemDataUsageResponse Images VirtualSize
      type: Number
    - contextPath: Docker.SystemDataUsageResponse.Images.Containers
      description: Docker SystemDataUsageResponse Images Containers
      type: Number
    - contextPath: Docker.SystemDataUsageResponse.Volumes.Name
      description: Name of the volume.
      type: String
    - contextPath: Docker.SystemDataUsageResponse.Volumes.Driver
      description: Name of the volume driver used by the volume.
      type: String
    - contextPath: Docker.SystemDataUsageResponse.Volumes.Mountpoint
      description: Mount path of the volume on the host.
      type: String
    - contextPath: Docker.SystemDataUsageResponse.Volumes.CreatedAt
      description: Date/Time the volume was created.
      type: String
    - contextPath: Docker.SystemDataUsageResponse.Volumes.Scope
      description: 'The level at which the volume exists. Either `global` for cluster-wide, or `local` for machine level. '
      type: String
    - contextPath: Docker.SystemDataUsageResponse.BuildCache.ID
      description: Docker SystemDataUsageResponse BuildCache ID
      type: String
    - contextPath: Docker.SystemDataUsageResponse.BuildCache.Parent
      description: Docker SystemDataUsageResponse BuildCache Parent
      type: String
    - contextPath: Docker.SystemDataUsageResponse.BuildCache.Type
      description: Docker SystemDataUsageResponse BuildCache Type
      type: String
    - contextPath: Docker.SystemDataUsageResponse.BuildCache.Description
      description: Docker SystemDataUsageResponse BuildCache Description
      type: String
    - contextPath: Docker.SystemDataUsageResponse.BuildCache.InUse
      description: Docker SystemDataUsageResponse BuildCache InUse
      type: Boolean
    - contextPath: Docker.SystemDataUsageResponse.BuildCache.Shared
      description: Docker SystemDataUsageResponse BuildCache Shared
      type: Boolean
    - contextPath: Docker.SystemDataUsageResponse.BuildCache.Size
      description: 'Amount of disk space used by the build cache (in bytes). '
      type: Number
    - contextPath: Docker.SystemDataUsageResponse.BuildCache.CreatedAt
      description: 'Date and time at which the build cache was created in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. '
      type: String
    - contextPath: Docker.SystemDataUsageResponse.BuildCache.LastUsedAt
      description: 'Date and time at which the build cache was last used in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. '
      type: String
    - contextPath: Docker.SystemDataUsageResponse.BuildCache.UsageCount
      description: Docker SystemDataUsageResponse BuildCache UsageCount.
      type: Number
  - description: Get system information
    name: docker-system-info
    outputs:
    - contextPath: Docker.SystemInfo.ID
      description: 'Unique identifier of the daemon.   p    /  /p       Note  : The format of the ID itself is not part of the API, and   should not be considered stable. '
      type: String
    - contextPath: Docker.SystemInfo.Containers
      description: Total number of containers on the host.
      type: Number
    - contextPath: Docker.SystemInfo.ContainersRunning
      description: 'Number of containers with status `"running"`. '
      type: Number
    - contextPath: Docker.SystemInfo.ContainersPaused
      description: 'Number of containers with status `"paused"`. '
      type: Number
    - contextPath: Docker.SystemInfo.ContainersStopped
      description: 'Number of containers with status `"stopped"`. '
      type: Number
    - contextPath: Docker.SystemInfo.Images
      description: 'Total number of images on the host.  Both _tagged_ and _untagged_ (dangling) images are counted. '
      type: Number
    - contextPath: Docker.SystemInfo.Driver
      description: Name of the storage driver in use.
      type: String
    - contextPath: Docker.SystemInfo.DriverStatus
      description: Status of the storage driver in use.
      type: String
    - contextPath: Docker.SystemInfo.DockerRootDir
      description: 'Root directory of persistent Docker state.  Defaults to `/var/lib/docker` on Linux, and `C:\ProgramData\docker` on Windows. '
      type: String
    - contextPath: Docker.SystemInfo.MemoryLimit
      description: Indicates if the host has memory limit support enabled.
      type: Boolean
    - contextPath: Docker.SystemInfo.SwapLimit
      description: Indicates if the host has memory swap limit support enabled.
      type: Boolean
    - contextPath: Docker.SystemInfo.KernelMemory
      description: 'Indicates if the host has kernel memory limit support enabled.   p    /  /p       Deprecated  : This field is deprecated as the kernel 5.4 deprecated   `kmem.limit_in_bytes`. '
      type: Boolean
    - contextPath: Docker.SystemInfo.CpuCfsPeriod
      description: 'Indicates if CPU CFS(Completely Fair Scheduler) period is supported by the host. '
      type: Boolean
    - contextPath: Docker.SystemInfo.CpuCfsQuota
      description: 'Indicates if CPU CFS(Completely Fair Scheduler) quota is supported by the host. '
      type: Boolean
    - contextPath: Docker.SystemInfo.CPUShares
      description: 'Indicates if CPU Shares limiting is supported by the host. '
      type: Boolean
    - contextPath: Docker.SystemInfo.CPUSet
      description: 'Indicates if CPUsets (cpuset.cpus, cpuset.mems) are supported by the host.  See [cpuset(7)](https://www.kernel.org/doc/Documentation/cgroup-v1/cpusets.txt) '
      type: Boolean
    - contextPath: Docker.SystemInfo.PidsLimit
      description: Indicates if the host kernel has PID limit support enabled.
      type: Boolean
    - contextPath: Docker.SystemInfo.OomKillDisable
      description: Indicates if OOM killer disable is supported on the host.
      type: Boolean
    - contextPath: Docker.SystemInfo.IPv4Forwarding
      description: Indicates IPv4 forwarding is enabled.
      type: Boolean
    - contextPath: Docker.SystemInfo.BridgeNfIptables
      description: Indicates if ` idge-nf-call-iptables` is available on the host.
      type: Boolean
    - contextPath: Docker.SystemInfo.BridgeNfIp6tables
      description: Indicates if ` idge-nf-call-ip6tables` is available on the host.
      type: Boolean
    - contextPath: Docker.SystemInfo.Debug
      description: 'Indicates if the daemon is running in debug-mode / with debug-level logging enabled. '
      type: Boolean
    - contextPath: Docker.SystemInfo.NFd
      description: 'The total number of file Descriptors in use by the daemon process.  This information is only returned if debug-mode is enabled. '
      type: Number
    - contextPath: Docker.SystemInfo.NGoroutines
      description: 'The  number of goroutines that currently exist.  This information is only returned if debug-mode is enabled. '
      type: Number
    - contextPath: Docker.SystemInfo.SystemTime
      description: 'Current system-time in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. '
      type: String
    - contextPath: Docker.SystemInfo.LoggingDriver
      description: 'The logging driver to use as a default for new containers. '
      type: String
    - contextPath: Docker.SystemInfo.CgroupDriver
      description: 'The driver to use for managing cgroups. '
      type: String
    - contextPath: Docker.SystemInfo.CgroupVersion
      description: 'The version of the cgroup. '
      type: String
    - contextPath: Docker.SystemInfo.NEventsListener
      description: Number of event listeners subscribed.
      type: Number
    - contextPath: Docker.SystemInfo.KernelVersion
      description: 'Kernel version of the host.  On Linux, this information obtained from `uname`. On Windows this information is queried from the  kbd HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\ /kbd  registry value, for example _"10.0 14393 (14393.1198.amd64fre.rs1_release_sec.170427-1353)"_. '
      type: String
    - contextPath: Docker.SystemInfo.OperatingSystem
      description: "Name of the host's operating system, for example: \"Ubuntu 16.04.2 LTS\" or \"Windows Server 2016 Datacenter\" "
      type: String
    - contextPath: Docker.SystemInfo.OSVersion
      description: "Version of the host's operating system   p    /  /p       Note  : The information returned in this field, including its   very existence, and the formatting of values, should not be considered   stable, and may change without notice. "
      type: String
    - contextPath: Docker.SystemInfo.OSType
      description: 'Generic type of the operating system of the host, as returned by the Go runtime (`GOOS`).  Currently returned values are "linux" and "windows". A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment). '
      type: String
    - contextPath: Docker.SystemInfo.Architecture
      description: 'Hardware architecture of the host, as returned by the Go runtime (`GOARCH`).  A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment). '
      type: String
    - contextPath: Docker.SystemInfo.NCPU
      description: 'The number of logical CPUs usable by the daemon.  The number of available CPUs is checked by querying the operating system when the daemon starts. Changes to operating system CPU allocation after the daemon is started are not reflected. '
      type: Number
    - contextPath: Docker.SystemInfo.MemTotal
      description: 'Total amount of physical memory available on the host, in bytes. '
      type: Number
    - contextPath: Docker.SystemInfo.IndexServerAddress
      description: 'Address / URL of the index server that is used for image search, and as a default for user authentication for Docker Hub and Docker Cloud. '
      type: String
    - contextPath: Docker.SystemInfo.HttpProxy
      description: 'HTTP-proxy configured for the daemon. This value is obtained from the [`HTTP_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable. Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL are masked in the API response.  Containers do not automatically inherit this configuration. '
      type: String
    - contextPath: Docker.SystemInfo.HttpsProxy
      description: 'HTTPS-proxy configured for the daemon. This value is obtained from the [`HTTPS_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable. Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL are masked in the API response.  Containers do not automatically inherit this configuration. '
      type: String
    - contextPath: Docker.SystemInfo.NoProxy
      description: 'Comma-se ted list of domain extensions for which no proxy should be used. This value is obtained from the [`NO_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.  Containers do not automatically inherit this configuration. '
      type: String
    - contextPath: Docker.SystemInfo.Name
      description: Hostname of the host.
      type: String
    - contextPath: Docker.SystemInfo.ExperimentalBuild
      description: 'Indicates if experimental features are enabled on the daemon. '
      type: Boolean
    - contextPath: Docker.SystemInfo.ServerVersion
      description: 'Version string of the daemon.      Note  : the [standalone Swarm API](https://docs.docker.com/swarm/swarm-api/)   returns the Swarm version instead of the daemon  version, for example   `swarm/1.2.8`. '
      type: String
    - contextPath: Docker.SystemInfo.ClusterStore
      description: 'URL of the distributed storage backend.   The storage backend is used for multihost networking (to store network and endpoint information) and by the node discovery mechanism.   p    /  /p       Deprecated  : This field is only propagated when using standalone Swarm   mode, and overlay networking using an external k/v store. Overlay   networks with Swarm mode enabled use the built-in raft store, and   this field will be empty. '
      type: String
    - contextPath: Docker.SystemInfo.ClusterAdvertise
      description: 'The network endpoint that the Engine advertises for the purpose of node discovery. ClusterAdvertise is a `host:port` combination on which the daemon is reachable by other hosts.   p    /  /p       Deprecated  : This field is only propagated when using standalone Swarm   mode, and overlay networking using an external k/v store. Overlay   networks with Swarm mode enabled use the built-in raft store, and   this field will be empty. '
      type: String
    - contextPath: Docker.SystemInfo.Runtimes.path
      description: "Name and, optional, path, of the OCI executable binary.  If the path is omitted, the daemon searches the host's `$PATH` for the binary and uses the first result. "
      type: String
    - contextPath: Docker.SystemInfo.DefaultRuntime
      description: 'Name of the default OCI runtime that is used when starting containers.  The default can be overridden per-container at create time. '
      type: String
    - contextPath: Docker.SystemInfo.LiveRestoreEnabled
      description: 'Indicates if live restore is enabled.  If enabled, containers are kept running when the daemon is shutdown or upon daemon start if running containers are detected. '
      type: Boolean
    - contextPath: Docker.SystemInfo.Isolation
      description: 'Represents the isolation technology to use as a default for containers. The supported values are platform-specific.  If no isolation value is specified on daemon start, on Windows client, the default is `hyperv`, and on Windows server, the default is `process`.  This option is currently not used on other platforms. '
      type: String
    - contextPath: Docker.SystemInfo.InitBinary
      description: "Name and, optional, path of the `docker-init` binary.  If the path is omitted, the daemon searches the host's `$PATH` for the binary and uses the first result. "
      type: String
    - contextPath: Docker.SystemInfo.ProductLicense
      description: 'Reports a summary of the product license on the daemon.  If a commercial license has been applied to the daemon, information such as number of nodes, and expiration are included. '
      type: String
    - contextPath: Docker.SystemInfo.DefaultAddressPools.Base
      description: The network address in CIDR format
      type: String
    - contextPath: Docker.SystemInfo.DefaultAddressPools.Size
      description: The network pool size
      type: Number
  - description: Get version
    name: docker-system-version
    outputs:
    - contextPath: Docker.SystemVersion.Components.Name
      description: 'Name of the component '
      type: String
    - contextPath: Docker.SystemVersion.Components.Version
      description: 'Version of the component '
      type: String
    - contextPath: Docker.SystemVersion.Version
      description: The version of the daemon
      type: String
    - contextPath: Docker.SystemVersion.ApiVersion
      description: 'The default (and highest) API version that is supported by the daemon '
      type: String
    - contextPath: Docker.SystemVersion.MinAPIVersion
      description: 'The minimum API version that is supported by the daemon '
      type: String
    - contextPath: Docker.SystemVersion.GitCommit
      description: 'The Git commit of the source code that was used to build the daemon '
      type: String
    - contextPath: Docker.SystemVersion.GoVersion
      description: 'The version Go used to compile the daemon, and the version of the Go runtime in use. '
      type: String
    - contextPath: Docker.SystemVersion.Os
      description: 'The operating system that the daemon is running on ("linux" or "windows") '
      type: String
    - contextPath: Docker.SystemVersion.Arch
      description: 'The architecture that the daemon is running on '
      type: String
    - contextPath: Docker.SystemVersion.KernelVersion
      description: 'The kernel version (`uname -r`) that the daemon is running on.  This field is omitted when empty. '
      type: String
    - contextPath: Docker.SystemVersion.Experimental
      description: 'Indicates if the daemon is started with experimental features enabled.  This field is omitted when empty / false. '
      type: Boolean
    - contextPath: Docker.SystemVersion.BuildTime
      description: 'The date and time that the daemon was compiled. '
      type: String
  - arguments:
    - description: 'A JSON encoded value of the filters (a `map[string][]string`) to process on the tasks list.  Available filters:  - `desired-state=(running | shutdown | accepted)` - `id= task id ` - `label=key` or `label="key=value"` - `name= task name ` - `node= node id or name ` - `service= service name ` '
      name: filters
    description: List tasks
    name: docker-task-list
    outputs:
    - contextPath: Docker.Task.ID
      description: The ID of the task.
      type: String
    - contextPath: Docker.Task.CreatedAt
      description: Docker Task CreatedAt.
      type: String
    - contextPath: Docker.Task.UpdatedAt
      description: Docker Task UpdatedAt.
      type: String
    - contextPath: Docker.Task.Name
      description: Name of the task.
      type: String
    - contextPath: Docker.Task.ServiceID
      description: The ID of the service this task is part of.
      type: String
    - contextPath: Docker.Task.Slot
      description: Docker Task Slot
      type: Number
    - contextPath: Docker.Task.NodeID
      description: The ID of the node that this task is on.
      type: String
  - arguments:
    - description: "The new volume's name. If not specified, Docker generates a name. "
      name: volumeconfig_name
    - description: Name of the volume driver to use.
      name: volumeconfig_driver
    - description: 'A mapping of driver options and values. These options are passed directly to the driver and are driver specific. '
      name: volumeconfig_driveropts
    - description: User-defined key/value metadata.
      name: volumeconfig_labels
    description: Create a volume
    name: docker-volume-create
  - arguments:
    - description: Volume name or ID
      name: name
      required: true
    description: Inspect a volume
    name: docker-volume-inspect
    outputs:
    - contextPath: Docker.Volume.Name
      description: Name of the volume.
      type: String
    - contextPath: Docker.Volume.Driver
      description: Name of the volume driver used by the volume.
      type: String
    - contextPath: Docker.Volume.Mountpoint
      description: Mount path of the volume on the host.
      type: String
    - contextPath: Docker.Volume.CreatedAt
      description: Date/Time the volume was created.
      type: String
    - contextPath: Docker.Volume.Scope
      description: 'The level at which the volume exists. Either `global` for cluster-wide, or `local` for machine level. '
      type: String
  - arguments:
    - description: 'JSON encoded value of the filters (a `map[string][]string`) to process on the volumes list. Available filters:  - `dangling= boolean ` When set to `true` (or `1`), returns all    volumes that are not in use by a container. When set to `false`    (or `0`), only volumes that are in use by one or more    containers are returned. - `driver= volume-driver-name ` Matches volumes based on their driver. - `label= key ` or `label= key : value ` Matches volumes based on    the presence of a `label` alone or a `label` and a value. - `name= volume-name ` Matches all or part of a volume name. '
      name: filters
    description: List volumes
    name: docker-volume-list
    outputs:
    - contextPath: Docker.VolumeListResponse.Volumes.Name
      description: Name of the volume.
      type: String
    - contextPath: Docker.VolumeListResponse.Volumes.Driver
      description: Name of the volume driver used by the volume.
      type: String
    - contextPath: Docker.VolumeListResponse.Volumes.Mountpoint
      description: Mount path of the volume on the host.
      type: String
    - contextPath: Docker.VolumeListResponse.Volumes.CreatedAt
      description: Date/Time the volume was created.
      type: String
    - contextPath: Docker.VolumeListResponse.Volumes.Scope
      description: 'The level at which the volume exists. Either `global` for cluster-wide, or `local` for machine level. '
      type: String
  - arguments:
    - description: 'Filters to process on the prune list, encoded as JSON (a `map[string][]string`).  Available filters: - `label` (`label= key `, `label= key = value `, `label!= key `, or `label!= key = value `) Prune volumes with (or without, in case `label!=...` is used) the specified labels. '
      name: filters
    description: Delete unused volumes
    name: docker-volume-prune
    outputs:
    - contextPath: Docker.VolumePruneResponse.SpaceReclaimed
      description: Disk space reclaimed in bytes
      type: Number
  - name: docker-container-delete
    description: Remove a container
    outputs:
    - contextPath: Docker.ContainerDelete.Status Code
      description: Image Tag Result
      type: String
    arguments:
    - description: ID or name of the container
      name: id
      required: true
    - description: Remove anonymous volumes associated with the container.
      name: v
      auto: PREDEFINED
      defaultValue: 'false'
      predefined:
      - 'false'
      - 'true'
    - description: If the container is running, kill it before removing it.
      name: force
      auto: PREDEFINED
      defaultValue: 'false'
      predefined:
      - 'false'
      - 'true'
    - description: Remove the specified link associated with the container.
      name: link
      auto: PREDEFINED
      defaultValue: 'false'
      predefined:
      - 'false'
      - 'true'
  - name: docker-image-delete
    description: Remove an image, along with any untagged parent images that were referenced by that image. Images can't be removed if they have descendant images, are being used by a running container or are being used by a build.
    outputs:
    - contextPath: Docker.ImageDeleteResponseItem
      description: Deletion Response
      type: string
    arguments:
    - description: Image name or ID
      name: name
      required: true
    - description: Remove the image even if it is being used by stopped containers or has other tags
      name: force
      auto: PREDEFINED
      defaultValue: 'false'
      predefined:
      - 'false'
      - 'true'
    - description: Do not delete untagged parent images
      name: noprune
      auto: PREDEFINED
      defaultValue: 'false'
      predefined:
      - 'false'
      - 'true'
  - name: docker-image-create
    arguments:
    - default: true
      description: Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed.
      name: from_image
    - description: Source to import. The value may be a URL from which the image can be retrieved or - to read the image from the request body. This parameter may only be used when importing an image.
      name: from_src
    - description: Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image.
      name: repo
    - description: Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled.
      name: tag
    - description: Set commit message for imported image.
      name: message
    - description: Platform in the format os[/arch[/variant]]
      name: platform
    description: Create an image by either pulling it from a registry or importing it.
    outputs:
    - contextPath: Docker.ImageCreate.Status
      description: Image Create result
      type: String
  - name: docker-image-push
    arguments:
    - description: Image name or ID.
      name: name
      required: true
    - description: The tag to associate with the image on the registry.
      name: tag
    description: Push an image to a registry. If you wish to push an image on to a private registry, that image must already have a tag which references the registry. For example, registry.example.com/myimage:latest. The push is cancelled if the HTTP connection is closed.
    outputs:
    - contextPath: Docker.ImagePush
      description: Image Push Result
      type: String
  - name: docker-image-tag
    arguments:
    - description: Image name or ID to tag.
      name: name
      required: true
    - description: The repository to tag in. For example, someuser/someimage.
      name: repo
    - description: The name of the new tag.
      name: tag
    description: Tag an image so that it becomes part of a repository.
    outputs:
    - contextPath: Docker.ImageTag.Status Code
      description: Image Tag Result
      type: String
  dockerimage: demisto/python3:3.10.12.63474
  runonce: false
  script: '-'
  subtype: python3
  type: python
tests:
- No tests (auto formatted)
fromversion: 6.0.0
