{
    "name": "LGTM API specification",
    "description": "The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:     `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.     `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.     `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.     `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.     `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.     `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.     `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.     `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). ",
    "category": "Utilities",
    "url": "https://lgtm.com/api/v1.0",
    "auth": [
        "apiKey"
    ],
    "context_path": "LGTM",
    "commands": [
        {
            "name": "create-query-job",
            "path": "queryjobs",
            "method": "post",
            "description": "Run a CodeQL query on one or more projects",
            "arguments": [
                {
                    "name": "language",
                    "description": "The [language](https://lgtm.com/help/lgtm/analysis-faqs#which-languages-are-supported) you want to analyze. ",
                    "required": true,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "project-id",
                    "description": "The identifier of the project to analyze. Either `project-id` or `projects-list` must be specified.",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "array",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "projects-list",
                    "description": "Name of the list containing the projects to analyze. Either `project-id` or `projects-list` must be specified.",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "get-issue",
            "path": "issues/{project-id}/{alert-key}",
            "method": "get",
            "description": "Get detailed alert information for an issue",
            "arguments": [
                {
                    "name": "project-id",
                    "description": "The numeric project identifier.",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "alert-key",
                    "description": "The alert key is generated by LGTM when it posts an issue `create` webhook request   to an external system using the [issue tracker Webhook API](https://lgtm.com/admin/help/issuetracker-webhook-api).  This key is an opaque identifier that tracks the alert's location over time. For example, if a file containing the alert  is modified, the SARIF data will reflect the updated location of the alert.  Note that the key needs to be URL encoded as it may contain characters that are not web-safe.   ",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [],
            "context_path": "",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "get-query-job",
            "path": "queryjobs/{queryjob-id}",
            "method": "get",
            "description": "Get the status of a query job",
            "arguments": [
                {
                    "name": "queryjob-id",
                    "description": "The identifier of the query job, from the `task-result` given in the response to the initial `POST /queryjobs` request.",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "id",
                    "description": "The identifier for the QueryJob.",
                    "type": "String"
                },
                {
                    "name": "result-url",
                    "description": "URL to view the result of the query job.",
                    "type": "String"
                }
            ],
            "context_path": "queryjob",
            "root_object": "",
            "headers": [],
            "unique_key": "id"
        },
        {
            "name": "get-query-job-results-for-project",
            "path": "queryjobs/{queryjob-id}/results/{project-id}",
            "method": "get",
            "description": "Fetch the results of a query job for a specific project",
            "arguments": [
                {
                    "name": "queryjob-id",
                    "description": "The identifier of the query job, from the `task-result` given in the response to the initial `POST /queryjobs` request.",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "project-id",
                    "description": "The identifier for the project.",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "start",
                    "description": "Start point for the page of results.",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "limit",
                    "description": "The maximum number of results to display (less than 100).",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "nofilter",
                    "description": "Include results that are not part of the source tree. These results are filtered out by default.",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "boolean",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "data.line",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "data.file",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "data.value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "data.url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "next",
                    "description": "URL for retrieving the next part of the results (if applicable).",
                    "type": "String"
                }
            ],
            "context_path": "queryjob-project-results",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        },
        {
            "name": "get-query-job-results-overview",
            "path": "queryjobs/{queryjob-id}/results",
            "method": "get",
            "description": "Provide a summary of results for the projects in the query job",
            "arguments": [
                {
                    "name": "queryjob-id",
                    "description": "The identifier of the query job, from the `task-result` given in the response to the initial `POST /queryjobs` request.",
                    "required": true,
                    "default": "",
                    "in": "path",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "start",
                    "description": "An opaque identifier generated by the API used for pagination.  This identifier will be included as part of the response for this endpoint whenever more than one page of results is available.  ",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "limit",
                    "description": "The number of results to return. Useful for pagination.",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "integer",
                    "options": null,
                    "properties": {}
                },
                {
                    "name": "filter",
                    "description": "Only return a subset of results. Legal values are `w-results`, `wo-results`, `error`.",
                    "required": false,
                    "default": "",
                    "in": "query",
                    "ref": "",
                    "type": "string",
                    "options": null,
                    "properties": {}
                }
            ],
            "outputs": [
                {
                    "name": "data.status",
                    "description": "Describes whether the query was sucessfully executed against the project.",
                    "type": "String"
                },
                {
                    "name": "data.total",
                    "description": "Number of results returned by the query. This is  oken down further into `internal` and `external` results. Only applies if `status` is `success`. ",
                    "type": "Number"
                },
                {
                    "name": "data.internal",
                    "description": "Number of results that refer to elements within the source tree. Only applies if `status` is `success`.",
                    "type": "Number"
                },
                {
                    "name": "data.external",
                    "description": "Number of results that refer to elements outside the source tree (e.g., li aries). Only applies if `status` is `success`.",
                    "type": "Number"
                },
                {
                    "name": "data.error",
                    "description": "Error message. Only applies if `status` is `error`.",
                    "type": "String"
                },
                {
                    "name": "next",
                    "description": "",
                    "type": "String"
                }
            ],
            "context_path": "queryjob-results-overview",
            "root_object": "",
            "headers": [],
            "unique_key": ""
        }
    ],
    "code_type": "python",
    "code_subtype": "python3",
    "docker_image": "demisto/python3:3.8.6.12176"
}