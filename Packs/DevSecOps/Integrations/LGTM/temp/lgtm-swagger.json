{
  "openapi": "3.0.1",
  "info": {
    "title": "LGTM API specification",
    "description": "The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:\n  * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.\n  * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.\n  * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.\n  * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.\n  * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.\n  * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.\n  * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.\n  * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.\n\nFor an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm).\n",
    "version": "v1.0"
  },
  "servers": [
    {
      "url": "https://lgtm.com/api/v1.0"
    }
  ],
  "tags": [
    {
      "name": "API root",
      "description": "The `/` endpoints are used to get information about the API:\n  * [Get the API version number](https://lgtm.com/help/lgtm/api/api-v1#opIdgetVersion) for the LGTM server.\n  * [View the API specification](https://lgtm.com/help/lgtm/api/api-v1#opIdgetSpec) in [OpenAPI format](https://github.com/OAI/OpenAPI-Specification).\n"
    },
    {
      "name": "Projects",
      "description": "The `/projects` endpoints are used to interact with projects:\n  * [List the projects](https://lgtm.com/help/lgtm/api/api-v1#opIdgetProjects) available to the current user.\n  * Get the latest summary for a specific project [by identifier](https://lgtm.com/help/lgtm/api/api-v1#opIdgetProject), \n  or by [URL identifier](https://lgtm.com/help/lgtm/api/api-v1#opIdgetProjectByUrlIdentifier).\n  * LGTM administrators only, [add projects](https://lgtm.com/help/lgtm/api/api-v1#opIdaddProject) to LGTM.\n"
    },
    {
      "name": "Analyses",
      "description": "Most of the `/analyses` endpoints are used to retrieve the results of analyzing a commit:\n  * [Get the *analysis* identifier and results summary for the latest or a specific commit](https://lgtm.com/help/lgtm/api/api-v1#opIdgetAnalysisForCommit).\n  * [Get the *commit* identifier and results summary for a specific analysis](https://lgtm.com/help/lgtm/api/api-v1#opIdgetAnalysis).\n  * [Download the full results for a specific analysis](https://lgtm.com/help/lgtm/api/api-v1#opIdgetAlerts).\n\n You can also use this end point to trigger the analysis of a commit that hasn't previously been analyzed.\n For more information, see [Run analysis of a specific commit](https://lgtm.com/help/lgtm/api/api-v1#opIdrequestAnalysis).\n"
    },
    {
      "name": "Code reviews",
      "description": "The `/codereviews` endpoint is used to trigger a patch code review and request the results:\n  * [Trigger the review of a patch](https://lgtm.com/help/lgtm/api/api-v1#opIdrequestReview).\n  * [Get the results of a completed code review](https://lgtm.com/help/lgtm/api/api-v1#opIdgetCodeReview).\n"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "API root"
        ],
        "summary": "Version information",
        "description": "Get the version information of this API.",
        "operationId": "getVersion",
        "responses": {
          "200": {
            "description": "Success. Requested data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/version"
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "x-auth-mode": "UNRESTRICTED"
      }
    },
    "/openapi": {
      "get": {
        "tags": [
          "API root"
        ],
        "summary": "API specification",
        "description": "Get the specification of this API in [OpenAPI](https://github.com/OAI/OpenAPI-Specification) format. This endpoint does not require an access token. This makes it easier for you to use the specification with third-party tools.",
        "operationId": "getSpec",
        "responses": {
          "200": {
            "description": "Success. Requested data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "examples": {}
              }
            }
          }
        },
        "x-auth-mode": "UNRESTRICTED"
      }
    },
    "/projects": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "List projects",
        "description": "List all the projects the current user has authorization to view. \n\nA maximum of 100 projects are returned in each response. When further results are available, the response includes the URL you need to request the next page of results.\n\nUse the optional parameter, `limit`, to change the number of results reported in each response (range of 1&mdash;100). If you supply an invalid value for this  parameter, the default value of 100 is used.\n\nWhen more than one page of results is available, each response includes a `nextPageUrl` response parameter. You can use this URL to request the next page of results. The `nextPageUrl` includes an automatically generated `start` parameter, which specifies the projects to return in the next page of results.\n",
        "operationId": "getProjects",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of projects to return in each response (1-100).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "An opaque identifier generated by the API.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Requested data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project-list"
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": [
              "projects:read"
            ]
          }
        ],
        "x-auth-mode": "FILTERING"
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Add a project to LGTM",
        "description": "LGTM administrators can add a new project to LGTM by providing a repository URL. By default, LGTM tries to build and analyze the project in the same way as for projects added through the user interface. If at least one language is successfully analyzed, and the repository doesn't already exist on LGTM, a new project is created. If the project already exists but your API call triggers a successful analysis  of additional languages, LGTM adds those languages to the project.\n\nYou can configure how LGTM processes the project using query parameters to:\n  * Specify the languages to analyze.\n  * Create a new project in [sparse mode](https://help.semmle.com/lgtm-enterprise/user/help/analysis-faqs.html#what-is-sparse-analysis).\n  * Create a new project in [upload mode](https://help.semmle.com/lgtm-enterprise/user/help/analysis-faqs.html#what-is-upload-analysis) to analyze externally-generated databases. Each database represents a snapshot of the codebase. \n  Use this option when you want to upload databases that were generated by the CodeQL CLI (or the QL command-line tools).\n  The version of the command line used to generate the database\n  must be the same version as LGTM Enterprise. \n\nWith any of these options, you can also include an `lgtm.yml` in the body of the request to [customize extraction](https://lgtm.com/help/lgtm/customizing-code-extraction).\n",
        "operationId": "addProject",
        "parameters": [
          {
            "name": "repository",
            "in": "query",
            "description": "The URL of the repository to analyze.\nLGTM tests this against the [repository providers](https://lgtm.com/admin/help/adding-repository-providers) defined for the system. If it doesn't match any of them, the request fails.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "uri"
            }
          },
          {
            "name": "language",
            "in": "query",
            "description": "Optional, a [language code](https://lgtm.com/help/lgtm/analysis-faqs#which-languages-are-supported) to specify which language to analyze.\nTo request the analysis of more than one language, specify a query parameter for each language. By default, LGTM tries to analyze all supported languages.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "The analysis mode of the new project.\nWhen set to `full` all commits of the project are analyzed; when set to `sparse` the latest commit of the project is analyzed periodically; when set to `upload`,  no automatic analysis is performed, instead externally-generated databases should be uploaded.\nFor new projects the default value is `full`. The `mode` parameter cannot be used to change the analysis mode of existing projects. Therefore, for existing projects, it should either be left blank or set to match the analysis mode of the project.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "full",
                "sparse",
                "upload"
              ]
            }
          },
          {
            "name": "commit",
            "in": "query",
            "description": "Required when `mode=upload`, specify the identifier of the commit used to generate the database.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "Optional when `mode=upload`, specify the date and time of the commit used to generate the database; defaults to the current time.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "worker-label",
            "in": "query",
            "description": "Optional, any [labels](https://lgtm.com/admin/help/defining-worker-labels) required by workers to analyze this project. \nTo specify more than one label, repeat the query parameter.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "description": "An optional [lgtm.yml project configuration](https://lgtm.com/help/lgtm/lgtm.yml-configuration-file) file to customize the LGTM code analysis and results display for the project.",
          "content": {
            "application/x-yaml": {
              "schema": {
                "type": "string"
              },
              "examples": {
                "lgtm_yml": {
                  "description": "An optional [lgtm.yml project configuration](https://lgtm.com/help/lgtm/lgtm.yml-configuration-file) file to customize the LGTM code analysis and results display for the project.\n",
                  "value": {
                    "extraction": {
                      "java": {
                        "index": {
                          "build_command": "./build.sh"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "202": {
            "description": "Accepted. Analysis attempts triggered or upload URLs returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/operation"
                },
                "examples": {
                  "externalOperationExample": {
                    "$ref": "#/components/examples/externalOperationExample"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": [
              "projects:write"
            ]
          }
        ],
        "x-auth-mode": "BINARY"
      }
    },
    "/projects/{project-id}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get project by numeric identifier",
        "description": "Get the latest summary for a specific project using the numeric project identifier.\n\nTo find the LGTM identifier for a project, list all projects using the `/projects`  endpoint and look up the project by name. Alternatively, use the `/projects/{provider}/{org}/{name}` endpoint. If you have administration access, the project identifier is also displayed in  the administration page for the project.\n",
        "operationId": "getProject",
        "parameters": [
          {
            "name": "project-id",
            "in": "path",
            "description": "The numeric project identifier",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Requested data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project-details"
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": [
              "projects:read"
            ]
          }
        ],
        "x-auth-mode": "BINARY"
      }
    },
    "/projects/{project-id}/settings/analysis-configuration": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get configuration for a project identified by numeric identifier",
        "description": "Get the latest configuration for a specific project using the numeric project identifier.",
        "operationId": "getProjectConfig",
        "parameters": [
          {
            "name": "project-id",
            "in": "path",
            "description": "The numeric project identifier",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "source",
            "in": "query",
            "description": "The type of project configuration to retrieve.\nIf this parameter isn't specified, the request retrieves the effective configuration. That is, the configuration that is actually applied to the project, which may be from:\n* the repository\n* the administrator-set, project configuration\n* the global configuration.\n\nIf you do specify this value, it must be one of:\n\n * `repository` to retrieve the configuration specified by a YAML file in the repository. A 404 status is returned if there is no repository configuration. \n\n * `administrator` to retrieve the administrator-set, project configuration. A 404 status is returned if there is no administrator configuration.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "repository",
                "administrator"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Requested data returned.",
            "content": {
              "application/x-yaml": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Only YAML is supported.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": [
              "projects:read"
            ]
          }
        ],
        "x-auth-mode": "BINARY"
      }
    },
    "/projects/{provider}/{org}/{name}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get project by URL identifier",
        "description": "Get the latest summary for a specific project using the project's URL identifier `{provider}/{org}/{name}`.\n\nTo find the URL identifier for a project, view the project overview page in LGTM. The URL identifier follows after `/projects`. For example, for a project with the URL `https://lgtm.example.com/projects/g/apache/commons-io` the URL identifier is `g/apache/commons-io`. In the example, `g` represents the `provider` (repository host), `apache` is the `organization` and `commons-io` is the `name` of the repository.\n",
        "operationId": "getProjectByUrlIdentifier",
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "description": "The first part of the URL identifier of a project, which represents the repository host.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "org",
            "in": "path",
            "description": "The second part of the URL identifier of a project, the organization.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "The third part of the URL identifier of a project, the repository name.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Requested data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project-details"
                }
              }
            }
          },
          "307": {
            "description": "Redirect. The project has been renamed. Request redirected to numeric identifier for the project.\n"
          }
        },
        "security": [
          {
            "access-token": [
              "projects:read"
            ]
          }
        ],
        "x-auth-mode": "BINARY"
      }
    },
    "/snapshots/{project-id}/{language}": {
      "get": {
        "tags": [
          "Snapshots"
        ],
        "summary": "Download a snapshot",
        "description": "Download a CodeQL database from LGTM, representing a snapshot of the codebase, to run queries in your IDE.\n\nThis endpoint works for projects that have been successfully analyzed for the language specified in the request.  A successful request redirects you to a URL for downloading a database that represents the code snapshot, as specified in the `Location:` header in the response. Therefore, your HTTP client should be configured to follow redirects. For example, if you are using `curl`, you can add the`-L` flag to the command.\n\nThe database is downloaded as a zip file that can be imported into an IDE equipped with a  CodeQL extension or plugin for local analysis. The extension or plugin must be up to date to anaylze databases downloaded from LGTM. For more information on running queries locally in your IDE, see [Runnning queries in your IDE](https://lgtm.com/help/lgtm/running-queries-ide). \n",
        "operationId": "getSnapshot",
        "parameters": [
          {
            "name": "project-id",
            "in": "path",
            "description": "The numeric project identifier.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "language",
            "in": "path",
            "description": "The language of the database to download.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "303": {
            "description": "Redirects to a URL for downloading the CodeQL database as indicated by the `Location:` header.",
            "headers": {
              "Location": {
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": [
              "snapshots:read"
            ]
          }
        ],
        "x-auth-mode": "BINARY"
      },
      "post": {
        "tags": [
          "Snapshots"
        ],
        "summary": "Start snapshot upload session",
        "description": "Start a session to upload an externally-built database (which represents a snapshot of a codebase) to a project on LGTM. \n\nThis endpoint works for projects that are already on LGTM, and the selected language of  the database must already be configured. The project must be configured with 'upload' analysis mode. You can upload a \"bundled\" CodeQL database or a database exported by  the QL command-line tools (`odasa`).\n\nIf your database was generated using a version of the  command line that is older than LGTM,  LGTM will try to upgrade and analyze it when the upload is complete. You can include cached predicates in the upload, but they are ignored as the cache is  repopulated after the database has been upgraded and analyzed. However, if you want to include results with your database, make sure the database is  compatible before you start the upload session.  Incompatible databases with results won't be upgraded and therefore cannot be uploaded.  For further information on externally-built databases,  see [Preparing snapshots to upload to LGTM using the QL command-line tools](https://help.semmle.com/wiki/display/SD/Preparing+snapshots+to+upload+to+LGTM).\n\n    \nWhen the upload session has been successfully started, upload the database to the  upload URL returned in the response. The database can be uploaded to the upload URL in parts using  the [`PUT /snapshots/uploads/{session-id}`](https://lgtm.com/help/lgtm/api/api-v1#opIduploadPart) endpoint. After uploading all the parts you must call  the [`POST /snapshots/uploads/{session-id}`](https://lgtm.com/help/lgtm/api/api-v1#opIdcompleteUpload) endpoint to complete the upload session.\n",
        "operationId": "initSnapshotUpload",
        "parameters": [
          {
            "name": "project-id",
            "in": "path",
            "description": "The numeric project identifier.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "language",
            "in": "path",
            "description": "The language of the database to upload.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commit",
            "in": "query",
            "description": "The identifier of the analyzed commit.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The date and time of the analyzed commit (default the current time).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/upload-session"
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": [
              "snapshots:write"
            ]
          }
        ],
        "x-auth-mode": "BINARY"
      }
    },
    "/snapshots/uploads/{session-id}": {
      "put": {
        "tags": [
          "Snapshots"
        ],
        "summary": "Upload snapshot",
        "description": "Upload a database representing a snapshot of a codebase.  The database is sent in one or more parts. Each part is sent in the request body. \nUse the [`POST /snapshots/{project-id}/{language}`](https://lgtm.com/help/lgtm/api/api-v1#opIdinitSnapshotUpload) endpoint  to start an upload session before uploading a database part. Database parts must have been generated and prepared for upload using the CodeQL CLI or the QL command-line tools. For further information on exporting externally-built databases,  see [Preparing snapshots to upload to LGTM](https://help.semmle.com/wiki/display/SD/Preparing+snapshots+to+upload+to+LGTM).\n\nSplit large databases into multiple parts. Upload the parts by making a separate request for each part.  Don't upload the next part until you've successfully uploaded the previous part.\n\nIf the upload fails you should retry it with the same data.\n",
        "operationId": "uploadPart",
        "parameters": [
          {
            "name": "session-id",
            "in": "path",
            "description": "The id of the upload session.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The database or database part to upload.",
          "content": {
            "application/zip": {
              "schema": {
                "type": "string",
                "format": "binary"
              },
              "examples": {
                "snapshotPart": {
                  "$ref": "#/components/examples/snapshotPart"
                }
              }
            },
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              },
              "examples": {
                "snapshotPart": {
                  "$ref": "#/components/examples/snapshotPart"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success."
          }
        },
        "security": [
          {
            "access-token": [
              "snapshots:write"
            ]
          }
        ],
        "x-auth-mode": "BINARY"
      },
      "post": {
        "tags": [
          "Snapshots"
        ],
        "summary": "Complete snapshot upload session",
        "description": "Completes the database upload by closing the upload session, upgrading the database if appropriate, and scheduling analysis of that snapshot of the codebase.\n\nYou can view the analysis progress and access the results using the `task-result-url`.\n",
        "operationId": "completeUpload",
        "parameters": [
          {
            "name": "session-id",
            "in": "path",
            "description": "The id of the upload session.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted. Analysis triggered. Tracking data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/operation"
                },
                "examples": {
                  "analysisRequestExample": {
                    "$ref": "#/components/examples/analysisRequestExample"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": [
              "snapshots:write"
            ]
          }
        ],
        "x-auth-mode": "BINARY"
      },
      "delete": {
        "tags": [
          "Snapshots"
        ],
        "summary": "Abort database upload process",
        "description": "Aborts the specified upload session and deletes any uploaded parts. After the session is aborted it cannot be restarted.\nIf any part uploads are in progress when the session is aborted, their data may not be deleted. To ensure that uploaded parts are deleted correctly, you should only abort an upload session after all part uploads have completed.\n",
        "operationId": "abortUpload",
        "parameters": [
          {
            "name": "session-id",
            "in": "path",
            "description": "The id of the upload session.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Aborted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/operation"
                },
                "examples": {
                  "abortUploadoperation": {
                    "summary": "An aborted upload session.",
                    "description": "A summary of the aborted upload session. Aborted sessions have an analysis status of `failure` in the API response and in LGTM.",
                    "value": {
                      "id": "ec741d71eeb55250ddca33800f0ee06e77ccfd7f",
                      "project": {
                        "id": 1548859144386,
                        "url-identifier": "g/apache/commons-io",
                        "name": "apache/commons-io",
                        "url": "https://lgtm.example.com/projects/g/apache/commons-io"
                      },
                      "commit-id": "04d7a2300feec9bbcc48185e370e3b5d3ae4da9d",
                      "languages": [
                        {
                          "language": "java",
                          "status": "failure"
                        }
                      ],
                      "log-url": "https://lgtm.example.com/projects/g/apache/commons-io/logs/analysis/ec741d71eeb55250ddca33800f0ee06e77ccfd7f",
                      "results-url": "https://lgtm.example.com/projects/g/apache/commons-io/analysis/ec741d71eeb55250ddca33800f0ee06e77ccfd7f/files"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": [
              "snapshots:write"
            ]
          }
        ],
        "x-auth-mode": "BINARY"
      }
    },
    "/analyses/{project-id}": {
      "post": {
        "tags": [
          "Analyses"
        ],
        "summary": "Run analysis of a specific commit",
        "description": "Trigger the analysis of a specific commit to a project. If a previous attempt to analyze that commit failed, this triggers a fresh analysis.  This is supported for all LGTM projects, regardless of repository type or host. The commit must be available in the main repository, but can be on a branch that isn't tracked by LGTM. For both LGTM.com and LGTM Enterprise, you must include an access token with the `analyses:write` scope.\n\nWhen you request the analysis of a commit, the API returns:\n- `operation-id`: used to track the status of the task using the `/operations` endpoint. For more information, see [Get operation status](https://lgtm.com/help/lgtm/api/api-v1#opIdgetOperation).\n- `status`: initially pending.\n- `task-result`: containing information about the progress and results of the analysis.\n",
        "operationId": "requestAnalysis",
        "parameters": [
          {
            "name": "project-id",
            "in": "path",
            "description": "The numeric project identifier.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "commit",
            "in": "query",
            "description": "The identifier of the commit to analyze.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "query",
            "description": "The language codes of the languages to analyze.\nFor a list of available languages, see [Supported languages](https://lgtm.com/help/lgtm/analysis-faqs#which-languages-are-supported). To specify more than one language, this parameter can be repeated. If no language is specified, all the project's languages will be analyzed.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 10,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted. Analysis triggered. Tracking data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/operation"
                },
                "examples": {
                  "analysisRequestExample": {
                    "$ref": "#/components/examples/analysisRequestExample"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": [
              "analyses:write"
            ]
          }
        ],
        "x-auth-mode": "BINARY"
      }
    },
    "/analyses/{project-id}/commits/{commit-id}": {
      "get": {
        "tags": [
          "Analyses"
        ],
        "summary": "Get analysis summary for a specific commit",
        "description": "Get a summary of the analysis results for a specific commit, or the latest commit, to a project. (For projects configured for sparse or upload analysis, only `latest` is supported.) \n\nThis endpoint reports a summary of results for each language, and also the analysis identifier. You can use the analysis identifier to download full details of all the alerts  found by the analysis. For more information, see [Get detailed alert information](https://lgtm.com/help/lgtm/api/api-v1#opIdgetAlerts).\n",
        "operationId": "getAnalysisForCommit",
        "parameters": [
          {
            "name": "project-id",
            "in": "path",
            "description": "The numeric project identifier.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "commit-id",
            "in": "path",
            "description": "The identifier of a specific commit. Alternatively, use `latest` for the most recent analyzed commit.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/analysis"
                },
                "examples": {
                  "analysisExample": {
                    "$ref": "#/components/examples/analysisExample"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": [
              "analyses:read"
            ]
          }
        ],
        "x-auth-mode": "BINARY"
      }
    },
    "/analyses/{analysis-id}": {
      "get": {
        "tags": [
          "Analyses"
        ],
        "summary": "Get analysis summary",
        "description": "Get a summary of the analysis results for a specific analysis identifier.\n\nTo find the analysis identifier for a commit, use the `/analyses/{project-id}/commits/{commit-id}` endpoint. For more information, see [Get analysis summary for a specific commit](https://lgtm.com/help/lgtm/api/api-v1#opIdgetAnalysisForCommit).\n\nThis endpoint reports the commit analyzed and a summary of the results for each language. Alternatively, you can use this identifier to download full details  of all the alerts found by the analysis. For more information, see [Get detailed alert information](https://lgtm.com/help/lgtm/api/api-v1#opIdgetAlerts).\n",
        "operationId": "getAnalysis",
        "parameters": [
          {
            "name": "analysis-id",
            "in": "path",
            "description": "The analysis identifier.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 40,
              "minLength": 40,
              "pattern": "[a-f0-9]+",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Requested data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/analysis"
                },
                "examples": {
                  "analysisExample": {
                    "$ref": "#/components/examples/analysisExample"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": [
              "analyses:read"
            ]
          }
        ],
        "x-auth-mode": "BINARY"
      }
    },
    "/analyses/{analysis-id}/alerts": {
      "get": {
        "tags": [
          "Analyses"
        ],
        "summary": "Get detailed alert information",
        "description": "Download all the alerts found by an analysis.\nUse the `Accept:` request header to specify the output media type as either CSV or [SARIF](https://lgtm.com/help/lgtm/sarif-results-file): \n\n- `application/sarif+json`: Alerts in SARIF format. If no version is specified the latest supported SARIF version is used.\n- `application/json`: Alerts in SARIF format (*deprecated*). \n  If no version is specified, [SARIF 2.0.0](http://docs.oasis-open.org/sarif/sarif/v2.0/sarif-v2.0.html) \n  is used for backwards compatibility.\n\n- `text/csv`: Alerts in CSV format. The `text/csv` media type has two optional parameters:\n   - `charset`: determines the character encoding of the text, by default UTF-8.\n   - `header`: determines whether a header row with column names is `present` or `absent`.\n      The default value for this parameter is `present`.\n      For example, an Accept header with value `text/csv; header=absent` \n      would result in CSV output without a header row.\n    \n\n\n\nTo find the analysis identifier for a commit, use the `/analyses/{project-id}/commits/{commit-id}`  endpoint. For more information, see [Get analysis summary for a specific commit](https://lgtm.com/help/lgtm/api/api-v1#opIdgetAnalysisForCommit). \n",
        "operationId": "getAlerts",
        "parameters": [
          {
            "name": "analysis-id",
            "in": "path",
            "description": "The analysis identifier.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sarif-version",
            "in": "query",
            "description": "The desired version of the SARIF format. Currently supported versions are `1.0.0`, `2.0.0`, and `2.1.0`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excluded-files",
            "in": "query",
            "description": "Set `true` to include results in files that are excluded from the output by default. This includes results in test code and generated files. For more information, see [File classification](https://lgtm.com/help/lgtm/file-classification).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Requested data returned.",
            "content": {
              "application/sarif+json": {
                "schema": {
                  "type": "object"
                },
                "examples": {}
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                },
                "examples": {}
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "deprecated": true
                },
                "examples": {}
              }
            }
          }
        },
        "security": [
          {
            "access-token": [
              "analyses:read"
            ]
          }
        ],
        "x-auth-mode": "BINARY"
      }
    },
    "/codereviews/{project-id}": {
      "post": {
        "tags": [
          "Code reviews"
        ],
        "summary": "Run code review for a patch",
        "description": "Trigger the code review of a patch. This is available for projects with Git repositories.\n\nYour request must include:\n\n  * Identifier for the base commit\n  * Patch generated using `git diff --binary` (see [git diff](https://git-scm.com/docs/git-diff))\n  * Header `Content-Type: application/octet-stream`\n  * For both LGTM.com and LGTM Enterprise, an access token with the `codereviews:write` scope\n\nNote that if you make a request using Curl, you'll also need to add `--data-binary` to the request to ensure that the patch you supply in the body is sent with newlines unchanged.\nYou can track the progress of the review using the task result URL returned on creation of the task, or by calling the `/operations` endpoint with the operations identifier returned by the request. For more information, see [Get operation status](https://lgtm.com/help/lgtm/api/api-v1#opIdgetOperation). Alternatively, if you supply a callback URL you'll get a post-back automatically on completion of the review.\n\nWhen the review is complete, you can access the results using the task result URL.\n",
        "operationId": "requestReview",
        "parameters": [
          {
            "name": "project-id",
            "in": "path",
            "description": "The numeric project identifier.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "base",
            "in": "query",
            "description": "The identifier for the base commit.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "external-id",
            "in": "query",
            "description": "Your reference number for the code review.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": "integer"
          },
          {
            "name": "review-url",
            "in": "query",
            "description": "An informative back-link to an external system.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "callback-url",
            "in": "query",
            "description": "The callback URL for LGTM to post to on completion of the review.\nWhen the code review is complete, the API sends an HTTP POST request to the callback URL with the result of the code review in the request body. The code review results in the request body are identical to the results accessed through the [`/codereviews/{review-id}`](https://lgtm.com/help/lgtm/api/api-v1#opIdgetCodeReview) end-point.\nIf you specify a `callback-secret`, the request also includes an `x-lgtm-signature` header with a digital signature of the request's contents.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "callback-secret",
            "in": "query",
            "description": "The `callback-secret` is used to compute a signature which is included in the `x-lgtm-signature` header of the callback response.\nThe receiver of the callback can check the validity of the response by computing the signature using HMAC-SHA1 and verifying that it matches the `x-lgtm-signature` header value.\nThe HMAC algorithm requires byte sequences as inputs for both the secret and the message. The callback secret string must be converted to bytes using UTF-8 encoding. The response body should ideally be read as a plain byte sequence. Conversion to, for example a JSON object, and back to a byte sequence might change the formatting, and would invalidate the signature.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The patch containing the code changes for review.",
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              },
              "examples": {
                "patchFile": {
                  "description": "The request body must contain a patch file generated using `git diff --binary`, see [git diff](https://git-scm.com/docs/git-diff), for example:\n```text\n  diff --git a/describe.c b/describe.c\n  index db827ffaba..510eaf4866 100644\n  --- a/describe.c\n  +++ b/describe.c\n  @@ -132,7 +132,8 @@ void describe(char *arg)\n      if (n) {\n        printf(\"%s-g%s\\n\", n->path,\n              find(cmit->key, abbrev));\n  -     clear(cmit, SEEN);\n  +     if (!last_one)\n  +       clear(cmit, SEEN);\n        return;\n      }\n    }\n```\n",
                  "value": "The contents of a binary patch file"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted. Code review triggered. Tracking data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/operation"
                },
                "examples": {
                  "requestcode-reviewExample": {
                    "$ref": "#/components/examples/requestcode-reviewExample"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": [
              "codereviews:write"
            ]
          }
        ],
        "x-auth-mode": "BINARY"
      }
    },
    "/codereviews/{review-id}": {
      "get": {
        "tags": [
          "Code reviews"
        ],
        "summary": "Get results of code review",
        "description": "Get the results of a code review using the review identifier for the task.\n\nWhen you request a code review, the response includes a task result URL of the form: `/codereviews/{review-id}`.\n\nThis endpoint reports the results of a complete code review, or the status of a review  that's still in progress.\n",
        "operationId": "getCodeReview",
        "parameters": [
          {
            "name": "review-id",
            "in": "path",
            "description": "The identifier for the review (from the `task-result-url`).",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Requested data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/code-review"
                  }
                },
                "examples": {
                  "code-review": {
                    "summary": "A successful code review",
                    "description": "A successful code review with 1 fixed alert.",
                    "value": {
                      "id": "b45e291e7033460949ec986153c5416d22157d3e",
                      "status": "success",
                      "status-message": "Analysis succeeded",
                      "languages": [
                        {
                          "language": "javascript",
                          "status": "success",
                          "status-message": "1 fixed alert",
                          "new": 0,
                          "fixed": 1,
                          "alerts": [
                            {
                              "query": {
                                "id": 3717280014,
                                "pack": "com.lgtm/javascript-queries",
                                "name": "Duplicate switch case",
                                "language": "javascript",
                                "properties": {
                                  "id": "js/duplicate-switch-case",
                                  "name": "Duplicate switch case",
                                  "severity": "warning",
                                  "tags": [
                                    "maintainability",
                                    "correctness",
                                    "external/cwe/cwe-561"
                                  ]
                                },
                                "url": "https://lgtm.example.com/rules/3717280014/"
                              },
                              "new": 0,
                              "fixed": 1
                            }
                          ]
                        }
                      ],
                      "results-url": "https://lgtm.example.com/projects/g/yarnpkg/yarn/rev/pr-b45e291e7033460949ec986153c5416d22157d3e"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": [
              "codereviews:read"
            ]
          }
        ],
        "x-auth-mode": "BINARY"
      }
    }
  },
  "components": {
    "schemas": {
      "queryjob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The identifier for the QueryJob.",
            "example": "b45e291e7033460949ec986153c5416d22157d3e"
          },
          "stats": {
            "$ref": "#/components/schemas/queryjob_stats"
          },
          "result-url": {
            "type": "string",
            "description": "URL to view the result of the query job.",
            "example": "https://lgtm.com/api/v1.0/query/b45e291e7033460949ec986153c5416d22157d3e"
          }
        },
        "example": {
          "stats": {
            "success-with-result": 3,
            "pending": 1,
            "success-without-result": 5,
            "failed": 1,
            "successful": 8
          },
          "result-url": "https://lgtm.com/api/v1.0/query/b45e291e7033460949ec986153c5416d22157d3e",
          "id": "b45e291e7033460949ec986153c5416d22157d3e"
        }
      },
      "metrics-list": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "The list of names and identifiers by which the metrics are referenced.",
            "items": {
              "$ref": "#/components/schemas/metric-name"
            }
          }
        },
        "example": {
          "data": [
            {
              "metric-id": "metric-id",
              "description": "description"
            },
            {
              "metric-id": "metric-id",
              "description": "description"
            }
          ]
        }
      },
      "project": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The numeric identifier of the project.",
            "format": "int64",
            "example": 1234567
          },
          "url-identifier": {
            "type": "string",
            "description": "The URL identifier of the project.",
            "example": "g/apache/commons-io"
          },
          "name": {
            "type": "string",
            "description": "The display name of the project.",
            "example": "Apache Commons IO"
          },
          "url": {
            "type": "string",
            "description": "The full URL of the project on LGTM.",
            "example": "https://lgtm.example.com/projects/g/apache/commons-io"
          }
        },
        "example": {
          "url-identifier": "g/apache/commons-io",
          "name": "Apache Commons IO",
          "id": 1234567,
          "url": "https://lgtm.example.com/projects/g/apache/commons-io"
        }
      },
      "project-language-stats": {
        "allOf": [
          {
            "$ref": "#/components/schemas/language-stats"
          },
          {
            "type": "object",
            "properties": {
              "grade": {
                "type": "string",
                "description": "The grade of the code for this language.",
                "example": "A+",
                "enum": [
                  "A+",
                  "A",
                  "B",
                  "C",
                  "D",
                  "E"
                ]
              }
            }
          }
        ]
      },
      "queryjob-results-overview": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/queryjob-results-overview-entry"
            }
          },
          "next": {
            "type": "string"
          }
        },
        "example": {
          "data": [
            {
              "status": "success",
              "results": 10,
              "project": {
                "url-identifier": "g/apache/commons-io",
                "name": "Apache Commons IO",
                "id": 1234567,
                "url": "https://lgtm.example.com/projects/g/apache/commons-io"
              }
            },
            {
              "status": "error",
              "error": "Generic Error",
              "project": {
                "url-identifier": "g/apache/maven",
                "name": "Apache Maven",
                "id": 42530,
                "url": "https://lgtm.example.com/projects/g/apache/maven"
              }
            }
          ],
          "next": "https://lgtm.example.com/api/v1.0/queryjobs/2123/results?start=AXBe"
        }
      },
      "measurement": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The date and time when this metric was computed.",
            "format": "date-time"
          },
          "value": {
            "type": "number",
            "description": "The value of this metric at the timestamp reported."
          }
        },
        "example": {
          "value": 0.8008281904610115,
          "timestamp": "2000-01-23T04:56:07.000+00:00"
        }
      },
      "queryjob-results-overview-entry": {
        "type": "object",
        "properties": {
          "project": {
            "$ref": "#/components/schemas/project"
          },
          "status": {
            "type": "string",
            "description": "Describes whether the query was sucessfully executed against the project.",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          },
          "total": {
            "type": "integer",
            "description": "Number of results returned by the query. This is broken down further into `internal` and `external` results. Only applies if `status` is `success`.\n",
            "format": "int32",
            "example": 11
          },
          "internal": {
            "type": "integer",
            "description": "Number of results that refer to elements within the source tree. Only applies if `status` is `success`.",
            "format": "int32",
            "example": 1
          },
          "external": {
            "type": "integer",
            "description": "Number of results that refer to elements outside the source tree (e.g., libraries). Only applies if `status` is `success`.",
            "format": "int32",
            "example": 10
          },
          "error": {
            "type": "string",
            "description": "Error message. Only applies if `status` is `error`."
          }
        }
      },
      "code-review": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The identifier for the review.",
            "example": "b45e291e7033460949ec986153c5416d22157d3e"
          },
          "results-url": {
            "type": "string",
            "description": "A page on LGTM to view the status and results of this code review.",
            "example": "https://lgtm.example.com/projects/g/yarnpkg/yarn/rev/pr-b45e291e7033460949ec986153c5416d22157d3e"
          },
          "status": {
            "type": "string",
            "description": "The status of the code review.",
            "example": "success",
            "enum": [
              "pending",
              "failure",
              "success"
            ]
          },
          "status-message": {
            "type": "string",
            "description": "A summary of the current status of the code review.",
            "example": "Analysis succeeded"
          },
          "languages": {
            "type": "array",
            "description": "Detailed information for each language analyzed.",
            "items": {
              "$ref": "#/components/schemas/codereview_languages"
            }
          }
        },
        "example": {
          "id": "b45e291e7033460949ec986153c5416d22157d3e",
          "status": "success",
          "status-message": "Analysis succeeded",
          "languages": [
            {
              "language": "javascript",
              "status": "success",
              "status-message": "1 fixed alert",
              "new": 0,
              "fixed": 1,
              "alerts": [
                {
                  "new": 0,
                  "query": {
                    "name": "Incomplete string escaping or encoding"
                  },
                  "fixed": 1
                }
              ]
            }
          ],
          "results-url": "https://lgtm.example.com/projects/g/yarnpkg/yarn/rev/pr-b45e291e7033460949ec986153c5416d22157d3e"
        }
      },
      "queryjob-project-results": {
        "type": "object",
        "properties": {
          "project": {
            "$ref": "#/components/schemas/project"
          },
          "columns": {
            "type": "array",
            "description": "Columns returned by the query.",
            "items": {
              "type": "string"
            }
          },
          "data": {
            "type": "array",
            "description": "Results of the query divided by row.",
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/query-result-entry"
              }
            }
          },
          "next": {
            "type": "string",
            "description": "URL for retrieving the next part of the results (if applicable)."
          }
        },
        "example": {
          "project": {
            "url-identifier": "g/apache/commons-io",
            "name": "Apache Commons IO",
            "id": 1234567,
            "url": "https://lgtm.example.com/projects/g/apache/commons-io"
          },
          "columns": [
            "Column A",
            "Column B"
          ],
          "data": [
            [
              {
                "file": "/path/to/file.txt",
                "line": 100,
                "value": "Alert 1",
                "url": "https://lgtm.example.com/projects/g/apache/commons-io/snapshot/271554d09bb63cb546aa5151916588c320533395/files/path/to/file.txt#L100"
              },
              {
                "value": "Value B"
              }
            ]
          ],
          "next": "https://lgtm.example.com/api/v1.0/queryjobs/results/1234567?start=AXBe&limit=100"
        }
      },
      "metric-name": {
        "type": "object",
        "properties": {
          "metric-id": {
            "type": "string",
            "description": "The identifier by which this metric is referenced in the API."
          },
          "description": {
            "type": "string",
            "description": "The name by which the metric is listed in the user interface."
          }
        },
        "example": {
          "metric-id": "metric-id",
          "description": "description"
        }
      },
      "query": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The numeric identifier of the query.",
            "format": "int64",
            "example": 10000
          },
          "pack": {
            "type": "string",
            "description": "The name of the query pack that contains the query.",
            "example": "com.lgtm/javascript-queries"
          },
          "name": {
            "type": "string",
            "description": "The `@name` of the query.",
            "example": "Incomplete string escaping or encoding",
            "deprecated": true
          },
          "language": {
            "type": "string",
            "description": "The [language code](https://lgtm.com/help/lgtm/analysis-faqs#which-languages-are-supported) of the query.",
            "example": "javascript"
          },
          "properties": {
            "$ref": "#/components/schemas/query_properties"
          },
          "url": {
            "type": "string",
            "description": "A page on LGTM to view the details of the query.",
            "example": "https://lgtm.example.com/rules/1000774/"
          }
        }
      },
      "health": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "The status of the service.",
            "example": "UP",
            "enum": [
              "UNKNOWN",
              "UP",
              "DOWN"
            ]
          },
          "description": {
            "type": "string",
            "description": "A description of the status of the service."
          },
          "details": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/health"
            },
            "description": "Details of the health of the service. This contains information about the status of the components on which the service depends."
          }
        },
        "example": {
          "description": "description",
          "details": {},
          "status": "UP"
        }
      },
      "analysis": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The analysis identifier.",
            "example": "2e65208b2f1872634132566a1a0ce6392407297c"
          },
          "project": {
            "$ref": "#/components/schemas/project"
          },
          "commit-id": {
            "type": "string",
            "description": "The commit identifier.\nThe commit identifier is included only if the same commit was successfully analyzed for all languages. A detailed breakdown of which commit was analyzed for each language is provided in the `languages` property.\n",
            "example": "04d7a2300feec9bbcc48185e370e3b5d3ae4da9d"
          },
          "languages": {
            "type": "array",
            "description": "Per-language information.",
            "items": {
              "$ref": "#/components/schemas/language-stats"
            }
          },
          "log-url": {
            "type": "string",
            "description": "A page on LGTM to view the logs for this analysis.",
            "example": "https://lgtm.example.com/projects/g/yarnpkg/yarn/logs/analysis/2e65208b2f1872634132566a1a0ce6392407297c"
          },
          "results-url": {
            "type": "string",
            "description": "A page on LGTM to view the results of this analysis.",
            "example": "https://lgtm.example.com/projects/g/yarnpkg/yarn/analysis/2e65208b2f1872634132566a1a0ce6392407297c/files"
          }
        },
        "example": {
          "languages": [
            {
              "alerts": 628,
              "commit-date": "2000-01-23T04:56:07.000+00:00",
              "language": "javascript",
              "lines": 133298,
              "commit-id": "04d7a2300feec9bbcc48185e370e3b5d3ae4da9d",
              "analysis-date": "2000-01-23T04:56:07.000+00:00",
              "status": "success"
            },
            {
              "alerts": 628,
              "commit-date": "2000-01-23T04:56:07.000+00:00",
              "language": "javascript",
              "lines": 133298,
              "commit-id": "04d7a2300feec9bbcc48185e370e3b5d3ae4da9d",
              "analysis-date": "2000-01-23T04:56:07.000+00:00",
              "status": "success"
            }
          ],
          "project": {
            "url-identifier": "g/apache/commons-io",
            "name": "Apache Commons IO",
            "id": 1234567,
            "url": "https://lgtm.example.com/projects/g/apache/commons-io"
          },
          "log-url": "https://lgtm.example.com/projects/g/yarnpkg/yarn/logs/analysis/2e65208b2f1872634132566a1a0ce6392407297c",
          "id": "2e65208b2f1872634132566a1a0ce6392407297c",
          "commit-id": "04d7a2300feec9bbcc48185e370e3b5d3ae4da9d",
          "results-url": "https://lgtm.example.com/projects/g/yarnpkg/yarn/analysis/2e65208b2f1872634132566a1a0ce6392407297c/files"
        }
      },
      "query_properties": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The `@id` of the query.",
            "example": "js/incomplete-sanitization"
          },
          "name": {
            "type": "string",
            "description": "The `@name` of the query.",
            "example": "Incomplete string escaping or encoding"
          },
          "severity": {
            "type": "string",
            "description": "The `@problem.severity` of the query.",
            "example": "warning"
          },
          "tags": {
            "type": "array",
            "description": "The `@tags` associated with the query.",
            "example": [
              "correctness",
              "security",
              "external/cwe/cwe-116"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "version": {
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string",
            "description": "The version number of the API.",
            "example": "1.0"
          }
        },
        "example": {
          "apiVersion": "1.0"
        }
      },
      "project-list": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "A single page of projects.",
            "items": {
              "$ref": "#/components/schemas/project"
            }
          },
          "nextPageUrl": {
            "type": "string",
            "description": "The URL to retrieve the next page of projects. Omitted if there is no next page.",
            "example": "https://lgtm.example.com/api/v1.0/projects?start=AVAIySnWtmGBpZjIb27kbrqB2uK2HIU0Zk9Sfh19ya8nxzA4GE5bv9LxVPSjQCwHKThqAADNvp17WuWBuBe8901G-ryeA2tLD6JZh8lue2IM0EuqsqB9Wk5BAM6T0lEnXA"
          }
        },
        "example": {
          "nextPageUrl": "https://lgtm.example.com/api/v1.0/projects?start=AVAIySnWtmGBpZjIb27kbrqB2uK2HIU0Zk9Sfh19ya8nxzA4GE5bv9LxVPSjQCwHKThqAADNvp17WuWBuBe8901G-ryeA2tLD6JZh8lue2IM0EuqsqB9Wk5BAM6T0lEnXA",
          "data": [
            {
              "url-identifier": "g/apache/commons-io",
              "name": "Apache Commons IO",
              "id": 1234567,
              "url": "https://lgtm.example.com/projects/g/apache/commons-io"
            },
            {
              "url-identifier": "g/apache/commons-io",
              "name": "Apache Commons IO",
              "id": 1234567,
              "url": "https://lgtm.example.com/projects/g/apache/commons-io"
            }
          ]
        }
      },
      "codereview_alerts": {
        "type": "object",
        "properties": {
          "query": {
            "$ref": "#/components/schemas/query"
          },
          "new": {
            "type": "integer",
            "description": "The number of alerts introduced by the patch for this query.",
            "format": "int32",
            "example": 0
          },
          "fixed": {
            "type": "integer",
            "description": "The number of alerts fixed by the patch for this query.",
            "format": "int32",
            "example": 1
          }
        }
      },
      "upload-session": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The identifier of the upload session",
            "example": "0bc9f13977e364395e8527515da9cbfa0e741cb035fe571197e82e0dd549416d"
          },
          "url": {
            "type": "string",
            "description": "The URL for uploading file content.",
            "format": "uri",
            "example": "https://lgtm.example.com/api/v1.0/snapshots/uploads/0bc9f13977e364395e8527515da9cbfa0e741cb035fe571197e82e0dd549416d"
          }
        },
        "example": {
          "id": "0bc9f13977e364395e8527515da9cbfa0e741cb035fe571197e82e0dd549416d",
          "url": "https://lgtm.example.com/api/v1.0/snapshots/uploads/0bc9f13977e364395e8527515da9cbfa0e741cb035fe571197e82e0dd549416d"
        }
      },
      "metric": {
        "type": "object",
        "properties": {
          "metric-id": {
            "type": "string",
            "description": "The identifier by which this metric is referenced in the API."
          },
          "measurements": {
            "type": "array",
            "description": "A time series of values taken by the metric at different timestamps.",
            "items": {
              "$ref": "#/components/schemas/measurement"
            }
          }
        },
        "example": {
          "metric-id": "metric-id",
          "measurements": [
            {
              "value": 0.8008281904610115,
              "timestamp": "2000-01-23T04:56:07.000+00:00"
            },
            {
              "value": 0.8008281904610115,
              "timestamp": "2000-01-23T04:56:07.000+00:00"
            }
          ]
        }
      },
      "query-result-entry": {
        "type": "object",
        "properties": {
          "line": {
            "type": "integer",
            "format": "int32"
          },
          "file": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "url": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "codereview_languages": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string",
            "description": "The language analyzed.",
            "example": "javascript"
          },
          "status": {
            "type": "string",
            "description": "The status for analysis of this language.",
            "example": "success",
            "enum": [
              "pending",
              "failure",
              "success"
            ]
          },
          "status-message": {
            "type": "string",
            "description": "The current state of analysis of this langauge. When available, a summary of analysis results.",
            "example": "1 fixed alert"
          },
          "new": {
            "type": "integer",
            "description": "The total number of alerts introduced by the patch for this language.",
            "format": "int32",
            "example": 0
          },
          "fixed": {
            "type": "integer",
            "description": "The total number of alerts fixed by the patch for this language.",
            "format": "int32",
            "example": 1
          },
          "alerts": {
            "type": "array",
            "description": "The list of added and fixed alerts per query for this language.",
            "items": {
              "$ref": "#/components/schemas/codereview_alerts"
            }
          }
        }
      },
      "language-stats": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string",
            "description": "The short name for the language.",
            "example": "javascript"
          },
          "status": {
            "type": "string",
            "description": "The status of the analysis of this language.",
            "example": "success",
            "enum": [
              "success",
              "failure",
              "pending"
            ]
          },
          "alerts": {
            "type": "integer",
            "description": "The number of alerts for this language.",
            "format": "int32",
            "example": 628
          },
          "lines": {
            "type": "integer",
            "description": "The number of lines of code for this language.",
            "format": "int32",
            "example": 133298
          },
          "commit-id": {
            "type": "string",
            "description": "The latest successfully analyzed commit for the language. All statistics refer to this commit.",
            "example": "04d7a2300feec9bbcc48185e370e3b5d3ae4da9d"
          },
          "commit-date": {
            "type": "string",
            "description": "The time of the commit.",
            "format": "date-time"
          },
          "analysis-date": {
            "type": "string",
            "description": "The time the commit was analyzed.",
            "format": "date-time"
          }
        },
        "example": {
          "alerts": 628,
          "commit-date": "2000-01-23T04:56:07.000+00:00",
          "language": "javascript",
          "lines": 133298,
          "commit-id": "04d7a2300feec9bbcc48185e370e3b5d3ae4da9d",
          "analysis-date": "2000-01-23T04:56:07.000+00:00",
          "status": "success"
        }
      },
      "queryjob_stats": {
        "type": "object",
        "properties": {
          "successful": {
            "type": "integer",
            "description": "The number of projects for which the query completed succesfully. These are broken down further between the ones that have results (`success-with-result`) and the ones that do not (`success-without-result`): `successful = success-with-result + success-without-result`.\n",
            "format": "int32",
            "example": 8
          },
          "success-with-result": {
            "type": "integer",
            "description": "The number of projects for which the query returned results.",
            "format": "int32",
            "example": 3
          },
          "success-without-result": {
            "type": "integer",
            "description": "The number of projects for which the query was successful but returned no results.",
            "format": "int32",
            "example": 5
          },
          "failed": {
            "type": "integer",
            "description": "The number of projects for which the query failed.",
            "format": "int32",
            "example": 1
          },
          "pending": {
            "type": "integer",
            "description": "The number of projects scheduled for execution but pending. For very large jobs, not all projects are scheduled at the same time. Therefore, this number might increase as more projects are scheduled. This means that `successful + failed + pending` might be smaller than the total number of project that will be analyzed.\n",
            "format": "int32",
            "example": 1
          }
        },
        "example": {
          "success-with-result": 3,
          "pending": 1,
          "success-without-result": 5,
          "failed": 1,
          "successful": 8
        }
      },
      "operation": {
        "required": [
          "task-type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The identifier for the operation.",
            "format": "int64",
            "example": 7654321
          },
          "uploads": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/upload-session"
            }
          },
          "status": {
            "type": "string",
            "description": "Status of the operation.",
            "example": "pending",
            "enum": [
              "pending",
              "done"
            ]
          },
          "task-type": {
            "type": "string",
            "enum": [
              "analysis",
              "codereview",
              "queryjob"
            ]
          },
          "task-result": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/analysis"
              },
              {
                "$ref": "#/components/schemas/code-review"
              },
              {
                "$ref": "#/components/schemas/queryjob"
              }
            ]
          },
          "task-result-url": {
            "type": "string",
            "description": "The URL for the result of the task. For some operations, included only on completion.",
            "example": "https://lgtm.example.com/api/v1.0/codereviews/b45e291e7033460949ec986153c5416d22157d3e"
          }
        },
        "example": {
          "task-result": "",
          "task-type": "analysis",
          "task-result-url": "https://lgtm.example.com/api/v1.0/codereviews/b45e291e7033460949ec986153c5416d22157d3e",
          "id": 7654321,
          "uploads": {
            "key": {
              "id": "0bc9f13977e364395e8527515da9cbfa0e741cb035fe571197e82e0dd549416d",
              "url": "https://lgtm.example.com/api/v1.0/snapshots/uploads/0bc9f13977e364395e8527515da9cbfa0e741cb035fe571197e82e0dd549416d"
            }
          },
          "status": "pending"
        }
      },
      "project-details": {
        "allOf": [
          {
            "$ref": "#/components/schemas/project"
          },
          {
            "type": "object",
            "properties": {
              "languages": {
                "type": "array",
                "description": "Per-language information.",
                "items": {
                  "$ref": "#/components/schemas/project-language-stats"
                }
              }
            }
          }
        ]
      }
    },
    "examples": {
      "analysisOperationExample": {
        "summary": "A successfully triggered task",
        "description": "Example of the initial response for a request to view the status of an operation. The response includes the task type and a link to the log page for the task.",
        "value": {
          "id": 1548841694385,
          "status": "pending",
          "task-type": "analysis",
          "task-result": {
            "languages": [
              {
                "language": "cpp",
                "status": "pending"
              },
              {
                "language": "csharp",
                "status": "pending"
              },
              {
                "language": "java",
                "status": "pending"
              },
              {
                "language": "javascript",
                "status": "pending"
              },
              {
                "language": "python",
                "status": "pending"
              }
            ],
            "log-url": "https://lgtm.com/logs/29a7017f6000333419dbb9829865e5786b91843d"
          }
        }
      },
      "externalOperationExample": {
        "summary": "A successfully triggered task to add a project in `upload` mode.",
        "description": "Example of the initial response for a task triggered by a request to add a project in `upload` mode for a repository with two languages. This includes the URLs where you should upload the two, externally-generated, databases for the project.",
        "value": {
          "id": 1548865134385,
          "uploads": {
            "java": {
              "id": "755e8beb6f33c1e7e6a70f8a30dfc0a2d62bbb70e2912e9668a563f21bbcd9fb",
              "url": "https://lgtm.example.com/api/v1.0/snapshots/uploads/755e8beb6f33c1e7e6a70f8a30dfc0a2d62bbb70e2912e9668a563f21bbcd9fb"
            },
            "javascript": {
              "id": "a8dcd65757901312f53f55d1cde2461a280309683fe99b0b3982f47e8adb9a49",
              "url": "https://lgtm.example.com/api/v1.0/snapshots/uploads/a8dcd65757901312f53f55d1cde2461a280309683fe99b0b3982f47e8adb9a49"
            }
          },
          "status": "pending",
          "task-type": "analysis",
          "task-result": {
            "commit-id": "c103e89d2151a9f83a1bab59e112a4bc41a8050d",
            "languages": [
              {
                "language": "java",
                "status": "pending"
              },
              {
                "language": "javascript",
                "status": "pending"
              }
            ],
            "log-url": "https://lgtm.example.com/logs/a5cfe527b55cecc91c45dba658775d482177495b"
          }
        }
      },
      "analysisExample": {
        "summary": "A successful analysis",
        "description": "A summary of the results of analysis. This includes links to the full results in LGTM and also to the log files generated during analysis.",
        "value": {
          "id": "2e65208b2f1872634132566a1a0ce6392407297c",
          "project": {
            "id": 123456789,
            "url-identifier": "g/apache/struts",
            "name": "Apache Struts",
            "url": "https://lgtm.example.com/projects/g/apache/struts"
          },
          "commit-id": "04d7a2300feec9bbcc48185e370e3b5d3ae4da9d",
          "results-url": "https://lgtm.example.com/projects/g/apache/struts/analysis/2e65208b2f1872634132566a1a0ce6392407297c/files",
          "log-url": "https://lgtm.example.com/projects/g/apache/struts/logs/analysis/2e65208b2f1872634132566a1a0ce6392407297c",
          "languages": [
            {
              "language": "java",
              "alerts": 139,
              "lines": 101498,
              "status": "success"
            },
            {
              "language": "javascript",
              "alerts": 9,
              "lines": 773,
              "status": "success"
            }
          ]
        }
      },
      "analysisRequestExample": {
        "summary": "A request for an analysis of a commit.",
        "description": "An operation entry tracking a running analysis task.",
        "value": {
          "id": 1508906426111,
          "status": "pending",
          "task-type": "analysis",
          "task-result": {
            "id": "3d5a71d2b87880432aadb8166e79f984b3611fda",
            "project": {
              "id": 38901173,
              "url-identifier": "g/apache/commons-io",
              "name": "apache/commons-io",
              "url": "https://lgtm.com/projects/g/apache/commons-io"
            },
            "commit-id": "559de2c461e94ab636c959149c775bb27111fb48",
            "languages": [
              {
                "language": "javascript",
                "status": "pending"
              },
              {
                "language": "java",
                "status": "pending"
              }
            ],
            "log-url": "https://lgtm.com/projects/g/apache/commons-io/logs/analysis/3d5a71d2b87880432aadb8166e79f984b3611fda",
            "results-url": "https://lgtm.com/projects/g/apache/commons-io/analysis/3d5a71d2b87880432aadb8166e79f984b3611fda/files"
          },
          "task-result-url": "https://lgtm.com/api/v1.0/analyses/3d5a71d2b87880432aadb8166e79f984b3611fda"
        }
      },
      "queryjobsRequestExample": {
        "summary": "Response to a request to run a query.",
        "description": "An operation entry tracking a query job task.",
        "value": {
          "id": 1508906426111,
          "status": "pending",
          "task-type": "queryjobs",
          "task-result": {
            "$ref": "#/components/examples/queryjobsResponseExample"
          },
          "task-result-url": "https://lgtm.com/api/v1.0/queryjobs/987654321"
        }
      },
      "queryjobsResponseExample": {
        "summary": "Status of a query job.",
        "description": "Example of the response to a request for the status of a running query job. The `stats` section reports the status for each project included in the query job. Use the `result-url` to see the results.\n",
        "value": {
          "id": "b45e291e7033460949ec986153c5416d22157d3e",
          "stats": {
            "successful": 8,
            "success-with-result": 3,
            "success-without-result": 5,
            "failed": 1,
            "pending": 1
          },
          "result-url": "https://lgtm.com/query/b45e291e7033460949ec986153c5416d22157d3e"
        }
      },
      "requestcode-reviewExample": {
        "summary": "A code review request.",
        "description": "A code review request, pending analysis for JavaScript.",
        "value": {
          "id": 1000013,
          "status": "pending",
          "task-type": "codereview",
          "task-result": {
            "id": "e866b685a22f5d644a3dc1c9c145f56aab7d4350",
            "results-url": "https://lgtm.com/projects/g/Semmle/code/rev/pr-e866b685a22f5d644a3dc1c9c145f56aab7d4350",
            "status": "pending",
            "status-message": "Starting up",
            "languages": [
              {
                "language": "javascript",
                "status": "pending",
                "status-message": "Starting up",
                "new": 0,
                "fixed": 0,
                "alerts": []
              }
            ]
          },
          "task-result-url": "https://lgtm.com/api/v1.0/codereviews/e866b685a22f5d644a3dc1c9c145f56aab7d4350"
        }
      },
      "metricExample": {
        "summary": "A metric",
        "description": "A time series of values for the metric.",
        "value": {
          "metric-id": "active-users",
          "measurements": [
            {
              "value": 1357,
              "timestamp": "2019-05-02T12:01:23.000+00:00"
            },
            {
              "value": 1234,
              "timestamp": "2019-05-01T11:35:22.000+00:00"
            }
          ]
        }
      },
      "metricsExample": {
        "summary": "A list of metric identifiers and descriptions",
        "description": "The list of identifiers (by which the various usage metrics can be referred to in the API), and their corresponding descriptions.",
        "value": {
          "data": [
            {
              "metric-id": "active-users",
              "description": "Users who have used the LGTM web application in the past 180 days"
            },
            {
              "metric-id": "java-projects",
              "description": "Projects with Java analysis"
            }
          ]
        }
      },
      "healthExample": {
        "summary": "Response to a request that included an access token with the scope `system:read`.",
        "description": "Example of a response for a system where all the core services are running well. Some of the worker services are not currently available to run tasks because  they are being provisioned or are booting up. The system can run `general` tasks but may not be able to run  `query` tasks that users request through the query console.\n",
        "value": {
          "status": "UP",
          "details": [
            {
              "database": {
                "status": "UP"
              }
            },
            {
              "file_storage": {
                "status": "UP"
              }
            },
            {
              "queue": {
                "status": "UP"
              }
            },
            {
              "search": {
                "status": "UP"
              }
            },
            {
              "workers": {
                "status": "UNKNOWN",
                "description": "The status of the least healthy worker type is UNKNOWN",
                "details": [
                  {
                    "QUERY": {
                      "status": "UNKNOWN",
                      "description": "The status of the healthiest of these workers is UNKNOWN",
                      "details": [
                        {
                          "query-001": {
                            "status": "UNKNOWN",
                            "description": "BOOTING"
                          }
                        }
                      ]
                    }
                  },
                  {
                    "GENERAL": {
                      "status": "UP",
                      "description": "The status of the healthiest of these workers is UP",
                      "details": [
                        {
                          "general-001": {
                            "status": "UP",
                            "description": "EXECUTING"
                          }
                        },
                        {
                          "general-002": {
                            "status": "UP",
                            "description": "IDLE"
                          }
                        },
                        {
                          "general-003": {
                            "status": "UP",
                            "description": "EXECUTING"
                          }
                        },
                        {
                          "general-004": {
                            "status": "PROVISIONING",
                            "description": "UNKNOWN"
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "snapshotPart": {
        "description": "The request body must contain a database part that was generated and prepared for upload to LGTM using the CodeQL CLI or the QL command-line tools.  For more information, see [Preparing snapshots to upload to LGTM](https://help.semmle.com/wiki/display/SD/Preparing+snapshots+to+upload+to+LGTM). \n",
        "value": "The name of database file to upload."
      }
    },
    "securitySchemes": {
      "access-token": {
        "type": "http",
        "description": "\n\nLGTM Enterprise users need to create and use an access token to authenticate with this API. This is optional for LGTM.com users unless they want to submit a CodeQL query for analysis of one or more projects, or to request the analysis of a patch or commit. LGTM.com users also need an access token to  check on the progress of long running tasks using the `/operations` endpoint.\nLog in to LGTM and use the **Create token** option in your Account settings page. For more detailed information, see [Authentication with the API](https://lgtm.com/help/lgtm/api/authentication-api) and [Managing access tokens](https://lgtm.com/help/lgtm/api/managing-access-tokens).\nIf you include an access token in the header of a request to the API  for data, it must have the scopes required by that endpoint. Access tokens are shown in the examples as: `Authorization: Bearer {access-token}`\n",
        "scheme": "bearer"
      }
    }
  }
}