category: Data Enrichment & Threat Intelligence
commonfields:
  id: Active Directory Query v2
  version: -1
configuration:
- display: Server IP address (e.g., 192.168.0.1)
  name: server_ip
  required: true
  type: 0
- display: Port. If not specified, default the port is 389, or 636 for LDAPS.
  name: port
  required: false
  type: 0
- display: Credentials
  name: credentials
  required: true
  type: 9
- display: NTLM authentication
  name: ntlm
  required: false
  type: 8
- display: Base DN (for example "dc=company,dc=com")
  name: base_dn
  required: true
  type: 0
- defaultvalue: '500'
  display: Page size
  name: page_size
  required: true
  type: 0
- defaultvalue: SSL
  display: Secure Connection
  name: secure_connection
  options:
  - None
  - SSL
  required: true
  type: 15
- display: Trust any certificate (unsecure)
  name: unsecure
  required: false
  type: 8
description: Active Direcory Query integration enables you to  access and manage Active
  Directory objects (users, contacts, and computers).
detaileddescription: |-
  Active Directory search uses paging. You set the page size by specifying the 'page size'
  parameter in the instance settings.
display: Active Directory Query v2
name: Active Directory Query v2
script:
  commands:
  - arguments:
    - default: false
      description: The username (samAccountName) of the user to modify
      isArray: false
      name: username
      required: true
      secret: false
    - default: false
      description: Root (e.g., DC=domain,DC=com)
      isArray: false
      name: base-dn
      required: false
      secret: false
    description: Expires the password of an Active Directory user.
    execution: false
    name: ad-expire-password
  - arguments:
    - default: false
      description: The username (samAccountName) of the user to be modified
      isArray: false
      name: username
      required: true
      secret: false
    - default: false
      description: The initial password to set for the user. The user will be asked
        to change the password after login.
      isArray: false
      name: password
      required: true
      secret: false
    - default: false
      description: The user's DN
      isArray: false
      name: user-dn
      required: true
      secret: false
    - default: false
      description: The user's display name
      isArray: false
      name: display-name
      required: false
      secret: false
    - default: false
      description: Short description of the user
      isArray: false
      name: description
      required: false
      secret: false
    - default: false
      description: User email.
      isArray: false
      name: email
      required: false
      secret: false
    - default: false
      description: The user's telephone number
      isArray: false
      name: telephone-number
      required: false
      secret: false
    - default: false
      description: The user's job title
      isArray: false
      name: title
      required: false
      secret: false
    - default: false
      description: Use to set basic or custom attributes of the user object, e.g.,
        custom-attributes="{"notes":"a note about the contact","company":"company
        name"}"
      isArray: false
      name: custom-attributes
      required: false
      secret: false
    description: Creates an Active Directory user. This command requires a secure
      connection (SSL,TLS). in order to use this command.
    execution: false
    name: ad-create-user
  - arguments:
    - default: false
      description: 'Query Active Directory in Active Directory syntax, e.g., this
        query will find all user objects, except Andy: "(&(objectCategory=person)(objectClass=user)(!(cn=andy)))"'
      isArray: false
      name: filter
      required: true
      secret: false
    - default: false
      description: Root (e.g. DC=domain,DC=com). By default, the Base DN configured
        for the instance will be used.
      isArray: false
      name: base-dn
      required: false
      secret: false
    - default: false
      description: CSV list of the object attributes to return, e.g., "dn,memberOf".
        To get all objects atributes, specify 'ALL'.
      isArray: false
      name: attributes
      required: false
      secret: false
    - default: false
      description: Maximum number of records to return
      isArray: false
      name: size-limit
      required: false
      secret: false
    - default: false
      description: Maximum time to pull records (in seconds)
      isArray: false
      name: time-limit
      required: false
      secret: false
    description: Runs Active Directory queries.
    execution: false
    name: ad-search
  - arguments:
    - default: false
      description: "The username of the user to add to the group. If this argument\
        \ is not specified, the computer name argument must be specified.\t"
      isArray: false
      name: username
      required: false
      secret: false
    - default: false
      description: The name of the computer to add to the group. If this argument
        is not specified, the username argument must be specified.
      isArray: false
      name: computer-name
      required: false
      secret: false
    - default: false
      description: The name of the group to add the user to
      isArray: false
      name: group-cn
      required: true
      secret: false
    - default: false
      description: Root (e.g., DC=domain,DC=com). By default, the Base DN configured
        for the instance will be used.
      isArray: false
      name: base-dn
      required: false
      secret: false
    description: Adds an Active Directory user or computer to a group.
    execution: false
    name: ad-add-to-group
  - arguments:
    - default: false
      description: "The name of the user to remove from the group. If this argument\
        \ is not specified, the computer name argument must be specified.\t"
      isArray: false
      name: username
      required: false
      secret: false
    - default: false
      description: The name of the computer to remove from the group. If this argument
        is not specified, the username argument must be specified.
      isArray: false
      name: computer-name
      required: false
      secret: false
    - default: false
      description: "The name of the group to remove the user from\t"
      isArray: false
      name: group-cn
      required: true
      secret: false
    - default: false
      description: Root (e.g., DC=domain,DC=com). By default, the Base DN configured
        for the instance will be used.
      isArray: false
      name: base-dn
      required: false
      secret: false
    description: Removes an Active Directory user or computer from a group.
    execution: false
    name: ad-remove-from-group
  - arguments:
    - default: false
      description: "The username of the account to update (sAMAccountName)\t"
      isArray: false
      name: username
      required: true
      secret: false
    - default: false
      description: The name of the attribute to modify (e.g., sn, displayName, mail,
        etc.)
      isArray: false
      name: attribute-name
      required: true
      secret: false
    - default: false
      description: "The value the attribute should be changed to\t"
      isArray: false
      name: attribute-value
      required: true
      secret: false
    - default: false
      description: Root (e.g. DC=domain,DC=com). By default, the Base DN configured
        for the instance will be used.
      isArray: false
      name: base-dn
      required: false
      secret: false
    description: Updates attributes of an existing Active Directory user.
    execution: false
    name: ad-update-user
  - arguments:
    - default: false
      description: The DN of the user to delete
      isArray: false
      name: user-dn
      required: true
      secret: false
    description: Deletes an Active Directory user.
    execution: false
    name: ad-delete-user
  - arguments:
    - default: false
      description: "The contact's DN\t"
      isArray: false
      name: contact-dn
      required: true
      secret: false
    - default: false
      description: "The contact's display name\t"
      isArray: false
      name: display-name
      required: false
      secret: false
    - default: false
      description: Short description of the contact
      isArray: false
      name: description
      required: false
      secret: false
    - default: false
      description: The contact's email address
      isArray: false
      name: email
      required: false
      secret: false
    - default: false
      description: The contact's telephone number
      isArray: false
      name: telephone-number
      required: false
      secret: false
    - default: false
      description: Use to set basic or custom attributes of the contact object, e.g.,
        custom-attributes="{"notes":"some note about the contact","company":"some
        company"}"
      isArray: false
      name: custom-attributes
      required: false
      secret: false
    - default: false
      description: The contact's job title
      isArray: false
      name: title
      required: false
      secret: false
    description: Creates an Active Directory contact.
    execution: false
    name: ad-create-contact
  - arguments:
    - default: false
      description: "The contact's DN\t"
      isArray: false
      name: contact-dn
      required: true
      secret: false
    - default: false
      description: "The attribute name to update\t"
      isArray: false
      name: attribute-name
      required: true
      secret: false
    - default: false
      description: "The attribute value to be updated\t"
      isArray: false
      name: attribute-value
      required: true
      secret: false
    description: Updates attributes of an existing Active Directory contact.
    execution: false
    name: ad-update-contact
  - arguments:
    - default: false
      description: "The username of the account to disable (sAMAccountName)\t"
      isArray: false
      name: username
      required: true
      secret: false
    - default: false
      description: Root (e.g., DC=domain,DC=com). By default, the Base DN configured
        for the instance will be used.
      isArray: false
      name: base-dn
      required: false
      secret: false
    description: Disables an Active Directory user account.
    execution: false
    name: ad-disable-account
  - arguments:
    - default: false
      description: "The username of the account to enable (sAMAccountName)\t"
      isArray: false
      name: username
      required: true
      secret: false
    - default: false
      description: Root (e.g., DC=domain,DC=com). By default, the Base DN configured
        for the instance will be used.
      isArray: false
      name: base-dn
      required: false
      secret: false
    description: Enables a previously disabled Active Directory account.
    execution: false
    name: ad-enable-account
  - arguments:
    - default: false
      description: "The username of the account to unlock (sAMAccountName)\t"
      isArray: false
      name: username
      required: true
      secret: false
    - default: false
      description: Root (e.g., DC=domain,DC=com). By default, the Base DN configured
        for the instance will be used.
      isArray: false
      name: base-dn
      required: false
      secret: false
    description: Unlocks a previously locked Active Directory user account.
    execution: false
    name: ad-unlock-account
  - arguments:
    - default: false
      description: "The username of the account to be disabled (sAMAccountName)\t"
      isArray: false
      name: username
      required: true
      secret: false
    - default: false
      description: "The password to set for the user\t"
      isArray: false
      name: password
      required: true
      secret: false
    - default: false
      description: Root (e.g. DC=domain,DC=com). Base DN configured for the instance
        will be used as default.
      isArray: false
      name: base-dn
      required: false
      secret: false
    description: Sets a new password for an Active Directory user. This command requires
      a secure connection (SSL,TLS).
    execution: false
    name: ad-set-new-password
  - arguments:
    - default: false
      description: "The computer name\t"
      isArray: false
      name: computer-name
      required: true
      secret: false
    - default: false
      description: Superior DN, e.g., OU=computers,DC=domain,DC=com (The specified
        domain must be the same as the current computer domain)
      isArray: false
      name: full-superior-dn
      required: false
      secret: false
    description: Modifies the computer organizational unit within a domain.
    execution: false
    name: ad-modify-computer-ou
  - arguments:
    - default: true
      description: Query by the user's Active Directory Distinguished Name
      isArray: false
      name: dn
      required: false
      secret: false
    - default: false
      description: Query by the user's name
      isArray: false
      name: name
      required: false
      secret: false
    - default: false
      description: Include these AD attributes of the resulting objects in addition
        to the default attributes
      isArray: false
      name: attributes
      required: false
      secret: false
    - default: false
      description: Query users by this custom field type
      isArray: false
      name: custom-field-type
      required: false
      secret: false
    - default: false
      description: Query users by this custom field data (relevant only if the `custom-field-type`
        argument is provided)
      isArray: false
      name: custom-field-data
      required: false
      secret: false
    - default: false
      description: Query users by the samAccountName attribute
      isArray: false
      name: username
      required: false
      secret: false
    - default: false
      description: Maximum number of objects to return (default is 20)
      isArray: false
      name: limit
      required: false
      secret: false
    - default: false
      description: Query by the user's email address
      isArray: false
      name: email
      required: false
      secret: false
    - auto: PREDEFINED
      default: false
      defaultValue: 'false'
      description: Include verbose translation for UserAccountControl flags
      isArray: false
      name: user-account-control-out
      predefined:
      - 'true'
      - 'false'
      required: false
      secret: false
    description: Retrieves detailed information about a user account. The user can
      be specified by name, email address, or as an Active Directory Distinguished
      Name (DN). If no filter is specified, all users are returned.
    execution: false
    name: ad-get-user
    outputs:
    - contextPath: ActiveDirectory.Users.dn
      description: The user's distinguished name
      type: string
    - contextPath: ActiveDirectory.Users.displayName
      description: The user's display name
      type: string
    - contextPath: ActiveDirectory.Users.name
      description: The user's common name
      type: string
    - contextPath: ActiveDirectory.Users.sAMAccountName
      description: The user's sAMAccountName
      type: string
    - contextPath: ActiveDirectory.Users.userAccountControl
      description: The user's account control flag
      type: number
    - contextPath: ActiveDirectory.Users.mail
      description: The user's email address
      type: string
    - contextPath: ActiveDirectory.Users.manager
      description: The user's manager
      type: string
    - contextPath: ActiveDirectory.Users.memberOf
      description: Groups the user is member of
      type: string
    - contextPath: Account.DisplayName
      description: The user's display name
      type: string
    - contextPath: Account.Groups
      description: Groups the user is member of
      type: string
    - contextPath: Account.Manager
      description: The user's manager
      type: string
    - contextPath: Account.ID
      description: The user's distinguished name
      type: string
    - contextPath: Account.Username
      description: The user's samAccountName
      type: string
    - contextPath: Account.Email
      description: The user's email address
      type: string
  - arguments:
    - default: false
      description: The computer's DN
      isArray: false
      name: dn
      required: false
      secret: false
    - default: false
      description: Name of the computer to get information for
      isArray: false
      name: name
      required: false
      secret: false
    - default: false
      description: Include these AD attributes of the resulting objects in addition
        to the default attributes
      isArray: false
      name: attributes
      required: false
      secret: false
    - default: false
      description: Search computers by this custom field data (relevant only if the
        `customFieldType` argument is provided)
      isArray: false
      name: custom-field-data
      required: false
      secret: false
    - default: false
      description: Search computer by this custom field type
      isArray: false
      name: custom-field-type
      required: false
      secret: false
    description: Retrieves detailed information about a computer account. The computer
      can be specified by name, email address, or as an Active Directory Distinguished
      Name (DN). If no filters are provided, all computers are returned.
    execution: false
    name: ad-get-computer
    outputs:
    - contextPath: ActiveDirectory.Computers.dn
      description: The computer distinguished name
      type: Unknown
    - contextPath: ActiveDirectory.Computers.memberOf
      description: Groups the computer is listed as a member
      type: Unknown
    - contextPath: ActiveDirectory.Computers.name
      description: The computer name
      type: Unknown
    - contextPath: Endpoint.ID
      description: The computer DN
      type: Unknown
    - contextPath: Endpoint.Hostname
      description: The computer name
      type: Unknown
    - contextPath: Endpoint.Groups
      description: Groups the computer is listed as a member of
      type: Unknown
  - arguments:
    - default: false
      description: Group's Active Directory Distinguished Name
      isArray: false
      name: group-dn
      required: true
      secret: false
    - auto: PREDEFINED
      default: false
      defaultValue: person
      description: Which members type to query
      isArray: false
      name: member-type
      predefined:
      - person
      - computer
      required: true
      secret: false
    - default: false
      description: CSV list of attributes to include in the results, in addition to
        the default attributes
      isArray: false
      name: attributes
      required: false
      secret: false
    description: Retrieves the list of users or computers that are members of the
      specified group
    execution: false
    name: ad-get-group-members
    outputs:
    - contextPath: ActiveDirectory.Groups.dn
      description: The group DN
      type: string
    - contextPath: ActiveDirectory.Groups.members.dn
      description: The group member DN
      type: string
    - contextPath: ActiveDirectory.Groups.members.category
      description: Person/computer
      type: string
  dockerimage: demisto/ldap:1.0.0.75
  isfetch: false
  runonce: false
  script: |-
    from ldap3 import Server, Connection, NTLM, SUBTREE, ALL_ATTRIBUTES, Tls
    from ldap3.core.exceptions import LDAPSocketOpenError
    from ldap3.extend import microsoft
    import ssl
    from datetime import datetime


    # global connection
    conn = None

    ''' GLOBAL VARS '''

    # userAccountControl is a bitmask used to store a number of settings.
    # find more at:
    # https://support.microsoft.com/en-gb/help/305144/how-to-use-the-useraccountcontrol-flags-to-manipulate-user-account-pro

    COOMON_ACCOUNT_CONTROL_FLAGS = {
        512: "Enabled Account",
        514: "Disabled account",
        544: "Account Enabled - Require user to change password at first logon",
        4096: "Workstation/server",
        66048: "Enabled, password never expires",
        66050: "Disabled, password never expires",
        66080: "Enables, password never expires, password not required.",
        532480: "Domain controller"
    }
    NORMAL_ACCOUNT = 512
    DISABLED_ACCOUNT = 514

    # common attributes for specific AD objects
    DEFAULT_PERSON_ATTRIBUTES = [
        'name',
        'displayName',
        'memberOf',
        'mail',
        'samAccountName',
        'manager',
        'userAccountControl'
    ]
    DEFAULT_COMPUTER_ATTRIBUTES = [
        'name',
        'memberOf'
    ]

    ''' HELPER FUNCTIONS '''


    def initialize_server(host, port, secure_connection, unsecure):
        """
        uses the instance configuration to initialize the LDAP server

        :param host: host or ip
        :type host: string
        :param port: port or None
        :type port: number
        :param secure_connection: SSL or None
        :type secure_connection: string
        :param unsecure: trust any cert
        :type unsecure: boolean
        :return: ldap3 Server
        :rtype: Server
        """

        if secure_connection == "SSL":
            # intialize server with ssl
            # port is configured by default as 389 or as 636 for LDAPS if not specified in configuration
            demisto.debug("initializing sever with ssl (unsecure: {}). port: {}". format(unsecure, port or 'default(636)'))
            if not unsecure:
                demisto.debug("will require server certificate.")
                tls = Tls(validate=ssl.CERT_REQUIRED)
                if port:
                    return Server(host, port=port, use_ssl=True, tls=tls)
                return Server(host, use_ssl=True, tls=tls)
            if port:
                return Server(host, port=port, use_ssl=True)
            return Server(host, use_ssl=True)
        demisto.debug("initializing server without secure connection. port: {}". format(port or 'default(389)'))
        if port:
            return Server(host, port=port)
        return Server(host)


    def account_entry(person_object, custome_attributes):
        # create an account entry from a person objects
        account = {
            'Type': 'AD',
            'ID': person_object.get('dn'),
            'Email': person_object.get('email'),
            'Username': person_object.get('samAccountName'),
            'DisplayName': person_object.get('displayName'),
            'Managr': person_object.get('manager'),
            'Groups': person_object.get('memberOf')
        }

        for attr in custome_attributes:
            account[attr] = person_object[attr]

        return account


    def endpoint_entry(computer_object, custome_attributes):
        # create an endpoint entry from a computer object
        endpoint = {
            'Type': 'AD',
            'ID': computer_object.get('dn'),
            'Hostname': computer_object.get('name'),
            'Groups': computer_object.get('memberOf')
        }

        for attr in custome_attributes:
            endpoint[attr] = computer_object[attr]

        return endpoint


    def base_dn_verified(base_dn):
        # serch AD with a simple query to test base DN is configured correctly
        try:
            search(
                "(objectClass=user)",
                base_dn,
                size_limit=1
            )
        except Exception as e:
            demisto.info(str(e))
            return False
        return True


    ''' COMMANDS '''

    ''' SEARCH '''


    def search(search_filter, search_base, attributes=None, size_limit=0, time_limit=0):
        """
        find entries in the DIT

        Args:
            search_base: the location in the DIT where the search will start
            search_filte: LDAP query string
            attributes: the attributes to specify for each entry found in the DIT

        """
        success = conn.search(
            search_base=search_base,
            search_filter=search_filter,
            attributes=attributes,
            size_limit=size_limit,
            time_limit=time_limit
        )

        if not success:
            raise("Search failed")
        return conn.entries


    def search_with_paging(search_filter, search_base, attributes=None, page_size=100, size_limit=0, time_limit=0):
        """
        find entries in the DIT

        Args:
            search_base: the location in the DIT where the search will start
            search_filte: LDAP query string
            attributes: the attributes to specify for each entrxy found in the DIT

        """

        total_entries = 0
        cookie = None
        start = datetime.now()

        entries = []

        while True:
            if size_limit and size_limit < page_size:
                page_size = size_limit

            conn.search(
                search_base,
                search_filter,
                search_scope=SUBTREE,
                attributes=attributes,
                paged_size=page_size,
                paged_cookie=cookie
            )

            total_entries += len(conn.entries)
            cookie = conn.result['controls']['1.2.840.113556.1.4.319']['value']['cookie']
            time_diff = (start - datetime.now()).seconds

            entries.extend(conn.entries)

            # stop when: 1.reached size limit 2.reached time limit 3. no cookie
            if (size_limit and size_limit >= total_entries) or (time_limit and time_diff >= time_limit) or (not cookie):
                break

        # keep the raw entry for raw content (backward compatability)
        raw = []
        # flaten the entries
        flat = []

        for entry in entries:
            entry = json.loads(entry.entry_to_json())

            flat_entry = {
                'dn': entry['dn']
            }

            for attr in entry.get('attributes', {}):
                flat_entry[attr] = entry['attributes'][attr]

            raw.append(entry)
            flat.append(flat_entry)

        return {
            "raw": raw,
            "flat": flat
        }


    def user_dn(sam_account_name, search_base):
        search_filter = '(&(objectClass=user)(sAMAccountName={}))'.format(sam_account_name)
        entries = search(
            search_filter,
            search_base
        )
        if not entries:
            raise Exception("Could not get full DN for user with sAMAccountName '{}'".format(sam_account_name))
        entry = json.loads(entries[0].entry_to_json())
        return entry['dn']


    def computer_dn(compuer_name, search_base):
        search_filter = '(&(objectClass=user)(objectCategory=computer)(name={}))'.format(compuer_name)
        entries = search(
            search_filter,
            search_base
        )
        if not entries:
            raise Exception("Could not get full DN for computer with name '{}'".format(compuer_name))
        entry = json.loads(entries[0].entry_to_json())
        return entry['dn']


    def group_dn(group_name, search_base):
        search_filter = '(&(objectClass=group)(cn={}))'.format(group_name)
        entries = search(
            search_filter,
            search_base
        )
        if not entries:
            raise Exception("Could not get full DN for group with name '{}'".format(group_name))
        entry = json.loads(entries[0].entry_to_json())
        return entry['dn']


    def free_search(default_base_dn, page_size):

        args = demisto.args()

        search_filter = args.get('filter')
        size_limit = int(args.get('size-limit', '0'))
        time_limit = int(args.get('time-limit', '0'))
        search_base = args.get('base-dn') or default_base_dn
        attributes = args.get('attributes')

        # if ALL was specified - get all the object's attributes, else expect a string of comma separated values
        if attributes:
            attributes = ALL_ATTRIBUTES if attributes == 'ALL' else attributes.split(',')

        entries = search_with_paging(
            search_filter,
            search_base,
            attributes=attributes,
            size_limit=size_limit,
            time_limit=time_limit,
            page_size=page_size
        )

        demisto_entry = {
            'ContentsFormat': formats['json'],
            'Type': entryTypes['note'],
            'Contents': entries['raw'],
            'ReadableContentsFormat': formats['markdown'],
            'HumanReadable': tableToMarkdown("Active Directory Search", entries['flat']),
            'EntryContext': {
                'ActiveDirectory.Search(obj.dn == val.dn)': entries['flat']
            }
        }
        demisto.results(demisto_entry)


    def search_users(default_base_dn, page_size):
        # this command is equivalant to script ADGetUser
        # will preform a custom search to find users by a specific (one) attribute specified by the user

        args = demisto.args()

        attributes = []
        custome_attributes = []

        # zero is actually no limitation
        limit = int(args.get('limit', '0'))

        # default query - list all users
        query = "(objectClass=User)(objectCategory=person)"

        # query by user DN
        if args.get('dn'):
            query = "(&(objectClass=User)(objectCategory=person)(dn={}))".format(args['dn'])

        # query by name
        if args.get('name'):
            query = "(&(objectClass=User)(objectCategory=person)(cn={}))".format(args['name'])

        # query by email
        if args.get('email'):
            query = "(&(objectClass=User)(objectCategory=person)(mail={}))".format(args['email'])

        # query by sAMAccountName
        if args.get('username'):
            query = "(&(objectClass=User)(objectCategory=person)(sAMAccountName={}))".format(args['username'])

        # query by custom object attribute
        if args.get('custom-field-type'):
            if not args.get('custom-field-data'):
                raise Exception('Please specify "custom-field-data" as well when quering by "custom-field-type"')
            query = "(&(objectClass=User)(objectCategory=person)({}={}))".format(
                args['custom-field-type'], args['ustom-field-data'])

        if args.get('attributes'):
            custome_attributes = args['attributes'].split(",")

        attributes = set(custome_attributes + DEFAULT_PERSON_ATTRIBUTES)

        entries = search_with_paging(
            query,
            default_base_dn,
            attributes=attributes,
            size_limit=limit,
            page_size=page_size
        )

        accounts = [account_entry(entry, custome_attributes) for entry in entries['flat']]

        if args.get('user-account-control-out', '') == 'true':
            # display a literal translation of the numeric account control flag
            for i, user in enumerate(entries['flat']):
                flag_no = user.get('userAccountControl')[0]
                entries['flat'][i]['userAccountControl'] = COOMON_ACCOUNT_CONTROL_FLAGS.get(flag_no) or flag_no

        demisto_entry = {
            'ContentsFormat': formats['json'],
            'Type': entryTypes['note'],
            'Contents': entries['raw'],
            'ReadableContentsFormat': formats['markdown'],
            'HumanReadable': tableToMarkdown("Active Directory - Get Users", entries['flat']),
            'EntryContext': {
                'ActiveDirectory.Users(obj.dn == val.dn)': entries['flat'],
                # 'backward compatability' with ADGetUser script
                'Account(obj.ID == val.ID)': accounts
            }
        }
        demisto.results(demisto_entry)


    def search_computers(default_base_dn, page_size):
        # this command is equivalent to ADGetComputer script

        args = demisto.args()

        attributes = []
        custome_attributes = []

        # default query - list all users (computer category)
        query = "(&(objectClass=user)(objectCategory=computer))"

        # query by user DN
        if args.get('dn'):
            query = "(&(objectClass=user)(objectCategory=computer)(dn={}))".format(args['dn'])

        # query by name
        if args.get('name'):
            query = "(&(objectClass=user)(objectCategory=computer)(name={}))".format(args['name'])

        # query by custom object attribute
        if args.get('custom-field-type'):
            if not args.get('custom-field-data'):
                raise Exception('Please specify "custom-field-data" as well when quering by "custom-field-type"')
            query = "(&(objectClass=user)(objectCategory=computer)({}={}))".format(
                args['custom-field-type'], args['ustom-field-data'])

        if args.get('attributes'):
            custome_attributes = args['attributes'].split(",")

        attributes = set(custome_attributes + DEFAULT_COMPUTER_ATTRIBUTES)

        entries = search_with_paging(
            query,
            default_base_dn,
            attributes=attributes,
            page_size=page_size
        )

        endpoints = [endpoint_entry(entry, custome_attributes) for entry in entries['flat']]

        demisto_entry = {
            'ContentsFormat': formats['json'],
            'Type': entryTypes['note'],
            'Contents': entries['raw'],
            'ReadableContentsFormat': formats['markdown'],
            'HumanReadable': tableToMarkdown("Active Directory - Get Computers", entries['flat']),
            'EntryContext': {
                'ActiveDirectory.Computers(obj.dn == val.dn)': entries['flat'],
                # 'backward compatability' with ADGetComputer script
                'Endpoint(obj.ID == val.ID)': endpoints
            }
        }
        demisto.results(demisto_entry)


    def search_group_members(default_base_dn, page_size):
        # this command is equivalent to ADGetGroupMembers script

        args = demisto.args()
        member_type = args.get('member-type')
        group_dn = args.get('group-dn')

        custome_attributes = []
        default_attributes = DEFAULT_PERSON_ATTRIBUTES if member_type == 'person' else DEFAULT_COMPUTER_ATTRIBUTES

        if args.get('attributes'):
            custome_attributes = args['attributes'].split(",")

        attributes = set(custome_attributes + default_attributes)

        # neasted search
        query = "(&(objectCategory={})(objectClass=user)(memberOf:1.2.840.113556.1.4.1941:={}))".format(member_type,
                                                                                                        group_dn)

        entries = search_with_paging(
            query,
            default_base_dn,
            attributes=attributes,
            page_size=page_size
        )

        members = [{'dn': entry['dn'], 'category': member_type} for entry in entries['flat']]

        demisto_entry = {
            'ContentsFormat': formats['json'],
            'Type': entryTypes['note'],
            'Contents': entries['raw'],
            'ReadableContentsFormat': formats['markdown'],
            'HumanReadable': tableToMarkdown("Active Directory - Get Group Members", entries['flat']),
            'EntryContext': {
                'ActiveDirectory.Groups(obj.dn ==' + group_dn + ')': {
                    'dn': group_dn,
                    'members': members
                }
            }
        }

        if member_type == 'person':
            demisto_entry['EntryContext']['ActiveDirectory.Users(obj.dn == val.dn)'] = entries['flat']
            demisto_entry['EntryContext']['Account'] = [account_entry(
                entry, custome_attributes) for entry in entries['flat']]
        else:
            demisto_entry['EntryContext']['ActiveDirectory.Computers(obj.dn == val.dn)'] = entries['flat']
            demisto_entry['EntryContext']['Endpoint'] = [endpoint_entry(
                entry, custome_attributes) for entry in entries['flat']]

        demisto.results(demisto_entry)


    ''' DATABASE OPERATIONS '''

    ''' CREATE OBJECT'''


    def create_user():
        args = demisto.args()

        object_classes = ["top", "person", "organizationalPerson", "user"]
        user_dn = args.get('user-dn')
        username = args.get("username")
        password = args.get("password")
        custome_attributes = args.get('custom-attributes')
        attributes = {
            "samAccountName": username
        }

        # set common user attributes
        if args.get('display-name'):
            attributes['displayName'] = args['display-name']
        if args.get('description'):
            attributes['description'] = args['description']
        if args.get('email'):
            attributes['mail'] = args['email']
        if args.get('telephone-number'):
            attributes['telephoneNumber'] = args['telephone-number']
        if args.get('title'):
            attributes['title'] = args['title']

        # set user custome attributes
        if custome_attributes:
            try:
                custome_attributes = json.loads(custome_attributes)
            except Exception as e:
                demisto.info(str(e))
                raise Exception(
                    "Failed to parse custom attributes argument. Please see an example of this argument in the description."
                )
            for attribute_name, attribute_value in custome_attributes.items():
                # can run default attribute stting
                attributes[attribute_name] = attribute_value

        # add user
        success = conn.add(user_dn, object_classes, attributes)
        if not success:
            raise Exception("Failed to create user")

        # set user password
        success = conn.extend.microsoft.modify_password(user_dn, password)
        if not success:
            raise Exception("Failed to reset user password")

        # enable user and expire password
        modification = {
            # enable user
            'userAccountControl': [('MODIFY_REPLACE', NORMAL_ACCOUNT)],
            # set to 0, to force password change on next login
            "pwdLastSet": [('MODIFY_REPLACE', "0")]
        }
        modify_object(user_dn, modification)

        demisto_entry = {
            'ContentsFormat': formats['text'],
            'Type': entryTypes['note'],
            'Contents': "Created user with DN: {}".format(user_dn)
        }
        demisto.results(demisto_entry)


    def create_contact():
        args = demisto.args()

        object_classes = ["top", "person", "organizationalPerson", "contact"]
        contact_dn = args.get('contact-dn')

        # set contact attributes
        attributes = {}
        if args.get('custom-attributes'):
            try:
                attributes = json.loads(args['custom-attributes'])
            except Exception as e:
                demisto.info(str(e))
                raise Exception(
                    'Failed to parse custom attributes argument. Please see an example of this argument in the argument.'
                )

        # set common user attributes
        if args.get('diaply-name'):
            attributes['displayName'] = args['diaply-name']
        if args.get('description'):
            attributes['description'] = args['description']
        if args.get('email'):
            attributes['mail'] = args['email']
        if args.get('telephone-number'):
            attributes['telephoneNumber'] = args['telephone-number']
        if args.get('title'):
            attributes['title'] = args['title']

        # add contact

        success = conn.add(contact_dn, object_classes, attributes)
        if not success:
            raise Exception("Failed to create contact")

        demisto_entry = {
            'ContentsFormat': formats['text'],
            'Type': entryTypes['note'],
            'Contents': "Created contact with DN: {}".format(contact_dn)
        }
        demisto.results(demisto_entry)


    ''' UPDATE OBJECT '''


    def modify_object(dn, modification):
        """
        modifys object in the DIT
        """
        success = conn.modify(dn, modification)
        if not success:
            raise Exception("Failed to update object {} with the following modofication: {}".format(
                dn, json.dumps(modification)))


    def update_user(default_base_dn):
        args = demisto.args()

        # get user DN
        sam_account_name = args.get('username')
        attribute_name = args.get('attribute-name')
        attribute_value = args.get('attribute-value')
        search_base = args.get('base-dn') or default_base_dn
        dn = user_dn(sam_account_name, search_base)

        modification = {}
        modification[attribute_name] = [('MODIFY_REPLACE', attribute_value)]

        # modify user
        modify_object(dn, modification)

        demisto_entry = {
            'ContentsFormat': formats['text'],
            'Type': entryTypes['note'],
            'Contents': "Updated user's {} to {} ".format(attribute_name, attribute_value)
        }
        demisto.results(demisto_entry)


    def update_contact():
        args = demisto.args()

        contact_dn = args.get('contact-dn')
        modification = {}
        modification[args.get('attribute-name')] = [('MODIFY_REPLACE', args.get('attribute-value'))]

        # modify
        modify_object(contact_dn, modification)

        demisto_entry = {
            'ContentsFormat': formats['text'],
            'Type': entryTypes['note'],
            'Contents': "Updated contact's {} to: {} ".format(args.get('attribute-name'), args.get('attribute-value'))
        }
        demisto.results(demisto_entry)


    def modify_computer_ou(default_base_dn):
        args = demisto.args()

        computer_name = args.get('computer-name')
        dn = computer_dn(computer_name, args.get('base-dn') or default_base_dn)

        success = conn.modify_dn(dn, "CN={}".format(computer_name), new_superior=args.get('full-superior-dn'))
        if not success:
            raise Exception("Failed to modify computer OU")

        demisto_entry = {
            'ContentsFormat': formats['text'],
            'Type': entryTypes['note'],
            'Contents': "Moved computer {} to {}".format(computer_name, args.get('full-superior-dn'))
        }
        demisto.results(demisto_entry)


    def expire_user_password(default_base_dn):
        args = demisto.args()

        # get user DN
        sam_account_name = args.get('username')
        search_base = args.get('base-dn') or default_base_dn
        dn = user_dn(sam_account_name, search_base)

        modification = {
            # set to 0, to force password change on next login
            "pwdLastSet": [('MODIFY_REPLACE', "0")]
        }

        # modify user
        modify_object(dn, modification)

        demisto_entry = {
            'ContentsFormat': formats['text'],
            'Type': entryTypes['note'],
            'Contents': "Expired password successfully"
        }
        demisto.results(demisto_entry)


    def set_user_password(default_base_dn):
        args = demisto.args()

        # get user DN
        sam_account_name = args.get('username')
        password = args.get('password')
        search_base = args.get('base-dn') or default_base_dn
        dn = user_dn(sam_account_name, search_base)

        # set user password
        success = conn.extend.microsoft.modify_password(dn, password)
        if not success:
            raise Exception("Failed to reset user password")

        demisto_entry = {
            'ContentsFormat': formats['text'],
            'Type': entryTypes['note'],
            'Contents': "User password successfully set"
        }
        demisto.results(demisto_entry)


    def enable_user(default_base_dn):
        args = demisto.args()

        # get user DN
        sam_account_name = args.get('username')
        search_base = args.get('base-dn') or default_base_dn
        dn = user_dn(sam_account_name, search_base)

        # modify user
        modification = {
            'userAccountControl': [('MODIFY_REPLACE', NORMAL_ACCOUNT)]
        }
        modify_object(dn, modification)

        demisto_entry = {
            'ContentsFormat': formats['text'],
            'Type': entryTypes['note'],
            'Contents': "User {} was enabled".format(sam_account_name)
        }
        demisto.results(demisto_entry)


    def disable_user(default_base_dn):
        args = demisto.args()

        # get user DN
        sam_account_name = args.get('username')
        search_base = args.get('base-dn') or default_base_dn
        dn = user_dn(sam_account_name, search_base)

        # modify user
        modification = {
            'userAccountControl': [('MODIFY_REPLACE', DISABLED_ACCOUNT)]
        }
        modify_object(dn, modification)

        demisto_entry = {
            'ContentsFormat': formats['text'],
            'Type': entryTypes['note'],
            'Contents': "User {} was disabled".format(sam_account_name)
        }
        demisto.results(demisto_entry)


    def add_member_to_group(default_base_dn):

        args = demisto.args()

        search_base = args.get('base-dn') or default_base_dn

        # get the  dn of the member - either user or computer
        args_err = "Pleade provide either username or computer-name"
        member_dn = ''

        if args.get('username') and args.get('computer-name'):
            # both arguments passed
            raise Exception(args_err)
        if args.get('username'):
            member_dn = user_dn(args['username'], search_base)
        elif args.get('computer-name'):
            member_dn = computer_dn(args['computer-name'], search_base)
        else:
            # none of the arguments passed
            raise Exception(args_err)

        grp_dn = group_dn(args.get('group-cn'), search_base)

        success = microsoft.addMembersToGroups.ad_add_members_to_groups(conn, [member_dn], [grp_dn])
        if not success:
            raise Exception("Failed to add {} to group {]}".format(
                args.get('username') or args.get('computer-name'),
                args.get('group_name')
            ))

        demisto_entry = {
            'ContentsFormat': formats['text'],
            'Type': entryTypes['note'],
            'Contents': "Object with dn {} was added to group {}".format(member_dn, args.get('group-cn'))
        }
        demisto.results(demisto_entry)


    def remove_member_from_group(default_base_dn):

        args = demisto.args()

        search_base = args.get('base-dn') or default_base_dn

        # get the dn of the member - either user or computer
        args_err = "Pleade provide either username or computer-name"
        member_dn = ''

        if args.get('username') and args.get('computer-name'):
            # both arguments passed
            raise Exception(args_err)
        if args.get('username'):
            member_dn = user_dn(args['username'], search_base)
        elif args.get('computer-name'):
            member_dn = computer_dn(args['computer-name'], search_base)
        else:
            # none of the arguments passed
            raise Exception(args_err)

        grp_dn = group_dn(args.get('group-cn'), search_base)

        success = microsoft.removeMembersFromGroups.ad_remove_members_from_groups(conn, [member_dn], [grp_dn], True)
        if not success:
            raise Exception("Failed to remove {member} from group {group_name}".format({
                "member": args.get('username') or args.get('computer-name'),
                "group_name": args.get('group_name')
            }))

        demisto_entry = {
            'ContentsFormat': formats['text'],
            'Type': entryTypes['note'],
            'Contents': "Object with dn {} removed from group {}".format(member_dn, args.get('group-cn'))
        }
        demisto.results(demisto_entry)


    def unlock_account(default_base_dn):
        args = demisto.args()

        # get user DN
        sam_account_name = args.get('username')
        search_base = args.get('base-dn') or default_base_dn
        dn = user_dn(sam_account_name, search_base)

        success = microsoft.unlockAccount.ad_unlock_account(conn, dn)
        if not success:
            raise Exception("Failed to unlock user {}".format(sam_account_name))

        demisto_entry = {
            'ContentsFormat': formats['text'],
            'Type': entryTypes['note'],
            'Contents': "Unlocked user {}".format(sam_account_name)
        }
        demisto.results(demisto_entry)


    ''' DELETE OBJECT '''


    def delete_user():
        # can acually delete any object...
        success = conn.delete(demisto.args().get('user-dn'))
        if not success:
            raise Exception('Failed to delete user')

        demisto_entry = {
            'ContentsFormat': formats['text'],
            'Type': entryTypes['note'],
            'Contents': "Deleted object with dn {}".format(demisto.args().get('user-dn'))
        }
        demisto.results(demisto_entry)


    '''
        TEST CONFIGURATION
        authenticate user credentials while initializing connection wiith AD server
        verify base DN is configured correctly
    '''


    def main():
        ''' INSTANCE CONFIGURATION '''
        SERVER_IP = demisto.params().get('server_ip')
        USERNAME = demisto.params().get('credentials')['identifier']
        PASSWORD = demisto.params().get('credentials')['password']
        DEFAULT_BASE_DN = demisto.params().get('base_dn')
        SECURE_CONNECTION = demisto.params().get('secure_connection')
        DEFAULT_PAGE_SIZE = int(demisto.params().get('page_size'))
        NTLM_AUTH = demisto.params().get('ntlm')
        UNSECURE = demisto.params().get('unsecure', False)
        PORT = demisto.params().get('port')

        try:
            server = initialize_server(SERVER_IP, PORT, SECURE_CONNECTION, UNSECURE)
        except Exception as e:
            return_error(str(e))
            return
        global conn
        if NTLM_AUTH:
            # intialize connection to LDAP server with NTLM authentication
            # user example: domain\user
            domain_user = SERVER_IP + '\\' + USERNAME if '\\' not in USERNAME else USERNAME
            conn = Connection(server, user=domain_user, password=PASSWORD, authentication=NTLM)
        else:
            # here username should be the user dn
            conn = Connection(server, user=USERNAME, password=PASSWORD)

        # bind operation is the “authenticate” operation.
        try:
            # open socket and bind to server
            if not conn.bind():
                message = "Failed to bind to server. Please validate the credentials configured correctly.\n{}".format(
                    json.dumps(conn.result))
                demisto.info(message)
                return_error(message)
                return
        except LDAPSocketOpenError as e:
            exc_msg = str(e)
            demisto.info(exc_msg)
            message = "Failed to access LDAP server. Please validate the server host and port are configured correctly"
            if 'ssl wrapping error' in exc_msg:
                message = "Failed to access LDAP server. SSL error."
                if not UNSECURE:
                    message += ' Try using: "Trust any certificate" option.'
            demisto.info(message)
            return_error(message)
            return

        demisto.info('Established connection with AD LDAP server')

        if not base_dn_verified(DEFAULT_BASE_DN):
            message = "Failed to verify the base DN configured for the instance.\n" \
                "Last connection result: {}\n" \
                "Last error from LDAP server: {}".format(json.dumps(conn.result), json.dumps(conn.last_error))
            demisto.info(message)
            return_error(message)
            return

        demisto.info('Verfied base DN "{}"'.format(DEFAULT_BASE_DN))

        ''' COMMAND EXECUTION '''

        try:
            if demisto.command() == 'test-module':
                if conn.user == '':
                    # Empty response means you have no authentication status on the server, so you are an anonymous user.
                    raise Exception("Failed to authenticate user")
                demisto.results('ok')

            if demisto.command() == 'ad-search':
                free_search(DEFAULT_BASE_DN, DEFAULT_PAGE_SIZE)

            if demisto.command() == 'ad-expire-password':
                expire_user_password(DEFAULT_BASE_DN)

            if demisto.command() == 'ad-set-new-password':
                set_user_password(DEFAULT_BASE_DN)

            if demisto.command() == 'ad-unlock-account':
                unlock_account(DEFAULT_BASE_DN)

            if demisto.command() == 'ad-disable-account':
                disable_user(DEFAULT_BASE_DN)

            if demisto.command() == 'ad-enable-account':
                enable_user(DEFAULT_BASE_DN)

            if demisto.command() == 'ad-remove-from-group':
                remove_member_from_group(DEFAULT_BASE_DN)

            if demisto.command() == 'ad-add-to-group':
                add_member_to_group(DEFAULT_BASE_DN)

            if demisto.command() == 'ad-create-user':
                create_user()

            if demisto.command() == 'ad-delete-user':
                delete_user()

            if demisto.command() == 'ad-update-user':
                update_user(DEFAULT_BASE_DN)

            if demisto.command() == 'ad-modify-computer-ou':
                modify_computer_ou(DEFAULT_BASE_DN)

            if demisto.command() == 'ad-create-contact':
                create_contact()

            if demisto.command() == 'ad-update-contact':
                update_contact()

            if demisto.command() == 'ad-get-user':
                search_users(DEFAULT_BASE_DN, DEFAULT_PAGE_SIZE)

            if demisto.command() == 'ad-get-computer':
                search_computers(DEFAULT_BASE_DN, DEFAULT_PAGE_SIZE)

            if demisto.command() == 'ad-get-group-members':
                search_group_members(DEFAULT_BASE_DN, DEFAULT_PAGE_SIZE)

        except Exception as e:
            message = "{}\nLast connection result: {}\nLast error from LDAP server: {}".format(
                str(e), json.dumps(conn.result), conn.last_error)
            demisto.info(message)
            return_error(message)
            return
        finally:
            # disconnect and close the connection
            conn.unbind()


    # python2 uses __builtin__ python3 uses builtins
    if __name__ == "__builtin__" or __name__ == "builtins":
        main()
  type: python
releaseNotes: "-"
tests:
- Active Directory Test
