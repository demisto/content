import demistomock as demisto
from Malwarebytes import scan_and_remediate, scan_and_report, isolate_endpoint, list_endpoint_info, \
    isolate_process, isolate_network, isolate_desktop, deisolate_endpoint,\
    scan_detections, scan_status, fetch_incidents, list_all_endpoints, open_sa_incident, remediate_sa_incident, close_sa_incident

auth_token = 'vATEZGHAxu5AoNzZZSR7URcnREqxaHcxGlZy0_3M8aU.j3KdAUwntnzvcjE4-UdVORUGvnR4eBVITn6KxoblFYc'

account_id = 'XXX-XXX-XXX-XXXX--XXXX'

client_id = 'NB-XXX-XXXX1234-1234'

MOCK_ENDPOINTS = 'https://cloud.malwarebytes.com/api/v2/endpoints'

MOCK_ENDPOINT_MACHINE_ID = 'https://cloud.malwarebytes.com/api/v2/endpoints'

MOCK_ENDPOINT_MACHINE_ID_RESP = {
    "aggregations": {},
    "machines": [
        {
            "link": "/api/v2/machines/8c9df179-a999-4ca2-9c41-9795ae0b08f5",
            "agent": {
                "started_at_offset": 0,
                "last_user": "WIN-TEN8D4FCOUB\\Administrator",
                "at": "2020-01-01T04:20:49.784113Z",
                "account_id": "56db16b7-7bcd-404b-9443-f4ed95044c64",
                "group_id": "57b6dbcd-8243-4f52-b80a-7c102c6b06d3",
                "nics": [
                    {
                        "ips": [
                            "192.168.230.140"
                        ],
                        "description": "Intel(R) 82574L Gigabit Network Connection #2",
                        "mac_address": "000C29D7A627"
                    },
                    {
                        "ips": [
                            "172.16.128.100"
                        ],
                        "description": "Intel(R) 82574L Gigabit Network Connection",
                        "mac_address": "000C29D7A631"
                    }
                ],
                "os_info": {
                    "os_type": "Server",
                    "os_version": "6.3.9600",
                    "os_platform": "Windows",
                    "os_architecture": "Amd64",
                    "os_release_name": "Microsoft Windows Server 2012 R2 Standard"
                },
                "host_name": "WIN-TEN8D4FCOUB",
                "fully_qualified_host_name": "WIN-TEN8D4FCOUB",
                "plugins": {
                    "asset_manager": {
                        "product_name": "Asset Manager",
                        "plugin_version": "1.2.0.329"
                    },
                    "endpoint_detection_and_response": {
                        "product_name": "Endpoint Detection and Response",
                        "plugin_version": "1.2.0.282"
                    }
                },
                "engine_version": "1.2.0.726",
                "policy_etag": "ae2dccc2e3eaa8b33d10f577f76ddc29"
            },
            "machine": {
                "id": "8c9df179-a999-4ca2-9c41-9795ae0b08f5",
                "online": False,
                "account_id": "56db16b7-7bcd-404b-9443-f4ed95044c64",
                "group_id": "57b6dbcd-8243-4f52-b80a-7c102c6b06d3",
                "root_group_id": "57b6dbcd-8243-4f52-b80a-7c102c6b06d3",
                "group_name": "Asia-Group-ServerEPR",
                "policy_id": "2336247b-a41a-4f9c-8bf8-2e45e6cd41ff",
                "policy_name": "Asia-ServerEPR-Policy",
                "last_day_seen": "2020-01-01T04:03:36.046972Z",
                "isolated": False,
                "scan_age_days": 2147483647,
                "suspicious_activity_count": 55,
                "infection_count": 0,
                "reboot_required": 0,
                "is_deleted": False
            }
        }
    ],
    "total_count": 1,
    "next_cursor": ""
}

MOCK_HOSTNAME = 'WIN-TEN8D4FCOUB'

MOCK_IP = '192.168.1.1'

MOCK_MACHINES_DATA = {
    "machines": [
        {
            "created_at": "2020-02-05T10:12:55.187467Z",
            "id": "017febb6-ae68-4c15-9918-d911c72d062a",
            "last_seen_at": "2020-02-26T16:36:17.352342Z",
            "name": "TA-AZ-CLT1",
            "online": True,
            "os_architecture": "AMD64",
            "os_platform": "WINDOWS",
            "os_release_name": "Microsoft Windows 10 Pro"
        },
        {
            "created_at": "2020-02-05T09:50:02.194556Z",
            "id": "211d8c3e-142c-4849-b1f0-1680b4bd239c",
            "last_seen_at": "2020-03-11T11:00:24.746133Z",
            "name": "WIN-TEN8D4FCOUB",
            "online": False,
            "os_architecture": "AMD64",
            "os_platform": "WINDOWS",
            "os_release_name": "Microsoft Windows 10 Enterprise"
        },
        {
            "created_at": "2019-11-25T19:47:15.833008Z",
            "id": "b5740188-00a2-434b-a180-5b0fa85cb10b",
            "last_seen_at": "2020-02-27T15:36:33.68981Z",
            "name": "DESKTOP-91UJNA1",
            "online": False,
            "os_architecture": "AMD64",
            "os_platform": "WINDOWS",
            "os_release_name": "Microsoft Windows 10 Pro"
        },
        {
            "created_at": "2019-10-18T09:26:26.993555Z",
            "id": "5074ade3-5716-44d8-83c7-5985379c0399",
            "last_seen_at": "2020-03-05T13:17:15.459352Z",
            "name": "DESKTOP-664HFM6",
            "online": False,
            "os_architecture": "AMD64",
            "os_platform": "WINDOWS",
            "os_release_name": "Microsoft Windows 10 Pro"
        }
    ],
    "total_count": 4,
    "next_cursor": ""
}

MOCK_ENDPOINTS_JOBS = 'https://cloud.malwarebytes.com/api/v2'

MOCK_POST_JOBS_DATA = {
    "jobs": [
        {
            "machine_id": "8c9df179-a999-4ca2-9c41-9795ae0b08f5",
            "job_id": "aa104324-6d2f-4023-bfa6-78fc76d67200"
        }
    ],
    "total_count": 1
}

MOCK_JOBS_MACHINE_ID = '8c9df179-a999-4ca2-9c41-9795ae0b08f5'

MOCK_SCAN_ID = 'd6d46617-b99c-4758-aad2-0f8235c43d58'

MOCK_JOBS_JOB_ID = 'aa104324-6d2f-4023-bfa6-78fc76d67200'

MOCK_ENDPOINT_JOBS_OUTPUT = {'Malwarebytes.Scan.Machine_ID(val.Machine_ID == obj.Machine_ID)': MOCK_JOBS_MACHINE_ID,
                             'Malwarebytes.Scan.Job_ID(val.Job_ID == obj.Job_ID)': MOCK_JOBS_JOB_ID}

MOCK_GET_JOBS_DATA = {
    "id": "554e6e03-6a31-4007-aee8-954e88093ef0",
    "machine_id": "8c9df179-a999-4ca2-9c41-9795ae0b08f5",
    "machine_name": "DESKTOP-LI4MQ7B",
    "command": "command.threat.scan",
    "issued_at": "2020-03-17T14:02:26.562283Z",
    "issued_by": "54a39a8b-e368-4359-bf74-8358f8d4fc11",
    "expires_at": "2020-03-20T14:02:26.562285Z",
    "updated_at": "2020-03-17T14:12:09.230305Z",
    "state": "COMPLETED",
    "relay_state": "3fd16624-9d54-4e15-9d07-c222327d19fe",
    "scan_id": "d6d46617-b99c-4758-aad2-0f8235c43d58"
}

MOCK_DETECTIONS_PATH = MOCK_ENDPOINT_MACHINE_ID + '/' + MOCK_JOBS_MACHINE_ID + '/scans/' + MOCK_SCAN_ID + '/detections'

MOCK_SCAN_DETECTIONS = {
    "detections": [
        {
            "id": "f21ae327-8987-4d64-a0ed-12ffa5fdd7ba",
            "scan_id": "74f831d2-2871-4aa5-9030-60ce7247d23a",
            "machine_id": "211d8c3e-142c-4849-b1f0-1680b4bd239c",
            "machine_name": "WIN-TEN8D4FCOUB",
            "group_id": "a8fbe175-6b71-443c-b906-f18d06c7faf6",
            "detection_id_from_endpoint": "0bd77668-5106-11ea-8531-000c29541586",
            "scanned_at": "2020-02-16T21:39:20Z",
            "scanned_at_local": "2020-02-16T13:39:20-08:00",
            "reported_at": "2020-02-16T21:50:02.358811Z",
            "status": "quarantined",
            "threat_name": "Trojan.Agent.SVR",
            "type": [
                "file"
            ],
            "path": "C:\\USERS\\WIN-BOX2\\DESKTOP\\711.RAR",
            "category": "Malware",
            "ip_address": "",
            "url": "",
            "port": "",
            "affected_application": "",
            "md5": "",
            "process_name": ""
        },
        {
            "id": "6017a81b-dc24-43d6-8d68-14f2cf68606b",
            "scan_id": "74f831d2-2871-4aa5-9030-60ce7247d23a",
            "machine_id": "211d8c3e-142c-4849-b1f0-1680b4bd239c",
            "machine_name": "WIN-TEN8D4FCOUB",
            "group_id": "a8fbe175-6b71-443c-b906-f18d06c7faf6",
            "detection_id_from_endpoint": "0acc6e90-5106-11ea-825e-000c29541586",
            "scanned_at": "2020-02-16T21:39:20Z",
            "scanned_at_local": "2020-02-16T13:39:20-08:00",
            "reported_at": "2020-02-16T21:50:02.358811Z",
            "status": "quarantined",
            "threat_name": "Trojan.Themida",
            "type": [
                "file"
            ],
            "path": "C:\\USERS\\WIN-BOX2\\DESKTOP\\(CLIENT)_KEY.RAR",
            "category": "Malware",
            "ip_address": "",
            "url": "",
            "port": "",
            "affected_application": "",
            "md5": "",
            "process_name": ""
        },
        {
            "id": "d22e164a-cb18-4365-9c5f-bce90ba9131c",
            "scan_id": "74f831d2-2871-4aa5-9030-60ce7247d23a",
            "machine_id": "211d8c3e-142c-4849-b1f0-1680b4bd239c",
            "machine_name": "WIN-TEN8D4FCOUB",
            "group_id": "a8fbe175-6b71-443c-b906-f18d06c7faf6",
            "detection_id_from_endpoint": "e07c6d44-5104-11ea-9176-000c29541586",
            "scanned_at": "2020-02-16T21:39:20Z",
            "scanned_at_local": "2020-02-16T13:39:20-08:00",
            "reported_at": "2020-02-16T21:50:02.358811Z",
            "status": "quarantined",
            "threat_name": "RiskWare.Agent.E",
            "type": [
                "file"
            ],
            "path": "C:\\USERS\\WIN-BOX2\\DESKTOP\\SMSS.EXE",
            "category": "Malware",
            "ip_address": "",
            "url": "",
            "port": "",
            "affected_application": "",
            "md5": "",
            "process_name": ""
        },
        {
            "id": "ec0fb7ec-2c93-48bc-be1a-55c0e7fa7d2f",
            "scan_id": "74f831d2-2871-4aa5-9030-60ce7247d23a",
            "machine_id": "211d8c3e-142c-4849-b1f0-1680b4bd239c",
            "machine_name": "WIN-TEN8D4FCOUB",
            "group_id": "a8fbe175-6b71-443c-b906-f18d06c7faf6",
            "detection_id_from_endpoint": "0f3db0ba-5106-11ea-a8a4-000c29541586",
            "scanned_at": "2020-02-16T21:39:20Z",
            "scanned_at_local": "2020-02-16T13:39:20-08:00",
            "reported_at": "2020-02-16T21:50:02.358811Z",
            "status": "quarantined",
            "threat_name": "Trojan.Agent.SVR",
            "type": [
                "file"
            ],
            "path": "C:\\USERS\\WIN-BOX2\\DESKTOP\\SERVER.RAR",
            "category": "Malware",
            "ip_address": "",
            "url": "",
            "port": "",
            "affected_application": "",
            "md5": "",
            "process_name": ""
        },
        {
            "id": "49ff6f57-55a7-46ee-8a71-26008d655d1f",
            "scan_id": "eeb99e04-ae61-47f7-bfbf-8e023fdfffe2",
            "machine_id": "211d8c3e-142c-4849-b1f0-1680b4bd239c",
            "machine_name": "WIN-TEN8D4FCOUB",
            "group_id": "a8fbe175-6b71-443c-b906-f18d06c7faf6",
            "detection_id_from_endpoint": "e289e044-503c-11ea-bca6-000c29541586",
            "scanned_at": "2020-02-15T21:39:19Z",
            "scanned_at_local": "2020-02-15T13:39:19-08:00",
            "reported_at": "2020-02-15T21:49:44.263558Z",
            "status": "quarantined",
            "threat_name": "Trojan.Agent.SVR",
            "type": [
                "file"
            ],
            "path": "C:\\USERS\\WIN-BOX2\\DESKTOP\\SERVER.RAR",
            "category": "Malware",
            "ip_address": "",
            "url": "",
            "port": "",
            "affected_application": "",
            "md5": "",
            "process_name": ""
        },
        {
            "id": "c1a5b3ba-0966-4c6a-a4a3-a9d8999006eb",
            "scan_id": "eeb99e04-ae61-47f7-bfbf-8e023fdfffe2",
            "machine_id": "211d8c3e-142c-4849-b1f0-1680b4bd239c",
            "machine_name": "WIN-TEN8D4FCOUB",
            "group_id": "a8fbe175-6b71-443c-b906-f18d06c7faf6",
            "detection_id_from_endpoint": "de69aee0-503c-11ea-86dc-000c29541586",
            "scanned_at": "2020-02-15T21:39:19Z",
            "scanned_at_local": "2020-02-15T13:39:19-08:00",
            "reported_at": "2020-02-15T21:49:44.263558Z",
            "status": "quarantined",
            "threat_name": "Trojan.Themida",
            "type": [
                "file"
            ],
            "path": "C:\\USERS\\WIN-BOX2\\DESKTOP\\(CLIENT)_KEY.RAR",
            "category": "Malware",
            "ip_address": "",
            "url": "",
            "port": "",
            "affected_application": "",
            "md5": "",
            "process_name": ""
        },
        {
            "id": "9f9fd81e-5bee-4ce1-9185-ca7cedbc45e6",
            "scan_id": "eeb99e04-ae61-47f7-bfbf-8e023fdfffe2",
            "machine_id": "211d8c3e-142c-4849-b1f0-1680b4bd239c",
            "machine_name": "WIN-TEN8D4FCOUB",
            "group_id": "a8fbe175-6b71-443c-b906-f18d06c7faf6",
            "detection_id_from_endpoint": "b4edde16-503b-11ea-94d8-000c29541586",
            "scanned_at": "2020-02-15T21:39:19Z",
            "scanned_at_local": "2020-02-15T13:39:19-08:00",
            "reported_at": "2020-02-15T21:49:44.263558Z",
            "status": "quarantined",
            "threat_name": "RiskWare.Agent.E",
            "type": [
                "file"
            ],
            "path": "C:\\USERS\\WIN-BOX2\\DESKTOP\\SMSS.EXE",
            "category": "Malware",
            "ip_address": "",
            "url": "",
            "port": "",
            "affected_application": "",
            "md5": "",
            "process_name": ""
        },
        {
            "id": "f8707f3f-184c-4388-980f-5c2b4639c7ce",
            "scan_id": "eeb99e04-ae61-47f7-bfbf-8e023fdfffe2",
            "machine_id": "211d8c3e-142c-4849-b1f0-1680b4bd239c",
            "machine_name": "WIN-TEN8D4FCOUB",
            "group_id": "a8fbe175-6b71-443c-b906-f18d06c7faf6",
            "detection_id_from_endpoint": "df7bdca4-503c-11ea-8339-000c29541586",
            "scanned_at": "2020-02-15T21:39:19Z",
            "scanned_at_local": "2020-02-15T13:39:19-08:00",
            "reported_at": "2020-02-15T21:49:44.263558Z",
            "status": "quarantined",
            "threat_name": "Trojan.Agent.SVR",
            "type": [
                "file"
            ],
            "path": "C:\\USERS\\WIN-BOX2\\DESKTOP\\711.RAR",
            "category": "Malware",
            "ip_address": "",
            "url": "",
            "port": "",
            "affected_application": "",
            "md5": "",
            "process_name": ""
        },
        {
            "id": "6d76ebad-dfa3-47a8-8cac-a717fc09ae6d",
            "scan_id": "ab4623d7-9c07-46fc-95b1-d0d15c64e72b",
            "machine_id": "211d8c3e-142c-4849-b1f0-1680b4bd239c",
            "machine_name": "WIN-TEN8D4FCOUB",
            "group_id": "a8fbe175-6b71-443c-b906-f18d06c7faf6",
            "detection_id_from_endpoint": "c814b08c-4f73-11ea-9b36-000c29541586",
            "scanned_at": "2020-02-14T21:39:21Z",
            "scanned_at_local": "2020-02-14T13:39:21-08:00",
            "reported_at": "2020-02-14T22:00:57.806491Z",
            "status": "quarantined",
            "threat_name": "Trojan.ServStart",
            "type": [
                "file"
            ],
            "path": "C:\\USERS\\WIN-BOX2\\DESKTOP\\518_2.EXE",
            "category": "Malware",
            "ip_address": "",
            "url": "",
            "port": "",
            "affected_application": "",
            "md5": "",
            "process_name": ""
        },
        {
            "id": "a452480a-b9e0-4b9b-9cf4-3f866e79789c",
            "scan_id": "ab4623d7-9c07-46fc-95b1-d0d15c64e72b",
            "machine_id": "211d8c3e-142c-4849-b1f0-1680b4bd239c",
            "machine_name": "WIN-TEN8D4FCOUB",
            "group_id": "a8fbe175-6b71-443c-b906-f18d06c7faf6",
            "detection_id_from_endpoint": "c814b08d-4f73-11ea-8e66-000c29541586",
            "scanned_at": "2020-02-14T21:39:21Z",
            "scanned_at_local": "2020-02-14T13:39:21-08:00",
            "reported_at": "2020-02-14T22:00:57.806491Z",
            "status": "quarantined",
            "threat_name": "Backdoor.Farfli",
            "type": [
                "file"
            ],
            "path": "C:\\USERS\\WIN-BOX2\\DESKTOP\\520.EXE",
            "category": "Malware",
            "ip_address": "",
            "url": "",
            "port": "",
            "affected_application": "",
            "md5": "",
            "process_name": ""
        },
        {
            "id": "0c5c9624-3572-44c4-bbf1-b1b5f009152a",
            "scan_id": "ab4623d7-9c07-46fc-95b1-d0d15c64e72b",
            "machine_id": "211d8c3e-142c-4849-b1f0-1680b4bd239c",
            "machine_name": "WIN-TEN8D4FCOUB",
            "group_id": "a8fbe175-6b71-443c-b906-f18d06c7faf6",
            "detection_id_from_endpoint": "c814b08e-4f73-11ea-b6ae-000c29541586",
            "scanned_at": "2020-02-14T21:39:21Z",
            "scanned_at_local": "2020-02-14T13:39:21-08:00",
            "reported_at": "2020-02-14T22:00:57.806491Z",
            "status": "quarantined",
            "threat_name": "Trojan.Agent.SVR",
            "type": [
                "file"
            ],
            "path": "C:\\USERS\\WIN-BOX2\\DESKTOP\\711.RAR",
            "category": "Malware",
            "ip_address": "",
            "url": "",
            "port": "",
            "affected_application": "",
            "md5": "",
            "process_name": ""
        },
        {
            "id": "2e37a5b7-3d45-493f-8187-17c158f97bab",
            "scan_id": "ab4623d7-9c07-46fc-95b1-d0d15c64e72b",
            "machine_id": "211d8c3e-142c-4849-b1f0-1680b4bd239c",
            "machine_name": "WIN-TEN8D4FCOUB",
            "group_id": "a8fbe175-6b71-443c-b906-f18d06c7faf6",
            "detection_id_from_endpoint": "d4b5a72e-4f73-11ea-a203-000c29541586",
            "scanned_at": "2020-02-14T21:39:21Z",
            "scanned_at_local": "2020-02-14T13:39:21-08:00",
            "reported_at": "2020-02-14T22:00:57.806491Z",
            "status": "quarantined",
            "threat_name": "Generic.Malware/Suspicious",
            "type": [
                "file"
            ],
            "path": "C:\\USERS\\WIN-BOX2\\DESKTOP\\711_2.RAR",
            "category": "Malware",
            "ip_address": "",
            "url": "",
            "port": "",
            "affected_application": "",
            "md5": "",
            "process_name": ""
        },
        {
            "id": "0340d2d6-62ef-44dc-8236-ba1e49b1b013",
            "scan_id": "ab4623d7-9c07-46fc-95b1-d0d15c64e72b",
            "machine_id": "211d8c3e-142c-4849-b1f0-1680b4bd239c",
            "machine_name": "WIN-TEN8D4FCOUB",
            "group_id": "a8fbe175-6b71-443c-b906-f18d06c7faf6",
            "detection_id_from_endpoint": "d4b5a72f-4f73-11ea-9697-000c29541586",
            "scanned_at": "2020-02-14T21:39:21Z",
            "scanned_at_local": "2020-02-14T13:39:21-08:00",
            "reported_at": "2020-02-14T22:00:57.806491Z",
            "status": "quarantined",
            "threat_name": "Generic.Malware/Suspicious",
            "type": [
                "file"
            ],
            "path": "C:\\USERS\\WIN-BOX2\\DESKTOP\\BIN3333.RAR",
            "category": "Malware",
            "ip_address": "",
            "url": "",
            "port": "",
            "affected_application": "",
            "md5": "",
            "process_name": ""
        },
        {
            "id": "1b3608c4-4062-4cb0-9787-f56c3e85b6fe",
            "scan_id": "ab4623d7-9c07-46fc-95b1-d0d15c64e72b",
            "machine_id": "211d8c3e-142c-4849-b1f0-1680b4bd239c",
            "machine_name": "WIN-TEN8D4FCOUB",
            "group_id": "a8fbe175-6b71-443c-b906-f18d06c7faf6",
            "detection_id_from_endpoint": "d4b5a732-4f73-11ea-8dac-000c29541586",
            "scanned_at": "2020-02-14T21:39:21Z",
            "scanned_at_local": "2020-02-14T13:39:21-08:00",
            "reported_at": "2020-02-14T22:00:57.806491Z",
            "status": "quarantined",
            "threat_name": "Generic.Malware/Suspicious",
            "type": [
                "file"
            ],
            "path": "C:\\USERS\\WIN-BOX2\\DESKTOP\\CCTV.EXE",
            "category": "Malware",
            "ip_address": "",
            "url": "",
            "port": "",
            "affected_application": "",
            "md5": "",
            "process_name": ""
        },
        {
            "id": "eec2b102-1c14-431e-b2bb-17afa2fb7853",
            "scan_id": "ab4623d7-9c07-46fc-95b1-d0d15c64e72b",
            "machine_id": "211d8c3e-142c-4849-b1f0-1680b4bd239c",
            "machine_name": "WIN-TEN8D4FCOUB",
            "group_id": "a8fbe175-6b71-443c-b906-f18d06c7faf6",
            "detection_id_from_endpoint": "d4b5a733-4f73-11ea-83a3-000c29541586",
            "scanned_at": "2020-02-14T21:39:21Z",
            "scanned_at_local": "2020-02-14T13:39:21-08:00",
            "reported_at": "2020-02-14T22:00:57.806491Z",
            "status": "quarantined",
            "threat_name": "Generic.Malware/Suspicious",
            "type": [
                "file"
            ],
            "path": "C:\\USERS\\WIN-BOX2\\DESKTOP\\CESHI.EXE",
            "category": "Malware",
            "ip_address": "",
            "url": "",
            "port": "",
            "affected_application": "",
            "md5": "",
            "process_name": ""
        },
        {
            "id": "4ec53968-07a8-4831-ad29-0f12095d400d",
            "scan_id": "ab4623d7-9c07-46fc-95b1-d0d15c64e72b",
            "machine_id": "211d8c3e-142c-4849-b1f0-1680b4bd239c",
            "machine_name": "WIN-TEN8D4FCOUB",
            "group_id": "a8fbe175-6b71-443c-b906-f18d06c7faf6",
            "detection_id_from_endpoint": "d4b5a734-4f73-11ea-a761-000c29541586",
            "scanned_at": "2020-02-14T21:39:21Z",
            "scanned_at_local": "2020-02-14T13:39:21-08:00",
            "reported_at": "2020-02-14T22:00:57.806491Z",
            "status": "quarantined",
            "threat_name": "Generic.Malware/Suspicious",
            "type": [
                "file"
            ],
            "path": "C:\\USERS\\WIN-BOX2\\DESKTOP\\DDOS.EXE",
            "category": "Malware",
            "ip_address": "",
            "url": "",
            "port": "",
            "affected_application": "",
            "md5": "",
            "process_name": ""
        },
        {
            "id": "a08a5107-2ac1-484d-9d55-db788c46879b",
            "scan_id": "ab4623d7-9c07-46fc-95b1-d0d15c64e72b",
            "machine_id": "211d8c3e-142c-4849-b1f0-1680b4bd239c",
            "machine_name": "WIN-TEN8D4FCOUB",
            "group_id": "a8fbe175-6b71-443c-b906-f18d06c7faf6",
            "detection_id_from_endpoint": "d9f655c6-4f73-11ea-99a3-000c29541586",
            "scanned_at": "2020-02-14T21:39:21Z",
            "scanned_at_local": "2020-02-14T13:39:21-08:00",
            "reported_at": "2020-02-14T22:00:57.806491Z",
            "status": "quarantined",
            "threat_name": "Trojan.Dropper",
            "type": [
                "file"
            ],
            "path": "C:\\USERS\\WIN-BOX2\\DESKTOP\\711_2.RAR",
            "category": "Malware",
            "ip_address": "",
            "url": "",
            "port": "",
            "affected_application": "",
            "md5": "",
            "process_name": ""
        },
        {
            "id": "2e1a295b-2b83-40d6-80b1-c767c91fb930",
            "scan_id": "ab4623d7-9c07-46fc-95b1-d0d15c64e72b",
            "machine_id": "211d8c3e-142c-4849-b1f0-1680b4bd239c",
            "machine_name": "WIN-TEN8D4FCOUB",
            "group_id": "a8fbe175-6b71-443c-b906-f18d06c7faf6",
            "detection_id_from_endpoint": "d9f655c7-4f73-11ea-99fb-000c29541586",
            "scanned_at": "2020-02-14T21:39:21Z",
            "scanned_at_local": "2020-02-14T13:39:21-08:00",
            "reported_at": "2020-02-14T22:00:57.806491Z",
            "status": "quarantined",
            "threat_name": "Trojan.Dropper",
            "type": [
                "file"
            ],
            "path": "C:\\USERS\\WIN-BOX2\\DESKTOP\\BJ.EXE",
            "category": "Malware",
            "ip_address": "",
            "url": "",
            "port": "",
            "affected_application": "",
            "md5": "",
            "process_name": ""
        },
        {
            "id": "15e9b75d-db9a-41be-87df-fbf9e7b0a877",
            "scan_id": "d484489d-3dec-4198-821b-68ce71afdf4c",
            "machine_id": "211d8c3e-142c-4849-b1f0-1680b4bd239c",
            "machine_name": "WIN-TEN8D4FCOUB",
            "group_id": "a8fbe175-6b71-443c-b906-f18d06c7faf6",
            "detection_id_from_endpoint": "32743916-4c18-11ea-ad5f-000c29541586",
            "scanned_at": "2020-02-10T14:57:13Z",
            "scanned_at_local": "2020-02-10T06:57:13-08:00",
            "reported_at": "2020-02-10T15:17:27.092344Z",
            "status": "quarantined",
            "threat_name": "Trojan.Agent.SVR",
            "type": [
                "file"
            ],
            "path": "C:\\USERS\\WIN-BOX2\\DESKTOP\\711.RAR",
            "category": "Malware",
            "ip_address": "",
            "url": "",
            "port": "",
            "affected_application": "",
            "md5": "",
            "process_name": ""
        }
    ],
    "total_count": 1217,
    "next_cursor": ""
}

MOCK_SA_CHOICE = 'Suspicious Activity (EPR)'

MOCK_SA_ENDPOINT = 'https://cloud.malwarebytes.com/api/v2/sa'

MOCK_RTP_CHOICE = 'RTP Detections (EP)'

MOCK_RTP_ENDPOINT = 'https://cloud.malwarebytes.com/api/v2/detections/search'

MOCK_SA_DATA = {
    "sa": [
        {
            "detection_id_list": [
                34036085
            ],
            "status": "detected",
            "timestamp": "2020-03-03T12:27:20.000Z",
            "path": "C:\\USERS\\ROHIN SAMBATH KUMAR\\DESKTOP\\MA2EZOX5\\EKATI5862.EXE",
            "pc_hostname": "DESKTOP-664HFM6",
            "machine_id": "5074ade3-5716-44d8-83c7-5985379c0399",
            "account_id": "2020bd17-a809-4102-b744-94fe8ad1c591",
            "level": 2,
            "detected_by_count": 1
        }
    ],
    "total_count": 1,
    "next_cursor": ""
}

MOCK_SA_MACHINE_ID = '211d8c3e-142c-4849-b1f0-1680b4bd239c'

MOCK_SA_DETECTION_ID = '23606836'

MOCK_RTP_DETECTIONS_DATA = {
    "detections": [
        {
            "id": "1ef4503a-a1d3-4072-adc0-a3113c68662b",
            "type": [
                "OutboundConnection"
            ],
            "status": "blocked",
            "path": "iptest.malwarebytes.com(100.24.169.13:49792)",
            "group_id": "e61dd210-1fd1-443c-ae6d-6bc9240a562f",
            "is_root_detection": True,
            "machine_id": "e7f1475a-7e9a-409b-b7a9-ccf7e6e68779",
            "account_id": "56db16b7-7bcd-404b-9443-f4ed95044c64",
            "detection_id": "d0a49ab4-62f6-11ea-8d88-000c29286b23",
            "scanned_at": "2020-03-10T17:44:39Z",
            "scanned_at_offset_seconds": 0,
            "reported_at": "2020-03-10T17:44:40.42176888Z",
            "threat_name": "Malicious Website",
            "category": "MWAC",
            "is_rtp_stream_event": True,
            "process_name": "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe",
            "cleaned_at": "0001-01-01T00:00:00Z",
            "machine_name": "Wampa.rebelbase.org"
        }
    ],
    "aggregations": {},
    "total_count": 1,
    "next_cursor": ""
}


def test_scan_and_remediate_ip(requests_mock, mocker):

    MOCK_ENDPOINT_POST_JOBS = 'https://cloud.malwarebytes.com/api/v2/jobs'

    # patch the API endpoint
    requests_mock.post(MOCK_ENDPOINT_MACHINE_ID, json=MOCK_ENDPOINT_MACHINE_ID_RESP)
    requests_mock.post(MOCK_ENDPOINT_POST_JOBS, json=MOCK_POST_JOBS_DATA, status_code=201)

    # patch the inputs
    mocker.patch.object(demisto, 'args', return_value={'ip': MOCK_IP})
    # patch the outputs
    mocker.patch.object(demisto, 'results')

    # run the code
    ip = demisto.args().get('ip')
    hostname = demisto.args().get('hostname')
    scan_and_remediate(account_id, client_id, auth_token, ip, hostname)

    # assert the outputs
    assert demisto.results.call_count == 1
    outputs = demisto.results.call_args[0][0]
    assert len(outputs) == 5
    assert MOCK_ENDPOINT_JOBS_OUTPUT == outputs['EntryContext']


def test_scan_and_remediate_hostname(requests_mock, mocker):

    MOCK_ENDPOINT_POST_JOBS = 'https://cloud.malwarebytes.com/api/v2/jobs'

    # patch the API endpoint
    requests_mock.post(MOCK_ENDPOINT_MACHINE_ID, json=MOCK_ENDPOINT_MACHINE_ID_RESP)
    requests_mock.post(MOCK_ENDPOINT_POST_JOBS, json=MOCK_POST_JOBS_DATA, status_code=201)

    # patch the inputs
    mocker.patch.object(demisto, 'args', return_value={'hostname': MOCK_HOSTNAME})
    # patch the outputs
    mocker.patch.object(demisto, 'results')

    # run the code
    ip = demisto.args().get('ip')
    hostname = demisto.args().get('hostname')
    scan_and_remediate(account_id, client_id, auth_token, ip, hostname)

    # assert the outputs
    assert demisto.results.call_count == 1
    outputs = demisto.results.call_args[0][0]
    assert len(outputs) == 5
    assert MOCK_ENDPOINT_JOBS_OUTPUT == outputs['EntryContext']


def test_scan_and_report_ip(requests_mock, mocker):

    MOCK_ENDPOINT_POST_JOBS = 'https://cloud.malwarebytes.com/api/v2/jobs'

    # patch the API endpoint
    requests_mock.post(MOCK_ENDPOINT_MACHINE_ID, json=MOCK_ENDPOINT_MACHINE_ID_RESP)
    requests_mock.post(MOCK_ENDPOINT_POST_JOBS, json=MOCK_POST_JOBS_DATA, status_code=201)

    # patch the inputs
    mocker.patch.object(demisto, 'args', return_value={'ip': MOCK_IP})
    # patch the outputs
    mocker.patch.object(demisto, 'results')

    # run the code
    ip = demisto.args().get('ip')
    hostname = demisto.args().get('hostname')
    scan_and_report(account_id, client_id, auth_token, ip, hostname)

    # assert the outputs
    assert demisto.results.call_count == 1
    outputs = demisto.results.call_args[0][0]
    assert len(outputs) == 5
    assert MOCK_ENDPOINT_JOBS_OUTPUT == outputs['EntryContext']


def test_scan_and_report_hostname(requests_mock, mocker):

    MOCK_ENDPOINT_POST_JOBS = 'https://cloud.malwarebytes.com/api/v2/jobs'

    # patch the API endpoint
    requests_mock.post(MOCK_ENDPOINT_MACHINE_ID, json=MOCK_ENDPOINT_MACHINE_ID_RESP)
    requests_mock.post(MOCK_ENDPOINT_POST_JOBS, json=MOCK_POST_JOBS_DATA, status_code=201)

    # patch the inputs
    mocker.patch.object(demisto, 'args', return_value={'hostname': MOCK_HOSTNAME})
    # patch the outputs
    mocker.patch.object(demisto, 'results')

    # run the code
    ip = demisto.args().get('ip')
    hostname = demisto.args().get('hostname')
    scan_and_report(account_id, client_id, auth_token, ip, hostname)

    # assert the outputs
    assert demisto.results.call_count == 1
    outputs = demisto.results.call_args[0][0]
    assert len(outputs) == 5
    assert MOCK_ENDPOINT_JOBS_OUTPUT == outputs['EntryContext']


def test_isolate_endpoint_ip(requests_mock, mocker):

    MOCK_ENDPOINT_POST_JOBS = 'https://cloud.malwarebytes.com/api/v2/jobs'

    # patch the API endpoint
    requests_mock.post(MOCK_ENDPOINT_MACHINE_ID, json=MOCK_ENDPOINT_MACHINE_ID_RESP)
    requests_mock.post(MOCK_ENDPOINT_POST_JOBS + '/endpoints/isolate', json=MOCK_POST_JOBS_DATA, status_code=201)

    # patch the inputs
    mocker.patch.object(demisto, 'args', return_value={'ip': MOCK_IP})
    # patch the outputs
    mocker.patch.object(demisto, 'results')

    # run the code
    ip = demisto.args().get('ip')
    hostname = demisto.args().get('hostname')
    isolate_endpoint(account_id, client_id, auth_token, ip, hostname)

    # assert the outputs
    assert demisto.results.call_count == 1
    outputs = demisto.results.call_args[0][0]
    assert len(outputs) == 5
    assert MOCK_ENDPOINT_JOBS_OUTPUT == outputs['EntryContext']


def test_isolate_endpoint_hostname(requests_mock, mocker):

    MOCK_ENDPOINT_POST_JOBS = 'https://cloud.malwarebytes.com/api/v2/jobs'

    # patch the API endpoint
    requests_mock.post(MOCK_ENDPOINT_MACHINE_ID, json=MOCK_ENDPOINT_MACHINE_ID_RESP)
    requests_mock.post(MOCK_ENDPOINT_POST_JOBS + '/endpoints/isolate', json=MOCK_POST_JOBS_DATA, status_code=201)

    # patch the inputs
    mocker.patch.object(demisto, 'args', return_value={'hostname': MOCK_HOSTNAME})
    # patch the outputs
    mocker.patch.object(demisto, 'results')

    # run the code
    ip = demisto.args().get('ip')
    hostname = demisto.args().get('hostname')
    isolate_endpoint(account_id, client_id, auth_token, ip, hostname)

    # assert the outputs
    assert demisto.results.call_count == 1
    outputs = demisto.results.call_args[0][0]
    assert len(outputs) == 5
    assert MOCK_ENDPOINT_JOBS_OUTPUT == outputs['EntryContext']


def test_isolate_process_ip(requests_mock, mocker):

    MOCK_ENDPOINT_POST_JOBS = 'https://cloud.malwarebytes.com/api/v2/jobs'

    # patch the API endpoint
    requests_mock.post(MOCK_ENDPOINT_MACHINE_ID, json=MOCK_ENDPOINT_MACHINE_ID_RESP)
    requests_mock.post(MOCK_ENDPOINT_POST_JOBS + '/endpoints/isolate', json=MOCK_POST_JOBS_DATA, status_code=201)

    # patch the inputs
    mocker.patch.object(demisto, 'args', return_value={'ip': MOCK_IP})
    # patch the outputs
    mocker.patch.object(demisto, 'results')

    # run the code
    ip = demisto.args().get('ip')
    hostname = demisto.args().get('hostname')
    isolate_process(account_id, client_id, auth_token, ip, hostname)

    # assert the outputs
    assert demisto.results.call_count == 1
    outputs = demisto.results.call_args[0][0]
    assert len(outputs) == 5
    assert MOCK_ENDPOINT_JOBS_OUTPUT == outputs['EntryContext']


def test_isolate_process_hostname(requests_mock, mocker):

    MOCK_ENDPOINT_POST_JOBS = 'https://cloud.malwarebytes.com/api/v2/jobs'

    # patch the API endpoint
    requests_mock.post(MOCK_ENDPOINT_MACHINE_ID, json=MOCK_ENDPOINT_MACHINE_ID_RESP)
    requests_mock.post(MOCK_ENDPOINT_POST_JOBS + '/endpoints/isolate', json=MOCK_POST_JOBS_DATA, status_code=201)

    # patch the inputs
    mocker.patch.object(demisto, 'args', return_value={'hostname': MOCK_HOSTNAME})
    # patch the outputs
    mocker.patch.object(demisto, 'results')

    # run the code
    ip = demisto.args().get('ip')
    hostname = demisto.args().get('hostname')
    isolate_process(account_id, client_id, auth_token, ip, hostname)

    # assert the outputs
    assert demisto.results.call_count == 1
    outputs = demisto.results.call_args[0][0]
    assert len(outputs) == 5
    assert MOCK_ENDPOINT_JOBS_OUTPUT == outputs['EntryContext']


def test_isolate_desktop_ip(requests_mock, mocker):

    MOCK_ENDPOINT_POST_JOBS = 'https://cloud.malwarebytes.com/api/v2/jobs'

    # patch the API endpoint
    requests_mock.post(MOCK_ENDPOINT_MACHINE_ID, json=MOCK_ENDPOINT_MACHINE_ID_RESP)
    requests_mock.post(MOCK_ENDPOINT_POST_JOBS + '/endpoints/isolate', json=MOCK_POST_JOBS_DATA, status_code=201)

    # patch the inputs
    mocker.patch.object(demisto, 'args', return_value={'ip': MOCK_IP})
    # patch the outputs
    mocker.patch.object(demisto, 'results')

    # run the code
    ip = demisto.args().get('ip')
    hostname = demisto.args().get('hostname')
    isolate_desktop(account_id, client_id, auth_token, ip, hostname)

    # assert the outputs
    assert demisto.results.call_count == 1
    outputs = demisto.results.call_args[0][0]
    assert len(outputs) == 5
    assert MOCK_ENDPOINT_JOBS_OUTPUT == outputs['EntryContext']


def test_isolate_desktop_hostname(requests_mock, mocker):

    MOCK_ENDPOINT_POST_JOBS = 'https://cloud.malwarebytes.com/api/v2/jobs'

    # patch the API endpoint
    requests_mock.post(MOCK_ENDPOINT_MACHINE_ID, json=MOCK_ENDPOINT_MACHINE_ID_RESP)
    requests_mock.post(MOCK_ENDPOINT_POST_JOBS + '/endpoints/isolate', json=MOCK_POST_JOBS_DATA, status_code=201)

    # patch the inputs
    mocker.patch.object(demisto, 'args', return_value={'hostname': MOCK_HOSTNAME})
    # patch the outputs
    mocker.patch.object(demisto, 'results')

    # run the code
    ip = demisto.args().get('ip')
    hostname = demisto.args().get('hostname')
    isolate_desktop(account_id, client_id, auth_token, ip, hostname)

    # assert the outputs
    assert demisto.results.call_count == 1
    outputs = demisto.results.call_args[0][0]
    assert len(outputs) == 5
    assert MOCK_ENDPOINT_JOBS_OUTPUT == outputs['EntryContext']


def test_isolate_network_ip(requests_mock, mocker):

    MOCK_ENDPOINT_POST_JOBS = 'https://cloud.malwarebytes.com/api/v2/jobs'

    # patch the API endpoint
    requests_mock.post(MOCK_ENDPOINT_MACHINE_ID, json=MOCK_ENDPOINT_MACHINE_ID_RESP)
    requests_mock.post(MOCK_ENDPOINT_POST_JOBS + '/endpoints/isolate', json=MOCK_POST_JOBS_DATA, status_code=201)

    # patch the inputs
    mocker.patch.object(demisto, 'args', return_value={'ip': MOCK_IP})
    # patch the outputs
    mocker.patch.object(demisto, 'results')

    # run the code
    ip = demisto.args().get('ip')
    hostname = demisto.args().get('hostname')
    isolate_network(account_id, client_id, auth_token, ip, hostname)

    # assert the outputs
    assert demisto.results.call_count == 1
    outputs = demisto.results.call_args[0][0]
    assert len(outputs) == 5
    assert MOCK_ENDPOINT_JOBS_OUTPUT == outputs['EntryContext']


def test_isolate_network_hostname(requests_mock, mocker):

    MOCK_ENDPOINT_POST_JOBS = 'https://cloud.malwarebytes.com/api/v2/jobs'

    # patch the API endpoint
    requests_mock.post(MOCK_ENDPOINT_MACHINE_ID, json=MOCK_ENDPOINT_MACHINE_ID_RESP)
    requests_mock.post(MOCK_ENDPOINT_POST_JOBS + '/endpoints/isolate', json=MOCK_POST_JOBS_DATA, status_code=201)

    # patch the inputs
    mocker.patch.object(demisto, 'args', return_value={'hostname': MOCK_HOSTNAME})
    # patch the outputs
    mocker.patch.object(demisto, 'results')

    # run the code
    ip = demisto.args().get('ip')
    hostname = demisto.args().get('hostname')
    isolate_network(account_id, client_id, auth_token, ip, hostname)

    # assert the outputs
    assert demisto.results.call_count == 1
    outputs = demisto.results.call_args[0][0]
    assert len(outputs) == 5
    assert MOCK_ENDPOINT_JOBS_OUTPUT == outputs['EntryContext']


def test_deisolate_endpoint_ip(requests_mock, mocker):

    MOCK_ENDPOINT_POST_JOBS = 'https://cloud.malwarebytes.com/api/v2/jobs'

    # patch the API endpoint
    requests_mock.post(MOCK_ENDPOINT_MACHINE_ID, json=MOCK_ENDPOINT_MACHINE_ID_RESP)
    requests_mock.post(MOCK_ENDPOINT_POST_JOBS + '/endpoints/unlock', json=MOCK_POST_JOBS_DATA, status_code=201)

    # patch the inputs
    mocker.patch.object(demisto, 'args', return_value={'ip': MOCK_IP})
    # patch the outputs
    mocker.patch.object(demisto, 'results')

    # run the code
    ip = demisto.args().get('ip')
    hostname = demisto.args().get('hostname')
    deisolate_endpoint(account_id, client_id, auth_token, ip, hostname)

    # assert the outputs
    assert demisto.results.call_count == 1
    outputs = demisto.results.call_args[0][0]
    assert len(outputs) == 5
    assert MOCK_ENDPOINT_JOBS_OUTPUT == outputs['EntryContext']


def test_deisolate_endpoint_hostname(requests_mock, mocker):

    MOCK_ENDPOINT_POST_JOBS = 'https://cloud.malwarebytes.com/api/v2/jobs'

    # patch the API endpoint
    requests_mock.post(MOCK_ENDPOINT_MACHINE_ID, json=MOCK_ENDPOINT_MACHINE_ID_RESP)
    requests_mock.post(MOCK_ENDPOINT_POST_JOBS + '/endpoints/unlock', json=MOCK_POST_JOBS_DATA, status_code=201)

    # patch the inputs
    mocker.patch.object(demisto, 'args', return_value={'hostname': MOCK_HOSTNAME})
    # patch the outputs
    mocker.patch.object(demisto, 'results')

    # run the code
    ip = demisto.args().get('ip')
    hostname = demisto.args().get('hostname')
    deisolate_endpoint(account_id, client_id, auth_token, ip, hostname)

    # assert the outputs
    assert demisto.results.call_count == 1
    outputs = demisto.results.call_args[0][0]
    assert len(outputs) == 5
    assert MOCK_ENDPOINT_JOBS_OUTPUT == outputs['EntryContext']


def test_list_all_endpoints_all(requests_mock, mocker):

    # patch the API endpoint
    requests_mock.get(MOCK_ENDPOINTS, json=MOCK_MACHINES_DATA)

    # patch the inputs
    mocker.patch.object(demisto, 'args', return_value={'endpoints': 'all'})
    # patch the outputs
    mocker.patch.object(demisto, 'results')

    # run the code
    endpoint = demisto.args().get('endpoints')
    list_all_endpoints(account_id, client_id, auth_token, endpoint)

    # assert the outputs
    assert demisto.results.call_count == 1
    outputs = demisto.results.call_args[0][0]
    assert len(outputs) == 5
    assert str(MOCK_MACHINES_DATA['machines']) == str(outputs['Contents'])


def test_list_all_endpoints_online(requests_mock, mocker):

    MOCK_MACHINES_DATA_ONLINE = {
        "machines": [
            {
                "created_at": "2020-02-05T10:12:55.187467Z",
                "id": "017febb6-ae68-4c15-9918-d911c72d062a",
                "last_seen_at": "2020-02-26T16:36:17.352342Z",
                "name": "TA-AZ-CLT1",
                "online": True,
                "os_architecture": "AMD64",
                "os_platform": "WINDOWS",
                "os_release_name": "Microsoft Windows 10 Pro"
            }
        ]
    }

    # patch the API endpoint
    requests_mock.get(MOCK_ENDPOINTS, json=MOCK_MACHINES_DATA)

    # patch the inputs
    mocker.patch.object(demisto, 'args', return_value={'endpoints': 'online'})
    # patch the outputs
    mocker.patch.object(demisto, 'results')

    # run the code
    endpoint = demisto.args().get('endpoints')
    list_all_endpoints(account_id, client_id, auth_token, endpoint)

    # assert the outputs
    assert demisto.results.call_count == 1
    outputs = demisto.results.call_args[0][0]
    assert len(outputs) == 5
    assert str(MOCK_MACHINES_DATA_ONLINE['machines']) == str(outputs['Contents'])


def test_list_all_endpoints_offline(requests_mock, mocker):

    MOCK_MACHINES_DATA_OFFLINE = {
        "machines": [
            {
                "created_at": "2020-02-05T09:50:02.194556Z",
                "id": "211d8c3e-142c-4849-b1f0-1680b4bd239c",
                "last_seen_at": "2020-03-11T11:00:24.746133Z",
                "name": "WIN-TEN8D4FCOUB",
                "online": False,
                "os_architecture": "AMD64",
                "os_platform": "WINDOWS",
                "os_release_name": "Microsoft Windows 10 Enterprise"
            },
            {
                "created_at": "2019-11-25T19:47:15.833008Z",
                "id": "b5740188-00a2-434b-a180-5b0fa85cb10b",
                "last_seen_at": "2020-02-27T15:36:33.68981Z",
                "name": "DESKTOP-91UJNA1",
                "online": False,
                "os_architecture": "AMD64",
                "os_platform": "WINDOWS",
                "os_release_name": "Microsoft Windows 10 Pro"
            },
            {
                "created_at": "2019-10-18T09:26:26.993555Z",
                "id": "5074ade3-5716-44d8-83c7-5985379c0399",
                "last_seen_at": "2020-03-05T13:17:15.459352Z",
                "name": "DESKTOP-664HFM6",
                "online": False,
                "os_architecture": "AMD64",
                "os_platform": "WINDOWS",
                "os_release_name": "Microsoft Windows 10 Pro"
            }
        ]
    }

    # patch the API endpoint
    requests_mock.get(MOCK_ENDPOINTS, json=MOCK_MACHINES_DATA)

    # patch the inputs
    mocker.patch.object(demisto, 'args', return_value={'endpoints': 'offline'})
    # patch the outputs
    mocker.patch.object(demisto, 'results')

    # run the code
    endpoint = demisto.args().get('endpoints')
    list_all_endpoints(account_id, client_id, auth_token, endpoint)

    # assert the outputs
    assert demisto.results.call_count == 1
    outputs = demisto.results.call_args[0][0]
    assert len(outputs) == 5
    assert str(MOCK_MACHINES_DATA_OFFLINE['machines']) == str(outputs['Contents'])


def test_list_endpoint_info_hostname(requests_mock, mocker):

    MOCK_ASSET_ID = '8c9df179-a999-4ca2-9c41-9795ae0b08f5'
    MOCK_ASSETS_RESPONSE = {
        "startups": [
            {
                "key": "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon",
                "name": "Shell",
                "value": "explorer.exe"
            },
            {
                "key": "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon",
                "name": "System",
                "value": ""
            },
            {
                "key": "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon",
                "name": "Taskman",
                "value": ""
            },
            {
                "key": "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon",
                "name": "Userinit",
                "value": "C:\\Windows\\system32\\userinit.exe,"
            },
            {
                "key": "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run",
                "name": "VMware User Process",
                "value": "\"C:\\Program Files\\VMware\\VMware Tools\\vmtoolsd.exe\" -n vmusr"
            },
            {
                "key": "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ShellServiceObjectDelayLoad",
                "name": "WebCheck",
                "value": "{E6FB5E20-DE35-11CF-9C87-00AA005127ED}"
            },
            {
                "key": "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa",
                "name": "Authentication Packages"
            },
            {
                "key": "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa",
                "name": "Notification Packages"
            },
            {
                "key": "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa",
                "name": "Security Packages"
            },
            {
                "key": "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders",
                "name": "SecurityProviders",
                "value": "credssp.dll, pwdssp.dll"
            }
        ],
        "os_info": {
            "os_platform": "Windows",
            "os_architecture": "Amd64",
            "os_version": "6.3.9600",
            "os_release_name": "Microsoft Windows Server 2012 R2 Standard",
            "os_type": "Server"
        },
        "memory": {
            "total_virtual": 2549530624,
            "free_virtual": 765550592,
            "total_physical": 2147483648,
            "free_physical": 873046016
        },
        "computer_info": {
            "manufacturer": "VMware, Inc.",
            "model": "VMware Virtual Platform"
        },
        "software_installed": [
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft Help Viewer 2.2",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "2.2.23107"
            },
            {
                "vendor": "Malwarebytes",
                "product": "Malwarebytes Management Console",
                "installed_date": "2017-03-26T16:00:00Z",
                "version": "1.8.0.3431"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft .NET Framework 4.5.1 SDK",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "4.5.51641"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft Visual C++ 2008 Redistributable - x86 9.0.30729.4148",
                "installed_date": "2016-12-04T16:00:00Z",
                "version": "9.0.30729.4148"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "IIS 7.5 Express",
                "installed_date": "2016-12-04T16:00:00Z",
                "version": "7.5.1070"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft SQL Server 2017 Policies ",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "14.0.1000.169"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft SQL Server 2014 Management Objects ",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "12.0.2000.8"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft .NET Framework 4.5.2 Multi-Targeting Pack (ENU)",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "4.5.51209"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft .NET Framework 4.5 Multi-Targeting Pack",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "4.5.50710"
            },
            {
                "vendor": "Malwarebytes",
                "product": "Malwarebytes Endpoint Agent",
                "installed_date": "2019-11-15T16:00:00Z",
                "version": "1.2.0.717"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft .NET Framework 4.5.1 Multi-Targeting Pack",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "4.5.50932"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft System CLR Types for SQL Server 2014",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "12.0.2402.11"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft Visual C++ 2015 Redistributable (x86) - 14.0.23026",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "14.0.23026.0"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft Visual C++ 2013 Redistributable (x64) - 12.0.21005",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "12.0.21005.1"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft SQL Server Data-Tier Application Framework (x86)",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "14.0.4127.1"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft SQL Server Management Studio - 17.9.1",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "14.0.17289.0"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft Visual Studio Tools for Applications 2015",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "14.0.23829"
            },
            {
                "vendor": "Malwarebytes",
                "product": "Malwarebytes Management Server",
                "installed_date": "2017-03-26T16:00:00Z",
                "version": "1.8.0.3431"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft .NET Framework 4.5.2 Multi-Targeting Pack",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "4.5.51209"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft Visual Studio Tools for Applications 2015 Language Support",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "14.0.23107.20"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft SQL Server Browser",
                "installed_date": "2016-12-05T16:00:00Z",
                "version": "10.50.1600.1"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft Visual C++ 2013 Redistributable (x86) - 12.0.21005",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "12.0.21005.1"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft Visual Studio 2015 Shell (Isolated)",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "14.0.23107.10"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft .NET Framework 4.5.1 Multi-Targeting Pack (ENU)",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "4.5.50932"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft Visual C++ 2015 Redistributable (x64) - 14.0.23026",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "14.0.23026.0"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft SQL Server 2008 R2 (64-bit)",
                "installed_date": "2016-12-05T16:00:00Z",
                "version": ""
            },
            {
                "vendor": "VMware, Inc.",
                "product": "VMware Tools",
                "installed_date": "2016-12-04T16:00:00Z",
                "version": "10.0.10.4301679"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft SQL Server 2008 R2 Native Client",
                "installed_date": "2016-12-05T16:00:00Z",
                "version": "10.50.1600.1"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft SQL Server VSS Writer",
                "installed_date": "2016-12-05T16:00:00Z",
                "version": "10.50.1600.1"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft SQL Server 2012 Native Client ",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "11.3.6540.0"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Active Directory Authentication Library for SQL Server",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "14.0.1000.169"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft Visual C++ 2008 Redistributable - x64 9.0.30729.6161",
                "installed_date": "2016-12-04T16:00:00Z",
                "version": "9.0.30729.6161"
            },
            {
                "vendor": "Malwarebytes",
                "product": "Malwarebytes version 3.8.4.2971",
                "installed_date": "2019-11-15T16:00:00Z",
                "version": "3.8.4.2971"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft SQL Server 2008 R2 Setup (English)",
                "installed_date": "2016-12-05T16:00:00Z",
                "version": "10.50.1600.1"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft ODBC Driver 13 for SQL Server",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "14.0.1000.169"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft System CLR Types for SQL Server 2017",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "14.0.1000.169"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft SQL Server 2017 T-SQL Language Service ",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "14.0.17289.0"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft SQL Server 2008 Setup Support Files ",
                "installed_date": "2016-12-05T16:00:00Z",
                "version": "10.1.2731.0"
            }
        ],
        "nics": [
            {
                "mac_address": "000C29D7A627",
                "description": "Intel(R) 82574L Gigabit Network Connection #2",
                "ips": [
                    "192.168.230.140"
                ]
            },
            {
                "mac_address": "000C29D7A631",
                "description": "Intel(R) 82574L Gigabit Network Connection",
                "ips": [
                    "172.16.128.100"
                ]
            }
        ],
        "drives": [
            {
                "freespace_available": 47086694400,
                "volume_label": "",
                "drive_format": "NTFS",
                "freespace_total": 47086694400,
                "name": "C:\\",
                "total_size": 64422408192
            }
        ],
        "updates_installed": [
            {
                "installed_date": "2019-01-07T19:04:46Z",
                "title": "Update for Windows (KB2999226)"
            }
        ],
        "domain_name": "",
        "culture": "en-US",
        "object_sid": "",
        "dhcp_scope_name": "",
        "time_zone": "Asia/Shanghai",
        "host_name": "WIN-TEN8D4FCOUB",
        "fully_qualified_host_name": "WIN-TEN8D4FCOUB",
        "object_guid": "",
        "plugin_version": "1.2.0.329"
    }
    MOCK_ENDPOINT_HOSTNAME_OUTPUT = {'Malwarebytes.Endpoint.Hostname(val.Hostname == obj.Hostname)': MOCK_HOSTNAME}

    # patch the API endpoint
    requests_mock.post(MOCK_ENDPOINTS, json=MOCK_ENDPOINT_MACHINE_ID_RESP)
    requests_mock.get(MOCK_ENDPOINTS + '/' + MOCK_ASSET_ID + '/assets', json=MOCK_ASSETS_RESPONSE)
    # patch the inputs
    mocker.patch.object(demisto, 'args', return_value={'hostname': MOCK_HOSTNAME})
    # patch the outputs
    mocker.patch.object(demisto, 'results')

    # run the code
    ip = demisto.args().get('ip')
    hostname = demisto.args().get('hostname')
    list_endpoint_info(account_id, client_id, auth_token, ip, hostname)

    # assert the outputs
    assert demisto.results.call_count == 1
    outputs = demisto.results.call_args[0][0]
    assert len(outputs) == 5
    assert MOCK_ENDPOINT_HOSTNAME_OUTPUT == outputs['EntryContext']


def test_list_endpoint_info_ip(requests_mock, mocker):

    MOCK_ASSET_ID = '8c9df179-a999-4ca2-9c41-9795ae0b08f5'
    MOCK_ASSETS_RESPONSE = {
        "startups": [
            {
                "key": "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon",
                "name": "Shell",
                "value": "explorer.exe"
            },
            {
                "key": "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon",
                "name": "System",
                "value": ""
            },
            {
                "key": "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon",
                "name": "Taskman",
                "value": ""
            },
            {
                "key": "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon",
                "name": "Userinit",
                "value": "C:\\Windows\\system32\\userinit.exe,"
            },
            {
                "key": "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run",
                "name": "VMware User Process",
                "value": "\"C:\\Program Files\\VMware\\VMware Tools\\vmtoolsd.exe\" -n vmusr"
            },
            {
                "key": "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ShellServiceObjectDelayLoad",
                "name": "WebCheck",
                "value": "{E6FB5E20-DE35-11CF-9C87-00AA005127ED}"
            },
            {
                "key": "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa",
                "name": "Authentication Packages"
            },
            {
                "key": "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa",
                "name": "Notification Packages"
            },
            {
                "key": "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa",
                "name": "Security Packages"
            },
            {
                "key": "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders",
                "name": "SecurityProviders",
                "value": "credssp.dll, pwdssp.dll"
            }
        ],
        "os_info": {
            "os_platform": "Windows",
            "os_architecture": "Amd64",
            "os_version": "6.3.9600",
            "os_release_name": "Microsoft Windows Server 2012 R2 Standard",
            "os_type": "Server"
        },
        "memory": {
            "total_virtual": 2549530624,
            "free_virtual": 765550592,
            "total_physical": 2147483648,
            "free_physical": 873046016
        },
        "computer_info": {
            "manufacturer": "VMware, Inc.",
            "model": "VMware Virtual Platform"
        },
        "software_installed": [
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft Help Viewer 2.2",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "2.2.23107"
            },
            {
                "vendor": "Malwarebytes",
                "product": "Malwarebytes Management Console",
                "installed_date": "2017-03-26T16:00:00Z",
                "version": "1.8.0.3431"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft .NET Framework 4.5.1 SDK",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "4.5.51641"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft Visual C++ 2008 Redistributable - x86 9.0.30729.4148",
                "installed_date": "2016-12-04T16:00:00Z",
                "version": "9.0.30729.4148"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "IIS 7.5 Express",
                "installed_date": "2016-12-04T16:00:00Z",
                "version": "7.5.1070"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft SQL Server 2017 Policies ",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "14.0.1000.169"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft SQL Server 2014 Management Objects ",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "12.0.2000.8"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft .NET Framework 4.5.2 Multi-Targeting Pack (ENU)",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "4.5.51209"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft .NET Framework 4.5 Multi-Targeting Pack",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "4.5.50710"
            },
            {
                "vendor": "Malwarebytes",
                "product": "Malwarebytes Endpoint Agent",
                "installed_date": "2019-11-15T16:00:00Z",
                "version": "1.2.0.717"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft .NET Framework 4.5.1 Multi-Targeting Pack",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "4.5.50932"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft System CLR Types for SQL Server 2014",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "12.0.2402.11"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft Visual C++ 2015 Redistributable (x86) - 14.0.23026",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "14.0.23026.0"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft Visual C++ 2013 Redistributable (x64) - 12.0.21005",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "12.0.21005.1"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft SQL Server Data-Tier Application Framework (x86)",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "14.0.4127.1"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft SQL Server Management Studio - 17.9.1",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "14.0.17289.0"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft Visual Studio Tools for Applications 2015",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "14.0.23829"
            },
            {
                "vendor": "Malwarebytes",
                "product": "Malwarebytes Management Server",
                "installed_date": "2017-03-26T16:00:00Z",
                "version": "1.8.0.3431"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft .NET Framework 4.5.2 Multi-Targeting Pack",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "4.5.51209"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft Visual Studio Tools for Applications 2015 Language Support",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "14.0.23107.20"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft SQL Server Browser",
                "installed_date": "2016-12-05T16:00:00Z",
                "version": "10.50.1600.1"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft Visual C++ 2013 Redistributable (x86) - 12.0.21005",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "12.0.21005.1"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft Visual Studio 2015 Shell (Isolated)",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "14.0.23107.10"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft .NET Framework 4.5.1 Multi-Targeting Pack (ENU)",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "4.5.50932"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft Visual C++ 2015 Redistributable (x64) - 14.0.23026",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "14.0.23026.0"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft SQL Server 2008 R2 (64-bit)",
                "installed_date": "2016-12-05T16:00:00Z",
                "version": ""
            },
            {
                "vendor": "VMware, Inc.",
                "product": "VMware Tools",
                "installed_date": "2016-12-04T16:00:00Z",
                "version": "10.0.10.4301679"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft SQL Server 2008 R2 Native Client",
                "installed_date": "2016-12-05T16:00:00Z",
                "version": "10.50.1600.1"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft SQL Server VSS Writer",
                "installed_date": "2016-12-05T16:00:00Z",
                "version": "10.50.1600.1"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft SQL Server 2012 Native Client ",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "11.3.6540.0"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Active Directory Authentication Library for SQL Server",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "14.0.1000.169"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft Visual C++ 2008 Redistributable - x64 9.0.30729.6161",
                "installed_date": "2016-12-04T16:00:00Z",
                "version": "9.0.30729.6161"
            },
            {
                "vendor": "Malwarebytes",
                "product": "Malwarebytes version 3.8.4.2971",
                "installed_date": "2019-11-15T16:00:00Z",
                "version": "3.8.4.2971"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft SQL Server 2008 R2 Setup (English)",
                "installed_date": "2016-12-05T16:00:00Z",
                "version": "10.50.1600.1"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft ODBC Driver 13 for SQL Server",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "14.0.1000.169"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft System CLR Types for SQL Server 2017",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "14.0.1000.169"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft SQL Server 2017 T-SQL Language Service ",
                "installed_date": "2019-01-07T16:00:00Z",
                "version": "14.0.17289.0"
            },
            {
                "vendor": "Microsoft Corporation",
                "product": "Microsoft SQL Server 2008 Setup Support Files ",
                "installed_date": "2016-12-05T16:00:00Z",
                "version": "10.1.2731.0"
            }
        ],
        "nics": [
            {
                "mac_address": "000C29D7A627",
                "description": "Intel(R) 82574L Gigabit Network Connection #2",
                "ips": [
                    "192.168.230.140"
                ]
            },
            {
                "mac_address": "000C29D7A631",
                "description": "Intel(R) 82574L Gigabit Network Connection",
                "ips": [
                    "172.16.128.100"
                ]
            }
        ],
        "drives": [
            {
                "freespace_available": 47086694400,
                "volume_label": "",
                "drive_format": "NTFS",
                "freespace_total": 47086694400,
                "name": "C:\\",
                "total_size": 64422408192
            }
        ],
        "updates_installed": [
            {
                "installed_date": "2019-01-07T19:04:46Z",
                "title": "Update for Windows (KB2999226)"
            }
        ],
        "domain_name": "",
        "culture": "en-US",
        "object_sid": "",
        "dhcp_scope_name": "",
        "time_zone": "Asia/Shanghai",
        "host_name": "WIN-TEN8D4FCOUB",
        "fully_qualified_host_name": "WIN-TEN8D4FCOUB",
        "object_guid": "",
        "plugin_version": "1.2.0.329"
    }
    MOCK_ENDPOINT_HOSTNAME_OUTPUT = {'Malwarebytes.Endpoint.Hostname(val.Hostname == obj.Hostname)': MOCK_HOSTNAME}
    # patch the API endpoint
    requests_mock.post(MOCK_ENDPOINTS, json=MOCK_ENDPOINT_MACHINE_ID_RESP)
    requests_mock.get(MOCK_ENDPOINTS + '/' + MOCK_ASSET_ID + '/assets', json=MOCK_ASSETS_RESPONSE)
    # patch the inputs
    mocker.patch.object(demisto, 'args', return_value={'ip': MOCK_IP})
    # patch the outputs
    mocker.patch.object(demisto, 'results')

    # run the code
    ip = demisto.args().get('ip')
    hostname = demisto.args().get('hostname')
    list_endpoint_info(account_id, client_id, auth_token, ip, hostname)

    # assert the outputs
    assert demisto.results.call_count == 1
    outputs = demisto.results.call_args[0][0]
    assert len(outputs) == 5
    assert MOCK_ENDPOINT_HOSTNAME_OUTPUT == outputs['EntryContext']


def test_scan_detections_job_id(requests_mock, mocker):

    MOCK_ENDPOINT_DETECTION_OUTPUT = {'Malwarebytes.Scan.Status(val.Status == obj.Status)': 'COMPLETED'}

    # patch the API endpoint
    requests_mock.get(MOCK_ENDPOINTS_JOBS + '/jobs/' + MOCK_JOBS_JOB_ID, json=MOCK_GET_JOBS_DATA)
    requests_mock.get(MOCK_ENDPOINTS_JOBS + '/jobs/' + MOCK_JOBS_JOB_ID, json=MOCK_GET_JOBS_DATA)
    requests_mock.get(MOCK_ENDPOINTS_JOBS + '/jobs/' + MOCK_JOBS_JOB_ID, json=MOCK_GET_JOBS_DATA)
    requests_mock.get(MOCK_DETECTIONS_PATH, json=MOCK_SCAN_DETECTIONS)

    # patch the inputs
    mocker.patch.object(demisto, 'args', return_value={'job_id': MOCK_JOBS_JOB_ID})
    # patch the outputs
    mocker.patch.object(demisto, 'results')

    # run the code
    job_id = demisto.args().get('job_id')
    scan_detections(account_id, client_id, auth_token, job_id)

    # assert the outputs
    assert demisto.results.call_count == 1
    outputs = demisto.results.call_args[0][0]
    assert len(outputs) == 5
    assert MOCK_ENDPOINT_DETECTION_OUTPUT == outputs['EntryContext']


def test_scan_status_job_id(requests_mock, mocker):

    MOCK_ENDPOINT_DETECTION_OUTPUT = {'Malwarebytes.Scan.Status(val.Status == obj.Status)': 'COMPLETED'}

    # patch the API endpoint
    requests_mock.get(MOCK_ENDPOINTS_JOBS + '/jobs/' + MOCK_JOBS_JOB_ID, json=MOCK_GET_JOBS_DATA)

    # patch the inputs
    mocker.patch.object(demisto, 'args', return_value={'job_id': MOCK_JOBS_JOB_ID})
    # patch the outputs
    mocker.patch.object(demisto, 'results')

    # run the code
    job_id = demisto.args().get('job_id')
    scan_status(account_id, client_id, auth_token, job_id)

    # assert the outputs
    assert demisto.results.call_count == 1
    outputs = demisto.results.call_args[0][0]
    assert len(outputs) == 5
    assert MOCK_ENDPOINT_DETECTION_OUTPUT == outputs['EntryContext']


def test_fetch_incidents_epr(requests_mock, mocker):

    # patch the API endpoint
    requests_mock.get(MOCK_SA_ENDPOINT, json=MOCK_SA_DATA)

    # patch the inputs
    mocker.patch.object(demisto, 'args', return_value={'Fetch_Event_List': MOCK_SA_CHOICE,
                                                       'suspicious_activity_severity': 'High'})

    # patch the outputs
    mocker.patch.object(demisto, 'results')

    # run the code
    Event_list = demisto.params().get('Fetch_Event_List')
    fetch_incidents(account_id, client_id, auth_token, Event_list)

    # assert the outputs
    assert demisto.results.call_count == 1
    outputs = demisto.results.call_args[0][0]
    assert len(outputs) == 3
    assert outputs['Contents'] == '[]'


def test_fetch_incidents_ep(requests_mock, mocker):

    # patch the API endpoint
    requests_mock.post(MOCK_RTP_ENDPOINT, json=MOCK_RTP_DETECTIONS_DATA)

    # patch the inputs
    mocker.patch.object(demisto, 'args', return_value={'Fetch_Event_List': MOCK_RTP_CHOICE, 'rtp_threat_category': 'Malware'})

    # patch the outputs
    mocker.patch.object(demisto, 'results')

    # run the code
    Event_list = demisto.params().get('Fetch_Event_List')
    fetch_incidents(account_id, client_id, auth_token, Event_list)

    # assert the outputs
    assert demisto.results.call_count == 1
    outputs = demisto.results.call_args[0][0]
    assert len(outputs) == 3
    assert outputs['Contents'] == '[]'


def test_open_sa_incident(requests_mock, mocker):

    MOCK_OPEN = MOCK_ENDPOINTS + '/' + MOCK_SA_MACHINE_ID + '/sa/' + MOCK_SA_DETECTION_ID + '/open'

    # patch the API endpoint
    requests_mock.put(MOCK_OPEN, json={}, status_code=201)

    # path the inputs
    mocker.patch.object(demisto, 'args', return_value={'machine_id': MOCK_SA_MACHINE_ID, 'detection_id': MOCK_SA_DETECTION_ID})

    # patch the outputs
    mocker.patch.object(demisto, 'results')

    # run the code
    machine_id = demisto.args().get('machine_id')
    detection_id = demisto.args().get('detection_id')
    open_sa_incident(account_id, client_id, auth_token, machine_id, detection_id)

    # assert the outputs
    assert demisto.results.call_count == 1


def test_remediate_sa_incident(requests_mock, mocker):

    MOCK_REMEDIATE = MOCK_ENDPOINTS + '/' + MOCK_SA_MACHINE_ID + '/sa/' + MOCK_SA_DETECTION_ID + '/remediate'

    # patch the API endpoint
    requests_mock.post(MOCK_REMEDIATE, json={}, status_code=201)

    # path the inputs
    mocker.patch.object(demisto, 'args', return_value={'machine_id': MOCK_SA_MACHINE_ID, 'detection_id': MOCK_SA_DETECTION_ID})

    # patch the outputs
    mocker.patch.object(demisto, 'results')

    # run the code
    machine_id = demisto.args().get('machine_id')
    detection_id = demisto.args().get('detection_id')
    remediate_sa_incident(account_id, client_id, auth_token, machine_id, detection_id)

    # assert the outputs
    assert demisto.results.call_count == 1


def test_close_sa_incident(requests_mock, mocker):

    MOCK_CLOSE = MOCK_ENDPOINTS + '/' + MOCK_SA_MACHINE_ID + '/sa/' + MOCK_SA_DETECTION_ID + '/close'

    # patch the API endpoint
    requests_mock.put(MOCK_CLOSE, json={}, status_code=201)

    # path the inputs
    mocker.patch.object(demisto, 'args', return_value={'machine_id': MOCK_SA_MACHINE_ID, 'detection_id': MOCK_SA_DETECTION_ID})

    # patch the outputs
    mocker.patch.object(demisto, 'results')

    # run the code
    machine_id = demisto.args().get('machine_id')
    detection_id = demisto.args().get('detection_id')
    close_sa_incident(account_id, client_id, auth_token, machine_id, detection_id)

    # assert the outputs
    assert demisto.results.call_count == 1
