commonfields:
  id: PerceptionPoint
  version: -1
name: PerceptionPoint
display: PerceptionPoint
category: Email Gateway
description: Load incidents from Perception Point system and release falsely quarantined
  emails
detaileddescription: |-
  Use your API token to:
                   1. View and manage your incidents list. The list will be updated automatically in Incidents dashboard.
                   2. Release email from quarantine and resend them to their recipients. Use the scan id as an argument.
  If you don't have a token yet, contact us at support@perception-point.io
  You can set the number of results returning by using the parameter "No. of API loops". Each loop returns 20 items top.
configuration:
- display: Token to use Perception Point's API
  name: pp_token
  defaultvalue: ""
  type: 0
  required: true
- display: Fetch blocked incidents
  name: fetch_blocked
  defaultvalue: ""
  type: 8
  required: false
- display: Fetch spam incidents
  name: fetch_spam
  defaultvalue: ""
  type: 8
  required: false
- display: Fetch malicious incidents
  name: fetch_malicious
  defaultvalue: ""
  type: 8
  required: false
- display: No. of API loops
  name: api_loops
  defaultvalue: "1"
  type: 0
  required: false
- display: Fetch incidents
  name: isFetch
  defaultvalue: ""
  type: 8
  required: false
- display: Incident type
  name: incidentType
  defaultvalue: ""
  type: 13
  required: false
- display: Trust any certificate (insecure)
  name: insecure
  defaultvalue: ""
  type: 8
  required: false
- display: Use system proxy
  name: proxy
  defaultvalue: ""
  type: 8
  required: false
script:
  script: |
    ''' IMPORTS'''
    import copy
    import json
    import sys
    from collections import defaultdict

    import requests

    ''' INTEGRATION PARAMS '''
    URL = 'http://api.perception-point.io/api/v1/{endpoint}'
    INCIDENTS_ENDPOINT = 'scans/incidents/'
    RELEASE_ENDPOINT = 'quarantine/release/{id_}'

    USER_PARAMS = demisto.params()
    SECURED = not USER_PARAMS.pop('insecure', False)
    PP_TOKEN = USER_PARAMS.pop('pp_token', None)
    if PP_TOKEN is None:
        return_error('Perception Point token is mandatory. Please enter your token or cantact us at support@perception-point.io for assistance')
    try:
        API_MAX_LOOPS = int(USER_PARAMS.pop('api_loops', 1))
    except:
        return_error("api_loops parameter got wrong value. Value must be positive integer.")
    HEADER = {'Authorization': 'Token {}'.format(PP_TOKEN)}

    ''' CONSTANTS '''
    RELEASE = 'release'
    LIST = 'list'
    API_ACTIONS_DICT = {RELEASE: RELEASE_ENDPOINT,
                        LIST: INCIDENTS_ENDPOINT}
    SPAM = 'SPM'
    BLOCKED = 'BLK'
    MALICIOUS = 'MAL'

    API_CURSOR_ARG = '_cursor'

    VERBOSE_VERDICT_PARAM = 'verbose_verdict[]'

    FETCH_INCIDENTS_TYPE = [{'demisto_param': 'fetch_malicious',
                       'req_pname': VERBOSE_VERDICT_PARAM,
                       'req_pval': MALICIOUS},
                      {'demisto_param': 'fetch_blocked',
                       'req_pname': VERBOSE_VERDICT_PARAM,
                       'req_pval': BLOCKED},
                      {'demisto_param': 'fetch_spam',
                       'req_pname': VERBOSE_VERDICT_PARAM,
                       'req_pval': SPAM}]

    ''' HELPER FUNCTIONS '''


    def build_fetch_incident_types(fetch_select):
        fetch_type_dict = defaultdict(list)
        for darg in FETCH_INCIDENTS_TYPE:
            darg_input = fetch_select.get(darg['demisto_param'])
            if darg_input:
                fetch_type_dict[darg['req_pname']].append(darg.get('req_pval', darg_input))
        return dict(fetch_type_dict)


    def create_incident(record):
        record.pop('Attachment', None)
        record['RawJSON'] = json.dumps(record)
        return record


    def collect_incidents(**kwargs):
        list_url = build_request_url(LIST)
        api_res = get_pp_api_result(url=list_url, **kwargs)
        num_of_results = api_res.get('count')
        incidents = []
        api_loops = 0
        while num_of_results and api_loops < API_MAX_LOOPS:
            incidents += map(create_incident, api_res.get('results'))
            if api_res.get('next'):
                api_res = get_pp_api_result(url=api_res.get('next'))
                num_of_results = api_res.get('count')
            api_loops += 1
        return incidents


    def report_incidents(incidents_list):
        demisto.incidents(incidents_list)


    def get_pp_api_result(url, **kwargs):
        try:
            res = requests.get(url=url,
                               params=kwargs,
                               headers=HEADER,
                               verify=SECURED)
            res.raise_for_status()
            try:
                res_content = res.json()
            except:
                res_content = {}
            return res_content
        except Exception as e:
            return_error(e.message)


    def build_request_url(api_action):
        return URL.format(endpoint=API_ACTIONS_DICT.get(api_action))


    def command_fetch_incidents():
        try:
            args_dict = demisto.args()
            user_params_copy = copy.deepcopy(USER_PARAMS)
            args_dict.update(user_params_copy)
            req_args = build_fetch_incident_types(args_dict)
            last_run_id = int(demisto.getLastRun().get('scan_id', 0))
            req_args[API_CURSOR_ARG] = last_run_id
            incidents_list = collect_incidents(**req_args)
            report_incidents(incidents_list)
            if incidents_list:
                last_run_id = max(last_run_id, int(incidents_list[-1].get('Scan Id')))
                demisto.setLastRun({'scan_id': int(last_run_id)})
        except:
            return_error(
                'An error occurred while trying to fetch new incidents. Please contact us at support@perception-point.io')


    def release_email_and_get_message(scan_id_to_release):
        try:
            release_url = build_request_url(RELEASE).format(id_=scan_id_to_release)
            _ = get_pp_api_result(url=release_url)
            return 'Email with id {} was released Successfully!'.format(scan_id_to_release)
        except:
            raise


    def command_release_email():
        try:
            scan_id_to_release = demisto.args().get('scan_id')
            entry = {
                'Type': entryTypes['note'],
                'ReadableContentsFormat': formats['markdown']
            }
            email_release_response = release_email_and_get_message(scan_id_to_release)
            entry.update({'Contents': email_release_response,
                          'ContentsFormat': formats['text'],
                             'EntryContext': {'PP.Released': scan_id_to_release}}
                          )
            demisto.results(entry)
        except Exception as e:
            return_error('An error occurred while trying to release email. Please contact us at support@perception-point.io')


    ''' COMMAND CLASSIFIER'''
    try:
        if demisto.command() == 'test-module':
            list_url = build_request_url(LIST)
            if get_pp_api_result(url=list_url):
                demisto.results('ok')
            sys.exit(0)
        if demisto.command() == 'fetch-incidents':
            command_fetch_incidents()
        if demisto.command() == 'pp-release-email':
            command_release_email()
    except Exception as e:
        LOG(str(e))
        LOG.print_log()
        return_error(str(e))
  type: python
  commands:
  - name: pp-release-email
    arguments:
    - name: scan_id
      required: true
      description: The PP scan id of the email
    outputs:
    - contextPath: PP.Released
      description: The scan ID of the released email
      type: number
    description: Resends an email that was falsely quarantined using the scan id
  dockerimage: demisto/python:1.3-alpine
  isfetch: true
  runonce: false
tests:
  - 35be3cc4-784f-4752-8419-077cff8f50fc
