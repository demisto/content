name: pre-commit
on: pull_request

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    if: "!contains(github.event.pull_request.labels.*.name, 'Community Support Level')"
    permissions:
      checks: write
      pull-requests: write

    steps:
    - name: Install poetry
      uses: Gr1N/setup-poetry@v8

    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'poetry'
    
    - name: Install dependencies
      run: poetry install

    - name: Cache Pre commit
      id: cache-pre-commit
      uses: actions/cache@v3
      with:
        path: ~/.cache/pre-commit
        key: ${{ runner.os }}-pre-commit

    - name: run pre-commit
      env:
        DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
        DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
      run: |
        source .venv/bin/activate
        demisto-sdk pre-commit -g --unit-test --validate --no-secrets --show-diff-on-failure --verbose --mode=ci --sdk-ref 61c32f923580e4dff7f203c90c959600e4b839e1
    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v3
      if: always() # always run even if the previous step fails
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        check_name: Unit Test Report
        report_paths: |
            **/Packs/**/Integrations/**/.report_pytest.xml
        github_token: ${{ secrets.GITHUB_TOKEN }}
        detailed_summary: true
        annotate_only: true

    - name: "Check coverage.xml exists"
      if: always()
      id: check_files
      uses: andstor/file-existence-action@v2
      with:
        files: "coverage.xml"
      

    - name: Code Coverage Report
      if: always() && steps.check_files.outputs.files_exists == 'true'
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: "coverage.xml"
        badge: true
        format: markdown
        output: both
        thresholds: '70 80'
        

    - name: Append coverage to summary
      if: always() && steps.check_files.outputs.files_exists == 'true'
      id: append-coverage
      run: |
        cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY || echo "Missing coverage report"
        echo COVERAGE_SUMMARY=$(cat code-coverage-results.md) >> $GITHUB_OUTPUT

    - name: Save coverage report as artifact
      if: always() && steps.check_files.outputs.files_exists == 'true'

      uses: actions/upload-artifact@v2
      with:
        name: coverage-report
        path: coverage_report

    - name: Set Artifact URL
      if: always() && steps.check_files.outputs.files_exists == 'true'
      run: echo "ARTIFACT_URL=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/coverage-report/html/index.html" >> $GITHUB_OUTPUT
      id: set_artifact_url
    
    - name: Comment on PR with Coverage Artifact URL
      if: always() && steps.check_files.outputs.files_exists == 'true'
      run: |
        gh pr comment ${{ github.event.number }} --body "Coverage results: \n ${{ steps.append-coverage.outputs.COVERAGE }} \n [View Coverage Report](${{ steps.set_artifact_url.outputs.ARTIFACT_URL }})"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
      
  pre-commit-community-level:
    runs-on: ubuntu-latest
    if: "contains(github.event.pull_request.labels.*.name, 'Community Support Level')"
    permissions:
      checks: write
      pull-requests: write

    steps:
    - name: Install poetry
      uses: Gr1N/setup-poetry@v8

    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'poetry'
    
    - name: Install dependencies
      run: poetry install

    - name: Cache Pre commit
      id: cache-pre-commit
      uses: actions/cache@v3
      with:
        path: ~/.cache/pre-commit
        key: ${{ runner.os }}-pre-commit

    - name: run pre-commit community-level
      run: |
        source .venv/bin/activate
        demisto-sdk pre-commit -g --unit-test --validate --no-secrets --show-diff-on-failure --verbose --mode=nightly

    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v3
      if: always() # always run even if the previous step fails
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        check_name: Unit Test Report
        report_paths: |
            **/Packs/**/Integrations/**/.report_pytest.xml
        github_token: ${{ secrets.GITHUB_TOKEN }}
        detailed_summary: true
        annotate_only: true

    - name: "Check coverage.xml exists"

      id: check_files
      uses: andstor/file-existence-action@v2
      with:
        files: "coverage.xml"
      

    - name: Code Coverage Report
      if: steps.check_files.outputs.files_exists == 'true'
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: "coverage.xml"
        badge: true
        format: markdown
        output: both
        thresholds: '70 80'
        

    - name: Append coverage to summary
      if: always()
      id: append-coverage
      run: |
        cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY || echo "Missing coverage report"
