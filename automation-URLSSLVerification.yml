args:
- default: true
  description: URL to verify
  isArray: true
  name: url
  required: true
comment: Verify URL SSL certificate
commonfields:
  id: URLSSLVerification
  version: -1
name: URLSSLVerification
outputs:
- contextPath: URL
  description: The URL object
- contextPath: URL.Data
  description: The URL address
  type: string
- contextPath: URL.Malicious
  description: The malicious description
- contextPath: DBotScore
  description: The DBotScore object
- contextPath: DBotScore.Indicator
  description: The indicator
  type: string
- contextPath: DBotScore.Type
  description: The indicator's type
  type: string
- contextPath: DBotScore.Vendor
  description: The reputation vendor
  type: string
- contextPath: DBotScore.Score
  description: The reputation score
  type: number
runonce: false
script: |-
  import requests

  NON_SSL_PREFIX = "http"
  SSL_PREFIX = "https"
  VENDOR = "URL SSL Verification"
  SUSPICIOUS_SCORE = 2

  urls = argToList(demisto.get(demisto.args(),"url"))
  url_list = []

  ec = {
      'URL': [],
      'DBotScore' : []
  }

  for url in urls:
      url_obj = {
          "Data": url
      }
      malicious = None

      #Check if url is non SSL
      if not SSL_PREFIX in url.lower():
          malicious = {
              "Vendor": VENDOR,
              "Description" : "The URL is not secure under SSL"
          }
      #Check SSL signature
      else:
          try:
              requests.get(url)
          except requests.exceptions.SSLError as e:
              malicious = {
                  "Vendor": VENDOR,
                  "Description" : "SSL Certificate verification failed"
              }
          except requests.exceptions.RequestException as e:
              malicious = {
                  "Vendor": VENDOR,
                  "Description" : "Failed to establish a new connection with the URL"
              }

      if malicious:
          ec["DBotScore"].append({
              "Indicator": url,
              "Type" : "url",
              "Vendor": VENDOR,
              "Score": SUSPICIOUS_SCORE
          })

          url_obj["Verified"] = False
          url_obj["Malicious"] = malicious
      else:
          url_obj["Verified"] = True

      url_list.append(url_obj)


  ec["URL(val.Data && val.Data === obj.Data)"] = url_list

  preview_list = [{"URL": url["Data"],"Verified": url["Verified"], "Description": demisto.get(url, "Malicious.Description") or "SSL certificate is verified"} for url in url_list]

  md = tableToMarkdown("URL SSL Verification",preview_list,["URL","Verified","Description"])

  demisto.results({
      "Type" : entryTypes["note"],
      "Contents" : url_list,
      "ContentsFormat": formats["json"],
      "HumanReadable": md,
      "EntryContext": ec
  })
scripttarget: 0
system: true
tags:
- url
- Enrichment
type: python
