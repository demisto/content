args:
- description: Latitude and Longitude coordinates for the first location.  Required
    format 1.23,4.56
  name: src_coords
  required: true
- description: Latitude and Longitude coordinates for the second location.  Required
    format 1.23,4.56
  name: dest_coords
  required: true
comment: Compute the distance between two sets of coordinates, in miles.
commonfields:
  id: CalculateGeoDistance
  version: -1
dockerimage: demisto/geopy:1.0.0.3443
enabled: true
name: CalculateGeoDistance
outputs:
- contextPath: Geo.Distance
  description: Distance between two sets of coordinates, in miles.
- contextPath: Geo.Coordinates
  description: List of coordinates used in the calculation.
runas: DBotWeakRole
runonce: false
script: |2-



  import geopy.distance

  requests.packages.urllib3.disable_warnings()

  try:
      # Extract each set of coordinates and create a list
      src_coords_list = argToList(demisto.args()['src_coords'])
      dest_coords_list = argToList(demisto.args()['dest_coords'])

      # Convert each coordinate to a Float value and add to a tuple
      src_coords = (float(src_coords_list[0]), float(src_coords_list[1]))
      dest_coords = (float(dest_coords_list[0]), float(dest_coords_list[1]))

      # Compute distance between the set in miles
      geo_distance = round(geopy.distance.vincenty(src_coords, dest_coords).miles, 2)
      hr = 'Calculated Distance: {} miles.'.format(str(geo_distance))
      context = {
          "Geo.Distance": geo_distance,
          "Geo.Coordinates": [src_coords, dest_coords]
      }

      return_outputs(hr, context, geo_distance)


  except Exception as ex:
      return_error('Error occurred while parsing output from command. Exception info:\n' + str(ex))
scripttarget: 0
system: true
tags:
- Utilities
type: python
