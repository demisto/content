version: 2

executors:
  my-executor:


jobs:
  build:
    docker:
      - image: ronykoz/content-build-node911:latest
    environment:
      CONTENT_VERSION: "18.12.1"
      GIT_SHA1: "4df02ca52f0cd2709cbeef6fda31ba81ec37408d" # guardrails-disable-line
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Prepare Environment
          command: |
              echo 'export CIRCLE_ARTIFACTS="/home/circleci/project/artifacts"' >> $BASH_ENV
              source $BASH_ENV
              sudo mkdir -p -m 777 $CIRCLE_ARTIFACTS
              chmod +x ./Tests/scripts/*
              chmod +x ./Tests/lastest_server_build_scripts/*

              cat /tmp/workspace/nightly.txt >> run_mode
              if [ run_mode = "Nightly Mode" ]
                then
                  IS_NIGHTLY=True
                  echo "Setting nightly true"

                else
                  IS_NIGHTLY=False
                  echo "Setting nightly false"
              fi
      - add_ssh_keys:
          fingerprints:
              - "02:df:a5:6a:53:9a:f5:5d:bd:a6:fc:b2:db:9b:c9:47"
      - run:
          name: Validate Files and Yaml
          command: |
              python ./Tests/scripts/validate_files_structure.py -c true
      - run:
          name: Configure Test Filter
          command: |
              python ./Tests/scripts/configure_tests.py -n $IS_NIGHTLY
      - run:
          name: Build Content Descriptor
          command: ./setContentDescriptor.sh $CIRCLE_BUILD_NUM $GIT_SHA1 $CONTENT_VERSION
      - run:
          name: Common Server Documentation
          command: ./Documentation/commonServerDocs.sh
      - run:
          name: Create Content Artifacts
          command: python content_creator.py $CIRCLE_ARTIFACTS
      - store_artifacts:
          path: artifacts
          destination: artifacts
      - run:
          name: Download Artifacts
          command: |
            if ./Tests/scripts/is_ami.sh ;
              then
                echo "Using AMI - Not downloading artifacts"

              else
                ./Tests/scripts/server_get_artifact.sh $SERVER_CI_TOKEN
            fi
      - run:
          name: Download Configuration
          command: |
            if ./Tests/scripts/is_ami.sh ;
              then
                ./Tests/scripts/download_demisto_conf.sh

              else
                ./Tests/lastest_server_build_scripts/download_demisto_conf.sh
            fi
      - run:
          name: Create Instance
          command: |
            if ./Tests/scripts/is_ami.sh ;
              then
                ./Tests/scripts/create_instance.sh instance.json

              else
                ./Tests/lastest_server_build_scripts/create_instance.sh instance.json
            fi
      - run:
          name: Setup Instance
          command: |
            if ./Tests/scripts/is_ami.sh ;
              then
                ./Tests/scripts/run_installer_on_instance.sh

              else
                ./Tests/lastest_server_build_scripts/run_installer_on_instance.sh
            fi

            ./Tests/scripts/wait_until_server_ready.sh
      - run:
          name: Run Tests
          shell: /bin/bash
          command: |
            if ./Tests/scripts/is_ami.sh ;
              then
                ./Tests/scripts/run_tests.sh

              else
                ./Tests/lastest_server_build_scripts/run_tests.sh
            fi
      - run:
          name: Slack Notifier
          shell: /bin/bash
          command: ./Tests/scripts/slack_notifier.sh
          when: always
      - run:
          name: Instance Test
          command: ./Tests/scripts/instance_test.sh
          when: always
      - run:
          name: Destroy Instances
          command: ./Tests/scripts/destroy_instances.sh $CIRCLE_ARTIFACTS
          when: always
      - store_artifacts:
          path: artifacts
          destination: artifacts
          when: always
  set_nigthly_true:
    docker:
      - image: ronykoz/content-build-node911:latest
    working_directory: /tmp
    steps:
      - run:
          name: Create workspace dir
          command: mkdir -p workspace
      - run:
          name: Create nightly parameter
          command: echo "Nightly Mode" > workspace/nightly.txt
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - nightly.txt

  set_nigthly_false:
    docker:
      - image: ronykoz/content-build-node911:latest
    working_directory: /tmp
    steps:
      - run:
          name: Create workspace dir
          command: mkdir -p workspace
      - run:
          name: Create nightly parameter
          command: echo "Regular Mode" > workspace/nightly.txt
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - nightly.txt

workflows:
  version: 2
  commit:
    jobs:
      - set_nigthly_false
      - build:
          requires:
            - set_nigthly_false
  nightly:
    triggers:
      - schedule:
          cron: "0 5 * * *" # UTC time
          filters:
            branches:
              only:
                - master
    jobs:
      - set_nigthly_true
      - build:
          requires:
            - set_nigthly_true
