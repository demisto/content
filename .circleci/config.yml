version: 2
jobs:
  build:
    machine: true
    environment:
      CONTENT_VERSION: "18.6.0"
    steps:
      - checkout
      - run:
          name: Prepare Environment
          command: |
              echo 'export CIRCLE_ARTIFACTS="/home/circleci/project/artifacts"' >> $BASH_ENV
              source $BASH_ENV
              sudo mkdir -p -m 777 $CIRCLE_ARTIFACTS
      - run:
          name: Install dependencies
          command: |
              sudo sudo apt-get update
              sudo apt-get install python-pip python-dev
              sudo apt-get install -y python-dev libxml2-dev libxslt1-dev zlib1g-dev python-setuptools jq
              VERSION=v8.9.4
              DISTRO=linux-x64
              sudo mkdir /usr/local/lib/nodejs
              sudo tar -xJvf node-$VERSION-$DISTRO.tar.xz -C /usr/local/lib/nodejs
              sudo mv /usr/local/lib/nodejs/node-$VERSION-$DISTRO /usr/local/lib/nodejs/node-$VERSION
              export NODEJS_HOME=/usr/local/lib/nodejs/node-$VERSION/bin
              echo 'export PATH=$NODEJS_HOME:$PATH' >> $BASH_ENV
              source $BASH_ENV
              sudo apt-get install npm
              npm config set registry="http://registry.npmjs.org/"
              sudo easy_install pip
              sudo npm install npm -g
              sudo pip install --upgrade pip
              sudo pip install pykwalify
              sudo pip install requests
              pip install git+https://github.com/demisto/demisto-py.git@test-content
              sudo npm install -g jsdoc-to-markdown
              pip install git+https://github.com/rahulrrixe/parinx.git@master
              sudo pip install awscli
      - run:
          name: Validate Files and Yaml
          command: |
              chmod +x ./Tests/yamlvalidator
              ./Tests/yamlvalidator
              ./Tests/scripts/validate_files_structure.sh
      - run:
          name: Build Content Descriptor
          command: ./setContentDescriptor.sh $CIRCLE_BUILD_NUM 11c97eacd1b7853557b5763effef56bae514b72b $CONTENT_VERSION
      - run:
          name: Common Server Documentation
          command: ./Docs/commonServerDocs.sh
      - run:
          name: Create Content Artifacts
          command: python content_creator.py $CIRCLE_ARTIFACTS
      - store_artifacts:
          path: artifacts
          destination: artifacts
      - run:
          name: Download Artifacts
          command: |
              ACCEPT_TYPE="Accept: application/json"
              SERVER_API_URI="https://circleci.com/api/v1/project/demisto/server"
              TOKEN_ATTR="circle-token=$SERVER_CI_TOKEN"

              echo "Getting latest build num"
              TEMP=$(curl -s -H "$ACCEPT_TYPE" "$SERVER_API_URI/tree/master?limit=5&filter=successful&$TOKEN_ATTR")

              ARTIFACT_BUILD_NUM=
              for i in `seq 0 4`; do
                  if [[ $(echo "$TEMP" | jq ".[$i].build_parameters") == "null" ]]; then
                      ARTIFACT_BUILD_NUM=$(echo "$TEMP" | jq ".[$i].build_num")
                      break
                  fi
              done

              if [[ "$ARTIFACT_BUILD_NUM" = "" ]]; then
                  echo "couldn't find successful build"
                  exit 1
              fi

              SERVER_DOWNLOAD_LINK=$(curl -s -H "$ACCEPT_TYPE" ${SERVER_API_URI}/${ARTIFACT_BUILD_NUM}/artifacts?${TOKEN_ATTR} | jq '.[].url' -r | grep demistoserver | grep /0/)

              echo "Getting server artifact for build: ${ARTIFACT_BUILD_NUM}"
              echo "SERVER_DOWNLOAD_LINK = ${SERVER_DOWNLOAD_LINK}"

              curl --silent -o demistoserver.sh ${SERVER_DOWNLOAD_LINK}?${TOKEN_ATTR}

              echo "Done!"
      - run:
          name: Create Instance
          command: |
              ./Tests/scripts/create_instance.sh
      - run:
          name: Download Configuration
          command: |
              ./Tests/scripts/download_demisto_conf.sh
      - run:
          name: Setup Instance
          command: |
              ./Tests/scripts/run_installer_on_instance.sh
              ./Tests/scripts/wait_until_server_ready.sh
      - run:
          name: Run Tests
          shell: /bin/bash
          command: ./Tests/scripts/run_tests.sh
      - run:
          name: Destroy Instances
          command: ./Tests/scripts/destroy_instances.sh $CIRCLE_ARTIFACTS
          when: always
      - store_artifacts:
          path: artifacts
          destination: artifacts
          when: always