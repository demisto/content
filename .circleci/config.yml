version: 2.1
parameters:
  non_ami_run:
    type: string
    default: ""
  artifact_build_num:
    type: string
    default: ""
  server_branch_name:
    type: string
    default: ""
  nightly:
    type: string
    default: ""
  instance_tests:
    type: string
    default: ""
  demisto_sdk_nightly:
    type: string
    default: ""
  mem_check:
    type: string
    default: ""
  time_to_live:
    type: string
    default: ""
  pr_number:
    type: string
    default: ""
  contrib_branch:
    type: string
    default: ""
  contrib_pack_name:
    type: string
    default: ""
  force_pack_upload:
    type: string
    default: ""
  packs_to_upload:
    type: string
    default: ""
  bucket_upload:
    type: string
    default: ""

references:
  environment: &environment
    environment:
      CONTENT_VERSION: "20.11.1"
      SERVER_VERSION: "6.0.0"
      GIT_SHA1: "8068abfc3865fcfd9c6efd4002982ba1fd91885c" # guardrails-disable-line disable-secrets-detection
      NON_AMI_RUN: << pipeline.parameters.non_ami_run >>
      ARTIFACT_BUILD_NUM: << pipeline.parameters.artifact_build_num >>
      SERVER_BRANCH_NAME: << pipeline.parameters.server_branch_name >>
      MEM_CHECK: << pipeline.parameters.mem_check >>
      CONTRIB_BRANCH: << pipeline.parameters.contrib_branch >>
      CONTRIB_PACK_NAME: << pipeline.parameters.contrib_pack_name >>
      # Giving different names to the following pipeline parameters to avoid collision, handling such collision case
      # is done in 'Setup Environment' step.
      TIME_TO_LIVE_PARAMETER: << pipeline.parameters.time_to_live >>
      PULL_REQUEST_NUMBER: << pipeline.parameters.pr_number >>
      NIGHTLY_PARAMETER: << pipeline.parameters.nightly >>
      INSTANCE_TESTS_PARAMETER: << pipeline.parameters.instance_tests >>
      DEMISTO_SDK_NIGHTLY_PARAMETER: << pipeline.parameters.demisto_sdk_nightly >>
      FORCE_PACK_UPLOAD_PARAMETER: << pipeline.parameters.force_pack_upload >>
      PACKS_TO_UPLOAD_PARAMETER: << pipeline.parameters.packs_to_upload >>
      BUCKET_UPLOAD_PARAMETER: << pipeline.parameters.bucket_upload >>

  container_config: &container_config
    docker:
      - image: devdemisto/content-build:3.0.0.12681  # disable-secrets-detection
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD

  workspace_root: &workspace_root
    /home/circleci/

  store_artifacts: &store_artifacts
     store_artifacts:
        path: artifacts
        destination: artifacts
        when: always

  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

  add_ssh_keys: &add_ssh_keys
    add_ssh_keys:
      fingerprints:
        - "02:df:a5:6a:53:9a:f5:5d:bd:a6:fc:b2:db:9b:c9:47" # disable-secrets-detection
        - "f5:25:6a:e5:ac:4b:84:fb:60:54:14:82:f1:e9:6c:f9" # disable-secrets-detection

  prepare_environment: &prepare_environment
    run:
      name: Prepare Environment
      when: always
      command: |
        echo 'export CIRCLE_ARTIFACTS="/home/circleci/project/artifacts"' >> $BASH_ENV
        echo 'export PATH="/home/circleci/.local/bin:${PWD}/node_modules/.bin:${PATH}"' >> $BASH_ENV # disable-secrets-detection
        echo 'export PYTHONPATH="/home/circleci/project:${PYTHONPATH}"' >> $BASH_ENV
        echo 'export DEMISTO_README_VALIDATION=true' >> $BASH_ENV
        if [ -n "${NIGHTLY_PARAMETER}" ];
        then
            echo 'export NIGHTLY=true' >> $BASH_ENV
        fi
        if [ -n "${INSTANCE_TESTS_PARAMETER}" ];
        then
            echo 'export INSTANCE_TESTS=true' >> $BASH_ENV
        fi
        if [ -n "${DEMISTO_SDK_NIGHTLY_PARAMETER}" ];
        then
            echo 'export DEMISTO_SDK_NIGHTLY=true' >> $BASH_ENV
        fi
        if [ -n "${TIME_TO_LIVE_PARAMETER}" ];
        then
            echo "export TIME_TO_LIVE=$TIME_TO_LIVE_PARAMETER" >> $BASH_ENV
        fi
        if [ -n "${FORCE_PACK_UPLOAD_PARAMETER}" ];
        then
            echo "export FORCE_PACK_UPLOAD=$FORCE_PACK_UPLOAD_PARAMETER" >> $BASH_ENV
        fi
        if [ -n "${PACKS_TO_UPLOAD_PARAMETER}" ];
        then
            echo "export PACKS_TO_UPLOAD=$PACKS_TO_UPLOAD_PARAMETER" >> $BASH_ENV
        fi
        if [ -n "${BUCKET_UPLOAD_PARAMETER}" ];
        then
            echo "export BUCKET_UPLOAD=$BUCKET_UPLOAD_PARAMETER" >> $BASH_ENV
        fi

        echo "=== sourcing $BASH_ENV ==="
        source $BASH_ENV
        sudo mkdir -p -m 777 $CIRCLE_ARTIFACTS/
        mkdir -p $CIRCLE_ARTIFACTS/logs
        chmod +x ./Tests/scripts/*
        chmod +x ./Tests/lastest_server_build_scripts/*
        chmod +x ./Tests/Marketplace/*
        if [ ! -e "venv" ]; then
          echo "installing venv"
          NO_HOOKS=1 SETUP_PY2=yes .hooks/bootstrap
          source ./venv/bin/activate
          pip3 install -r .circleci/build-requirements.txt
        else
          echo "venv exists (from cache). activating"
          source ./venv/bin/activate
        fi
        # Install node packages
        npm install .
        # store in bash env so we load our venv in each step
        echo 'source /home/circleci/project/venv/bin/activate' >> $BASH_ENV
        git config diff.renameLimit 6000

        if [ -n "${DEMISTO_SDK_NIGHTLY}" ]; then
          pip3 install git+https://github.com/demisto/demisto-sdk@master
        fi

        echo "========== Build Parameters =========="
        set | grep -E "^NIGHTLY=|^INSTANCE_TESTS=|^NON_AMI_RUN=|^SERVER_BRANCH_NAME=|^ARTIFACT_BUILD_NUM=|^DEMISTO_SDK_NIGHTLY=|^TIME_TO_LIVE=|^CONTRIB_BRANCH=|^FORCE_PACK_UPLOAD=|^PACKS_TO_UPLOAD=|^BUCKET_UPLOAD="
        python --version
        python3 --version
        demisto-sdk --version

  download_configuration: &download_configuration
    run:
      name: Download Configuration
      when: always
      command: |
        if ./Tests/scripts/is_ami.sh ;
          then
            ./Tests/scripts/download_demisto_conf.sh

          else
            ./Tests/lastest_server_build_scripts/download_demisto_conf.sh
        fi

  create_instance: &create_instance
    run:
      name: Create Instance
      when: on_success
      command: |
        [ -n "${TIME_TO_LIVE}" ] && TTL=${TIME_TO_LIVE} || TTL=300
        if ./Tests/scripts/is_ami.sh ;
          then
            if [ -n "${NIGHTLY}" ] ;
              then
                export IFRA_ENV_TYPE=Nightly # disable-secrets-detection
            elif [ -n "${INSTANCE_TESTS}" ] ;
              then
                export IFRA_ENV_TYPE="Demisto PreGA" # disable-secrets-detection
            elif [[ -n "${CONTRIB_BRANCH}" || -n "${DEMISTO_SDK_NIGHTLY}" ]] ;
              then
                export IFRA_ENV_TYPE="Demisto Marketplace" # disable-secrets-detection
            elif [ -n "${BUCKET_UPLOAD}" ] ;
              then
                export IFRA_ENV_TYPE="Bucket-Upload" # disable-secrets-detection
            else
              export IFRA_ENV_TYPE=Content-Env # disable-secrets-detection
            fi
            python3 ./Tests/scripts/awsinstancetool/aws_instance_tool.py -envType "$IFRA_ENV_TYPE" -timetolive $TTL -outfile ./env_results.json

          else
            . ./Tests/scripts/server_get_artifact.sh $SERVER_CI_TOKEN
            python3 ./Tests/scripts/awsinstancetool/aws_instance_tool.py -envType CustomBuild -custombuild true -circleurl $SERVER_DOWNLOAD_LINK -circleToken $SERVER_CI_TOKEN -timetolive $TTL -outfile ./env_results.json
        fi


  create_artifact: &create_artifact
    run:
      name: Create Content Artifacts
      when: always
      command: |
        demisto-sdk create-content-artifacts -a $CIRCLE_ARTIFACTS --cpus 8
        python3 Utils/merge_content_new_zip.py -f "v4.5.0"

  restore_cache: &restore_cache
    restore_cache:
      key: virtualenv-venv-{{ checksum "dev-requirements-py2.txt" }}-{{ checksum "dev-requirements-py3.txt" }}-{{ checksum ".circleci/build-requirements.txt" }}-{{ checksum "package-lock.json" }}

  destroy_instances: &destroy_instances
    run:
      name: Destroy Instances
      command: |
        if [ -n "${CONTRIB_BRANCH}" ]
          then
            echo "Skipping - not running in contribution instance"
            exit 0
        fi
        python3 ./Tests/scripts/destroy_instances.py $CIRCLE_ARTIFACTS ./env_results.json "$INSTANCE_ROLE" "$TIME_TO_LIVE"

        export PSWD=$(jq .serverLogsZipPassword < $(cat secret_conf_path) | cut -d \" -f 2)
        zip -P $PSWD $CIRCLE_ARTIFACTS/ServerLogs.zip $CIRCLE_ARTIFACTS/server*.log || ((($? > 0)) && echo "Didnâ€™t find any server logs, skipping this stage" && exit 0)
        rm -f $CIRCLE_ARTIFACTS/server*.log
        if [ -f $CIRCLE_ARTIFACTS/logs/Run_Tests.log ];
        then
            zip -P $PSWD $CIRCLE_ARTIFACTS/logs/Run_Tests.zip $CIRCLE_ARTIFACTS/logs/Run_Tests.log
            rm -f $CIRCLE_ARTIFACTS/logs/Run_Tests.log
        fi
      when: always

  persist_to_workspace: &persist_to_workspace
    persist_to_workspace:
      root: /home/circleci/
      paths:
        - project

  secrets: &secrets
    run:
      name: Secrets
      when: always
      command: |
        demisto-sdk secrets --post-commit --ignore-entropy

  validate_files_and_yaml: &validate_files_and_yaml
    run:
      name: Validate Files and Yaml
      when: always
      command: |
        # Run flake8 on all excluding Packs (Integraions and Scripts) - they will be handled in linting
        ./Tests/scripts/pyflake.sh *.py
        find . -maxdepth 1 -type d -not \( -path . -o -path ./Packs -o -path ./venv \) | xargs ./Tests/scripts/pyflake.sh

        ./Tests/scripts/validate.sh

  run_unit_testing_and_lint: &run_unit_testing_and_lint
    run:
      name: Run Unit Testing and Lint
      when: always
      no_output_timeout: 5h
      command: |
        echo "demisto-sdk version: $(demisto-sdk --version)"
        echo "mypy version: $(mypy --version)"
        echo "flake8 py2 version: $(python2 -m flake8 --version)"
        echo "flake8 py3 version: $(python3 -m flake8 --version)"
        echo "bandit py2 version: $(python2 -m bandit --version 2>&1)"
        echo "bandit py3 version: $(python3 -m bandit --version 2>&1)"
        echo "vulture py2 version: $(python2 -m vulture --version 2>&1)"
        echo "vulture py3 version: $(python3 -m vulture --version 2>&1)"
        SHOULD_LINT_ALL=$(./Tests/scripts/should_lint_all.sh)
        mkdir ./unit-tests
        if [ -n "$SHOULD_LINT_ALL" ]; then
          echo -e  "----------\nLinting all because:\n${SHOULD_LINT_ALL}\n----------"
          demisto-sdk lint -p 8 -a -q --test-xml ./unit-tests --log-path ./artifacts --failure-report ./artifacts
        else
          demisto-sdk lint -p 8 -g -v --test-xml ./unit-tests --log-path ./artifacts --failure-report ./artifacts
        fi

  infrastructure_testing: &infrastructure_testing
    run:
      name: Infrastructure testing
      when: always
      command: |
        python3 -m pytest ./Tests/scripts/infrastructure_tests/ -v
        python3 -m pytest ./Tests/Marketplace/Tests/ -v
        python3 -m pytest ./Tests/scripts/utils/tests -v
        python3 -m pytest ./Tests/tests -v
        python3 -m pytest ./Tests/private_build/ -v
        python3 -m pytest Utils -v

        if [ -n "${DEMISTO_SDK_NIGHTLY}" ] ; then
          ./Tests/scripts/sdk_pylint_check.sh
        fi

  create_id_set: &create_id_set
    run:
      name: Create ID Set
      when: always
      command: |
        demisto-sdk create-id-set -o ./Tests/id_set.json
        cp ./Tests/id_set.json $CIRCLE_ARTIFACTS

  build_content_descriptor: &build_content_descriptor
    run:
      name: Build Content Descriptor
      when: always
      command: |
        if [ -n "${GITHUB_TOKEN}" ] ;
          then
            # new release notes summary generator in packs format
            python3 Utils/release_notes_generator.py $CONTENT_VERSION $GIT_SHA1 $CIRCLE_BUILD_NUM --output $CIRCLE_ARTIFACTS/packs-release-notes.md --github-token $GITHUB_TOKEN
          else
            # new release notes summary generator in packs format
            python3 Utils/release_notes_generator.py $CONTENT_VERSION $GIT_SHA1 $CIRCLE_BUILD_NUM --output $CIRCLE_ARTIFACTS/packs-release-notes.md
        fi

  common_server_documentation: &common_server_documentation
    run:
      name: Common Server Documentation
      when: always
      command: |
        ./Documentation/commonServerDocs.sh

  collect_test_list_and_content_packs: &collect_test_list_and_content_packs
    run:
      name: Collect Test List And Content Packs
      when: always
      command: |
        if [ -n "${INSTANCE_TESTS}" ];
          then
            echo "Skipping - not running in INSTANCE_TESTS build"
            exit 0
        fi

        [ -n "${NIGHTLY}" ] && IS_NIGHTLY=true || IS_NIGHTLY=false
        python3 ./Tests/scripts/collect_tests_and_content_packs.py -n $IS_NIGHTLY

  calculate_packs_dependencies: &calculate_packs_dependencies
    run:
      name: Calculate Packs Dependencies
      when: always
      command: |
        python3 ./Tests/Marketplace/packs_dependencies.py -i ./Tests/id_set.json -o $CIRCLE_ARTIFACTS/packs_dependencies.json

  update_tests_step: &update_tests_step
    run:
      name: Update Tests step
      when: always
      command: |
        python3 ./Tests/scripts/update_conf_json.py
        cp "./Tests/conf.json" "$CIRCLE_ARTIFACTS/conf.json"

  get_contribution_pack: &get_contribution_pack
    when:
      condition: << pipeline.parameters.contrib_branch >>
      steps:
        - run:
            name: Get Contributor pack
            when: always
            command: |
                REPO=$(echo $CONTRIB_BRANCH | cut -d ":" -f 1)
                BRANCH=$(echo $CONTRIB_BRANCH | cut -d ":" -f 2)
                python3 ./Utils/update_contribution_pack_in_base_branch.py -p $PULL_REQUEST_NUMBER -b $BRANCH -c $REPO

  comment_on_contrib_pr: &comment_on_contrib_pr
    when:
      condition: << pipeline.parameters.contrib_branch >>
      steps:
        - run:
            name: Comment on the contribution Pull Request
            when: always
            command: |
              # Demisto Marketplace refers to Server Master
              SERVER_URL=$(jq -r 'select(.[].Role == "Demisto Marketplace") | .[].InstanceDNS' ./env_results.json)
              python3 ./Utils/comment_on_pr.py -p $PULL_REQUEST_NUMBER -c "Instance is ready. Server link: https://$SERVER_URL, Build link: $CIRCLE_BUILD_URL"

  upload_entities_to_cortex_xsoar: &upload_entities_to_cortex_xsoar
    run:
        name: Upload entities to Cortex XSOAR
        command: |
          demisto-sdk upload -i Packs/HelloWorld/Integrations/ --insecure
          demisto-sdk upload -i Packs/HelloWorld/TestPlaybooks/playbook-HelloWorld-Test.yml --insecure
          demisto-sdk upload -i Packs/HelloWorld/Layouts/layoutscontainer-Hello_World_Test_Layout.json --insecure
          demisto-sdk upload -i Packs/HelloWorld/IncidentFields/incidentfield-Hello_World_Incident_Test.json --insecure
          demisto-sdk upload -i Packs/HelloWorld/IncidentTypes/incidenttype-Hello_World_Alert_Test.json --insecure
          demisto-sdk upload -i Packs/HelloWorld/Classifiers/classifier-mapper-incoming-HelloWorldTest.json --insecure


  sdk_nightly_jobs: &sdk_nightly_jobs
    - Demisto SDK Nightly:
        context: sdk_nightly_env
    - Demisto SDK Nightly - Run against Cortex XSOAR:
        context: sdk_nightly_env

  instance_tests_jobs: &instance_tests_jobs
    - Create Instances:
        context: instances_test_env
    - Instance Test:
        context: instances_test_env
        requires:
          - Create Instances

  nightly_jobs: &nightly_jobs
    - Setup Environment:
        context: nightly_env
    - Create Instances:
        context: nightly_env
    - Run Unit Testing And Lint:
        context: nightly_env
        requires:
          - Setup Environment
    - Run Validations:
        requires:
          - Setup Environment
    - Server Master:
        requires:
          - Create Instances
        context: nightly_env

  bucket_upload_jobs: &bucket_upload_jobs
    - Setup Environment:
        context: bucket_upload_env
    - Run Unit Testing And Lint:
        context: bucket_upload_env
        requires:
          - Setup Environment
    - Run Validations:
        context: bucket_upload_env
        requires:
          - Setup Environment
    - Create Instances:
        context: bucket_upload_env
        requires:
          - Run Unit Testing And Lint
          - Run Validations
    - Install Packs in Demisto 6_0:
        context: bucket_upload_env
        requires:
          - Create Instances
    - Install Packs in Demisto Marketplace - Master:
        context: bucket_upload_env
        requires:
          - Create Instances
    - Upload Packs To Marketplace:
        context: bucket_upload_env
        requires:
          - Install Packs in Demisto 6_0
          - Install Packs in Demisto Marketplace - Master

  check_user_permissions_to_upload_packs: &check_user_permissions_to_upload_packs
    when:
      condition:
        or:
          - << pipeline.parameters.force_pack_upload >>
          - << pipeline.parameters.bucket_upload >>
      steps:
        - run:
            name: Check User Permissions to Upload Pack
            command: |
              CONTENT_LEADERS=$(curl -sS https://api.github.com/orgs/demisto/teams/content-leaders/members -H "Authorization: token ${GITHUB_TOKEN}")
              LEADER_NAMES=$(echo $CONTENT_LEADERS | jq -r ".[].login")
              LEADER_NAMES=$(echo "${LEADER_NAMES}" "content-bot" )
              if [[ -z "${CIRCLE_USERNAME}" ]] || [[ -z "`echo $LEADER_NAMES | grep -w "${CIRCLE_USERNAME}"`" ]]; then
                  echo -e "User '${CIRCLE_USERNAME}' is not allowed to trigger this build, only one of:\n${LEADER_NAMES}"
                  exit 1
              else
                  echo "User '${CIRCLE_USERNAME}' is allowed to upload packs / force upload packs."
              fi

  wait_until_server_ready: &wait_until_server_ready
    run:
      name: Wait until server ready
      shell: /bin/bash
      when: always
      command: |
        if ./Tests/scripts/is_ami.sh ;
          then
            python3 ./Tests/scripts/wait_until_server_ready.py "Demisto Marketplace"
        else
            python3 ./Tests/scripts/wait_until_server_ready.py "master"
        fi

jobs:
  Setup Environment:
    <<: *container_config
    resource_class: medium
    <<: *environment
    steps:
      - checkout
      - *restore_cache
      - *prepare_environment
      - save_cache:
          paths:
            - venv
            - node_modules
          key: virtualenv-venv-{{ checksum "dev-requirements-py2.txt" }}-{{ checksum "dev-requirements-py3.txt" }}-{{ checksum ".circleci/build-requirements.txt" }}-{{ checksum "package-lock.json" }}
      - *get_contribution_pack
      - *add_ssh_keys
      - *persist_to_workspace

  Run Unit Testing And Lint:
    <<: *container_config
    resource_class: medium
    <<: *environment
    steps:
      - *attach_workspace
      - setup_remote_docker
      - *restore_cache
      - *add_ssh_keys
      - *prepare_environment
      - *infrastructure_testing
      - *run_unit_testing_and_lint
      - store_test_results:
          path: ./unit-tests
      - run:
          name: Slack Notifier
          shell: /bin/bash
          command: |
            if [ -n "${BUCKET_UPLOAD}" ]; then
              ./Tests/scripts/slack_notifier.sh 'bucket_upload_flow'
            else
              ./Tests/scripts/slack_notifier.sh 'unittests' ./env_results.json
            fi
          when: always
      - *store_artifacts

  Run Validations:
    <<: *container_config
    resource_class: medium
    <<: *environment
    steps:
      - *attach_workspace
      - *restore_cache
      - *add_ssh_keys
      - *prepare_environment
      - *secrets
      - *create_id_set
      - *update_tests_step
      - *validate_files_and_yaml
      - run:
          name: Content Docs Site
          when: always
          command: |
            ./Documentation/docs_site_update.sh
      - run:
          name: Spell Checks
          command: |
            python3 ./Tests/scripts/circleci_spell_checker.py $CIRCLE_BRANCH
      - run:
          name: Check if CircleCI's config file is up to date
          when: always
          command: |
            if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then
              echo "Skipping, Should not run on contributor's branch."
              exit 0
            fi
            # Checks if there's any diff from master
            if [[ `git diff origin/master -- .circleci/config.yml` ]]; then
                # Checks if part of the branch's changes
                if [[ -z `git diff origin/master..."$CIRCLE_BRANCH" --name-only | grep .circleci/config.yml` ]]; then
                    echo ".circleci/config.yml has been changed. Merge from master"
                    exit 1
                else
                    echo ".circleci/config.yml is part of the branch changes, proceeding"
                    exit 0
                fi
            else
                echo ".circleci/config.yml is up to date!"
            fi
      - run:
          name: Verify Base Branch for Contribution
          when: always
          command: |
            if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]] ;
              then
                python3 ./Tests/scripts/verify_base_branch_for_contribution.py $CIRCLE_BRANCH
            fi
      - unless:
          condition:
            equal:
              - master
              - << pipeline.git.branch >>
          steps:
            - run:
                name: validate content-test-conf branch merged
                shell: /bin/bash
                when: always
                command: |
                  # replace slashes ('/') in the branch name, if exist, with underscores ('_')
                  UNDERSCORE_CIRCLE_BRANCH=${CIRCLE_BRANCH//\//_}
                  wget --header "Accept: application/vnd.github.v3.raw" --header "Authorization: token $GITHUB_TOKEN" "https://github.com/demisto/content-test-conf/archive/$UNDERSCORE_CIRCLE_BRANCH.zip" --no-check-certificate -q
                  if [ "$?" != "0" ]; then
                    echo "No such branch in content-test-conf: $UNDERSCORE_CIRCLE_BRANCH"
                    exit 0
                  else
                    echo "ERROR: Found a branch with the same name in contest-test-conf conf.json - $UNDERSCORE_CIRCLE_BRANCH.\n Merge it in order to merge the current branch into content repo."
                    exit 1
                  fi
      - run:
          name: Slack Notifier
          shell: /bin/bash
          command: |
            if [ -n "${BUCKET_UPLOAD}" ]; then
              ./Tests/scripts/slack_notifier.sh 'bucket_upload_flow'
            fi
          when: always

  Create Instances:
    <<: *container_config
    resource_class: medium
    <<: *environment
    steps:
      - checkout
      - *restore_cache
      - *prepare_environment
      - *get_contribution_pack
      - *add_ssh_keys
      - *create_id_set
      - *build_content_descriptor
      - *common_server_documentation
      - *create_artifact
      - *update_tests_step
      - *download_configuration
      - when:
          # If this is an ami run - No need to download server artifacts
          condition: << pipeline.parameters.non_ami_run >>
          steps:
            - run:
                name: Download Artifacts
                when: always
                command: |
                  ./Tests/scripts/server_get_artifact.sh $SERVER_CI_TOKEN
                  cp demistoserver.sh ./Tests/scripts/awsinstancetool/ansibleinstall/demistoserver.sh
      - *collect_test_list_and_content_packs
      - *calculate_packs_dependencies
      - unless:
          condition: << pipeline.parameters.demisto_sdk_nightly >>
          steps:
            - run:
                name: Prepare Content Packs For Testing
                when: always
                command: |
                  ./Tests/scripts/prepare_content_packs_for_testing.sh
                  echo "$CIRCLE_BUILD_NUM" > create_instances_build_num.txt  # so that later jobs in this workflow could configure the right path
            - run:
                name: Zip Content Packs From GCS
                command: |
                  if [[ $CIRCLE_BRANCH != master ]] && [[ $CIRCLE_BRANCH != 20\.* ]] && [[ $CIRCLE_BRANCH != 21\.* ]]; then
                    echo "Skipping packs download to artifact on non master or release branch"
                    exit 0
                  fi

                  GCS_PATH=$(mktemp)
                  ZIP_FOLDER=$(mktemp -d)
                  echo $GCS_MARKET_KEY > $GCS_PATH
                  python3 ./Tests/Marketplace/zip_packs.py -b 'marketplace-dist' -z $ZIP_FOLDER -a $CIRCLE_ARTIFACTS -s $GCS_PATH
                  rm $GCS_PATH
                when: always
            - run:
                name: Store Artifacts to GCS
                command: ./Tests/scripts/upload_artifacts.sh
                when: always
            - *create_instance
            - *store_artifacts
      - *persist_to_workspace
      - run:
          name: Slack Notifier
          shell: /bin/bash
          command: |
            if [ -n "${BUCKET_UPLOAD}" ]; then
              ./Tests/scripts/slack_notifier.sh 'bucket_upload_flow'
            fi
          when: always

  Server 5_0:
    <<: *container_config
    resource_class: medium
    <<: *environment
    steps:
      - when:
          condition:
            or:
              - << pipeline.parameters.contrib_branch >>
              - << pipeline.parameters.non_ami_run >>
          steps:
            - run:
                name:  Not running this job
                when: always
                command: |
                  echo "Not running this job when triggered with one of contrib_branch, non_ami_run"
      - unless:
          condition:
            or:
              - << pipeline.parameters.contrib_branch >>
              - << pipeline.parameters.non_ami_run >>
          steps:
            - *attach_workspace
            - *restore_cache
            - *add_ssh_keys
            - *prepare_environment
            - run:
                name: Collect Instance Role And Check If Instance Was Created
                when: always
                command: |
                  echo 'export INSTANCE_ROLE="Demisto GA"' >> $BASH_ENV
                  export TEMP=$(cat ./Tests/filter_envs.json | jq '."Demisto GA"')
                  echo "Demisto GA filter=$TEMP"
                  if [[ "$TEMP" == "true" ]];
                    then
                      echo 'export INSTANCE_WAS_CREATED="True"' >> $BASH_ENV
                      exit 0
                  fi
                  source $BASH_ENV
            - run:
                name: Wait until server ready
                shell: /bin/bash
                when: always
                command: |
                  python3 ./Tests/scripts/wait_until_server_ready.py "$INSTANCE_ROLE"
            - run:
                name: Install Content And Configure Integrations On Server
                shell: /bin/bash
                command: |
                  if [ -z $INSTANCE_WAS_CREATED ];
                    then
                      echo "Skipping - instance was not created"
                      exit 0
                  fi
                  ./Tests/scripts/install_content_and_test_integrations.sh "$INSTANCE_ROLE"
            - run:
                name: Run Tests - Server 5.0
                no_output_timeout: 5h
                shell: /bin/bash
                command: |
                  if [ -z $INSTANCE_WAS_CREATED ];
                    then
                      echo "Skipping - instance was not created"
                      exit 0
                  fi
                  if ./Tests/scripts/is_ami.sh ;
                    then
                      ./Tests/scripts/run_tests.sh "$INSTANCE_ROLE"
                    else
                      echo "Not AMI run, can't run on this version"
                      exit 0
                  fi
            - *destroy_instances
            - *store_artifacts
  Server 5_5:
    <<: *container_config
    resource_class: medium
    <<: *environment
    steps:
      - when:
          condition:
            or:
              - << pipeline.parameters.contrib_branch >>
              - << pipeline.parameters.non_ami_run >>
          steps:
            - run:
                name: Not running this job
                when: always
                command: |
                  echo "Not running this job when triggered with one of instance_tests or non_ami_run"
      - unless:
          condition:
            or:
              - << pipeline.parameters.contrib_branch >>
              - << pipeline.parameters.non_ami_run >>
          steps:
            - *attach_workspace
            - *add_ssh_keys
            - *prepare_environment
            - run:
                name: Collect Instance Role And Check If Instance Was Created
                when: always
                command: |
                  echo 'export INSTANCE_ROLE="Demisto PreGA"' >> $BASH_ENV
                  export TEMP=$(cat ./Tests/filter_envs.json | jq '."Demisto PreGA"')
                  echo "Demisto PreGA filter=$TEMP"
                  if [[ "$TEMP" == "true" ]];
                    then
                      echo 'export INSTANCE_WAS_CREATED="True"' >> $BASH_ENV
                      exit 0
                  fi
                  source $BASH_ENV
            - run:
                name: Wait until server ready
                shell: /bin/bash
                when: always
                command: |
                  python3 ./Tests/scripts/wait_until_server_ready.py "$INSTANCE_ROLE"
            - run:
                name: Install Content And Configure Integrations On Server
                shell: /bin/bash
                command: |
                  if [ -z $INSTANCE_WAS_CREATED ];
                    then
                      echo "Skipping - instance was not created"
                      exit 0
                  fi
                  ./Tests/scripts/install_content_and_test_integrations.sh "$INSTANCE_ROLE"
            - run:
                name: Run Tests - 5.5
                no_output_timeout: 5h
                shell: /bin/bash
                command: |
                  if [ -z $INSTANCE_WAS_CREATED ];
                    then
                      echo "Skipping - instance was not created"
                      exit 0
                  fi
                  if ./Tests/scripts/is_ami.sh ;
                    then
                      ./Tests/scripts/run_tests.sh "$INSTANCE_ROLE"
                    else
                      echo "Not AMI run, can't run on this version"
                      exit 0
                  fi
            - *destroy_instances
            - *store_artifacts
  Server 6_0:
    <<: *container_config
    resource_class: medium
    <<: *environment
    steps:
      - when:
          condition:
            or:
              - << pipeline.parameters.contrib_branch >>
              - << pipeline.parameters.non_ami_run >>
          steps:
            - run:
                name: Not running this job
                when: always
                command: |
                  echo "Not running this job when triggered with one of contrib_branch or non_ami_run"
      - unless:
          condition:
            or:
              - << pipeline.parameters.contrib_branch >>
              - << pipeline.parameters.non_ami_run >>
          steps:
            - *attach_workspace
            - *add_ssh_keys
            - *prepare_environment
            - run:
                name: Collect Instance Role And Check If Instance Was Created
                when: always
                command: |
                  echo 'export INSTANCE_ROLE="Demisto 6.0"' >> $BASH_ENV
                  export TEMP=$(cat ./Tests/filter_envs.json | jq '."Demisto 6.0"')
                  echo "Demisto PreGA filter=$TEMP"
                  if [[ "$TEMP" == "true" ]];
                    then
                      echo 'export INSTANCE_WAS_CREATED="True"' >> $BASH_ENV
                      exit 0
                  fi
                  source $BASH_ENV
            - run:
                name: Wait until server ready
                shell: /bin/bash
                when: always
                command: |
                  python3 ./Tests/scripts/wait_until_server_ready.py "$INSTANCE_ROLE"
            - run:
                name: Install Content And Configure Integrations On Server
                shell: /bin/bash
                when: always
                command: |
                  if [ -z $INSTANCE_WAS_CREATED ];
                    then
                      echo "Skipping - instance was not created"
                      exit 0
                  fi
                  ./Tests/scripts/install_content_and_test_integrations.sh "$INSTANCE_ROLE"
            - run:
                name: Run Tests - Demisto 6.0
                shell: /bin/bash
                when: always
                no_output_timeout: 5h
                command: |
                  if [ -z $INSTANCE_WAS_CREATED ];
                    then
                      echo "Skipping - instance was not created"
                      exit 0
                  fi
                  ./Tests/scripts/run_tests.sh "$INSTANCE_ROLE"
                  export RETVAL=$?
                  if [ -f ./Tests/failed_tests.txt ];
                    then
                      cp ./Tests/failed_tests.txt $CIRCLE_ARTIFACTS/failed_tests.txt
                  fi
                  exit $RETVAL
            - run:
                name: Slack Notifier
                shell: /bin/bash
                command: |
                  ./Tests/scripts/slack_notifier.sh 'test_playbooks' ./env_results.json
                when: always
            - *destroy_instances
            - *store_artifacts

  Server Master:
    <<: *container_config
    resource_class: medium
    <<: *environment
    steps:
      - *attach_workspace
      - *add_ssh_keys
      - *prepare_environment
      - run:
          name: Collect Instance Role And Check If Instance Was Created
          when: always
          command: |
            echo 'export INSTANCE_ROLE="Demisto Marketplace"' >> $BASH_ENV
            export TEMP=$(cat ./Tests/filter_envs.json | jq '."Demisto Marketplace"')
            echo "Demisto Marketplace filter=$TEMP"
            if [[ "$TEMP" == "true" || -n "${NIGHTLY}" ]];
              then
                echo 'export INSTANCE_WAS_CREATED="True"' >> $BASH_ENV
                exit 0
            fi
            source $BASH_ENV
      - run:
          name: Wait until server ready
          shell: /bin/bash
          when: always
          command: |
            python3 ./Tests/scripts/wait_until_server_ready.py "$INSTANCE_ROLE"
      - run:
          name: Install Content And Configure Integrations On Server
          shell: /bin/bash
          when: always
          command: |
            if [ -z $INSTANCE_WAS_CREATED ];
              then
                echo "Skipping - instance was not created"
                exit 0
            fi
            ./Tests/scripts/install_content_and_test_integrations.sh "$INSTANCE_ROLE"
      - run:
          name: Run Tests - Demisto Master
          shell: /bin/bash
          when: always
          no_output_timeout: 5h
          command: |
            if [ -z $INSTANCE_WAS_CREATED ];
              then
                echo "Skipping - instance was not created"
                exit 0
            fi
            ./Tests/scripts/run_tests.sh "$INSTANCE_ROLE"
            export RETVAL=$?
            if [ -f ./Tests/failed_tests.txt ];
              then
                cp ./Tests/failed_tests.txt $CIRCLE_ARTIFACTS/failed_tests.txt
            fi
            exit $RETVAL
      - run:
          name: Slack Notifier
          shell: /bin/bash
          command: |
            ./Tests/scripts/slack_notifier.sh 'test_playbooks' ./env_results.json
          when: always
      - *comment_on_contrib_pr
      - *destroy_instances
      - *store_artifacts

  Force Upload Packs To Marketplace:
    <<: *container_config
    resource_class: medium
    <<: *environment
    steps:
      - *attach_workspace
      - *add_ssh_keys
      - *prepare_environment
      - *check_user_permissions_to_upload_packs
      - run:
          name: Force Upload Packs To Marketplace Storage
          command: |
            EXTRACT_FOLDER=$(mktemp -d)
            PACK_ARTIFACTS=$CIRCLE_ARTIFACTS/content_packs.zip
            PACKS_DEPENDENCIES=$CIRCLE_ARTIFACTS/packs_dependencies.json
            GCS_PATH=$(mktemp)
            CIRCLE_BRANCH=${CIRCLE_BRANCH:-unknown}
            CREATE_INSTANCES_JOB_NUMBER=$(cat create_instances_build_num.txt)
            echo $GCS_MARKET_KEY > $GCS_PATH

            GCS_BUILD_BUCKET="marketplace-ci-build"
            GCS_MARKET_BUCKET="marketplace-dist"

            python3 ./Tests/Marketplace/copy_and_upload_packs.py -a $PACK_ARTIFACTS -e $EXTRACT_FOLDER -pb "$GCS_MARKET_BUCKET" -bb "$GCS_BUILD_BUCKET" -s $GCS_PATH -n $CREATE_INSTANCES_JOB_NUMBER -c $CIRCLE_BRANCH -p "${PACKS_TO_UPLOAD}"
            rm $GCS_PATH
          when: on_success
      - *store_artifacts

  Upload Packs To Marketplace:
    <<: *container_config
    resource_class: medium
    <<: *environment
    steps:
      - *attach_workspace
      - *add_ssh_keys
      - *prepare_environment
      - *check_user_permissions_to_upload_packs
      - when:
          condition:
            equal:
              - master
              - << pipeline.git.branch >>
          steps:
            - run:
                name: Upload Packs To Marketplace Storage
                command: |
                  EXTRACT_FOLDER=$(mktemp -d)
                  PACK_ARTIFACTS=$CIRCLE_ARTIFACTS/content_packs.zip
                  PACKS_DEPENDENCIES=$CIRCLE_ARTIFACTS/packs_dependencies.json
                  GCS_PATH=$(mktemp)
                  CIRCLE_BRANCH=${CIRCLE_BRANCH:-unknown}
                  CREATE_INSTANCES_JOB_NUMBER=$(cat create_instances_build_num.txt)
                  echo $GCS_MARKET_KEY > $GCS_PATH

                  GCS_BUILD_BUCKET="marketplace-ci-build"
                  GCS_MARKET_BUCKET="marketplace-dist"

                  python3 ./Tests/Marketplace/copy_and_upload_packs.py -a $PACK_ARTIFACTS -e $EXTRACT_FOLDER -pb "$GCS_MARKET_BUCKET" -bb "$GCS_BUILD_BUCKET" -s $GCS_PATH -n $CREATE_INSTANCES_JOB_NUMBER -c $CIRCLE_BRANCH
                  rm $GCS_PATH
      - run:
          name: Slack Notifier
          shell: /bin/bash
          command: |
            if [ -n "${BUCKET_UPLOAD}" ]; then
              ./Tests/scripts/slack_notifier.sh 'bucket_upload_flow'
            fi
          when: always
      - *store_artifacts

  Instance Test:
    <<: *container_config
    resource_class: medium
    <<: *environment
    steps:
      - *attach_workspace
      - *add_ssh_keys
      - *prepare_environment
      - run:
          name: Wait until server ready
          shell: /bin/bash
          when: always
          command: |
            if [ -z $INSTANCE_TESTS ]
            then
              echo "Skipping, contributor branch not given."
              exit 0
            fi
            python3 ./Tests/scripts/wait_until_server_ready.py "Demisto PreGA"
            echo 'export INSTANCE_ROLE="Demisto PreGA"' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Instance Test
          command: |
            if [ -z $INSTANCE_TESTS ]
            then
              echo "Skipping, contributor branch not given."
              exit 0
            fi
            ./Tests/scripts/instance_test.sh
            export RETVAL=$?
            cp ./Tests/failed_instances.txt $CIRCLE_ARTIFACTS/failed_instances.txt
            exit $RETVAL
          when: always
      - *destroy_instances
      - *store_artifacts

  Demisto SDK Nightly:
    <<: *container_config
    resource_class: medium
    <<: *environment
    steps:
      - checkout
      - setup_remote_docker
      - *restore_cache
      - *prepare_environment
      - *secrets
      - *update_tests_step
      - *validate_files_and_yaml
      - *run_unit_testing_and_lint
      - *infrastructure_testing
      - *create_id_set
      - *build_content_descriptor
      - *common_server_documentation
      - *collect_test_list_and_content_packs
      - *calculate_packs_dependencies
      - *store_artifacts
      - run:
          name: Slack Notifier
          shell: /bin/bash
          command: |
            ./Tests/scripts/slack_notifier.sh 'sdk_unittests' ./env_results.json
            ./Tests/scripts/slack_notifier.sh 'sdk_faild_steps' ./env_results.json
          when: always

  Demisto SDK Nightly - Run against Cortex XSOAR:
    <<: *container_config
    resource_class: medium
    <<: *environment
    steps:
      - checkout
      - setup_remote_docker
      - *restore_cache
      - *prepare_environment
      - *download_configuration
      - *create_instance
      - run:
          name: Wait until server ready
          command: |
            python3 ./Tests/scripts/wait_until_server_ready.py "Demisto Marketplace"
      - run:
          name: Set Environment Variables
          command: |
            echo "export DEMISTO_API_KEY=$(cat $SECRET_CONF_PATH | jq -r '.temp_apikey')" >> $BASH_ENV
            echo "export DEMISTO_BASE_URL=\"https://$(cat env_results.json | jq -r '.[0].InstanceDNS')\"" >> $BASH_ENV
            echo "Server URL: $DEMISTO_BASE_URL"
      - run:
          name: Install SDK Master
          command: pip3 install git+https://github.com/demisto/demisto-sdk.git
      - run:
          name: Unlock HelloWorld integration and playbook
          command: python3 Tests/sdknightly/unlock_entity.py integration HelloWorld
      - run:
          name: Create and upload incident type, incident field, mapper and a layout to Cortex XSOAR
          command: python3 Tests/sdknightly/create_entities_for_nightly_sdk.py HelloWorld --artifacts-folder $CIRCLE_ARTIFACTS
      - *upload_entities_to_cortex_xsoar
      - run:
          name: Download entities from Cortex XSOAR
          command: |
            demisto-sdk download -o Packs/HelloWorld/ -i HelloWorld --insecure -f
            demisto-sdk download -o Packs/HelloWorld/ -i HelloWorld-Test --insecure -f
            demisto-sdk download -o Packs/HelloWorld/ -i "Hello World Incident Test" --insecure -f
            demisto-sdk download -o Packs/HelloWorld/ -i "Hello World Alert Test" --insecure -f
            demisto-sdk download -o Packs/HelloWorld/ -i "Hello World Test - Incoming Mapper" --insecure -f
      - run:
          name: Format the entities
          command: demisto-sdk format -i Packs/HelloWorld/ -nv -ud -y
      - run:
          name: Run validate
          command: demisto-sdk validate -i Packs/HelloWorld/
      - run:
          name: Run lint
          command: demisto-sdk lint -i Packs/HelloWorld/
      - *upload_entities_to_cortex_xsoar
      - *destroy_instances
      - *store_artifacts
      - run:
          name: Slack Notifier
          shell: /bin/bash
          command: |
            ./Tests/scripts/slack_notifier.sh 'sdk_run_against_failed_steps' ./env_results.json
          when: always

  Install Packs in Demisto 6_0:
    <<: *container_config
    resource_class: medium
    <<: *environment
    steps:
      - *attach_workspace
      - *add_ssh_keys
      - *prepare_environment
      - run:
          name: Wait until server ready
          shell: /bin/bash
          when: always
          command: |
            python3 ./Tests/scripts/wait_until_server_ready.py "Demisto 6.0"
      - run:
          name: Install Packs
          shell: /bin/bash
          when: always
          no_output_timeout: 5h
          command: |
            echo 'export INSTANCE_ROLE="Demisto 6.0"' >> $BASH_ENV
            source $BASH_ENV
            ./Tests/Marketplace/install_packs.sh "$INSTANCE_ROLE"
            exit $RETVAL
      - run:
          name: Slack Notifier
          shell: /bin/bash
          command: |
            if [ -n "${BUCKET_UPLOAD}" ]; then
              ./Tests/scripts/slack_notifier.sh 'bucket_upload_flow'
            fi
          when: always
      - *persist_to_workspace
      - *destroy_instances
      - *store_artifacts

  Install Packs in Demisto Marketplace - Master:
    <<: *container_config
    resource_class: medium
    <<: *environment
    steps:
      - *attach_workspace
      - *add_ssh_keys
      - *prepare_environment
      - *wait_until_server_ready
      - run:
          name: Install Packs
          shell: /bin/bash
          when: always
          no_output_timeout: 5h
          command: |
            echo 'export INSTANCE_ROLE="Demisto Marketplace"' >> $BASH_ENV
            source $BASH_ENV
            ./Tests/Marketplace/install_packs.sh "$INSTANCE_ROLE"
            exit $RETVAL
      - run:
          name: Slack Notifier
          shell: /bin/bash
          command: |
            if [ -n "${BUCKET_UPLOAD}" ]; then
              ./Tests/scripts/slack_notifier.sh 'bucket_upload_flow'
            fi
          when: always
      - *destroy_instances
      - *store_artifacts

workflows:
  version: 2
  commit:
    when:
      not:
        or:
          - << pipeline.parameters.force_pack_upload >>
          - << pipeline.parameters.bucket_upload >>
          - << pipeline.parameters.demisto_sdk_nightly >>
          - << pipeline.parameters.nightly >>
          - << pipeline.parameters.instance_tests >>
    jobs:
      - Setup Environment
      - Create Instances:
          filters:
            branches:
              ignore: /pull\/[0-9]+/
      - Run Unit Testing And Lint:
          requires:
            - Setup Environment
      - Run Validations:
          requires:
            - Setup Environment
      - Server 5_0:
          filters:
            branches:
              ignore: /pull\/[0-9]+/
          requires:
            - Create Instances
      - Server 5_5:
          filters:
            branches:
              ignore: /pull\/[0-9]+/
          requires:
            - Create Instances
      - Server 6_0:
          filters:
            branches:
              ignore: /pull\/[0-9]+/
          requires:
            - Create Instances
      - Server Master:
          filters:
            branches:
              ignore: /pull\/[0-9]+/
          requires:
            - Create Instances

  force_pack_upload:
    when: << pipeline.parameters.force_pack_upload >>
    jobs:
      - Setup Environment:
          context: bucket_upload_env
      - Create Instances:
          context: bucket_upload_env
          filters:
            branches:
              only:
                - master
          requires:
            - Setup Environment
      - Force Upload Packs To Marketplace:
          context: bucket_upload_env
          filters:
            branches:
              only:
                - master
          requires:
            - Create Instances

  instances_testing:
    # for details of triggered builds see https://circleci.com/docs/2.0/workflows/#nightly-example
    # for details of cron syntax see https://www.unix.com/man-page/POSIX/1posix/crontab/ disable-secrets-detection
    triggers:
      - schedule:
          # should trigger every day at 2 AM UTC (5 AM Israel Time)
          cron: "0 2 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      *instance_tests_jobs
  instances_testing_trigger:
    when: << pipeline.parameters.instance_tests >>
    jobs:
      *instance_tests_jobs

  nightly:
    triggers:
      - schedule:
          # should trigger every day at 12 AM UTC (3 AM Israel Time)
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      *nightly_jobs

  nightly_trigger:
    # will initiate when using the trigger script.
    when: << pipeline.parameters.nightly >>
    jobs:
      *nightly_jobs

  sdk_nightly:
    triggers:
      - schedule:
          # should trigger every day at 12 AM UTC (3 AM Israel Time)
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      *sdk_nightly_jobs

  sdk_nightly_trigger:
    # will initiate when using the trigger script.
    when: << pipeline.parameters.demisto_sdk_nightly>>
    jobs:
      *sdk_nightly_jobs

  bucket_upload:
    triggers:
      - schedule:
          # should trigger every day at 10 AM & 10 PM UTC (12:00 PM & 00:00 AM Israel Time)
          cron: "0 10,22 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      *bucket_upload_jobs

  bucket_upload_trigger:
    # will initiate when using the trigger script.
    when: << pipeline.parameters.bucket_upload>>
    jobs:
      *bucket_upload_jobs
