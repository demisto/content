jobs:
  create_test_id_set:
    executor: python/default
    steps:
      - checkout
      - python/load-cache
      - python/install-deps
      - python/save-cache
      - run:
          command: demisto-sdk create-id-set -o ./Tests/id_set.json

  infrastructure_testing:
    executor: python/default
    steps:
      - checkout
      - python/load-cache
      - python/install-deps
      - python/save-cache
      - run:
          command: |
            if [ -n "${INSTANCE_TESTS}" ];
              then
                echo "Skipping - not running in INSTANCE_TESTS build or unit-tests container"
                exit 0
            fi

            python3 -m pytest ./Tests/scripts/infrastructure_tests/mock_unit_test.py -v
            python3 -m pytest ./Tests/scripts/infrastructure_tests/release_notes_test.py -v
            python3 -m pytest ./Tests/scripts/infrastructure_tests/test_configure_tests.py -v
            python3 -m pytest ./Tests/Marketplace/Tests/marketplace_services_test.py -v
            python3 -m pytest ./Tests/Marketplace/Tests/upload_packs_test.py -v
            python3 -m pytest ./Tests/Marketplace/Tests/search_and_install_packs_test.py -v

    validate_files_and_yaml:
      executor: python/default
      steps:
        - checkout
        - python/load-cache
        - python/install-deps
        - python/save-cache
        - run:
            command: |
              if [ -n "${INSTANCE_TESTS}" ];
                then
                  echo "Skipping - not running in INSTANCE_TESTS build or unit-tests container"
                  exit 0
              fi

              # Run flake8 on all excluding Integraions and Scripts (they will be handled in linting)
              ./Tests/scripts/pyflake.sh *.py
              find . -maxdepth 1 -type d -not \( -path . -o -path ./Integrations -o -path ./Scripts -o -path ./Beta_Integrations -o -path ./venv \) | xargs ./Tests/scripts/pyflake.sh

              [ -n "${BACKWARD_COMPATIBILITY}" ] && CHECK_BACKWARD="false" || CHECK_BACKWARD="true"

              if [ "${CHECK_BACKWARD}" = "true" ] ;
                then
                   demisto-sdk validate -g --post-commit

                else
                   demisto-sdk validate -g --post-commit --no-backward-comp
              fi

    secrets:
      executor: python/default
      steps:
        - checkout
        - python/load-cache
        - python/install-deps
        - python/save-cache
        - run: |
            if [ -n "${INSTANCE_TESTS}" ];
              then
                echo "Skipping - not running in INSTANCE_TESTS build or unit-tests container"
                exit 0
            fi

            demisto-sdk secrets --post-commit --ignore-entropy

    spell_checks:
      executor: python/default
      steps:
        - checkout
        - python/load-cache
        - python/install-deps
        - python/save-cache
        - run: |
              if [ -n "${INSTANCE_TESTS}" ];
                then
                  echo "Skipping - not running in INSTANCE_TESTS build or unit-tests container"
                  exit 0
              fi
              python3 ./Tests/scripts/circleci_spell_checker.py $CIRCLE_BRANCH

    build_content_descriptor:
      executor: python/default
      steps:
        - checkout
        - python/load-cache
        - python/install-deps
        - python/save-cache
        - run: |
            if [ -n "${GITHUB_TOKEN}" ] ;
              then
                python3 release_notes.py $CONTENT_VERSION $GIT_SHA1 $CIRCLE_BUILD_NUM $SERVER_VERSION --github-token $GITHUB_TOKEN

              else
                python3 release_notes.py $CONTENT_VERSION $GIT_SHA1 $CIRCLE_BUILD_NUM $SERVER_VERSION
            fi

    common_server_documentation:
      executor: python/default
      steps:
        - checkout
        - python/load-cache
        - python/install-deps
        - python/save-cache
        - run: ./Documentation/commonServerDocs.sh


    content_docs_site:
      executor: python/default
      steps:
        - checkout
        - python/load-cache
        - python/install-deps
        - python/save-cache
        - run: ./Documentation/docs_site_update.sh

    create_content_artifacts:
      executor: python/default
      steps:
        - checkout
        - python/load-cache
        - python/install-deps
        - python/save-cache
        - run: |
            demisto-sdk create-content-artifacts -a $CIRCLE_ARTIFACTS
            # create zip with contents of content_new.zip and content_test.zip for use in updating content on instances
            cp "$CIRCLE_ARTIFACTS/content_new.zip" "$CIRCLE_ARTIFACTS/all_content.zip"
            unzip -q "$CIRCLE_ARTIFACTS/content_test.zip" -d "test_content_dir"
            zip -j "$CIRCLE_ARTIFACTS/all_content.zip" test_content_dir/*
            rm -r test_content_dir
        - store_artifacts:
            path: artifacts
            destination: artifacts

    run_unit_test_and_lint:
      executor: python/default
      steps:
        - checkout
        - python/load-cache
        - python/install-deps
        - python/save-cache
        - run: |
            echo "demisto-sdk version: $(demisto-sdk --version)"
            echo "mypy version: $(mypy --version)"
            echo "flake8 py2 version: $(python2 -m flake8 --version)"
            echo "flake8 py3 version: $(python3 -m flake8 --version)"
            echo "bandit py2 version: $(python2 -m bandit --version 2>&1)"
            echo "bandit py3 version: $(python3 -m bandit --version 2>&1)"
            echo "vulture py2 version: $(python2 -m vulture --version) 2>&1"
            echo "vulture py3 version: $(python3 -m vulture --version) 2>&1"
            SHOULD_LINT_ALL=$(./Tests/scripts/should_lint_all.sh)
            mkdir ./unit-tests
            if [ -n "$SHOULD_LINT_ALL" ]; then
              echo -e  "----------\nLinting all because:\n${SHOULD_LINT_ALL}\n----------"
              demisto-sdk lint -p 8 -a -q --test-xml ./unit-tests --log-path ./artifacts --json-report ./artifacts
            else
              demisto-sdk lint -p 8 -g -v --test-xml ./unit-tests --log-path ./artifacts --json-report ./artifacts
            fi
          name: Run demisto-sdk lint
        - store_test_results:
            path: ./unit-tests
        - store_artifacts:
            path: artifacts
            destination: artifacts

    verify_base_branch_for_contribution:
      executor: python/default
      steps:
        - checkout
        - python/load-cache
        - python/install-deps
        - python/save-cache
        - run: |
            if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]] ;
              then
                python3 ./Tests/scripts/verify_base_branch_for_contribution.py $CIRCLE_BRANCH
            fi

    configure_test_filter:
      executor: python/default
      steps:
        - checkout
        - python/load-cache
        - python/install-deps
        - python/save-cache
        - run: |
            if [ -n "${INSTANCE_TESTS}" ] || [ $CIRCLE_NODE_INDEX -ne 0 ] ;
              then
                echo "Skipping - not running in INSTANCE_TESTS build or unit-tests container"
                exit 0
            fi

            [ -n "${NIGHTLY}" ] && IS_NIGHTLY=true || IS_NIGHTLY=false
            python3 ./Tests/scripts/configure_tests.py -n $IS_NIGHTLY


orbs:
  python: circleci/python@0.1
workflows:
  version: 2
  verify_and_test:
    jobs:
      - create_test_id_set
      - infrastructure_testing
      - validate_files_and_yaml
      - secrets
      - spell_checks
      - build_content_descriptor
      - common_server_documentation
      - content_docs_site
      - create_content_artifacts
      - run_unit_test_and_lint
      - verify_base_branch_for_contribution
      - configure_test_filter
