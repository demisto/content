version: 2.1
parameters:
  non_ami_run:
    type: string
    default: ""
  artifact_build_num:
    type: string
    default: ""
  server_branch_name:
    type: string
    default: ""

references:
  environment: &environment
    environment:
      CONTENT_VERSION: "20.7.0"
      SERVER_VERSION: "5.5.0"
      GIT_SHA1: "1f9f72106210397ee6134fd4a82b07876226e584" # guardrails-disable-line disable-secrets-detection
      NON_AMI_RUN: << pipeline.parameters.non_ami_run >>
      ARTIFACT_BUILD_NUM: << pipeline.parameters.artifact_build_num >>
      SERVER_BRANCH_NAME: << pipeline.parameters.server_branch_name >>

  container_config: &container_config
    docker:
      - image: devdemisto/content-build:3.0.0.7332  # disable-secrets-detection

  workspace_root: &workspace_root
    /home/circleci/

  store_artifacts: &store_artifacts
     store_artifacts:
        path: artifacts
        destination: artifacts
        when: always

  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root
  add_ssh_keys: &add_ssh_keys
    add_ssh_keys:
      fingerprints:
        - "02:df:a5:6a:53:9a:f5:5d:bd:a6:fc:b2:db:9b:c9:47" # disable-secrets-detection
        - "f5:25:6a:e5:ac:4b:84:fb:60:54:14:82:f1:e9:6c:f9" # disable-secrets-detection
  prepare_environment: &prepare_environment
    run:
      name: Prepare Environment
      when: always
      command: |
        if [ -n "${INSTANCE_TESTS}" ] && [ $CIRCLE_NODE_INDEX -ne 0 ] ;
          then
            echo "Skipping - instance tests tasks are running only in container number 0"
            exit 0
        fi
        echo 'export CIRCLE_ARTIFACTS="/home/circleci/project/artifacts"' >> $BASH_ENV
        echo 'export PATH="/home/circleci/.local/bin:${PWD}/node_modules/.bin:${PATH}"' >> $BASH_ENV # disable-secrets-detection
        echo 'export PYTHONPATH="/home/circleci/project:${PYTHONPATH}"' >> $BASH_ENV
        echo 'export DEMISTO_README_VALIDATION=true' >> $BASH_ENV
        echo "=== sourcing $BASH_ENV ==="
        source $BASH_ENV
        sudo mkdir -p -m 777 $CIRCLE_ARTIFACTS
        chmod +x ./Tests/scripts/*
        chmod +x ./Tests/lastest_server_build_scripts/*
        if [ ! -e "venv" ]; then
          echo "installing venv"
          NO_HOOKS=1 SETUP_PY2=yes .hooks/bootstrap
          source ./venv/bin/activate
          pip install -r .circleci/build-requirements.txt
          pip3 install -r .circleci/build-requirements.txt
        else
          echo "venv exists (from cache). activating"
          source ./venv/bin/activate
        fi
        # Install node packages
        npm install .
        # store in bash env so we load our venv in each step
        echo 'source /home/circleci/project/venv/bin/activate' >> $BASH_ENV
        git config diff.renameLimit 6000

        if [ -n "${DEMISTO_SDK_NIGHTLY}" ]; then
          pip3 install git+https://github.com/demisto/demisto-sdk@master
        fi

        echo "========== Build Parameters =========="
        echo "Parameters: NIGHTLY: $NIGHTLY, INSTANCE_TESTS: $INSTANCE_TESTS, NON_AMI_RUN: $NON_AMI_RUN, SERVER_BRANCH_NAME: $SERVER_BRANCH_NAME, ARTIFACT_BUILD_NUM: $ARTIFACT_BUILD_NUM, DEMISTO_SDK_NIGHTLY: $DEMISTO_SDK_NIGHTLY, TIME_TO_LIVE: $TIME_TO_LIVE, CONTRIB_BRANCH: $CONTRIB_BRANCH"
        python --version
        python3 --version
        demisto-sdk --version

  create_artifact: &create_artifact
    run:
      name: Create Content Artifacts
      when: always
      command: |
        demisto-sdk create-content-artifacts -a $CIRCLE_ARTIFACTS
        # create zip with contents of content_new.zip and content_test.zip for use in updating content on instances
        cp "$CIRCLE_ARTIFACTS/content_new.zip" "$CIRCLE_ARTIFACTS/all_content.zip"
        unzip -q "$CIRCLE_ARTIFACTS/content_test.zip" -d "test_content_dir"
        zip -j "$CIRCLE_ARTIFACTS/all_content.zip" test_content_dir/*
        rm -r test_content_dir
  restore_cache: &restore_cache
    restore_cache:
      key: venv-{{ checksum "dev-requirements-py2.txt" }}-{{ checksum "dev-requirements-py3.txt" }}-{{ checksum ".circleci/build-requirements.txt" }}-{{ checksum "package-lock.json" }}
  destroy_instances: &destroy_instances
    run:
      name: Destroy Instances
      command: |
        echo "$INSTANCE_ROLE"
        export TEMP=$(cat ./Tests/filter_envs.json | jq '."$INSTANCE_ROLE"')
        if [[ "$TEMP" == "false" ]];
          then
            echo "Skipping - instance was not setup"
            exit 0
        fi
        python3 ./Tests/scripts/destroy_instances.py $CIRCLE_ARTIFACTS ./env_results.json "$INSTANCE_ROLE"

        export PSWD=$(jq .serverLogsZipPassword < $(cat secret_conf_path) | cut -d \" -f 2)
        zip -P $PSWD $CIRCLE_ARTIFACTS/ServerLogs.zip $CIRCLE_ARTIFACTS/server*.log || ((($? > 0)) && echo "Didnâ€™t find any server logs, skipping this stage" && exit 0)
        rm -f $CIRCLE_ARTIFACTS/server*.log
      when: always

  persist_to_workspace: &persist_to_workspace
    persist_to_workspace:
      root: /home/circleci/
      paths:
        - project
jobs:
  build:
    <<: *container_config
    parallelism: 2
    <<: *environment
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          key: venv-{{ checksum "dev-requirements-py2.txt" }}-{{ checksum "dev-requirements-py3.txt" }}-{{ checksum ".circleci/build-requirements.txt" }}-{{ checksum "package-lock.json" }}
      - *prepare_environment
      - save_cache:
          paths:
            - venv
            - node_modules
          key: venv-{{ checksum "dev-requirements-py2.txt" }}-{{ checksum "dev-requirements-py3.txt" }}-{{ checksum ".circleci/build-requirements.txt" }}-{{ checksum "package-lock.json" }}
      - add_ssh_keys:
          fingerprints:
            - "02:df:a5:6a:53:9a:f5:5d:bd:a6:fc:b2:db:9b:c9:47" # disable-secrets-detection
            - "f5:25:6a:e5:ac:4b:84:fb:60:54:14:82:f1:e9:6c:f9" # disable-secrets-detection
      - run:
          name: Get Contributor pack
          when: always
          command: |
            if [ -z $CONTRIB_BRANCH ]
            then
              echo "Skipping, contributor branch not given."
              exit 0
            else
              USER=$(echo $CONTRIB_BRANCH | cut -d ":" -f 1)
              BRANCH=$(echo $CONTRIB_BRANCH | cut -d ":" -f 2)
              PACK=$(echo $CONTRIB_BRANCH | cut -d ":" -f 3)

              echo "Copy the changes from the contributor branch $USER/$BRANCH in the pack $PACK"
              git remote add $USER git@github.com:$USER/content.git
              git fetch $USER $BRANCH
              git checkout $USER/$BRANCH $PACK
              exit 0
            fi

      - run:
          name: Check if CircleCI's config file is up to date
          when: always
          command: |
            if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then
              echo "Skipping, Should not run on contributor's branch."
              exit 0
            fi
            if [ $CIRCLE_NODE_INDEX -ne 0 ] ;
              then
                echo 'Skipping - running only in container number 0.'
                exit 0;
            fi
            # Checks if there's any diff from master
            if [[ `git diff origin/master -- .circleci/config.yml` ]]; then
                # Checks if part of the branch's changes
                if [[ -z `git diff origin/master..."$CIRCLE_BRANCH" --name-only | grep .circleci/config.yml` ]]; then
                    echo ".circleci/config.yml has been changed. Merge from master"
                    exit 1
                else
                    echo ".circleci/config.yml is part of the branch changes, proceeding"
                    exit 0
                fi
            else
                echo ".circleci/config.yml is up to date!"
            fi
      - run:
          name: Update Tests step
          when: always
          command: |
            if [ $CIRCLE_NODE_INDEX -ne 0 ] ;
              then
                echo "Skipping - running only in container number 0"
                exit 0
            fi
            python3 ./Tests/scripts/update_conf_json.py
            cp "./Tests/conf.json" "$CIRCLE_ARTIFACTS/conf.json"
      - run:
          name: Create ID Set
          when: always
          command: |
            if [ $CIRCLE_NODE_INDEX -ne 0 ] ;
              then
                echo "Skipping - running only in container number 0"
                exit 0
            fi
            demisto-sdk create-id-set -o ./Tests/id_set.json
      - run:
          name: Infrastructure testing
          when: always
          command: |
            if [ -n "${INSTANCE_TESTS}" ] || [ $CIRCLE_NODE_INDEX -ne 0 ] ;
              then
                echo "Skipping - not running in INSTANCE_TESTS build or unit-tests container"
                exit 0
            fi

            python3 -m pytest ./Tests/scripts/infrastructure_tests/ -v
            python3 -m pytest ./Tests/Marketplace/Tests/ -v

            if [ -n "${DEMISTO_SDK_NIGHTLY}" ] ; then
                  ./Tests/scripts/sdk_pylint_check.sh
            fi
            exit 0
      - run:
          name: Validate Files and Yaml
          when: always
          command: |
            if [ -n "${INSTANCE_TESTS}" ] || [ $CIRCLE_NODE_INDEX -ne 0 ] || [ -n "${NIGHTLY}" ];
              then
                echo "Skipping - not running in INSTANCE_TESTS build or unit-tests container or Nightly run"
                exit 0
            fi

            # Run flake8 on all excluding Packs (Integraions and Scripts) - they will be handled in linting
            ./Tests/scripts/pyflake.sh *.py
            find . -maxdepth 1 -type d -not \( -path . -o -path ./Packs -o -path ./venv \) | xargs ./Tests/scripts/pyflake.sh

            [ -n "${BACKWARD_COMPATIBILITY}" ] && CHECK_BACKWARD="false" || CHECK_BACKWARD="true"
            ./Tests/scripts/validate.sh
      - run:
          name: Secrets
          when: always
          command: |
            if [ -n "${INSTANCE_TESTS}" ] || [ $CIRCLE_NODE_INDEX -ne 0 ] ;
              then
                echo "Skipping - not running in INSTANCE_TESTS build or unit-tests container"
                exit 0
            fi

            demisto-sdk secrets --post-commit --ignore-entropy
      - run:
          name: Collect Test List And Content Packs
          when: always
          command: |
            if [ -n "${INSTANCE_TESTS}" ] || [ $CIRCLE_NODE_INDEX -ne 0 ] ;
              then
                echo "Skipping - not running in INSTANCE_TESTS build or unit-tests container"
                exit 0
            fi

            [ -n "${NIGHTLY}" ] && IS_NIGHTLY=true || IS_NIGHTLY=false
            python3 ./Tests/scripts/collect_tests_and_content_packs.py -n $IS_NIGHTLY
      - run:
          name: Spell Checks
          command: |
            if [ -n "${INSTANCE_TESTS}" ] || [ $CIRCLE_NODE_INDEX -ne 0 ] ;
              then
                echo "Skipping - not running in INSTANCE_TESTS build or unit-tests container"
                exit 0
            fi
            python3 ./Tests/scripts/circleci_spell_checker.py $CIRCLE_BRANCH
      - run:
          name: Build Content Descriptor
          when: always
          command: |
            if [ $CIRCLE_NODE_INDEX -ne 0 ] ;
              then
                echo "Skipping - running only in container number 0"
                exit 0
            fi
            if [ -n "${GITHUB_TOKEN}" ] ;
              then
                # new release notes summary generator in packs format
                python3 Utils/release_notes_generator.py $CONTENT_VERSION $GIT_SHA1 $CIRCLE_BUILD_NUM --output $CIRCLE_ARTIFACTS/packs-release-notes.md --github-token $GITHUB_TOKEN
              else
                # new release notes summary generator in packs format
                python3 Utils/release_notes_generator.py $CONTENT_VERSION $GIT_SHA1 $CIRCLE_BUILD_NUM --output $CIRCLE_ARTIFACTS/packs-release-notes.md
            fi
      - run:
          name: Common Server Documentation
          when: always
          command: |
            if [ $CIRCLE_NODE_INDEX -ne 0 ] ;
              then
                echo "Skipping - running only in container number 0"
                exit 0
            fi
            ./Documentation/commonServerDocs.sh
      - run:
          name: Content Docs Site
          when: always
          command: |
            if [ $CIRCLE_NODE_INDEX -ne 0 ];
              then
                echo "Skipping - running only in container number 0"
                exit 0
            fi
            ./Documentation/docs_site_update.sh
      - run:
          name: Create Content Artifacts
          when: always
          command: |
            if [ $CIRCLE_NODE_INDEX -ne 0 ] ;
              then
                echo "Skipping - running only in container number 0"
                exit 0
            fi
            demisto-sdk create-content-artifacts -a $CIRCLE_ARTIFACTS
            # create zip with contents of content_new.zip and content_test.zip for use in updating content on instances
            cp "$CIRCLE_ARTIFACTS/content_new.zip" "$CIRCLE_ARTIFACTS/all_content.zip"
            unzip -q "$CIRCLE_ARTIFACTS/content_test.zip" -d "test_content_dir"
            zip -j "$CIRCLE_ARTIFACTS/all_content.zip" test_content_dir/*
            rm -r test_content_dir
      - run:
          name: Calculate Packs Dependencies
          when: always
          command: |
            if [ $CIRCLE_NODE_INDEX -ne 0 ] ;
              then
                echo "Skipping - running only in container number 0"
                exit 0
            fi
            python3 ./Tests/Marketplace/packs_dependencies.py -i ./Tests/id_set.json -o $CIRCLE_ARTIFACTS/packs_dependencies.json
      - run:
          name: Run Unit Testing and Lint
          when: always
          no_output_timeout: 5h
          command: |
            if [ -n "${INSTANCE_TESTS}" ] || [ $CIRCLE_NODE_INDEX -ne 1 ] ;
              then
                echo "Skipping - unit tests are running only in container number 1"
                exit 0
            fi
            echo "demisto-sdk version: $(demisto-sdk --version)"
            echo "mypy version: $(mypy --version)"
            echo "flake8 py2 version: $(python2 -m flake8 --version)"
            echo "flake8 py3 version: $(python3 -m flake8 --version)"
            echo "bandit py2 version: $(python2 -m bandit --version 2>&1)"
            echo "bandit py3 version: $(python3 -m bandit --version 2>&1)"
            echo "vulture py2 version: $(python2 -m vulture --version) 2>&1"
            echo "vulture py3 version: $(python3 -m vulture --version) 2>&1"
            SHOULD_LINT_ALL=$(./Tests/scripts/should_lint_all.sh)
            mkdir ./unit-tests
            if [ -n "$SHOULD_LINT_ALL" ]; then
              echo -e  "----------\nLinting all because:\n${SHOULD_LINT_ALL}\n----------"
              demisto-sdk lint -p 8 -a -q --test-xml ./unit-tests --log-path ./artifacts --failure-report ./artifacts
            else
              demisto-sdk lint -p 8 -g -v --test-xml ./unit-tests --log-path ./artifacts --failure-report ./artifacts
            fi
      - store_test_results:
          path: ./unit-tests
      - store_artifacts:
          path: artifacts
          destination: artifacts
      - run:
          name: Verify Base Branch for Contribution
          when: always
          command: |
            if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]] ;
              then
                python3 ./Tests/scripts/verify_base_branch_for_contribution.py $CIRCLE_BRANCH
            fi
      - run:
          name: Download Configuration
          when: always
          command: |
            if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then
              echo "Skipping instance tests for forked PRs"
              exit 0
            fi
            if [ $CIRCLE_NODE_INDEX -ne 0 ] ;
              then
                echo 'Skipping - running only in container number 0.'
                exit 0;
            fi
            if ./Tests/scripts/is_ami.sh ;
              then
                ./Tests/scripts/download_demisto_conf.sh

              else
                ./Tests/lastest_server_build_scripts/download_demisto_conf.sh
            fi
      - run:
          name: Download Artifacts
          when: always
          command: |
            if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then
              echo "Skipping instance tests for forked PRs"
              exit 0
            fi
            if [ $CIRCLE_NODE_INDEX -ne 0 ] ;
              then
                echo 'Skipping - running only in container number 0.'
                exit 0;
            fi
            if ./Tests/scripts/is_ami.sh ;
              then
                echo "Using AMI - Not downloading artifacts"
              else
                ./Tests/scripts/server_get_artifact.sh $SERVER_CI_TOKEN
                cp demistoserver.sh ./Tests/scripts/awsinstancetool/ansibleinstall/demistoserver.sh
            fi
      - run:
          name: Prepare Content Packs For Testing
          when: always
          command: |
            if [ $CIRCLE_NODE_INDEX -ne 0 ] ;
              then
                echo 'Skipping - running only in container number 0.'
                exit 0;
            fi
            if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then
              echo "Skipping, Should not run on contributor's branch."
              exit 0
            fi
            ./Tests/scripts/prepare_content_packs_for_testing.sh
      - store_artifacts:
          path: artifacts
          destination: artifacts
          when: always
      - run:
          name: Create Instance
          when: always
          command: |
            [ -n "${TIME_TO_LIVE}" ] && TTL=${TIME_TO_LIVE} || TTL=180

            if [ -n "${DEMISTO_SDK_NIGHTLY}" ]; then
              echo "Skipping instance tests for sdk nightly build"
              exit 0
            fi

            if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then
              echo "Skipping instance tests for forked PRs"
              exit 0
            fi
            if [ $CIRCLE_NODE_INDEX -ne 0 ] ;
              then
                echo 'Skipping - running only in container number 0.'
                exit 0;
            fi
            if ./Tests/scripts/is_ami.sh ;
              then
                if [ -n "${NIGHTLY}" ] ;
                  then
                    export IFRA_ENV_TYPE=Nightly # disable-secrets-detection
                elif [ -n "${INSTANCE_TESTS}" ] ;
                  then
                    export IFRA_ENV_TYPE="Demisto PreGA" # disable-secrets-detection

                elif [ -n "${CONTRIB_BRANCH}" ] ;
                  then
                    export IFRA_ENV_TYPE="Demisto Marketplace" # disable-secrets-detection

                  else
                    export IFRA_ENV_TYPE=Content-Env # disable-secrets-detection
                fi
                python3 ./Tests/scripts/awsinstancetool/aws_instance_tool.py -envType "$IFRA_ENV_TYPE" -timetolive $TTL -outfile ./env_results.json

              else
                . ./Tests/scripts/server_get_artifact.sh $SERVER_CI_TOKEN
                python3 ./Tests/scripts/awsinstancetool/aws_instance_tool.py -envType CustomBuild -custombuild true -circleurl $SERVER_DOWNLOAD_LINK -circleToken $SERVER_CI_TOKEN -timetolive $TTL -outfile ./env_results.json
            fi
      - run:
          name: Setup Instance
          when: always
          command: |
            if [ -n "${DEMISTO_SDK_NIGHTLY}" ]; then
              echo "Skipping instance tests for sdk nightly build"
              exit 0
            fi

            if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then
              echo "Skipping instance tests for forked PRs"
              exit 0
            fi
            if [ $CIRCLE_NODE_INDEX -ne 0 ] ;
              then
                echo 'Skipping - running only in container number 0.'
                exit 0;
            fi
            if ./Tests/scripts/is_ami.sh ;
              then
                python3 ./Tests/scripts/run_content_installation.py
              else
                ./Tests/lastest_server_build_scripts/run_installer_on_instance.sh
            fi
            python3 ./Tests/scripts/wait_until_server_ready.py
      - run:
          name: Run Tests - Server 4.1
          shell: /bin/bash
          when: always
          command: |
            if [ -n "${DEMISTO_SDK_NIGHTLY}" ]; then
              echo "Skipping instance tests for sdk nightly build"
              exit 0
            fi

            if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then
              echo "Skipping instance tests for forked PRs"
              exit 0
            fi
            if [ -n "${INSTANCE_TESTS}" ] || [ $CIRCLE_NODE_INDEX -ne 0 ] || [ -n "${NIGHTLY}" ] || [ -n "${CONTRIB_BRANCH}" ];
              then
                echo "Skipping - not running in INSTANCE_TESTS build, unit-tests container, Nightly run or contributor branch"
                exit 0
            fi
            export TEMP=$(cat ./Tests/filter_envs.json | jq '."Demisto two before GA"')
            echo "Demisto two before GA filter=$TEMP"
            if [[ "$TEMP" == "false" ]];
              then
                echo "Skipping - instance was not setup"
                exit 0
            fi
            if ./Tests/scripts/is_ami.sh ;
              then
                ./Tests/scripts/run_tests.sh "Demisto two before GA"

              else
                echo "Not AMI run, can't run on this version"
            fi
      - run:
          name: Run Tests - Server 4.5
          shell: /bin/bash
          when: always
          command: |
            if [ -n "${DEMISTO_SDK_NIGHTLY}" ]; then
              echo "Skipping instance tests for sdk nightly build"
              exit 0
            fi

            if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then
              echo "Skipping instance tests for forked PRs"
              exit 0
            fi
            if [ -n "${INSTANCE_TESTS}" ] || [ $CIRCLE_NODE_INDEX -ne 0 ] || [ -n "${NIGHTLY}" ] || [ -n "${CONTRIB_BRANCH}" ];
              then
                echo "Skipping - not running in INSTANCE_TESTS build, unit-tests container, Nightly run or contributor branch"
                exit 0
            fi
            export TEMP=$(cat ./Tests/filter_envs.json | jq '."Demisto one before GA"')
            echo "Demisto one before GA filter=$TEMP"
            if [[ "$TEMP" == "false" ]];
              then
                echo "Skipping - instance was not setup"
                exit 0
            fi
            if ./Tests/scripts/is_ami.sh ;
              then
                ./Tests/scripts/run_tests.sh "Demisto one before GA"

              else
                echo "Not AMI run, can't run on this version"
            fi
      - run:
          name: Run Tests - Server 5.0
          shell: /bin/bash
          when: always
          command: |
            if [ -n "${DEMISTO_SDK_NIGHTLY}" ]; then
              echo "Skipping instance tests for sdk nightly build"
              exit 0
            fi

            if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then
              echo "Skipping instance tests for forked PRs"
              exit 0
            fi
            if [ -n "${INSTANCE_TESTS}" ] || [ $CIRCLE_NODE_INDEX -ne 0 ] || [ -n "${NIGHTLY}" ] || [ -n "${CONTRIB_BRANCH}" ];
              then
                echo "Skipping - not running in INSTANCE_TESTS build, unit-tests container, Nightly run or on contributor branch"
                exit 0
            fi
            export TEMP=$(cat ./Tests/filter_envs.json | jq '."Demisto GA"')
            echo "Demisto GA filter=$TEMP"
            if [[ "$TEMP" == "false" ]];
              then
                echo "Skipping - instance was not setup"
                exit 0
            fi
            if ./Tests/scripts/is_ami.sh ;
              then
                ./Tests/scripts/run_tests.sh "Demisto GA"

            else
                ./Tests/scripts/run_tests.sh "master"
            fi
      - run:
          name: Run Tests - Server 5.5
          shell: /bin/bash
          when: always
          command: |
            if [ -n "${DEMISTO_SDK_NIGHTLY}" ]; then
              echo "Skipping instance tests for sdk nightly build"
              exit 0
            fi

            if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then
              echo "Skipping instance tests for forked PRs"
              exit 0
            fi
            if [ -n "${INSTANCE_TESTS}" ] || [ $CIRCLE_NODE_INDEX -ne 0 ] || [ -n "${NIGHTLY}" ]  || [ -n "${CONTRIB_BRANCH}" ];
              then
                echo "Skipping - not running in INSTANCE_TESTS build, unit-tests container, Nightly run or contributor branch"
                exit 0
            fi
            export TEMP=$(cat ./Tests/filter_envs.json | jq '."Demisto PreGA"')
            echo "Demisto PreGA filter=$TEMP"
            if [[ "$TEMP" == "false" ]];
              then
                echo "Skipping - instance was not setup"
                exit 0
            fi
            if ./Tests/scripts/is_ami.sh ;
              then
                ./Tests/scripts/run_tests.sh "Demisto PreGA"
                export RETVAL=$?
                cp ./Tests/failed_tests.txt $CIRCLE_ARTIFACTS/failed_tests.txt
                exit $RETVAL

            else
                echo "Not AMI run, can't run on this version"
            fi
      - run:
          name: Run Tests - Demisto Marketplace
          shell: /bin/bash
          when: always
          no_output_timeout: 5h
          command: |
            if [ -n "${DEMISTO_SDK_NIGHTLY}" ]; then
              echo "Skipping instance tests for sdk nightly build"
              exit 0
            fi

            if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then
              echo "Skipping instance tests for forked PRs"
              exit 0
            fi
            if [ -n "${INSTANCE_TESTS}" ] || [ $CIRCLE_NODE_INDEX -ne 0 ];
              then
                echo "Skipping - not running in INSTANCE_TESTS build or unit-tests container"
                exit 0
            fi
            export TEMP=$(cat ./Tests/filter_envs.json | jq '."Demisto Marketplace"')
            echo "Demisto Marketplace filter=$TEMP"
            if [[ "$TEMP" == "false" ]];
              then
                echo "Skipping - instance was not setup"
                exit 0
            fi
            if ./Tests/scripts/is_ami.sh ;
              then
                ./Tests/scripts/run_tests.sh "Demisto Marketplace"
                export RETVAL=$?
                cp ./Tests/failed_tests.txt $CIRCLE_ARTIFACTS/failed_tests.txt
                exit $RETVAL

            else
                echo "Not AMI run, can't run on this version"
            fi
      - store_artifacts:
          path: artifacts
          destination: artifacts
          when: always
      - run:
          name: Slack Notifier
          shell: /bin/bash
          command: |
            if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then
              echo "Skipping instance tests for forked PRs"
              exit 0
            fi
            if [ -n "${INSTANCE_TESTS}" ] ;
              then
                echo "Skipping - not running in INSTANCE_TESTS build"
                exit 0
            fi
            ./Tests/scripts/slack_notifier.sh $CIRCLE_NODE_INDEX ./env_results.json

          when: always
      - run:
          name: Instance Test
          command: |
            if [ -n "${INSTANCE_TESTS}" ] && [ $CIRCLE_NODE_INDEX -ne 1 ] ;
              then
                ./Tests/scripts/instance_test.sh
                export RETVAL=$?
                cp ./Tests/failed_instances.txt $CIRCLE_ARTIFACTS/failed_instances.txt
                exit $RETVAL
              else
                echo "Skipping instance tests"
                exit 0
            fi
          when: always
      - run:
          name: Destroy Instances
          command: |
            if [ -n "${DEMISTO_SDK_NIGHTLY}" ]; then
              echo "Skipping instance tests for sdk nightly build"
              exit 0
            fi

            if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then
              echo "Skipping instance tests for forked PRs"
              exit 0
            fi
            if [ -n "${TIME_TO_LIVE}" ]
            then
                echo "Skipping - Time to live was set to $TIME_TO_LIVE minutes"
                exit 0
            fi
            if [ $CIRCLE_NODE_INDEX -ne 0 ] ;
              then
                echo 'Skipping - running only in container number 0.'
                exit 0;
              else
                python3 ./Tests/scripts/destroy_instances.py $CIRCLE_ARTIFACTS ./env_results.json

                export PSWD=$(jq .serverLogsZipPassword < $(cat secret_conf_path) | cut -d \" -f 2)
                zip -P $PSWD $CIRCLE_ARTIFACTS/ServerLogs.zip $CIRCLE_ARTIFACTS/server*.log
                rm -f $CIRCLE_ARTIFACTS/server*.log
            fi
          when: always
      - run:
          name: Upload Packs To Marketplace Storage
          command: |
            if [ -n "${DEMISTO_SDK_NIGHTLY}" ]; then
              echo "Skipping instance tests for sdk nightly build"
              exit 0
            fi

            if [[ $CIRCLE_BRANCH != master ]]; then
              echo "Skipping packs uploading on non master branch"
              exit 0
            fi

            if [ $CIRCLE_NODE_INDEX -ne 0 ] ;
              then
                echo 'Skipping - running only in container number 0.'
                exit 0;
            fi
            EXTRACT_FOLDER=$(mktemp -d)
            PACK_ARTIFACTS=$CIRCLE_ARTIFACTS/content_packs.zip
            PACKS_DEPENDENCIES=$CIRCLE_ARTIFACTS/packs_dependencies.json
            ID_SET=$CIRCLE_ARTIFACTS/id_set.json
            GCS_PATH=$(mktemp)
            echo $GCS_MARKET_KEY > $GCS_PATH
            python3 ./Tests/Marketplace/upload_packs.py -a $PACK_ARTIFACTS -e $EXTRACT_FOLDER -b 'marketplace-dist' -d $PACKS_DEPENDENCIES -i $ID_SET -s $GCS_PATH -n $CIRCLE_BUILD_NUM -k $PACK_SIGNING_KEY -pb 'marketplace-dist-private'
            rm $GCS_PATH
          when: on_success
      - run:
          name: Zip Content Packs From GCS
          command: |
            if [[ $CIRCLE_BRANCH != master ]]; then
              echo "Skipping packs zipping on non master branch"
              exit 0
            fi

            if [ $CIRCLE_NODE_INDEX -ne 0 ] ;
              then
                echo 'Skipping - running only in container number 0.'
                exit 0;
            fi
            GCS_PATH=$(mktemp)
            ZIP_FOLDER=$(mktemp -d)
            echo $GCS_MARKET_KEY > $GCS_PATH
            python3 ./Tests/Marketplace/zip_packs.py -b 'marketplace-dist' -z $ZIP_FOLDER -a $CIRCLE_ARTIFACTS -s $GCS_PATH -gp content/packs -rt False
            rm $GCS_PATH
          when: always
      - store_artifacts:
          path: artifacts
          destination: artifacts
          when: always
      - run:
          name: Store Artifacts to GCS
          command: ./Tests/scripts/upload_artifacts.sh
          when: always

  Prepare Environment:
    <<: *container_config
    resource_class: medium+
    <<: *environment
    steps:
      - checkout
      - setup_remote_docker
      - *restore_cache
      - *prepare_environment
      - save_cache:
          paths:
            - venv
            - node_modules
          key: venv-{{ checksum "dev-requirements-py2.txt" }}-{{ checksum "dev-requirements-py3.txt" }}-{{ checksum ".circleci/build-requirements.txt" }}-{{ checksum "package-lock.json" }}
      - *add_ssh_keys
      - *persist_to_workspace

  Run Unit Testing And Lint:
    <<: *container_config
    resource_class: medium+
    <<: *environment
    steps:
      - *attach_workspace
      - setup_remote_docker
      - *restore_cache
      - *add_ssh_keys
      - *prepare_environment
      - run:
          name: Infrastructure testing
          when: always
          command: |
            python3 -m pytest ./Tests/scripts/infrastructure_tests/ -v
            python3 -m pytest ./Tests/Marketplace/Tests/ -v

            if [ -n "${DEMISTO_SDK_NIGHTLY}" ] ; then
                  ./Tests/scripts/sdk_pylint_check.sh
            fi
            exit 0
      - run:
          name: Run Unit Testing and Lint
          when: always
          no_output_timeout: 5h
          command: |
            echo "demisto-sdk version: $(demisto-sdk --version)"
            echo "mypy version: $(mypy --version)"
            echo "flake8 py2 version: $(python2 -m flake8 --version)"
            echo "flake8 py3 version: $(python3 -m flake8 --version)"
            echo "bandit py2 version: $(python2 -m bandit --version 2>&1)"
            echo "bandit py3 version: $(python3 -m bandit --version 2>&1)"
            echo "vulture py2 version: $(python2 -m vulture --version) 2>&1"
            echo "vulture py3 version: $(python3 -m vulture --version) 2>&1"
            SHOULD_LINT_ALL=$(./Tests/scripts/should_lint_all.sh)
            mkdir ./unit-tests
            if [ -n "$SHOULD_LINT_ALL" ]; then
              echo -e  "----------\nLinting all because:\n${SHOULD_LINT_ALL}\n----------"
              demisto-sdk lint -p 8 -a -q --test-xml ./unit-tests --log-path ./artifacts --failure-report ./artifacts
            else
              demisto-sdk lint -p 8 -g -v --test-xml ./unit-tests --log-path ./artifacts --failure-report ./artifacts
            fi
      - store_test_results:
          path: ./unit-tests
      - run:
          name: Slack Notifier
          shell: /bin/bash
          command: |
            ./Tests/scripts/slack_notifier.sh 'unittests' ./env_results.json
          when: always
      - *store_artifacts
  Run Validations:
    <<: *container_config
    resource_class: medium+
    <<: *environment
    steps:
      - *attach_workspace
      - setup_remote_docker
      - *restore_cache
      - *add_ssh_keys
      - *prepare_environment
      - run:
          name: Secrets
          when: always
          command: |
            demisto-sdk secrets --post-commit --ignore-entropy
      - run:
          name: Validate Files and Yaml
          when: always
          command: |
            if [ -n "${NIGHTLY}" ];
              then
                echo "Skipping - not running in Nightly run"
                exit 0
            fi
            # Run flake8 on all excluding Packs (Integraions and Scripts) - they will be handled in linting
            ./Tests/scripts/pyflake.sh *.py
            find . -maxdepth 1 -type d -not \( -path . -o -path ./Packs -o -path ./venv \) | xargs ./Tests/scripts/pyflake.sh

            [ -n "${BACKWARD_COMPATIBILITY}" ] && CHECK_BACKWARD="false" || CHECK_BACKWARD="true"
            ./Tests/scripts/validate.sh
      - run:
          name: Content Docs Site
          when: always
          command: |
            ./Documentation/docs_site_update.sh
      - run:
          name: Spell Checks
          command: |
            python3 ./Tests/scripts/circleci_spell_checker.py $CIRCLE_BRANCH
      - run:
          name: Check if CircleCI's config file is up to date
          when: always
          command: |
            if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then
              echo "Skipping, Should not run on contributor's branch."
              exit 0
            fi
            # Checks if there's any diff from master
            if [[ `git diff origin/master -- .circleci/config.yml` ]]; then
                # Checks if part of the branch's changes
                if [[ -z `git diff origin/master..."$CIRCLE_BRANCH" --name-only | grep .circleci/config.yml` ]]; then
                    echo ".circleci/config.yml has been changed. Merge from master"
                    exit 1
                else
                    echo ".circleci/config.yml is part of the branch changes, proceeding"
                    exit 0
                fi
            else
                echo ".circleci/config.yml is up to date!"
            fi
      - run:
          name: Verify Base Branch for Contribution
          when: always
          command: |
            if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]] ;
              then
                python3 ./Tests/scripts/verify_base_branch_for_contribution.py $CIRCLE_BRANCH
            fi
  Create Instances:
    <<: *container_config
    resource_class: medium+
    <<: *environment
    steps:
      - checkout
      - setup_remote_docker
      - *restore_cache
      - *prepare_environment
      - *restore_cache
      - *add_ssh_keys
      - *prepare_environment
      - run:
          name: Update Tests step
          when: always
          command: |
            python3 ./Tests/scripts/update_conf_json.py
            cp "./Tests/conf.json" "$CIRCLE_ARTIFACTS/conf.json"
      - run:
          name: Create ID Set
          when: always
          command: |
            demisto-sdk create-id-set -o ./Tests/id_set.json
      - run:
          name: Build Content Descriptor
          when: always
          command: |
            if [ -n "${GITHUB_TOKEN}" ] ;
              then
                # new release notes summary generator in packs format
                python3 Utils/release_notes_generator.py $CONTENT_VERSION $GIT_SHA1 $CIRCLE_BUILD_NUM --output $CIRCLE_ARTIFACTS/packs-release-notes.md --github-token $GITHUB_TOKEN
              else
                # new release notes summary generator in packs format
                python3 Utils/release_notes_generator.py $CONTENT_VERSION $GIT_SHA1 $CIRCLE_BUILD_NUM --output $CIRCLE_ARTIFACTS/packs-release-notes.md
            fi
      - run:
          name: Common Server Documentation
          when: always
          command: |
            ./Documentation/commonServerDocs.sh
      - *create_artifact
      - run:
          name: Download Configuration
          when: always
          command: |
            if ./Tests/scripts/is_ami.sh ;
              then
                ./Tests/scripts/download_demisto_conf.sh

              else
                ./Tests/lastest_server_build_scripts/download_demisto_conf.sh
            fi
      - run:
          name: Download Artifacts
          when: always
          command: |
            if ./Tests/scripts/is_ami.sh ;
              then
                echo "Using AMI - Not downloading artifacts"

              else
                ./Tests/scripts/server_get_artifact.sh $SERVER_CI_TOKEN
                cp demistoserver.sh ./Tests/scripts/awsinstancetool/ansibleinstall/demistoserver.sh
            fi
      - run:
          name: Collect Test List And Content Packs
          when: always
          command: |
            if [ -n "${INSTANCE_TESTS}" ];
              then
                echo "Skipping - not running in INSTANCE_TESTS build"
                exit 0
            fi

            [ -n "${NIGHTLY}" ] && IS_NIGHTLY=true || IS_NIGHTLY=false
            python3 ./Tests/scripts/collect_tests_and_content_packs.py -n $IS_NIGHTLY
      - run:
          name: Calculate Packs Dependencies
          when: always
          command: |
            python3 ./Tests/Marketplace/packs_dependencies.py -i ./Tests/id_set.json -o $CIRCLE_ARTIFACTS/packs_dependencies.json
      - run:
          name: Prepare Content Packs For Testing
          when: always
          command: |
            ./Tests/scripts/prepare_content_packs_for_testing.sh
            echo "$CIRCLE_BUILD_NUM" > create_instances_build_num.txt  # so that later jobs in this workflow could configure the right path
      - run:
          name: Zip Content Packs From GCS
          command: |
            GCS_PATH=$(mktemp)
            ZIP_FOLDER=$(mktemp -d)
            echo $GCS_MARKET_KEY > $GCS_PATH
            python3 ./Tests/Marketplace/zip_packs.py -b 'marketplace-ci-build' -z $ZIP_FOLDER -a $CIRCLE_ARTIFACTS -s $GCS_PATH -n $CIRCLE_BUILD_NUM -br $CIRCLE_BRANCH
            rm $GCS_PATH
          when: always
      - run:
          name: Store Artifacts to GCS
          command: ./Tests/scripts/upload_artifacts.sh
          when: always
      - run:
          name: Create Instance
          when: always
          command: |
            if ./Tests/scripts/is_ami.sh ;
              then
                if [ -n "${NIGHTLY}" ] ;
                  then
                    export IFRA_ENV_TYPE=Nightly # disable-secrets-detection
                elif [ -n "${INSTANCE_TESTS}" ] ;
                  then
                    export IFRA_ENV_TYPE="Demisto PreGA" # disable-secrets-detection

                  else
                    export IFRA_ENV_TYPE=Content-Env # disable-secrets-detection
                fi
                python3 ./Tests/scripts/awsinstancetool/aws_instance_tool.py -envType "$IFRA_ENV_TYPE" -outfile ./env_results.json

              else
                . ./Tests/scripts/server_get_artifact.sh $SERVER_CI_TOKEN
                python3 ./Tests/scripts/awsinstancetool/aws_instance_tool.py -envType CustomBuild -custombuild true -circleurl $SERVER_DOWNLOAD_LINK -circleToken $SERVER_CI_TOKEN -outfile ./env_results.json
            fi
      - run:
          name: Setup Instance
          when: always
          command: |
            if ./Tests/scripts/is_ami.sh ;
              then
                python3 ./Tests/scripts/run_content_installation.py
              else
                ./Tests/lastest_server_build_scripts/run_installer_on_instance.sh
            fi
      - *store_artifacts
      - *persist_to_workspace
  Server 4_1:
    <<: *container_config
    resource_class: medium+
    <<: *environment
    steps:
      - setup_remote_docker
      - *attach_workspace
      - *restore_cache
      - *add_ssh_keys
      - *prepare_environment
      - run:
          name: Wait until server ready
          shell: /bin/bash
          when: always
          command: |
            python3 ./Tests/scripts/wait_until_server_ready.py "Demisto two before GA"
      - run:
          name: Run Tests - Server 4.1
          shell: /bin/bash
          when: always
          command: |
            echo 'export INSTANCE_ROLE="Demisto two before GA"' >> $BASH_ENV
            source $BASH_ENV
            export TEMP=$(cat ./Tests/filter_envs.json | jq '."$INSTANCE_ROLE"')
            echo "$INSTANCE_ROLE filter=$TEMP"
            if [[ "$TEMP" == "false" ]];
              then
                echo "Skipping - instance was not setup"
                exit 0
            fi
            if ./Tests/scripts/is_ami.sh ;
              then
                ./Tests/scripts/run_tests.sh "$INSTANCE_ROLE"

              else
                echo "Not AMI run, can't run on this version"
            fi
      - *destroy_instances
      - *store_artifacts
  Server 4_5:
    <<: *container_config
    resource_class: medium+
    <<: *environment
    steps:
      - setup_remote_docker
      - *attach_workspace
      - *add_ssh_keys
      - *prepare_environment
      - run:
          name: Wait until server ready
          shell: /bin/bash
          when: always
          command: |
            python3 ./Tests/scripts/wait_until_server_ready.py "Demisto one before GA"
      - run:
          name: Run Tests - Server 4.5
          shell: /bin/bash
          when: always
          command: |
            echo 'export INSTANCE_ROLE="Demisto one before GA"' >> $BASH_ENV
            source $BASH_ENV
            export TEMP=$(cat ./Tests/filter_envs.json | jq '."$INSTANCE_ROLE"')
            echo "$INSTANCE_ROLE filter=$TEMP"
            if [[ "$TEMP" == "false" ]];
              then
                echo "Skipping - instance was not setup"
                exit 0
            fi
            if ./Tests/scripts/is_ami.sh ;
              then
                ./Tests/scripts/run_tests.sh "$INSTANCE_ROLE"

              else
                echo "Not AMI run, can't run on this version"
            fi
      - *destroy_instances
      - *store_artifacts
  Server 5_0:
    <<: *container_config
    resource_class: medium+
    <<: *environment
    steps:
      - *attach_workspace
      - setup_remote_docker
      - *restore_cache
      - *add_ssh_keys
      - *prepare_environment
      - run:
          name: Wait until server ready
          shell: /bin/bash
          when: always
          command: |
            if ./Tests/scripts/is_ami.sh ;
              then
                python3 ./Tests/scripts/wait_until_server_ready.py "Demisto GA"
              else
                python3 ./Tests/scripts/wait_until_server_ready.py "Demisto"
            fi
      - run:
          name: Run Tests - Server 5.0
          shell: /bin/bash
          when: always
          command: |
            export TEMP=$(cat ./Tests/filter_envs.json | jq '."Demisto GA"')
            echo "Demisto GA filter=$TEMP"
            if [[ "$TEMP" == "false" ]];
              then
                echo "Skipping - instance was not setup"
                exit 0
            fi
            if ./Tests/scripts/is_ami.sh ;
              then
                echo 'export INSTANCE_ROLE="Demisto GA"' >> $BASH_ENV
              else
                'export INSTANCE_ROLE="master"' >> $BASH_ENV
            fi
            source $BASH_ENV
            ./Tests/scripts/run_tests.sh "$INSTANCE_ROLE"

      - *destroy_instances
      - *store_artifacts
  Server 5_5:
    <<: *container_config
    resource_class: medium+
    <<: *environment
    steps:
      - setup_remote_docker
      - *attach_workspace
      - *add_ssh_keys
      - *prepare_environment
      - run:
          name: Wait until server ready
          shell: /bin/bash
          when: always
          command: |
            python3 ./Tests/scripts/wait_until_server_ready.py "Demisto PreGA"
      - run:
          name: Run Tests - 5.5
          shell: /bin/bash
          when: always
          command: |
            echo 'export INSTANCE_ROLE="Demisto PreGA"' >> $BASH_ENV
            source $BASH_ENV
            export TEMP=$(cat ./Tests/filter_envs.json | jq '."$INSTANCE_ROLE"')
            echo "$INSTANCE_ROLE filter=$TEMP"
            if [[ "$TEMP" == "false" ]];
              then
                echo "Skipping - instance was not setup"
                exit 0
            fi
            if ./Tests/scripts/is_ami.sh ;
              then
                ./Tests/scripts/run_tests.sh "$INSTANCE_ROLE"
                export RETVAL=$?
                cp ./Tests/failed_tests.txt $CIRCLE_ARTIFACTS/failed_tests.txt
                exit $RETVAL

            else
                echo "Not AMI run, can't run on this version"
            fi
      - run:
          name: Slack Notifier
          shell: /bin/bash
          command: |
            ./Tests/scripts/slack_notifier.sh 'test_playbooks' ./env_results.json
          when: always
      - *destroy_instances
      - *store_artifacts
  Server 6_0:
    <<: *container_config
    resource_class: medium+
    <<: *environment
    steps:
      - setup_remote_docker
      - *attach_workspace
      - *add_ssh_keys
      - *prepare_environment
      - run:
          name: Wait until server ready
          shell: /bin/bash
          when: always
          command: |
            python3 ./Tests/scripts/wait_until_server_ready.py "Demisto Marketplace"
      - run:
          name: Run Tests - Demisto 6.0
          shell: /bin/bash
          when: always
          no_output_timeout: 5h
          command: |
            echo 'export INSTANCE_ROLE="Demisto Marketplace"' >> $BASH_ENV
            source $BASH_ENV
            export TEMP=$(cat ./Tests/filter_envs.json | jq '."$INSTANCE_ROLE"')
            echo "$INSTANCE_ROLE filter=$TEMP"
            if [[ "$TEMP" == "false" ]];
              then
                echo "Skipping - instance was not setup"
                exit 0
            fi
            if ./Tests/scripts/is_ami.sh ;
              then
                ./Tests/scripts/run_tests.sh "$INSTANCE_ROLE"
                export RETVAL=$?
                cp ./Tests/failed_tests.txt $CIRCLE_ARTIFACTS/failed_tests.txt
                exit $RETVAL
            else
                echo "Not AMI run, can't run on this version"
            fi
      - run:
          name: Upload Packs To Marketplace Storage
          command: |
            if [[ $CIRCLE_BRANCH != master ]]; then
              echo "Skipping packs uploading on non master branch"
              exit 0
            fi

            EXTRACT_FOLDER=$(mktemp -d)
            PACK_ARTIFACTS=$CIRCLE_ARTIFACTS/content_packs.zip
            PACKS_DEPENDENCIES=$CIRCLE_ARTIFACTS/packs_dependencies.json
            ID_SET=$CIRCLE_ARTIFACTS/id_set.json
            GCS_PATH=$(mktemp)
            echo $GCS_MARKET_KEY > $GCS_PATH
            python3 ./Tests/Marketplace/upload_packs.py -a $PACK_ARTIFACTS -e $EXTRACT_FOLDER -b 'marketplace-dist' -d $PACKS_DEPENDENCIES -i $ID_SET -s $GCS_PATH -n $CIRCLE_BUILD_NUM -k $PACK_SIGNING_KEY -pb 'marketplace-dist-private'
            rm $GCS_PATH
          when: on_success
      - *destroy_instances
      - *store_artifacts
  Instance Test:
    <<: *container_config
    resource_class: medium+
    <<: *environment
    steps:
      - setup_remote_docker
      - *attach_workspace
      - *add_ssh_keys
      - *prepare_environment
      - run:
          name: Wait until server ready
          shell: /bin/bash
          when: always
          command: |
            python3 ./Tests/scripts/wait_until_server_ready.py "Demisto PreGA"
            echo 'export INSTANCE_ROLE="Demisto PreGA"' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Instance Test
          command: |
            ./Tests/scripts/instance_test.sh
            export RETVAL=$?
            cp ./Tests/failed_instances.txt $CIRCLE_ARTIFACTS/failed_instances.txt
            exit $RETVAL
          when: always
      - *destroy_instances
      - *store_artifacts

workflows:
  version: 2
  commit:
    jobs:
      - build

  instances_testing:
    # for details of triggered builds see https://circleci.com/docs/2.0/workflows/#nightly-example
    # for details of cron syntax see https://www.unix.com/man-page/POSIX/1posix/crontab/ disable-secrets-detection
    triggers:
      - schedule:
          # should trigger every day at 2 AM UTC (5 AM Israel Time)
          cron: "0 2 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - build:
          context: instances_test_env

  nightly:
    triggers:
      - schedule:
          # should trigger every day at 12 AM UTC (3 AM Israel Time)
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - build:
          context: nightly_env
  sdk_nightly:
    triggers:
      - schedule:
          # should trigger every day at 12 AM UTC (3 AM Israel Time)
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - build:
          context: sdk_nightly_env

  nightly-workflows:
    triggers:
      - schedule:
          # should trigger every day at 20:00 PM UTC (11:00 PM Israel Time)
          cron: "0 20 * * *"
          filters:
            branches:
              only:
                - config_yaml
    jobs:
      - Prepare Environment:
          context: nightly_env
      - Create Instances:
          context: nightly_env
      - Run Unit Testing And Lint:
          requires:
            - Prepare Environment
      - Run Validations:
          requires:
            - Prepare Environment
      - Server 6_0:
          requires:
            - Create Instances
          context: nightly_env
