args:
- description: value to check if in range (e.g. 4)
  name: left
  required: true
- description: range to check against with the form of from,to (e.g. 2,8)
  name: right
  required: true
comment: |-
  checks if left side is in range of right side (from,to anotation)
  e.g. - InRange left=4right=1,8 will return true
commonfields:
  id: InRange
  version: -1
enabled: true
name: InRange
runonce: false
script: |
  INVALID_ARG = "INVALID_ARG"
  def to_float(s):
      try:
          return float(s)
      except:
          return INVALID_ARG

  # "1,8" => will return a tupple (1, 8)
  def parse_range(rangeStr):
      splitted = rangeStr.split(",")
      if len(splitted) < 2:
          return INVALID_ARG, INVALID_ARG

      # parse
      return to_float(splitted[0]), to_float(splitted[1])

  leftArg = demisto.args()["left"]
  rightArg = demisto.args()["right"]

  left = to_float(leftArg)
  fromRange, toRange = parse_range(rightArg)

  if INVALID_ARG in [left, fromRange,toRange]:
      demisto.error("InRange - invalid arguments. left shuld be a number, right should be from,to (e.g. '1,8'). got left - %s, right - %s" % (leftArg, rightArg))
      demisto.results(False)
  else:
      demisto.results(left >= fromRange and left <= toRange)

  sys.exit(0)
scripttarget: 0
system: true
tags:
- filter
- number
type: python
