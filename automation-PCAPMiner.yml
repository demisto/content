args:
- default: true
  description: Enter the EntryID of the file
  name: entryId
  required: true
- defaultValue: /var/lib/demisto/
  description: Demisto lib location, default is "/var/lib/demisto/"
  name: demistoLibLocation
comment: PCAPMiner is a tool to parse PCAP files and will return things like extracted
  files that are found, HTTP flows, and a variety of other information. It is uses
  a docker instance located on docker hub trorabaugh/dempcap:1.0.  To use simply upload
  a PCAP file and then run PCAPMiner entryId="<your_entry_id>". To get the entry id
  click on the link on the top right hand corner of a file attachment.
commonfields:
  id: PCAPMiner
  version: -1
dockerimage: trorabaugh/dempcap:1.0
enabled: true
name: PCAPMiner
runonce: false
script: |
  #!/usr/bin/env python2.7
  # -*- coding: utf8 -*-

  import os
  import dpkt
  import cymruwhois
  import simplejson as json
  import glob
  import os

  path = "/app/pcapminey/"
  if path not in sys.path:
      sys.path.append(path)

  from core.Dispatcher import Dispatcher
  from minepcaps import pcap_miner
  from shutil import copyfile

  os.popen('rm -f ./output/*')
  filePath = demisto.executeCommand('getFilePath', {'id': demisto.args()['entryId'] })
  readyPath = filePath[0]["Contents"]["path"]
  ret = []
  filename = filePath[0]["Contents"]["name"]
  miner = pcap_miner(readyPath)
  jsonResults = miner.summary2json()
  pyResults = json.loads(jsonResults)
  dispatcher = Dispatcher(readyPath, 'output', entropy=True,verifyChecksums=True,udpTimeout=500,)
  results = dispatcher.run()
  pyResults['files_found'] = results.filenamelist
  listdir = os.listdir('./output')
  ouputPath = './output/*'
  files=glob.glob(ouputPath)

  if(pyResults["counts"]):
      displayData = tableToMarkdown('PCAP Data Frequency Counts', pyResults["counts"])
  if(pyResults["destination_ip_details"]):
      displayData += tableToMarkdown('Destination IP Details', pyResults["destination_ip_details"])
  if(pyResults["dns_data"]):
      displayData += tableToMarkdown('DNS Details', pyResults["dns_data"])
  if(pyResults["http_requests"]):
      displayData += tableToMarkdown('Http Requests', pyResults["http_requests"])
  if(pyResults["flows"]):
      displayData += tableToMarkdown('Flow Data', pyResults["flows"])
  if(pyResults["files_found"]):
      mdTableList = []
      for fileFound in pyResults["files_found"]:
          mdTableList.append({'Files Found': fileFound})

      displayData += tableToMarkdown('Files Add', mdTableList)

  for file in files:
      filename = file.replace("./output/","")
      demisto.results(file_result_existing_file(file, filename))

  demisto.results({'Type': entryTypes['note'], 'Contents': pyResults, 'EntryContext': {'pcap_results': pyResults}, 'ContentsFormat': formats['json'], 'HumanReadable': displayData})
scripttarget: 0
system: true
tags:
- Utility
- file
- pcap
timeout: 720ns
type: python
