args:
- default: true
  description: Incident ID to get tasks from
  name: incidentId
  required: true
- description: 'Comma separated list of states. Possible values: New, InProgress,
    Completed, Waiting, Error, Skipped, Blocked (leave empty to get all tasks)'
  name: states
comment: Get all tasks for specific incident by the given state.
commonfields:
  id: DemistoGetIncidentTasksByState
  version: -1
enabled: true
name: DemistoGetIncidentTasksByState
outputs:
- contextPath: Tasks
  description: The entire task object
- contextPath: Tasks.id
  description: Task ID
  type: string
- contextPath: Tasks.name
  description: Task name
  type: string
- contextPath: Tasks.type
  description: The type of the task (regular, condition, title, playbook, start)
  type: string
- contextPath: Tasks.owner
  description: Task owner
  type: string
- contextPath: Tasks.state
  description: Task state (inprogress, Completed, WillNotBeExecuted, Error, Waiting,
    Blocked, and empty string for not started)
  type: string
- contextPath: Tasks.scriptId
  description: Task related script (empty if manual)
  type: string
- contextPath: Tasks.startDate
  description: Task start date
  type: unknown
- contextPath: Tasks.completedDate
  description: Task completed date
  type: unknown
- contextPath: Tasks.dueDate
  description: Task due date (SLA)
  type: unknown
- contextPath: Tasks.parentPlaybookID
  description: Task parent playbook ID (in case the task is part of sub-playbook)
  type: unknown
- contextPath: Tasks.completedBy
  description: Task completed by (username)
  type: string
runonce: false
script: |-
  var taskStates = {
      new: '',
      inprogress: 'inprogress',
      completed: 'Completed',
      waiting: 'Waiting',
      error: 'Error',
      skipped: 'WillNotBeExecuted',
      blocked: 'Blocked'
  };

  function mapToArray(m) {
      var arr = [];
      for (var k in m) {
          arr.push(m[k]);
      }
      return arr;
  }

  function getSubPlaybookTasks(tasks) {
    var readyTasks = [];
    arinks = [];
    (tasks || []).forEach(function (task) {
      if (task.type === 'playbook' && task.subPlaybook) {
        readyTasks = readyTasks.concat(getSubPlaybookTasks(mapToArray(task.subPlaybook.tasks)));
      }
      readyTasks.push(task);
    });

    return readyTasks;
  }

  function getAllPlaybookTasks(tasks) {
    if (!tasks || tasks.length === 0) {
      return [];
    }
    return getSubPlaybookTasks(tasks);
  }

  function getStates(states) {
      var readyStates = {};
      var splittedStates = states.split(",").forEach(function(state) {
          var systemState = taskStates[state.trim().toLowerCase()];
          if (systemState !== null && systemState !== undefined) {
           readyStates[systemState] = true;
          }
      });

      if (Object.keys(readyStates).length === 0) {
          Object.keys(taskStates).forEach(function(k) {
              readyStates[taskStates[k]] = true;
          });
      }

      return readyStates;
  }

  var states = getStates(args.states || '');
  var incidentId = args.incidentId;
  var res = executeCommand('demisto-api-get', {'uri': '/investigation/' + incidentId + '/workplan'});
  if (isError(res[0])) {
      return res;
  }

  var workplan = dq(res[0],'Contents.response.invPlaybook');

  if (!workplan || !workplan.tasks || workplan.tasks.length === 0) {
      return 'Workplan for incident ' + incidentId + ', has no tasks.';
  }

  var tasks = mapToArray(workplan.tasks);
  var allTasks = getAllPlaybookTasks(tasks);

  var res = [];
  for (var id in allTasks) {
      var task = allTasks[id];
      if (states[task.state] !== null && states[task.state] !== undefined) {
          res.push({
              id: task.id,
              name: task.task.name,
              type: task.type,
              owner: task.assignee,
              state: task.state,
              scriptId: task.task.scriptId,
              startDate: task.startDate,
              dueDate: task.dueDate,
              completedDate: task.completedDate,
              parentPlaybookID: task.parentPlaybookID,
              completedBy: task.completedBy
          });
      }
  }

  entry = {
      Type: entryTypes.note,
      Contents: res,
      ContentsFormat: formats.json,
      ReadableContentsFormat: formats.markdown,
      HumanReadable: tableToMarkdown('Tasks with states ' + args.states + ' (Incident #' + incidentId + ')', res, ['id', 'name', 'state', 'owner', 'scriptId']),
      EntryContext: {
          Tasks: res
      }
  };

  return entry;
scripttarget: 0
sensitive: true
system: true
tags:
- Utility
type: javascript
