args:
- default: true
  description: Name of the system from which to collect data
  name: system
  required: true
comment: |-
  Collect Autoruns items from an endpoint and hashes for each item.
  Uses a d2 agent to run SysInternals Autoruns.
commonfields:
  id: Autoruns
  version: -1
name: Autoruns
runonce: false
script: |-
  respAR = demisto.executeCommand( 'D2Autoruns', { 'using' : demisto.args()['system'] } )
  if isError(respAR[0]):
      demisto.results(respAR)
  else:
      hashes = []
      try:
          try:
              lines = respAR[0]['Contents'][2:].decode('utf-16').encode('ascii').split('\r\n')
          except Exception as ex:
              lines = respAR[0]['Contents'].split('\r\n')
          headers = lines[5].replace('\t','|')
          try:
              hashCol = headers.split('|').index('MD5')
          except ValueError as ve:
              hashCol = -1
          mdTable = headers + '\n'
          mdTable += '|'.join( '---'*len(headers.split('|')) ) + '\n'
          for l in lines[6:]:
              if hashCol > -1:
                  cells = l.split('\t')
                  if hashCol < len(cells) and cells[hashCol].strip():
                      hashes.append(cells[hashCol])
              mdTable += l.replace('\t','|') +'\n'
          if hashes:
              appendContext('md5s', ', '.join(hashes), dedup = True)
          demisto.results( { 'Type' : entryTypes['note'], 'ContentsFormat' : formats['markdown'], 'Contents': mdTable} )
      except Exception as ex:
          demisto.results( { 'Type' : entryTypes['error'], 'ContentsFormat' : formats['text'], 'Contents': "Error occurred while parsing output from D2Autoruns:\n" + str(ex) + '\n\nAutoruns output:\n' + respAR[0]['Contents'] })
scripttarget: 0
system: true
tags:
- endpoint
- forensics
type: python
