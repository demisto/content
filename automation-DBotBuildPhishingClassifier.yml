args:
- description: Additional text by which to query incidents.
  name: query
- defaultValue: Phishing
  description: A common-separatetd list of incident types by which to filter.
  name: incidentTypes
- description: 'The start date by which to filter incidents. Date format will be the
    same as in the incidents query page (valid strings exaple: "3 days ago", ""2019-01-01T00:00:00
    +0200")'
  name: fromDate
- description: 'The end date by which to filter incidents. Date format will be the
    same as in the incidents query page (valid strings exaple: "3 days ago", ""2019-01-01T00:00:00
    +0200")'
  name: toDate
- defaultValue: "3000"
  description: The maximum number of incidents to fetch.
  name: limit
- auto: PREDEFINED
  defaultValue: "false"
  description: Whether to query and fetch incident context.
  name: includeContext
  predefined:
  - "true"
  - "false"
- auto: PREDEFINED
  defaultValue: created
  description: The incident field (created or modified) to specify for the date range.
  name: timeField
  predefined:
  - created
  - modified
- description: The field name with the label. Supports a comma-separated list, the
    first non-empty value will be taken.
  name: tagField
  required: true
- defaultValue: emailsubject|name,emailbody|emailbodyhtml
  description: A comma-separated list of incident fields names with the email text
    to process. You can also use "|" if you want to choose the first non-empty value
    from a list of fields.
  name: emailContentFields
- defaultValue: "15"
  description: Sample text of which the total number words are less than or equal
    to this number will be ignored.
  name: removeShortTextThreshold
- defaultValue: "0.99"
  description: Remove emails with similarity greater then this threshold, range 0-1,
    where 1 is completly identical.
  name: dedupThreshold
- description: If non-empty, hash every word with this seed.
  name: hashSeed
- description: The model name to store in the system.
  name: modelName
- defaultValue: '*'
  description: 'A comma-separated list of email tags values and mapping. The script
    considers only the tags specified in this field. You can map label to another
    value by using this format: LABEL:MAPPED_LABEL. For example, for 4 values in email
    tag: malicious, credentials harvesting, inner communitcation, external legit email,
    unclassified. While training, we want to ignore "unclassified" tag, and refer
    to "credentials harvesting" as "malicious" too. Also, we want to     merge "inner
    communitcation" and "external legit email" to one tag called "non-malicious".
    The input will be: malicious, credentials harvesting:malicious, inner communitcation:non-malicious,
    external legit email:non-malicious'
  name: phishingLabels
comment: Create a phishing classifier using machine learning technique, based on email
  content.
commonfields:
  id: DBotBuildPhishingClassifier
  version: -1
name: DBotBuildPhishingClassifier
runonce: false
script: |2-

  import base64


  def main():
      get_incidents_by_query_args = dict(demisto.args())
      get_incidents_by_query_args['NonEmptyFields'] = demisto.args()['tagField']
      res = demisto.executeCommand("GetIncidentsByQuery", get_incidents_by_query_args)
      if is_error(res):
          return_error(get_error(res))
      incidents = res[-1]['Contents']

      text_pre_process_args = dict(demisto.args())
      text_pre_process_args['inputType'] = 'json_b64_string'
      text_pre_process_args['input'] = base64.b64encode(incidents.encode('utf-8'))
      text_pre_process_args['preProcessType'] = 'nlp'
      text_pre_process_args['textFields'] = text_pre_process_args['emailContentFields']
      text_pre_process_args['whitelistFields'] = "{0},{1}".format('dbot_processed_text',
                                                                  text_pre_process_args['tagField'])
      res = demisto.executeCommand("DBotPreProcessTextData", text_pre_process_args)
      if is_error(res):
          return_error(get_error(res))

      processed_text_data = res[0]['Contents']
      demisto.results(res)
      train_model_args = dict(demisto.args())
      train_model_args['inputType'] = 'json_b64_string'
      train_model_args['input'] = base64.b64encode(processed_text_data.encode('utf-8'))
      train_model_args['overrideExistingModel'] = 'true'
      res = demisto.executeCommand("DBotTrainTextClassifierV2", train_model_args)
      demisto.results(res)


  if __name__ in ['__main__', '__builtin__', 'builtins']:
      main()
scripttarget: 0
subtype: python2
system: true
tags:
- ml
timeout: 12Âµs
type: python
