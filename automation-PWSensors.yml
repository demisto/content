args:
- default: true
  description: The id of the individual sensor (if not provided will query all available
    sensors)
  name: sensorId
comment: List the available ProtectWise sensors or retrieve information for a specific
  sensor using its id
commonfields:
  id: PWSensors
  version: -1
dependson:
  must:
  - ProtectWise|||sensors
deprecated: true
name: PWSensors
runonce: false
script: |
  res = []
  dArgs = demisto.args()
  dArgs["using-brand"] = "ProtectWise"

  resSearch = demisto.executeCommand("sensors", dArgs)
  try:
      for entry in resSearch:
          if isError(entry):
              res = resSearch
              break
          else:
              myData = demisto.get(entry, 'Contents')
              if not isinstance(myData, list):
                  myData = [myData]
              for row in myData:
                  for k in row:
                      row[k] = formatCell(row[k])
              if myData:
                  demisto.setContext('pwsensors', [s['id'] for s in myData])
                  res.append({"Type": entryTypes["note"], "ContentsFormat": formats["table"], "Contents": myData})
              else:
                  res.append({"Type": entryTypes["error"], "ContentsFormat": formats["text"],
                              "Contents": "Could not extract result list from response: " + json.dumps(entry["Contents"], indent=4)})
  except Exception as ex:
      res.append({"Type": entryTypes["error"], "ContentsFormat": formats["text"],
                  "Contents": "Error occurred while parsing output from command. Exception info:\n" + str(ex) + "\n\nInvalid output:\n" + str(resSearch)})
  demisto.results(res)
scripttarget: 0
system: true
tags:
- protectwise
type: python
